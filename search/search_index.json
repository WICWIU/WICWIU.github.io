{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WICWIU \u00b6 \ucd5c\uadfc \ub525\ub7ec\ub2dd \uc5f0\uad6c\uac00 \uc138\uacc4\uc801\uc73c\ub85c \ube60\ub974\uac8c \ubc1c\uc804\ud560 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc0ac\ud68c \uc804\ubc18\uc801\uc73c\ub85c \ud070 \uc774\uc288\ud654\uac00 \ub418\uace0 \uc788\uace0, \uc0b0\uc5c5\uacc4 \uad6c\uc870\uc5d0\uc11c\ub3c4 \uc778\uacf5\uc9c0\ub2a5\uc758 \ub3c4\uc785\uc774 \ud65c\ubc1c\ud788 \uc9c4\ud589\uc911\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uad6d\ub0b4\uc5d0\uc11c \uc5f0\uad6c \uc911\uc774\uac70\ub098 \uc0b0\uc5c5\uccb4\uc5d0 \ud65c\uc6a9\ud558\ub294 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\ub294 \ub300\ubd80\ubd84 \ud574\uc678\uc5d0\uc11c \uac1c\ubc1c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8 \uc774\uc720\ub294 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c \uc790\uccb4\uac00 \ud559\uc2b5 \ubc0f \ud14c\uc2a4\ud2b8\ub97c \uc218\ud589\ud558\uae30 \uc704\ud55c \ubcf5\uc7a1\ud55c \uc5d4\uc9c4\uc744 \uac1c\ubc1c\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8 \uacb0\uacfc \uad6d\ub0b4 \ub525\ub7ec\ub2dd \uc0ac\uc6a9\uc790\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ubd88\ud3b8\ud568\uc744 \uacaa\uc2b5\ub2c8\ub2e4. \uc601\uc5b4\ub85c \uc791\uc131\ub41c \uc124\uba85\uc11c\ub85c \uc778\ud574 \uad6d\ub0b4 \uc0ac\uc6a9\uc790\ub4e4\uc740 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc774\ud574\ud558\ub294\ub370 \ubd88\ud3b8\ud568\uc774 \uc788\ub2e4. \ud30c\uc774\uc36c \ud658\uacbd\uc758 \ud574\uc678 \ud504\ub808\uc784\uc6cc\ud06c\ub294 \uc790\uccb4 \uc218\uc815 \ubc0f \ud655\uc7a5\uc5d0 \uc5b4\ub824\uc6c0\uc744 \uac00\uc9c0\uba70 \ub2e4\uc591\ud55c \ud658\uacbd\uc5d0\uc11c\uc758 \uc774\uc2dd\uc774 \uc27d\uc9c0 \uc54a\ub2e4. \ud574\uc678 \uae30\uc220\uc758 \uc758\uc874\uc131\uc774 \ub192\uc544\uc9c4\ub2e4. WICWIU \ub294 \uc774\ub7ec\ud55c \ubb38\uc81c\uc810\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud558\uc5ec \ud55c\ub3d9\ub300\ud559\uad50 \uae40\uc778\uc911 \uad50\uc218\ub2d8 \ub525\ub7ec\ub2dd \uc5f0\uad6c\uc2e4\uc5d0\uc11c \ud559\ubd80\uc0dd \uc8fc\ub3c4\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\uc785\ub2c8\ub2e4. WICWIU \ub294 \uc54c\uace0\ub9ac\uc998\uc758 \ud655\uc7a5\uc131\uacfc \uac00\ub3c5\uc131\uc744 \uace0\ub824\ud558\uc5ec, \uc77c\uad00\uc131 \ub192\uc740 C++\ucf54\ub4dc\uc640 API\ub85c \uad6c\uc131\ub418\uc5c8\uc73c\uba70, \ud55c\uae00 \uc124\uba85\uc11c\ub97c \uc81c\uacf5\ud558\uc5ec \uad6d\ub0b4 \uc0ac\uc6a9\uc790\ub4e4\uc5d0\uac8c \ud3b8\uc758\ub97c \uc81c\uacf5\ud558\uace0\uc790 \ud569\ub2c8\ub2e4. About \u00b6 \uc774 \ud398\uc774\uc9c0\uac00 \ub9cc\ub4e4\uc5b4\uc9c4 \uc774\uc720\ub97c \uc54c\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud574\uc8fc\uc138\uc694! About WICWIU \uac1c\ubc1c \uac00\uc774\ub4dc \u00b6 WICWIU \ud504\ub85c\uc81d\ud2b8\uc5d0 \ucc38\uc5ec\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud558\uc5ec \uac00\uc774\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694! WICWIU \uac1c\ubc1c \uac00\uc774\ub4dc API \u00b6 WICWIU \uc758 API \ub97c \ud655\uc778\ud574\ubcf4\uc138\uc694! API WICWIU \uc9c0\uc2dd\ub3d9\uae30\ud654 \u00b6 \uc774\uacf3\uc740 WICWIU \uac1c\ubc1c \ud300\uc6d0\uc774 WICWIU \ub97c \ubd84\uc11d\ud558\uace0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\ud604\ud558\ub294 \ucf54\ub529\uc744 \ud560 \ub54c, \uadf8 \uacfc\uc815\uc744 \uae30\ub85d\ud558\uace0 \uacf5\uc720\ud558\uc5ec \ub2e4\ub978 \ud300\uc6d0\uacfc \uc9c0\uc2dd\uc744 \ub3d9\uae30\ud654\uc2dc\ud0a4\uae30 \uc704\ud55c \uacf5\uac04\uc785\ub2c8\ub2e4. fewshot \ud300 Coding Convention Fewshot Diary Coding Convention Info \uc5b4\ucc28\ud53c WICWIU \ub97c \ubd84\uc11d\ud558\uace0 \ucf54\ub529\ud55c \uacfc\uc815\uc744 \ub2e4\ub978 \ud300\uc6d0\uc5d0\uac8c \uc124\uba85\ud574\uc57c \ud558\ubbc0\ub85c \uadf8\uac83\uc744 \uae30\ub85d\uc73c\ub85c \ub0a8\uaca8\uc11c \uacf5\uc720\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uae30\ub85d\uc73c\ub85c \ub0a8\uae30\ub294 \uacfc\uc815\uc5d0\uc11c \uc790\uc2e0\uc758 \uc9c0\uc2dd\uc774 \ub354\uc6b1 \uccb4\uacc4\uc801\uc73c\ub85c \uc815\ub9ac\uac00 \ub418\uace0, \uc774\ud6c4\uc5d0 \ub2e4\ub978 \ud300\ub4e4\ub3c4 \ubd84\uc11d/\ucf54\ub529 \uacfc\uc815\uc744 \ucc38\uace0\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. WICWIU \uc758 \uac1c\ubc1c \ud300\uc774\ub77c\uba74 \ub2e4\ub978 \ud300\uc758 \ubd84\uc11d/\ucf54\ub529 \uacfc\uc815\uc774\ub77c\ub3c4 \uc9c0\uc2dd \ub3d9\uae30\ud654\ub97c \uc2dc\ucf1c\uc8fc\uc138\uc694. \ud639\uc2dc \ub611\uac19\uc740 \ucf54\ub4dc\ub97c \ub2e4\uc2dc \ubd84\uc11d\ud55c\ub2e4\uba74 \uc2dc\uac04\ub0ad\ube44\uac00 \ub420 \ubfd0\ub354\ub7ec \ub611\uac19\uc740 \ubd84\uc11d\uc774 2\ubc88 \uc774\uc0c1 \uc0dd\uae30\uba74 \uc911\ubcf5\ub41c \ub0b4\uc6a9\uc758 \ubb38\uc11c\uac00 \uc0dd\uaca8\uc11c \ud63c\ub780\uc774 \ucd08\ub798\ub420 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. WICWIU \ubb38\uc11c \uc791\uc131\ud558\uae30 \uac00\uc774\ub4dc \u00b6 WICWIU Github Pages \uc5d0 \ubb38\uc11c\ub97c \uc791\uc131\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud558\uc5ec \uac00\uc774\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694! WICWIU Github Pages \ubb38\uc11c \uc791\uc131 \uac00\uc774\ub4dc","title":"Home"},{"location":"#wicwiu","text":"\ucd5c\uadfc \ub525\ub7ec\ub2dd \uc5f0\uad6c\uac00 \uc138\uacc4\uc801\uc73c\ub85c \ube60\ub974\uac8c \ubc1c\uc804\ud560 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc0ac\ud68c \uc804\ubc18\uc801\uc73c\ub85c \ud070 \uc774\uc288\ud654\uac00 \ub418\uace0 \uc788\uace0, \uc0b0\uc5c5\uacc4 \uad6c\uc870\uc5d0\uc11c\ub3c4 \uc778\uacf5\uc9c0\ub2a5\uc758 \ub3c4\uc785\uc774 \ud65c\ubc1c\ud788 \uc9c4\ud589\uc911\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uad6d\ub0b4\uc5d0\uc11c \uc5f0\uad6c \uc911\uc774\uac70\ub098 \uc0b0\uc5c5\uccb4\uc5d0 \ud65c\uc6a9\ud558\ub294 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\ub294 \ub300\ubd80\ubd84 \ud574\uc678\uc5d0\uc11c \uac1c\ubc1c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8 \uc774\uc720\ub294 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c \uc790\uccb4\uac00 \ud559\uc2b5 \ubc0f \ud14c\uc2a4\ud2b8\ub97c \uc218\ud589\ud558\uae30 \uc704\ud55c \ubcf5\uc7a1\ud55c \uc5d4\uc9c4\uc744 \uac1c\ubc1c\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8 \uacb0\uacfc \uad6d\ub0b4 \ub525\ub7ec\ub2dd \uc0ac\uc6a9\uc790\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ubd88\ud3b8\ud568\uc744 \uacaa\uc2b5\ub2c8\ub2e4. \uc601\uc5b4\ub85c \uc791\uc131\ub41c \uc124\uba85\uc11c\ub85c \uc778\ud574 \uad6d\ub0b4 \uc0ac\uc6a9\uc790\ub4e4\uc740 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc774\ud574\ud558\ub294\ub370 \ubd88\ud3b8\ud568\uc774 \uc788\ub2e4. \ud30c\uc774\uc36c \ud658\uacbd\uc758 \ud574\uc678 \ud504\ub808\uc784\uc6cc\ud06c\ub294 \uc790\uccb4 \uc218\uc815 \ubc0f \ud655\uc7a5\uc5d0 \uc5b4\ub824\uc6c0\uc744 \uac00\uc9c0\uba70 \ub2e4\uc591\ud55c \ud658\uacbd\uc5d0\uc11c\uc758 \uc774\uc2dd\uc774 \uc27d\uc9c0 \uc54a\ub2e4. \ud574\uc678 \uae30\uc220\uc758 \uc758\uc874\uc131\uc774 \ub192\uc544\uc9c4\ub2e4. WICWIU \ub294 \uc774\ub7ec\ud55c \ubb38\uc81c\uc810\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud558\uc5ec \ud55c\ub3d9\ub300\ud559\uad50 \uae40\uc778\uc911 \uad50\uc218\ub2d8 \ub525\ub7ec\ub2dd \uc5f0\uad6c\uc2e4\uc5d0\uc11c \ud559\ubd80\uc0dd \uc8fc\ub3c4\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c\uc785\ub2c8\ub2e4. WICWIU \ub294 \uc54c\uace0\ub9ac\uc998\uc758 \ud655\uc7a5\uc131\uacfc \uac00\ub3c5\uc131\uc744 \uace0\ub824\ud558\uc5ec, \uc77c\uad00\uc131 \ub192\uc740 C++\ucf54\ub4dc\uc640 API\ub85c \uad6c\uc131\ub418\uc5c8\uc73c\uba70, \ud55c\uae00 \uc124\uba85\uc11c\ub97c \uc81c\uacf5\ud558\uc5ec \uad6d\ub0b4 \uc0ac\uc6a9\uc790\ub4e4\uc5d0\uac8c \ud3b8\uc758\ub97c \uc81c\uacf5\ud558\uace0\uc790 \ud569\ub2c8\ub2e4.","title":"WICWIU"},{"location":"#about","text":"\uc774 \ud398\uc774\uc9c0\uac00 \ub9cc\ub4e4\uc5b4\uc9c4 \uc774\uc720\ub97c \uc54c\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud574\uc8fc\uc138\uc694! About","title":"About"},{"location":"#wicwiu_1","text":"WICWIU \ud504\ub85c\uc81d\ud2b8\uc5d0 \ucc38\uc5ec\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud558\uc5ec \uac00\uc774\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694! WICWIU \uac1c\ubc1c \uac00\uc774\ub4dc","title":"WICWIU \uac1c\ubc1c \uac00\uc774\ub4dc"},{"location":"#api","text":"WICWIU \uc758 API \ub97c \ud655\uc778\ud574\ubcf4\uc138\uc694! API","title":"API"},{"location":"#wicwiu_2","text":"\uc774\uacf3\uc740 WICWIU \uac1c\ubc1c \ud300\uc6d0\uc774 WICWIU \ub97c \ubd84\uc11d\ud558\uace0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\ud604\ud558\ub294 \ucf54\ub529\uc744 \ud560 \ub54c, \uadf8 \uacfc\uc815\uc744 \uae30\ub85d\ud558\uace0 \uacf5\uc720\ud558\uc5ec \ub2e4\ub978 \ud300\uc6d0\uacfc \uc9c0\uc2dd\uc744 \ub3d9\uae30\ud654\uc2dc\ud0a4\uae30 \uc704\ud55c \uacf5\uac04\uc785\ub2c8\ub2e4. fewshot \ud300 Coding Convention Fewshot Diary Coding Convention Info \uc5b4\ucc28\ud53c WICWIU \ub97c \ubd84\uc11d\ud558\uace0 \ucf54\ub529\ud55c \uacfc\uc815\uc744 \ub2e4\ub978 \ud300\uc6d0\uc5d0\uac8c \uc124\uba85\ud574\uc57c \ud558\ubbc0\ub85c \uadf8\uac83\uc744 \uae30\ub85d\uc73c\ub85c \ub0a8\uaca8\uc11c \uacf5\uc720\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uae30\ub85d\uc73c\ub85c \ub0a8\uae30\ub294 \uacfc\uc815\uc5d0\uc11c \uc790\uc2e0\uc758 \uc9c0\uc2dd\uc774 \ub354\uc6b1 \uccb4\uacc4\uc801\uc73c\ub85c \uc815\ub9ac\uac00 \ub418\uace0, \uc774\ud6c4\uc5d0 \ub2e4\ub978 \ud300\ub4e4\ub3c4 \ubd84\uc11d/\ucf54\ub529 \uacfc\uc815\uc744 \ucc38\uace0\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. WICWIU \uc758 \uac1c\ubc1c \ud300\uc774\ub77c\uba74 \ub2e4\ub978 \ud300\uc758 \ubd84\uc11d/\ucf54\ub529 \uacfc\uc815\uc774\ub77c\ub3c4 \uc9c0\uc2dd \ub3d9\uae30\ud654\ub97c \uc2dc\ucf1c\uc8fc\uc138\uc694. \ud639\uc2dc \ub611\uac19\uc740 \ucf54\ub4dc\ub97c \ub2e4\uc2dc \ubd84\uc11d\ud55c\ub2e4\uba74 \uc2dc\uac04\ub0ad\ube44\uac00 \ub420 \ubfd0\ub354\ub7ec \ub611\uac19\uc740 \ubd84\uc11d\uc774 2\ubc88 \uc774\uc0c1 \uc0dd\uae30\uba74 \uc911\ubcf5\ub41c \ub0b4\uc6a9\uc758 \ubb38\uc11c\uac00 \uc0dd\uaca8\uc11c \ud63c\ub780\uc774 \ucd08\ub798\ub420 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.","title":"WICWIU \uc9c0\uc2dd\ub3d9\uae30\ud654"},{"location":"#wicwiu_3","text":"WICWIU Github Pages \uc5d0 \ubb38\uc11c\ub97c \uc791\uc131\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud558\uc5ec \uac00\uc774\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694! WICWIU Github Pages \ubb38\uc11c \uc791\uc131 \uac00\uc774\ub4dc","title":"WICWIU \ubb38\uc11c \uc791\uc131\ud558\uae30 \uac00\uc774\ub4dc"},{"location":"about/","text":"\uc774\uacf3\uc740 WICWIU \ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud558\uc5ec \ud544\uc694\ud55c \ub0b4\uc6a9\uacfc WICWIU \ud504\ub85c\uc81d\ud2b8\uc5d0 \ucc38\uc5ec\ud558\uae30 \uc704\ud558\uc5ec \ud544\uc694\ud55c \ub0b4\uc6a9\uc744 Markdown \ud30c\uc77c \ud615\uc2dd\uc73c\ub85c \uc27d\uac8c \uac8c\uc2dc\ud574\ub450\uae30 \uc704\ud558\uc5ec \uc81c\uc791\ub41c WICWIU Github Pages \uc785\ub2c8\ub2e4. \ud55c\ub3d9\ub300\ud559\uad50 \ud559\ubd80\uc0dd \uc8fc\ub3c4\ub85c \uc81c\uc791\ub41c \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c WICWIU \ud504\ub85c\uc81d\ud2b8\uc5d0 \ucc38\uc5ec\ud558\uae30 \uc704\ud574\uc11c\ub294 (1) \ubc29\ub300\ud55c \uc591\uc758 C++ \ucf54\ub4dc\uc640 (2) \uadf8 \ucf54\ub4dc\uc5d0 \uad6c\ud604\ub418\uc5b4 \uc788\ub294 \ub525\ub7ec\ub2dd \uae30\uc220\ub4e4, (3) GPU \ucf54\ub529\uc744 \uc704\ud55c CUDA \ud504\ub85c\uadf8\ub798\ubc0d \uae30\uc220\ub4e4, (4) \ud611\uc5c5\uc744 \uc704\ud55c Git , Github , Pull Requests , (5) Coding Convention \uc5d0 \ub300\ud55c \uc774\ud574, (6) C++ \ucf54\ub529\uc744 \uc704\ud558\uc5ec \uc8fc\uc758\ud574\uc57c \ud560 \ub0b4\uc6a9\ub4e4, (7) Makefile \uc5d0 \ub300\ud55c \uc774\ud574, \uae30\ud0c0\ub4f1\ub4f1\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub807\uac8c WICWIU \uac1c\ubc1c\uc5d0 \ud544\uc694\ud55c \ub0b4\uc6a9\ub4e4\uc774 \uc9c0\uae08\uae4c\uc9c0 \uc804\uc784 \uac1c\ubc1c\uc790\uc5d0 \uc758\ud558\uc5ec \uc778\uc218\uc778\uacc4\ub418\uc11c (1) \uc77c\uad00\ub41c \ub0b4\uc6a9\uc73c\ub85c \uc804\ub2ec\ub418\uc9c0 \uc54a\uac70\ub098 \ubb38\uc11c( .docx \ub610\ub294 .pdf \ud30c\uc77c)\uc5d0 \uc758\ud558\uc5ec \uc804\ub2ec\ub418\uc5c8\uae30\uc5d0 (2) \uc811\uadfc\uc131\uc774 \ub5a8\uc5b4\uc84c\uc2b5\ub2c8\ub2e4. \uc774 \ub450 \uac00\uc9c0 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud558\uc5ec WICWIU \ud504\ub85c\uc81d\ud2b8\uc5d0 \ucc38\uc5ec\ud558\uae30 \uc704\ud55c (1) \uc77c\uad00\uc131 \uc788\ub294 \ud1b5\uc77c\ub41c \ub0b4\uc6a9\uc744, (2) \uc811\uadfc\uc131\uc774 \uc6b0\uc218\ud55c \ud50c\ub7ab\ud3fc\uc5d0 \uac8c\uc2dc\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc870\uac74\uc744 \ubaa8\ub450 \ucda9\uc871\uc2dc\ucf1c\uc8fc\ub294 \ud50c\ub7ab\ud3fc\uc740 Github Pages \uc785\ub2c8\ub2e4. \ub610 \uc774 WICWIU Github Pages \ub85c\uc368 WICWIU \uc5d0 \ucc38\uc5ec\ud558\uace0 \uc2f6\uc9c0\ub9cc \uc790\uc2e0\uc5d0\uac8c \uc5b4\ub5a4 \uac83\uc774 \ubd80\uc871\ud55c\uc9c0 \ubab0\ub77c\uc11c \ub9c9\uc5f0\ud55c \ub450\ub824\uc6c0\uc744 \uac16\uace0 \uc788\ub294 \ud55c\ub3d9\ub300\uc0dd\ub4e4\uc5d0\uac8c \ubb34\uc5c7\uc774 \ud544\uc694\ud558\uace0 \uc5b4\ub5a4 \uc9c0\uc2dd\ub4e4\uc774 \uc788\uc5b4\uc57c \ud558\ub294\uc9c0 \uba85\ud655\ud558\uac8c \uc54c\ub824\uc90c\uc73c\ub85c\uc368 WICWIU \ucc38\uc5ec\uc5d0 \uc790\uc2e0\uac10\uacfc \ud655\uc2e0\uc744 \uc2ec\uc5b4\uc904 \uc218\ub3c4 \uc788\ub2e4\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4.","title":"About"},{"location":"api/","text":"Summary \u00b6 Members Descriptions class AdagradOptimizer class Adam class AdamOptimizer class Addall \uac12\ub4e4\uc744 \uc11c\ub85c \ub354\ud558\ub294 class class AddChannelWise \uc11c\ub85c \ub354\ud558\ub294 class class AddColWise \uc911 Colunm\uc5d0\ub9cc \uac12\uc744 \ub354\ud558\ub294 class class AvaragePooling2D class BatchNormalize class BatchNormalizeLayer \uad6c\uc131\ud574 Batch Normalization Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class BEGAN class BEGANDiscriminatorLoss class BEGANGeneratorLoss class ConcatenateChannelWise class Container \uc800\uc7a5\ud558\uae30 \uc704\ud55c Queue\uc5d0 \ud574\ub2f9\ud558\ub294 \ud074\ub798\uc2a4 class Convolution2D class ConvolutionLayer2D \uad6c\uc131\ud574 2-Dimensional Convolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class CrossEntropy Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class DataLoader class Dataset class Dropout class FewShotClassifier class GAN class GaussianNoiseGenerator class GlobalAvaragePooling2D Row * Colunm \uacf5\uac04\uc744 GlobalAvaragePooling\ud558\ub294 \ud074\ub798\uc2a4. class GradientDescentOptimizer class HingeLoss Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class KNearestNeighbor class Linear \uad6c\uc131\ud574 fully connected layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class LongArray \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4. class LossFunction \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class LRelu class MatMul class Maxpooling2D class Module \uad6c\uc131\ud574 \ubaa8\ub4c8\ud654\ud558\ub294 \ud074\ub798\uc2a4 class MSE Squared Error) Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class NagOptimizer class NeuralNetwork \ubaa8\ub378 \uc0dd\uc131, \ud559\uc2b5 \ubc0f \ud3c9\uac00\ub97c \ucd1d\uad04\ud558\ub294 \ud074\ub798\uc2a4 class NoiseGenerator Tensor \ud074\ub798\uc2a4\uc758 Random_normal \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubc94\uc704 \ub0b4\uc758 \uc784\uc758\uc758 \uac12\uc744 \uac16\ub294 Tensor \uc0dd\uc131 class Operator \ubcf8 \ud504\ub798\uc784\uc6cc\ud06c\uc758 \uac00\uc7a5 \uc791\uc740 \uc5f0\uc0b0 \ub2e8\uc704. class Optimizer class PRelu class ReconstructionError class Recurrent class Relu class ReShape class RMSPropOptimizer class Sequential class Shape \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape\uc744 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 class Sigmoid class Softmax class SoftmaxCrossEntropy \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class Switch class Tanh class Tensor \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 class Tensorholder Result\ub9cc \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4. class TransposedConvolution2D class TransposedConvolutionLayer2D \uad6c\uc131\ud574 2-Dimensional TransposedConvolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class TripletLoss class UniformNoiseGenerator class VanillaGANDiscriminatorLoss class VanillaGANGeneratorLoss class WData class WGANDiscriminatorLoss class WGANGeneratorLoss class AdagradOptimizer \u00b6 class AdagradOptimizer : public Optimizer< DTYPE > Summary Members Descriptions public inline AdagradOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection) AdagradOptimizer \uc0dd\uc131\uc790. public inline AdagradOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float epsilon,OptimizeDirection pOptimizeDirection) AdagradOptimizer \uc0dd\uc131\uc790. public inline ~AdagradOptimizer () AdagradOptimizer \uc18c\uba78\uc790 public inline void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc public inline int Alloc () public inline int Alloc (float epsilon) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc public inline void InitializeAttributeForGPU (unsigned int idOfDevice) public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * m_pGradientSquared) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Members public inline AdagradOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection) AdagradOptimizer \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pLearningRate Optimizer\uc758 learning rate epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(epsilon) public inline AdagradOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float epsilon,OptimizeDirection pOptimizeDirection) AdagradOptimizer \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pLearningRate Optimizer\uc758 learning rate epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 weightDecayRate \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218\uac00 \ud074 \ub54c \ud328\ub110\ud2f0\ub97c \ubd80\uacfc\ud558\ub294 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(epsilon) public inline ~AdagradOptimizer () AdagradOptimizer \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_aaGradientSquared \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline int Alloc () public inline int Alloc (float epsilon) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_ppParameter, m_numOfParameter, m_ppParameter, m_aaGradientSquared \ucd08\uae30\ud654\ud55c\ub2e4. m_aaGradientSquared m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. Parameters epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 Returns \uc131\uacf5 \uc2dc TRUE See also : Container < Operator > GetTrainableTensor() See also : int GetTrainableTensorDegree() public inline void InitializeAttributeForGPU (unsigned int idOfDevice) public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_epsilon \uc720\ubb34\uc5d0 \ub530\ub77c UpdateParameter \ud638\ucd9c\uacfc \uc5d0\ub7ec \uba54\uc138\uc9c0 \ud638\ucd9c Returns \uc131\uacf5 \uc2dc TRUE See also : int UpdateParameter(Operator *pParameter, Tensor *m_pGradientSquared) public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 Returns \uc131\uacf5 \uc2dc TRUE public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * m_pGradientSquared) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc gradient \uc81c\uacf1 \uac12\uc73c\ub85c pGradientSquared \uc5c5\ub370\uc774\ud2b8 signed_learning_rate\uc640 gradient\uc758 \uacf1\uc744 \uc5c5\ub370\uc774\ud2b8 \ub41c pGradientSquared\uac12\uc5d0 root\ub97c \uc801\uc6a9 \ud55c \uac12\uc73c\ub85c \ub098\ub204\uc5b4 \ud30c\ub77c\ubbf8\ud130\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. Parameters pGradientSquared \uc5c5\ub370\uc774\ud2b8 \ud560 pGradientSquared Returns \uc131\uacf5 \uc2dc TURE class Adam \u00b6 Summary Members Descriptions Members class AdamOptimizer \u00b6 class AdamOptimizer : public Optimizer< DTYPE > Summary Members Descriptions public inline AdamOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float Beta1,float Beta2,float epsilon,OptimizeDirection pOptimizeDirection) AdamOptimizer\uc758 \uc0dd\uc131\uc790. public inline AdamOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float Beta1,float Beta2,float epsilon,float weightDecayRate,OptimizeDirection pOptimizeDirection) AdamOptimizer\uc758 \uc0dd\uc131\uc790. public inline ~AdamOptimizer () AdamOptimizer \uc18c\uba78\uc790 public inline virtual void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc public inline int Alloc (float Beta1,float Beta2,float epsilon) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * pFirstMomentum, Tensor < DTYPE > * pFirstVelocity, Tensor < DTYPE > * pUnbiasedMomentum, Tensor < DTYPE > * pUnbiasedVelocity) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Members public inline AdamOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float Beta1,float Beta2,float epsilon,OptimizeDirection pOptimizeDirection) AdamOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer pLearningRate Optimizer\uc758 learning rate Beta1 FirstMomentum \uc870\uc815 \uac00\uc911\uce58 \uac12 Beta2 FirstVelocity \uc870\uc815 \uac00\uc911\uce58 \uac12 epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(Beta1, Beta2, epsilon) public inline AdamOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float Beta1,float Beta2,float epsilon,float weightDecayRate,OptimizeDirection pOptimizeDirection) AdamOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer pLearningRate Optimizer\uc758 learning rate Beta1 FirstMomentum \uc870\uc815 \uac00\uc911\uce58 \uac12 Beta2 FirstVelocity \uc870\uc815 \uac00\uc911\uce58 \uac12 epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 weightDecayRate \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218\uac00 \ud074 \ub54c \ud328\ub110\ud2f0\ub97c \ubd80\uacfc\ud558\ub294 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(Beta1, Beta2, epsilon) public inline ~AdamOptimizer () AdamOptimizer \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline virtual void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_aaFirstVelocity, m_aaFirstMomentum m_aaUnbiasedVelocity, m_aaUnbiasedMomentum \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline int Alloc (float Beta1,float Beta2,float epsilon) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_ppParameter, m_numOfParameter, m_aaFirstVelocity, m_aaUnbiasedVelocity, m_aaFirstMomentum m_aaUnbiasedMomentum\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. m_aaFirstVelocity\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. m_aaUnbiasedVelocity\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. m_aaFirstMomentum\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. m_aaUnbiasedMomentum\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. Parameters Beta1 FirstMomentum \uc870\uc815 \uac00\uc911\uce58 \uac12 Beta2 FirstVelocity \uc870\uc815 \uac00\uc911\uce58 \uac12 epsilon Root Sqaure \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 Returns \uc131\uacf5 \uc2dc TRUE See also : Container < Operator > GetTrainableTensor() See also : int GetTrainableTensorDegree() public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_Beta1 \uc720\ubb34\uc5d0 \ub530\ub77c UpdateParameter \ud638\ucd9c\uacfc \uc5d0\ub7ec \uba54\uc138\uc9c0 \ud638\ucd9c Returns \uc131\uacf5 \uc2dc TRUE See also : int UpdateParameter(Operator *pParameter, Tensor *pFirstMomentum, Tensor *pFirstVelocity, Tensor *pUnbiasedMomentum, Tensor *pUnbiasedVelocity) public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 Returns \uc131\uacf5 \uc2dc TRUE public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * pFirstMomentum, Tensor < DTYPE > * pFirstVelocity, Tensor < DTYPE > * pUnbiasedMomentum, Tensor < DTYPE > * pUnbiasedVelocity) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_Beta1\uac12\uc73c\ub85c \uac00\uc911\uce58\uac00 \uc870\uc815\ub41c pFirstMomentum\uc640 gradinet\ub85c pFirstMomentum\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. m_Beta2\uac12\uc73c\ub85c \uac00\uc911\uce58\uac00 \uc870\uc815\ub41c pFirstVelocity\uc640 elementwise \uc5f0\uc0b0\uc774 \ub41c gradient\ub85c pFirstVelocity\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. \ud559\uc2b5 \ucd08\ubc18 \ubd80, pFirstMomentum, pFirstVelocity\ub294 0\uc73c\ub85c biased \uc0c1\ud0dc\uc774\ubbc0\ub85c \uc774\ub97c unbiased \ud574\uc8fc\ub294 \uc5f0\uc0b0\ud558\uc5ec \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. signed_learning_rate\uc640 pUnbiasedMomentum\uacf1\uc744 root\uac00 \uc801\uc6a9\ub41c pUnbiasedVelocity\uc640 m_epsilon\uc73c\ub85c \ub098\ub208 \uac12\uc73c\ub85c weight(trainable_data)\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pFirstMomentum \uc5c5\ub370\uc774\ud2b8 \ud560 pFirstMomentum pFirstVelocity \uc5c5\ub370\uc774\ud2b8 \ud560 pFirstVelocity pUnbiasedMomentum \uc5c5\ub370\uc774\ud2b8 \ud560 pUnbiasedMomentum pUnbiasedVelocity \uc5c5\ub370\uc774\ud2b8 \ud560 pUnbiasedVelocity Returns \uc131\uacf5 \uc2dc TURE class Addall \u00b6 class Addall : public Operator< DTYPE > \uac12\ub4e4\uc744 \uc11c\ub85c \ub354\ud558\ub294 class Summary Members Descriptions public inline Addall ( Operator < DTYPE > * pLeftInput, Operator < DTYPE > * pRightInput,std::string pName,int pLoadflag) Addall\uc758 \uc0dd\uc131\uc790 public inline ~Addall () Addall\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pLeftInput, Operator < DTYPE > * pRightInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pLeftInput\uc744 \uc774\uc6a9\ud574 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud55c\ub2e4. public inline void Delete () \uba54\ubaa8\ub9ac\ub97c \ud5e4\uc81c\ud558\ub294 Delete \uba54\uc18c\ub4dc. public inline virtual int ForwardPropagate (int pTime) Addall\uc758 forwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) Addall\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline Addall ( Operator < DTYPE > * pLeftInput, Operator < DTYPE > * pRightInput,std::string pName,int pLoadflag) Addall\uc758 \uc0dd\uc131\uc790 pLeftInput, pRightInput\uc744 Alloc\uc2dc\ud0a8\ub2e4. Parameters pLeftInput Alloc\ud560 \ub300\uc0c1 Operator . pRightInput Alloc\ud560 \ub300\uc0c1 Operator . pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pLeftInput, Operator *pRightInput) public inline ~Addall () Addall\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pLeftInput, Operator < DTYPE > * pRightInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pLeftInput\uc744 \uc774\uc6a9\ud574 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud55c\ub2e4. \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pLeftInput\uacfc m_pRightInput\uc758 Shape\uc815\ubcf4\ub97c \ub9f4\ubc84\ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uace0 \ub2e4\ub978 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc740 pLeftInput\uc758 Shape\uac12\uc73c\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. Result\uac12\uacfc gradient\uac12\uc744 \uc800\uc7a5 \ud560 Tensor\ub97c \uc0c8\ub85c \ub9cc\ub4e0\ub2e4. Parameters \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator pRightInput \uc5f0\uc0b0\uc5d0 \uc0ac\uc6a9 \ud560 inputTensor. Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () \uba54\ubaa8\ub9ac\ub97c \ud5e4\uc81c\ud558\ub294 Delete \uba54\uc18c\ub4dc. cudnnDescriptor\ub4e4\uc744 GPU\uba54\ubaa8\ub9ac\uc5d0\uc11c \ud574\uc81c\ud558\uace0 \ud3ec\uc778\ud130\ub97c null\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Addall\uc758 forwardPropagate \ub9e4\uc18c\ub4dc. Container\uc5d0 \uc800\uc7a5\ud55c left, right\uc758 Result\uac12\uc744 \uc11c\ub85c \ub354\ud574 result\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) Addall\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Container\uc5d0 \uc800\uc7a5\ud55c pLeftInput, pRightInput\uc758 Gradient\uac12\uc5d0 \uacc4\uc0b0\ud55c Gradient\uac12\uc744 \uac01\uac01 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE. class AddChannelWise \u00b6 class AddChannelWise : public Operator< DTYPE > \uc11c\ub85c \ub354\ud558\ub294 class Summary Members Descriptions public inline AddChannelWise ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias,std::string pName,int pLoadflag) AddChannelWise\uc758 \uc0dd\uc131\uc790 public inline ~AddChannelWise () AddChannelWise\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias) \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pInput, pBias\ub97c \uc774\uc6a9\ud574 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4 public inline void Delete () \uba54\ubaa8\ub9ac\ub97c \ud5e4\uc81c\ud558\ub294 Delete \uba54\uc18c\ub4dc. public inline virtual int ForwardPropagate (int pTime) AddChannelWise\uc758 forwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) AddColWise\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline AddChannelWise ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias,std::string pName,int pLoadflag) AddChannelWise\uc758 \uc0dd\uc131\uc790 pInput, pBias\uc744 Alloc\uc2dc\ud0a8\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator . pBias Alloc\ud560 \ub300\uc0c1 Operator . pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pInput, Operator *pBias) public inline ~AddChannelWise () AddChannelWise\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias) \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pInput, pBias\ub97c \uc774\uc6a9\ud574 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4 \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pInput, pBias\uc758 Shape\uc815\ubcf4\ub97c \ub9f4\ubc84 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uace0 \ub2e4\ub978 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc740 pInput\uc758 Shape\uac12\uc73c\ub85c \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uac12\uacfc gradient\uac12\uc744 \uc800\uc7a5 \ud560 Tensor\ub97c \uc0c8\ub85c \ub9cc\ub4e0\ub2e4. Parameters \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator . pBias \ub354\ud560 Operator . Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () \uba54\ubaa8\ub9ac\ub97c \ud5e4\uc81c\ud558\ub294 Delete \uba54\uc18c\ub4dc. cudnnDescriptor\ub4e4\uc744 GPU\uba54\ubaa8\ub9ac\uc5d0\uc11c \ud574\uc81c\ud558\uace0 \ud3ec\uc778\ud130\ub97c null\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) AddChannelWise\uc758 forwardPropagate \ub9e4\uc18c\ub4dc. Container\uc5d0 \uc800\uc7a5\ud55c Input, bias\uc758 Channel\uac12\uc744 Result\uc5d0 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) AddColWise\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Container\uc5d0 \uc800\uc7a5\ud55c pInput, pBias\uc758 Gradient\uac12\uc560 \uacc4\uc0b0\uc744 \ud1b5\ud574 \uad6c\ud55c gradient\uac12\uc744 \uac01\uac01 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE. class AddColWise \u00b6 class AddColWise : public Operator< DTYPE > \uc911 Colunm\uc5d0\ub9cc \uac12\uc744 \ub354\ud558\ub294 class Summary Members Descriptions public inline AddColWise ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias,std::string pName,int pLoadflag) AddColWise\uc758 \uc0dd\uc131\uc790 public inline ~AddColWise () AddColWise\uc758 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias) \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pInput, pBias\ub97c \uc774\uc6a9\ud574 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4 public inline void Delete () \uba54\ubaa8\ub9ac\ub97c \ud5e4\uc81c\ud558\ub294 Delete \uba54\uc18c\ub4dc. public inline virtual int ForwardPropagate (int pTime) AddColWise\uc758 forwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) AddColWise\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline AddColWise ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias,std::string pName,int pLoadflag) AddColWise\uc758 \uc0dd\uc131\uc790 pInput, pBias\uc744 Alloc\uc2dc\ud0a8\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator . pBais Alloc\ud560 \ub300\uc0c1 Operator . pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pInput, Operator *pBias) public inline ~AddColWise () AddColWise\uc758 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pBias) \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pInput, pBias\ub97c \uc774\uc6a9\ud574 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4 \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 pInput, pBias\uc758 Shape\uc815\ubcf4\ub97c \ub9f4\ubc84 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uace0 \ub2e4\ub978 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc740 pInput\uc758 Shape\uac12\uc73c\ub85c \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uac12\uacfc gradient\uac12\uc744 \uc800\uc7a5 \ud560 Tensor\ub97c \uc0c8\ub85c \ub9cc\ub4e0\ub2e4. Parameters \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator . pBias \ub354\ud560 Operator . Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () \uba54\ubaa8\ub9ac\ub97c \ud5e4\uc81c\ud558\ub294 Delete \uba54\uc18c\ub4dc. cudnnDescriptor\ub4e4\uc744 GPU\uba54\ubaa8\ub9ac\uc5d0\uc11c \ud574\uc81c\ud558\uace0 \ud3ec\uc778\ud130\ub97c null\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) AddColWise\uc758 forwardPropagate \ub9e4\uc18c\ub4dc. Container\uc5d0 \uc800\uc7a5\ud55c Input\uacfc bias\uc758 Colunm\uac12\uc744 \uc11c\ub85c \ub354\ud574 result\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) AddColWise\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Container\uc5d0 \uc800\uc7a5\ud55c pInput, pBias\uc758 Gradient\uac12\uc5d0 \uacc4\uc0b0\uc744 \ud1b5\ud574 \uad6c\ud55c gradient\uac12\uc744 \uac01\uac01 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE. class AvaragePooling2D \u00b6 class AvaragePooling2D : public Operator< DTYPE > Summary Members Descriptions public inline AvaragePooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,std::string pName,int pLoadflag) public inline AvaragePooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,int padding,std::string pName,int pLoadflag) public inline ~AvaragePooling2D () public inline int Alloc ( Operator < DTYPE > * pInput,int strideRow,int strideCol,int maskRow,int maskCol,int padding1,int padding2) public inline void Delete () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline AvaragePooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,std::string pName,int pLoadflag) public inline AvaragePooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,int padding,std::string pName,int pLoadflag) public inline ~AvaragePooling2D () public inline int Alloc ( Operator < DTYPE > * pInput,int strideRow,int strideCol,int maskRow,int maskCol,int padding1,int padding2) public inline void Delete () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class BatchNormalize \u00b6 class BatchNormalize : public Operator< DTYPE > Summary Members Descriptions public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,std::string pName) public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,float pEpsilon,std::string pName) public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) public inline virtual void SetModeTrain () public inline virtual void SetModeAccumulate () public inline virtual void SetModeInference () public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,std::string pName,int pLoadflag) public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,float pMomentum,std::string pName,int pLoadflag) public inline ~BatchNormalize () public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,float pMomentum,double pEpsilon) public inline virtual int SetModeTrain () public inline virtual int SetModeAccumulate () public inline virtual int SetModeInference () Members public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,std::string pName) public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,float pEpsilon,std::string pName) public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) public inline virtual void SetModeTrain () public inline virtual void SetModeAccumulate () public inline virtual void SetModeInference () public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,std::string pName,int pLoadflag) public inline BatchNormalize ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,float pMomentum,std::string pName,int pLoadflag) public inline ~BatchNormalize () public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pScale, Operator < DTYPE > * pBias,int pIsChannelwise,float pMomentum,double pEpsilon) public inline virtual int SetModeTrain () public inline virtual int SetModeAccumulate () public inline virtual int SetModeInference () class BatchNormalizeLayer \u00b6 class BatchNormalizeLayer : public Module< DTYPE > \uad6c\uc131\ud574 Batch Normalization Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 Batch Normalization Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4 Summary Members Descriptions public inline BatchNormalizeLayer ( Operator < DTYPE > * pInput,int pIsChannelwise,std::string pName) BatchNormalizeLayer \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline virtual ~BatchNormalizeLayer () BatchNormalizeLayer \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput,int pIsChannelwise,std::string pName) Batch Normalize Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Members public inline BatchNormalizeLayer ( Operator < DTYPE > * pInput,int pIsChannelwise,std::string pName) BatchNormalizeLayer \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 BatchNormalizeLayer \ud074\ub798\uc2a4\uc758 Alloc \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. See also : BatchNormalizeLayer ::Alloc(Operator *pInput, int pIsChannelwise, std::string pName) public inline virtual ~BatchNormalizeLayer () BatchNormalizeLayer \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ub2e8, \ub3d9\uc801 \ud560\ub2f9 \ubc1b\uc740 Operator\ub4e4\uc740 NeuralNetwork\uc5d0\uc11c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. public inline int Alloc ( Operator < DTYPE > * pInput,int pIsChannelwise,std::string pName) Batch Normalize Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Input Operator\uc758 Element\uc5d0 \ub300\ud574 \ubc30\uce58 \uc815\uaddc\ud654(Batch Normailzation)\uc744 \uc218\ud589\ud55c\ub2e4. Parameters pInput \ud574\ub2f9 Layer\uc758 Input\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pIsChannelWise Column-Wise Normalization \uc720\ubb34, 0\uc77c \uc2dc Column-Wise\ub864 \uc5f0\uc0b0, 0\uc774 \uc544\ub2d0 \uc2dc Channel-Wise\ub85c \uc5f0\uc0b0 pName Module\uc758 \uc774\ub984 Returns TRUE See also : BatchNormalize ::BatchNormalize( Operator *pInput, Operator *pScale, Operator *pBias, int pIsChannelwise = TRUE, std::string pName = NULL) Module ::AnalyzeGraph(Operator *pResultOperator) class BEGAN \u00b6 class BEGAN : public GAN< DTYPE > Summary Members Descriptions public BEGAN () public virtual ~BEGAN () public int SetBEGANParameter (float pK,float pLamda,float pGamma) public virtual int TrainGeneratorOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnCPU () public virtual int TrainGeneratorOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnGPU () public float SaveLossX () public float SaveLossG () public int MultiplyKOnOutput () public int MultiplyKOnGradient () public float UpdateK () public float GetK () public float ComputeConvergenceMeasure () public float GetConvergenceMeasure () Members public BEGAN () public virtual ~BEGAN () public int SetBEGANParameter (float pK,float pLamda,float pGamma) public virtual int TrainGeneratorOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnCPU () public virtual int TrainGeneratorOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnGPU () public float SaveLossX () public float SaveLossG () public int MultiplyKOnOutput () public int MultiplyKOnGradient () public float UpdateK () public float GetK () public float ComputeConvergenceMeasure () public float GetConvergenceMeasure () class BEGANDiscriminatorLoss \u00b6 class BEGANDiscriminatorLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline BEGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~BEGANDiscriminatorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline BEGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~BEGANDiscriminatorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL class BEGANGeneratorLoss \u00b6 class BEGANGeneratorLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline BEGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~BEGANGeneratorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline BEGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~BEGANGeneratorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL class ConcatenateChannelWise \u00b6 class ConcatenateChannelWise : public Operator< DTYPE > Summary Members Descriptions public inline ConcatenateChannelWise ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,std::string pName,int pLoadflag) public inline ~ConcatenateChannelWise () public inline int Alloc (int noOperator,...) public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline ConcatenateChannelWise ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,std::string pName,int pLoadflag) public inline ~ConcatenateChannelWise () public inline int Alloc (int noOperator,...) public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class Container \u00b6 \uc800\uc7a5\ud558\uae30 \uc704\ud55c Queue\uc5d0 \ud574\ub2f9\ud558\ub294 \ud074\ub798\uc2a4 Tensor , Operator , Tensorholder \uc138 \uac00\uc9c0 \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c Queue\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c\ub2e4. \uae30\ubcf8 queue \uad6c\uc870\uc5d0 \uc778\ub371\uc2a4\ub97c \uc774\uc6a9\ud55c \uc811\uadfc \ubc0f \uc5ed\uc21c\uc73c\ub85c \uc811\uadfc \ub4f1 \ucd94\uac00\uc801\uc778 \uba54\uc18c\ub4dc\uac00 \uad6c\ud604\ub418\uc5b4 \uc788\ub2e4. Summary Members Descriptions public inline Container () Container \uc0dd\uc131\uc790 public inline virtual ~Container () Container \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Push (DTYPE pElement) Queue\uc758 push \uba54\uc18c\ub4dc public inline DTYPE Pop () Queue\uc758 pop \uba54\uc18c\ub4dc public inline DTYPE Pop (DTYPE pElement) Queue\uc5d0\uc11c Element\ub97c \ucc3e\uc544 \ubc18\ud658\ud558\ub294 pop \uba54\uc18c\ub4dc public inline int Reverse () Queue\ub97c \uc5ed\uc21c\uc73c\ub85c \uc7ac\ud560\ub2f9\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc public inline int SetElement (DTYPE pElement,unsigned int index) public inline int GetSize () public inline DTYPE GetLast () public inline DTYPE * GetRawData () const public inline DTYPE GetElement (unsigned int index) public inline DTYPE & operator[] (unsigned int index) []\uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 Members public inline Container () Container \uc0dd\uc131\uc790 \uac01 \uba64\ubc84 \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud558\uc5ec Container \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual ~Container () Container \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ud574\ub2f9 Container \ud074\ub798\uc2a4\ub97c \uc704\ud574 \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ub41c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ubc18\ud658\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\ud55c\ub2e4. Returns \uc5c6\uc74c public inline int Push (DTYPE pElement) Queue\uc758 push \uba54\uc18c\ub4dc \uae30\uc874\uc758 queue\ub97c \ud560\ub2f9 \ud574\uc81c\ud558\uace0 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Element\ub97c \ub9c8\uc9c0\ub9c9\uc5d0 \ucd94\uac00\ud558\uc5ec \uc0c8\ub85c\uc6b4 Queue\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c\ub2e4. Parameters pElement Queue\uc5d0 \ucd94\uac00\ud558\uace0\uc790 \ud558\ub294 \ubcc0\uc218 Returns \uc131\uacf5 \uc2dc TRUE, \uc2e4\ud328 \uc2dc FALSE public inline DTYPE Pop () Queue\uc758 pop \uba54\uc18c\ub4dc \uae30\uc874\uc758 queue\ub97c \ud560\ub2f9 \ud574\uc81c\ud558\uace0 Queue\uc758 \uccab\ubc88\uc9f8 Element\ub97c \ubc18\ud658\ud55c \ud6c4 \uc0c8\ub85c\uc6b4 Queue\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c\ub2e4. Returns Queue\uc758 \uccab\ubc88\uc9f8 Element public inline DTYPE Pop (DTYPE pElement) Queue\uc5d0\uc11c Element\ub97c \ucc3e\uc544 \ubc18\ud658\ud558\ub294 pop \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Element\uac00 Queue\uc5d0 \uc874\uc7ac\ud560 \uacbd\uc6b0, \ud574\ub2f9 Element\ub97c \ubc18\ud658\ud558\uace0 Queue\ub97c \uc0c8\ub85c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c\ub2e4. Parameters pElement Queue\uc5d0\uc11c \ucc3e\uace0\uc790 \ud558\ub294 Element Returns \uc2e4\ud328 \uc2dc NULL, \uc131\uacf5 \uc2dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Element\uc640 \ub3d9\uc77c\ud55c Queue\uc758 Element public inline int Reverse () Queue\ub97c \uc5ed\uc21c\uc73c\ub85c \uc7ac\ud560\ub2f9\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc Queue\uc758 Element\ub97c \ubc18\ub300 \uc21c\uc11c\ub85c \uc800\uc7a5\ud558\ub294 \uc0c8\ub85c\uc6b4 Queue\ub97c \ud560\ub2f9\ud558\uace0, \uae30\uc874\uc758 Queue\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns TRUE public inline int SetElement (DTYPE pElement,unsigned int index) public inline int GetSize () public inline DTYPE GetLast () public inline DTYPE * GetRawData () const public inline DTYPE GetElement (unsigned int index) public inline DTYPE & operator[] (unsigned int index) []\uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 Queue\uc5d0\uc11c \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \uc778\ub371\uc2a4\uc5d0 \ud574\ub2f9\ud558\ub294 ELement\ub97c \ubc18\ud658\ud55c\ub2e4. Parameters index \ucc3e\uace0\uc790 \ud558\ub294 Queue\uc758 Element\uc758 \uc778\ub371\uc2a4 Returns m_aElement[index] class Convolution2D \u00b6 class Convolution2D : public Operator< DTYPE > Summary Members Descriptions public inline Convolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,std::string pName,int pLoadflag) Convolution2D\uc758 \uc0dd\uc131\uc790. public inline Convolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding,std::string pName,int pLoadflag) Convolution2D\uc758 \uc0dd\uc131\uc790. public inline Convolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2,std::string pName,int pLoadflag) Convolution2D\uc758 \uc0dd\uc131\uc790. public inline virtual ~Convolution2D () Convolution2D\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding1, padding2\uc73c\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud558\uace0 \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Convolution2D\uc758 ForwardPropagate \uba54\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) CONVOLUTION_2D\uc758 BackPropagate \uba54\uc18c\ub4dc. public inline int * GetStrideList () public inline int * GetPaddingList () Members public inline Convolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,std::string pName,int pLoadflag) Convolution2D\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2\ub85c Alloc\ud55c\ub2e4. Parameters pInput Convolution\ud560 Operator pWeight Convolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight, int stride1, int stride2, int padding1, int padding2) public inline Convolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding,std::string pName,int pLoadflag) Convolution2D\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding\ub85c Alloc\ud55c\ub2e4. Parameters pInput Convolution\ud560 Operator pWeight Convolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 padding padding \ud560 \uac12. height, width \ubaa8\ub450 \uc774 \uac12\uc73c\ub85c \ud55c\ub2e4. pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight, int stride1, int stride2, int padding1, int padding2) public inline Convolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2,std::string pName,int pLoadflag) Convolution2D\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding1, padding2\ub85c Alloc\ud55c\ub2e4. Parameters pInput Convolution\ud560 Operator pWeight Convolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 padding1 height padding\uac12 padding2 width padding\uac12 pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight, int stride1, int stride2, int padding1, int padding2) public inline virtual ~Convolution2D () Convolution2D\uc758 \uc18c\uba78\uc790. Delete\ub9e4\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uac12\ub4e4\uc744 \ud574\uc81c\ud55c\ub2e4. void Delete() public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding1, padding2\uc73c\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. pInput\uacfc pWeight\uc758 Shape\uacfc stride, padding\uac12\uc73c\ub85c output\uc73c\ub85c Result\uc640 Delta\ub85c \uc0ac\uc6a9 \ud560 Tensor\uc758 Shape\uc744 \uc815\uc758\ud55c\ub2e4. Parameters pInput Convolution\ud560 Operator pWeight Convolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 padding1 height padding\uac12 padding2 width padding\uac12 public inline void Delete () GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud558\uace0 \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. inputTensorDesc, outputTensorDesc,deltaDesc, inputDeltaDesc, convDesc, filterDesc,filterDeltaDesc\ub4e4\uc744 \uc0ad\uc81c\ud558\uace0 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. cudnn\uc5f0\uc0b0\uc744 \uc704\ud574 \ud560\ub2f9 \ud588\ub358 \uba54\ubaa8\ub9ac\ub4e4\uc744 \ud574\uc81c\uc2dc\ud0a8\ub2e4. public inline virtual int ForwardPropagate (int pTime) Convolution2D\uc758 ForwardPropagate \uba54\uc18c\ub4dc. weight(filter size = rowsizeOfWeight * colsizeOfWeight)\uc640 input\uc758 \uacf1\ud55c \uac12\uc744 result\uc5d0 \ub354\ud574 \ub123\ub294\ub2e4. \uc774\ub54c m_stride\uac12\ub4e4 \ub9cc\ud07c \uc774\ub3d9\ud558\uba70 result\ub97c \uacc4\uc0b0\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) CONVOLUTION_2D\uc758 BackPropagate \uba54\uc18c\ub4dc. Convolution\uc758 \ubbf8\ubd84 \uac12(weight * this_delta, input * this_delta)\uc744 \uacc4\uc0b0\ud558\uc5ec input_delta\uc640 weight_gradient\uc5d0 \uac01\uac01 \ub354\ud574 \ub123\ub294\ub2e4. \uc774\ub54c m_stride\uac12\ub4e4 \ub9cc\ud07c \uc774\ub3d9\ud558\uba70 \ubbf8\ubd84 \uac12\uc744 \ub123\uc744 \uc704\uce58\ub97c \uacc4\uc0b0\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline int * GetStrideList () public inline int * GetPaddingList () class ConvolutionLayer2D \u00b6 class ConvolutionLayer2D : public Module< DTYPE > \uad6c\uc131\ud574 2-Dimensional Convolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 2-Dimensional convolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4 Summary Members Descriptions public inline ConvolutionLayer2D ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPadding,int use_bias,std::string pName) ConvolutionLayer2D \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline virtual ~ConvolutionLayer2D () ConvolutionLayer2D \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPaddingRow,int pPaddingCol,int use_bias,std::string pName) 2D convolution Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Members public inline ConvolutionLayer2D ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPadding,int use_bias,std::string pName) ConvolutionLayer2D \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 ConvouutionLayer2D \ud074\ub798\uc2a4\uc758 Alloc \ud568\uc218\ub97c \ud638\ucd9c\ud55c\ub2e4. See also : Convolution2D ::Alloc(Operator *pInput, int pNumInputChannel, int pNumOutputChannel, int pNumKernelRow, int pNumKernelCol, int pStrideRow, int pStrideCol, int pPaddingRow, int pPaddingCol, int use_bias, std::string pName) public inline virtual ~ConvolutionLayer2D () ConvolutionLayer2D \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ub2e8, \ub3d9\uc801 \ud560\ub2f9 \ubc1b\uc740 Operator\ub4e4\uc740 NeuralNetwork\uc5d0\uc11c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. public inline int Alloc ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPaddingRow,int pPaddingCol,int use_bias,std::string pName) 2D convolution Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Input Operator\uc758 Element\uc5d0 \ub300\ud574 2D Convolution\uc744 \uc218\ud589\ud55c\ub2e4. Input Operator\uc758 Element\uc5d0 \ub300\ud574 Weight\ub97c \uc774\uc6a9\ud574 2\ucc28\uc6d0 \ud569\uc131 \uacf1(2D Convolution)\uc744 \uc218\ud589\ud558\uace0 Bias\uac00 \uc874\uc7ac\ud560 \uc2dc Bias\ub97c \ud569(Column Wise Addition)\ud574 Output Operator\ub85c \ub0b4\ubcf4\ub0b4\ub294 layer\ub97c \uad6c\uc131\ud55c\ub2e4. Parameters pInput \ud574\ub2f9 Layer\uc758 Input\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pNumInputChannel \ud574\ub2f9 Layer\uc758 Input Operator\uc758 Channel\uc758 \uac2f\uc218, Input Channel\uc5d0 \ub300\ud55c Dimension pNumOutputChannel \ud574\ub2f9 Layer\uc758 Output Operator\uc758 Channel\uc758 \uac2f\uc218, Output Channel\uc5d0 \ub300\ud55c Dimension pNumKernelRow 2D Convolution Layer \ucee4\ub110\uc758 Row Size pNumKernelCol 2D Convolution Layer \ucee4\ub110\uc758 Column Size pStrideRow 2D Convolution Layer\uc758 Row Stride Size pStrideCol 2D Convolution Layer\uc758 Column Stride Size pPaddingRow 2D Convolution Layer\uc758 Row Padding \uac12 pPaddingCol 2D Convolution Layer\uc758 Column Padding \uac12 use_bias Bias \uc0ac\uc6a9 \uc720\ubb34, 0\uc77c \uc2dc \uc0ac\uc6a9 \uc548 \ud568, 0\uc774 \uc544\ub2d0 \uc2dc \uc0ac\uc6a9 pName Module\uc758 \uc774\ub984 Returns TRUE See also : Convolution2D ::Convolution2D ( Operator *pInput, Operator *pWeight, int stride1, int stride2, std::string pName = \"NO NAME\") AddColWise ::AddColWise(Operator *pInput, Operator *pBias, std::string pName) Module ::AnalyzeGraph(Operator *pResultOperator) class CrossEntropy \u00b6 class CrossEntropy : public LossFunction< DTYPE > Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 Cross Entropy \uacc4\uc0b0\uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4 Summary Members Descriptions public inline CrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,int epsilon) CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline CrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline CrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,int epsilon,std::string pName) CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline ~CrossEntropy () CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline virtual int Alloc ( Operator < DTYPE > * pOperator,int epsilon) CrossEntropy Lossfunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ub3d9\uc801 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) CrossEntropy LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) CrossEntropy LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline CrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,int epsilon) CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 epsilon\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec CrossEntropy ::Alloc(Operator *pOperator, int epsilon) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator CrossEntropy ::Alloc(Operator *pOperator, int epsilon) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator epsilon \ub354\ubbf8 \ubcc0\uc218, \uac12\uc744 \ubbf8 \uc9c0\uc815\uc2dc 1e-6f\ub85c \ucd08\uae30\ud654 Returns \uc5c6\uc74c See also : CrossEntropy ::Alloc(Operator *pOperator, int epsilon) public inline CrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 1e-6f\uc5d0 \ud574\ub2f9\ud558\ub294 epsilon \uac12\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec CrossEntropy ::Alloc(Operator *pOperator, int epsilon) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator CrossEntropy ::Alloc(Operator *pOperator, int epsilon) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pName LossFunction\uc758 \uc774\ub984 Returns \uc5c6\uc74c See also : CrossEntropy ::Alloc(Operator *pOperator, int epsilon) public inline CrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,int epsilon,std::string pName) CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 epsilon\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec CrossEntropy ::Alloc(Operator *pOperator, int epsilon) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator CrossEntropy ::Alloc(Operator *pOperator, int epsilon) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator epsilon \ub354\ubbf8 \ubcc0\uc218 pName LossFunction\uc758 \uc774\ub984 Returns \uc5c6\uc74c See also : CrossEntropy ::Alloc(Operator *pOperator, int epsilon) public inline ~CrossEntropy () CrossEntropy LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline virtual int Alloc ( Operator < DTYPE > * pOperator,int epsilon) CrossEntropy Lossfunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ub3d9\uc801 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Operator\ub97c Input Operator\uc5d0 \ud560\ub2f9\ud558\uace0 \ucd08\uae30\ud654 \ub41c Result \ud150\uc11c\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uc0dd\uc131\ud55c\ub2e4. Parameters pOperator CrossEntropy LossFunction\uc758 \uc785\ub825\uc5d0 \ud574\ub2f9\ud558\ub294 Operator epsilon \ub354\ubbf8 \ubcc0\uc218 Returns TRUE public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) CrossEntropy LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 \uacb0\uacfc \uac12\uc744 \ub808\uc774\ube14 \uac12\uacfc \ube44\uad50\ud574 Cross Entropy\ub97c \uad6c\ud55c\ub2e4 Parameters pTime \uc785\ub825 Tensor\uc758 Time \ucd95\uc758 Dimension Returns \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uacb0\uacfc \uac12\uc5d0 \ub300\ud55c Cross Entropy public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) CrossEntropy LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 CrossEntropy LossFunction\uc5d0 \ub300\ud55c \uc785\ub825 Tensor\uc758 Gradient\ub97c \uacc4\uc0b0\ud55c\ub2e4 Parameters pTime \uc785\ub825 Tensor\uc758 Time \ucd95\uc758 Dimension Returns NULL class DataLoader \u00b6 Summary Members Descriptions public DataLoader ( Dataset < DTYPE > * dataset,int batchSize,int useShuffle,int numOfWorker,int dropLast) public virtual ~DataLoader () public void StartProcess () public void StopProcess () public void DistributeIdxOfData2Thread () public virtual void MakeAllOfIndex (std::vector< int > * pAllOfIndex) public virtual void DataPreprocess () public void Push2IdxBuffer (std::vector< int > * setOfIdx) public std::vector< int > * GetIdxSetFromIdxBuffer () public Tensor < DTYPE > * Concatenate (std::queue< Tensor < DTYPE > * > & setOfData) public void Push2GlobalBuffer (std::vector< Tensor < DTYPE > * > * preprocessedData) public std::vector< Tensor < DTYPE > * > * GetDataFromGlobalBuffer () public inline int GetBatchSize () public inline int GetWorkingSignal () public inline int GetNumOfEachDatasetMember () public inline Dataset < DTYPE > * GetDataset () Members public DataLoader ( Dataset < DTYPE > * dataset,int batchSize,int useShuffle,int numOfWorker,int dropLast) public virtual ~DataLoader () public void StartProcess () public void StopProcess () public void DistributeIdxOfData2Thread () public virtual void MakeAllOfIndex (std::vector< int > * pAllOfIndex) public virtual void DataPreprocess () public void Push2IdxBuffer (std::vector< int > * setOfIdx) public std::vector< int > * GetIdxSetFromIdxBuffer () public Tensor < DTYPE > * Concatenate (std::queue< Tensor < DTYPE > * > & setOfData) public void Push2GlobalBuffer (std::vector< Tensor < DTYPE > * > * preprocessedData) public std::vector< Tensor < DTYPE > * > * GetDataFromGlobalBuffer () public inline int GetBatchSize () public inline int GetWorkingSignal () public inline int GetNumOfEachDatasetMember () public inline Dataset < DTYPE > * GetDataset () class Dataset \u00b6 Summary Members Descriptions public Dataset () public virtual ~Dataset () public virtual void Alloc () public virtual void Dealloc () public virtual std::vector< Tensor < DTYPE > * > * GetData (int idx) public virtual std::vector< Tensor < DTYPE > * > * GetDataOfPositiveLabel (int anchorIdx,int * pPosIdx) public virtual std::vector< Tensor < DTYPE > * > * GetDataOfNegativeLabel (int anchorIdx,int * pNegIdx) public void SetLabel (const int * pLabel,int noLabel) public void SetLabel (const unsigned char * pLabel,int noLabel) public inline virtual int GetLabel (int idx) public inline virtual int GetLength () public int GetNumOfDatasetMember () public inline virtual void CopyData (int idx,DTYPE * pDest) public inline virtual void SetPosNegIndices (std::vector< int > * pvPosIndex,std::vector< int > * pvNegIndex) public inline std::vector< int > & GetPositiveIndices () public inline std::vector< int > & GetNegativeIndices () public inline virtual int GetPositiveIndex (int idx) public inline virtual int GetNegativeIndex (int idx) Members public Dataset () public virtual ~Dataset () public virtual void Alloc () public virtual void Dealloc () public virtual std::vector< Tensor < DTYPE > * > * GetData (int idx) public virtual std::vector< Tensor < DTYPE > * > * GetDataOfPositiveLabel (int anchorIdx,int * pPosIdx) public virtual std::vector< Tensor < DTYPE > * > * GetDataOfNegativeLabel (int anchorIdx,int * pNegIdx) public void SetLabel (const int * pLabel,int noLabel) public void SetLabel (const unsigned char * pLabel,int noLabel) public inline virtual int GetLabel (int idx) public inline virtual int GetLength () public int GetNumOfDatasetMember () public inline virtual void CopyData (int idx,DTYPE * pDest) public inline virtual void SetPosNegIndices (std::vector< int > * pvPosIndex,std::vector< int > * pvNegIndex) public inline std::vector< int > & GetPositiveIndices () public inline std::vector< int > & GetNegativeIndices () public inline virtual int GetPositiveIndex (int idx) public inline virtual int GetNegativeIndex (int idx) class Dropout \u00b6 class Dropout : public Operator< DTYPE > Summary Members Descriptions public inline Dropout ( Operator < DTYPE > * pInput) public inline Dropout ( Operator < DTYPE > * pInput,float pDroprate,std::string pName,int pLoadflag) public inline ~Dropout () public inline int Alloc ( Operator < DTYPE > * pInput,float pDroprate,int pLoadflag) public inline void Delete () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline Dropout ( Operator < DTYPE > * pInput) public inline Dropout ( Operator < DTYPE > * pInput,float pDroprate,std::string pName,int pLoadflag) public inline ~Dropout () public inline int Alloc ( Operator < DTYPE > * pInput,float pDroprate,int pLoadflag) public inline void Delete () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class FewShotClassifier \u00b6 Summary Members Descriptions public FewShotClassifier (int inputDim,int featureDim,const std::vector< std::string > vClassName, NeuralNetwork < float > * pNN,int noRef,int * pRefLabel,float * pRefSample,int batchSize) public FewShotClassifier (int inputDim,int featureDim,const std::vector< std::string > vClassName, NeuralNetwork < float > * pNN, KNearestNeighbor * kNN) public std::string Recognize (float * pInputSample,int k) public float GetAccuracy (int noTestSample,float * pTestSample,int * pLabel) public void AddReference (const char * className,float * pRefSample) public int FindClass (const char * className) Members public FewShotClassifier (int inputDim,int featureDim,const std::vector< std::string > vClassName, NeuralNetwork < float > * pNN,int noRef,int * pRefLabel,float * pRefSample,int batchSize) public FewShotClassifier (int inputDim,int featureDim,const std::vector< std::string > vClassName, NeuralNetwork < float > * pNN, KNearestNeighbor * kNN) public std::string Recognize (float * pInputSample,int k) public float GetAccuracy (int noTestSample,float * pTestSample,int * pLabel) public void AddReference (const char * className,float * pRefSample) public int FindClass (const char * className) class GAN \u00b6 class GAN : public NeuralNetwork< DTYPE > Summary Members Descriptions public GAN () public virtual ~GAN () public int AllocLabel (float plabelValue) public NeuralNetwork < DTYPE > * SetGenerator ( NeuralNetwork < DTYPE > * pGen) public NeuralNetwork < DTYPE > * SetDiscriminator ( NeuralNetwork < DTYPE > * pDiscLoss) public Tensorholder < DTYPE > * SetLabel ( Tensorholder < DTYPE > * pLabel) public Switch < DTYPE > * SetSwitch ( Switch < DTYPE > * pSwitch) public void SetGANLossFunctions ( LossFunction < DTYPE > * pGenLoss, LossFunction < DTYPE > * pDiscLoss) public LossFunction < DTYPE > * SetGeneratorLossFunction ( LossFunction < DTYPE > * pGenLoss) public LossFunction < DTYPE > * SetDiscriminatorLossFunction ( LossFunction < DTYPE > * pDiscLoss) public void SetGANOptimizers ( Optimizer < DTYPE > * pGenOpt, Optimizer < DTYPE > * pDiscOpt) public Optimizer < DTYPE > * SetGeneratorOptimizer ( Optimizer < DTYPE > * pGenOpt) public Optimizer < DTYPE > * SetDiscriminatorOptimizer ( Optimizer < DTYPE > * pDiscOpt) public NeuralNetwork < DTYPE > * GetGenerator () public NeuralNetwork < DTYPE > * GetDiscriminator () public Tensorholder < DTYPE > * GetLabel () public Switch < DTYPE > * GetSwitch () public LossFunction < DTYPE > * GetGeneratorLossFunction () public LossFunction < DTYPE > * GetDiscriminatorLossFunction () public Optimizer < DTYPE > * GetGeneratorOptimizer () public Optimizer < DTYPE > * GetDiscriminatorOptimizer () public int TrainGenerator () public int TrainDiscriminator () public int Generate () public virtual int TrainGeneratorOnCPU () public virtual int TrainDiscriminatorOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnCPU () public int GenerateOnCPU () public virtual int TrainGeneratorOnGPU () public virtual int TrainDiscriminatorOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnGPU () public int GenerateOnGPU () public int ResetParameterGradient () public int ResetGeneratorLossFunctionResult () public int ResetGeneratorLossFunctionGradient () public int ResetDiscriminatorLossFunctionResult () public int ResetDiscriminatorLossFunctionGradient () public void Clip (float min,float max) Members public GAN () public virtual ~GAN () public int AllocLabel (float plabelValue) public NeuralNetwork < DTYPE > * SetGenerator ( NeuralNetwork < DTYPE > * pGen) public NeuralNetwork < DTYPE > * SetDiscriminator ( NeuralNetwork < DTYPE > * pDiscLoss) public Tensorholder < DTYPE > * SetLabel ( Tensorholder < DTYPE > * pLabel) public Switch < DTYPE > * SetSwitch ( Switch < DTYPE > * pSwitch) public void SetGANLossFunctions ( LossFunction < DTYPE > * pGenLoss, LossFunction < DTYPE > * pDiscLoss) public LossFunction < DTYPE > * SetGeneratorLossFunction ( LossFunction < DTYPE > * pGenLoss) public LossFunction < DTYPE > * SetDiscriminatorLossFunction ( LossFunction < DTYPE > * pDiscLoss) public void SetGANOptimizers ( Optimizer < DTYPE > * pGenOpt, Optimizer < DTYPE > * pDiscOpt) public Optimizer < DTYPE > * SetGeneratorOptimizer ( Optimizer < DTYPE > * pGenOpt) public Optimizer < DTYPE > * SetDiscriminatorOptimizer ( Optimizer < DTYPE > * pDiscOpt) public NeuralNetwork < DTYPE > * GetGenerator () public NeuralNetwork < DTYPE > * GetDiscriminator () public Tensorholder < DTYPE > * GetLabel () public Switch < DTYPE > * GetSwitch () public LossFunction < DTYPE > * GetGeneratorLossFunction () public LossFunction < DTYPE > * GetDiscriminatorLossFunction () public Optimizer < DTYPE > * GetGeneratorOptimizer () public Optimizer < DTYPE > * GetDiscriminatorOptimizer () public int TrainGenerator () public int TrainDiscriminator () public int Generate () public virtual int TrainGeneratorOnCPU () public virtual int TrainDiscriminatorOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnCPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnCPU () public int GenerateOnCPU () public virtual int TrainGeneratorOnGPU () public virtual int TrainDiscriminatorOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutRealOnGPU () public virtual int ComputeGradientOfDiscriminatorAboutFakeOnGPU () public int GenerateOnGPU () public int ResetParameterGradient () public int ResetGeneratorLossFunctionResult () public int ResetGeneratorLossFunctionGradient () public int ResetDiscriminatorLossFunctionResult () public int ResetDiscriminatorLossFunctionGradient () public void Clip (float min,float max) class GaussianNoiseGenerator \u00b6 class GaussianNoiseGenerator : public NoiseGenerator< DTYPE > Summary Members Descriptions public inline GaussianNoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,float mean,float stddev,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline GaussianNoiseGenerator ( Shape * pShape,float mean,float stddev,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline GaussianNoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,float mean,float stddev,float pTrunc,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline GaussianNoiseGenerator ( Shape * pShape,float mean,float stddev,float pTrunc,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline ~GaussianNoiseGenerator () public inline void StartProduce () public inline void StopProduce () public inline int GenerateNoise () public inline int AddNoise2Buffer ( Tensor < DTYPE > * noise) public inline Tensor < DTYPE > * GetNoiseFromBuffer () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline GaussianNoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,float mean,float stddev,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline GaussianNoiseGenerator ( Shape * pShape,float mean,float stddev,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline GaussianNoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,float mean,float stddev,float pTrunc,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline GaussianNoiseGenerator ( Shape * pShape,float mean,float stddev,float pTrunc,IsTruncated pTruncated,IsUseTime pAnswer,std::string pName) public inline ~GaussianNoiseGenerator () public inline void StartProduce () public inline void StopProduce () public inline int GenerateNoise () public inline int AddNoise2Buffer ( Tensor < DTYPE > * noise) public inline Tensor < DTYPE > * GetNoiseFromBuffer () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class GlobalAvaragePooling2D \u00b6 class GlobalAvaragePooling2D : public Operator< DTYPE > Row * Colunm \uacf5\uac04\uc744 GlobalAvaragePooling\ud558\ub294 \ud074\ub798\uc2a4. Summary Members Descriptions public inline GlobalAvaragePooling2D ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) GlobalAvaragePooling2D\uc758 \uc0dd\uc131\uc790. public inline virtual ~GlobalAvaragePooling2D () GlobalAvaragePooling2D\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) GlobalAvaragePooling2D\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc public inline virtual int BackPropagate (int pTime) GlobalAvaragePooling2D\uc758 BackPropagate \ub9e4\uc18c\ub4dc Members public inline GlobalAvaragePooling2D ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) GlobalAvaragePooling2D\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput GlobalAvaragePooling2D\ud560 \ub300\uc0c1 Operator . pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput) . public inline virtual ~GlobalAvaragePooling2D () GlobalAvaragePooling2D\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. Parameters pInput \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int ForwardPropagate (int pTime) GlobalAvaragePooling2D\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc input\uc758 row, col\uc0c1\uc758 \uac12\ub4e4\ub4e4 \ubaa8\ub450 \ub354\ud558\uace0 m_divisor\ub85c \ub098\ub208 \uac12\uc744 result Tensor\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime pInput\uc758 m_timesize\uac12, default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) GlobalAvaragePooling2D\uc758 BackPropagate \ub9e4\uc18c\ub4dc Input_grad\uc5d0 \uacc4\uc0b0\ud55c Gradient / m_divisor \ud55c \uac12\uc744 \ub354\ud55c\ub2e4. Parameters pTime pInput\uc758 m_timesize\uac12, default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class GradientDescentOptimizer \u00b6 class GradientDescentOptimizer : public Optimizer< DTYPE > Summary Members Descriptions public inline GradientDescentOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection) GradientDescentOptimizer\uc758 \uc0dd\uc131\uc790. public inline GradientDescentOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,OptimizeDirection pOptimizeDirection) GradientDescentOptimizer\uc758 \uc0dd\uc131\uc790. public inline GradientDescentOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,float weightDecayRate,OptimizeDirection pOptimizeDirection) GradientDescentOptimizer\uc758 \uc0dd\uc131\uc790. public inline ~GradientDescentOptimizer () GradientDescentOptimizer\uc758 \uc18c\uba78\uc790 public inline int Alloc () Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc public inline int Alloc (float momentum) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc public inline int Delete () public inline void InitializeAttributeForGPU (unsigned int idOfDevice) m_aaVelocity\ub0b4\ubd80\uc758 Tensor\uc758 device\ub97c idOfDevice\ubc88\uc9f8 GPU\ub85c \ubc14\uafbc\ub2e4. public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * pVelocity) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Members public inline GradientDescentOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection) GradientDescentOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer pLearningRate Optimizer\uc758 learning rate pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc() public inline GradientDescentOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,OptimizeDirection pOptimizeDirection) GradientDescentOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 momentum\uac12\uc744 \ud30c\ub77c\ubbf8\ud130\ub85c \ud558\ub294 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pParameterContainer pLearningRate Optimizer\uc758 learning rate momentum Optimize\uc758 momentum pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(float momentum) public inline GradientDescentOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,float weightDecayRate,OptimizeDirection pOptimizeDirection) GradientDescentOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 momentum\uac12\uc744 \ud30c\ub77c\ubbf8\ud130\ub85c \ud558\ub294 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pParameterContainer pLearningRate Optimizer\uc758 learning rate momentum Optimize\uc758 momentum weightDecayRate @paramp OptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(float momentum) public inline ~GradientDescentOptimizer () GradientDescentOptimizer\uc758 \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline int Alloc () Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_ppParameter\uc640 m_numOfParameter\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE See also : Container < Operator > GetTrainableTensor() See also : int GetTrainableTensorDegree() public inline int Alloc (float momentum) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_aaVelocity, m_momentum\ub97c \ucd08\uae30\ud654 \ud55c\ub2e4. m_aaVelocity\uc5d0 m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. Parameters momentum Optimizer\uc758 monentum\uac12 Returns \uc131\uacf5 \uc2dc TRUE See also : int Alloc() public inline int Delete () public inline void InitializeAttributeForGPU (unsigned int idOfDevice) m_aaVelocity\ub0b4\ubd80\uc758 Tensor\uc758 device\ub97c idOfDevice\ubc88\uc9f8 GPU\ub85c \ubc14\uafbc\ub2e4. Parameters idOfDevice \uc0ac\uc6a9 \ud558\ub294 GPU\ubc88\ud638 public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_momentum\uac12\uc5d0 \ub530\ub77c \ub2e4\ub978 UpdataParameter\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE See also : int UpdateParameter(Operator *pParameter) See also : int UpdateParameter(Operator *pParameter, Tensor *pVelocity) public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Parameter\uc548\uc5d0 \uc788\ub294 Tensor\uc758 \uc0c8\ub85c \uacc4\uc0b0\ub41c gradinet\uac12\uacfc learning_rate\uc758 \uacf1, weightDecayRate\uc640 \uae30\uc874 weight(trainable_date)\uc758 \uacf1\uc73c\ub85c weight(trainable_date)\uac12\uc744 \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 Returns \uc131\uacf5 \uc2dc TRUE public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * pVelocity) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Parameter\uc548\uc5d0 \uc788\ub294 Tensor\uc758 \uc0c8\ub85c \uacc4\uc0b0\ub41c gradinet\uac12\uacfc learning_rate\uc758 \uacf1, weightDecayRate\uc640 \uae30\uc874 weight(trainable_date)\uc758 \uacf1\uc73c\ub85c weight(trainable_date)\uac12\uc744 \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. momentum\uacfc pVelocity\uc758 \uacf1\uacfc learnung_rate\uc640 gradient\uc758 \uacf1\uc73c\ub85c pVelocity\uc758 \uac12\uc744 \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pVelocity \uc5c5\ub370\uc774\ud2b8 \ud560 pVelocity Returns \uc131\uacf5 \uc2dc TURE class HingeLoss \u00b6 class HingeLoss : public LossFunction< DTYPE > Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 Hinge Loss \uacc4\uc0b0 \uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4 Summary Members Descriptions public inline HingeLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,float theta) HingeLoss LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline HingeLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) HingeLoss LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline HingeLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,float theta,std::string pName) HingeLoss LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline ~HingeLoss () HingeLoss LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pOperator,float theta) HingeLoss Lossfunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ub3d9\uc801 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual void Delete () LossFunction \ud074\ub798\uc2a4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int timeIdx) GPU \ub3d9\uc791 \ubaa8\ub4dc\uc5d0\uc11c\uc758 HingeLoss LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) GPU \ub3d9\uc791 \ubaa8\ub4dc\uc5d0\uc11c\uc758 HingeLoss LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline HingeLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,float theta) HingeLoss LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 theta\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec HingeLoss ::Alloc(Operator *pOperator, float theta) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator HingeLoss ::Alloc(Operator *pOperator, float theta) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator theta alloc \uba54\uc18c\ub4dc\uc758 theta \uac12\uc73c\ub85c \uc804\ub2ec\ud560 \ud30c\ub77c\ubbf8\ud130, \uac12\uc744 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc744 \uc2dc 1.f\ub85c \ucd08\uae30\ud654 Returns \uc5c6\uc74c See also : HingeLoss ::Alloc(Operator *pOperator, float theta) public inline HingeLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) HingeLoss LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 1.f\uc5d0 \ud574\ub2f9\ud558\ub294 theta \uac12 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec HingeLoss ::Alloc(Operator *pOperator, float theta) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator HingeLoss ::Alloc(Operator *pOperator, float theta) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pName LossFunction\uc758 \uc774\ub984 Returns \uc5c6\uc74c See also : HingeLoss ::Alloc(Operator *pOperator, float theta) public inline HingeLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,float theta,std::string pName) HingeLoss LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 theta\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec HingeLoss ::Alloc(Operator *pOperator, float theta) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator HingeLoss ::Alloc(Operator *pOperator, float theta) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator theta alloc \uba54\uc18c\ub4dc\uc758 theta \uac12\uc73c\ub85c \uc804\ub2ec\ud560 \ud30c\ub77c\ubbf8\ud130 See also : HingeLoss ::Alloc(Operator *pOperator, float theta) public inline ~HingeLoss () HingeLoss LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline int Alloc ( Operator < DTYPE > * pOperator,float theta) HingeLoss Lossfunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ub3d9\uc801 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Operator\ub97c Input Operator\uc5d0 \ud560\ub2f9\ud558\uace0 \ucd08\uae30\ud654 \ub41c Result \ud150\uc11c\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uc0dd\uc131\ud55c\ub2e4. \uc5ed\uc804\ud30c\ub97c \uc704\ud55c \uc778\ub371\uc2a4 \ub354\ubbf8 \ud150\uc11c\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uc0dd\uc131\ud558\uace0 theta \uac12\uc744 \ucd08\uae30\ud654\ud55c\ub2e4. Parameters pOperator CrossEntropy LossFunction\uc758 \uc785\ub825\uc5d0 \ud574\ub2f9\ud558\ub294 Operator theta LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218 theta\uc5d0 \ud560\ub2f9\ud560 \uac12 Returns TRUE public inline virtual void Delete () LossFunction \ud074\ub798\uc2a4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Index for BackPropagation Tensor\uac00 \uc874\uc7ac\ud560 \uacbd\uc6b0 Tensor\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud558\uace0 0\uc73c\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int timeIdx) GPU \ub3d9\uc791 \ubaa8\ub4dc\uc5d0\uc11c\uc758 HingeLoss LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 \uacb0\uacfc \uac12\uc744 \ub808\uc774\ube14 \uac12\uacfc \ube44\uad50\ud574 Hinge Loss \uac12\uc744 \uad6c\ud55c\ub2e4 Parameters timeIdx Time \ucd95\uc758 \uc778\ub371\uc2a4, \ubbf8\uc9c0\uc815 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 Returns \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c \uacb0\uacfc \uac12\uc5d0 \ub300\ud55c Hinge Loss public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) GPU \ub3d9\uc791 \ubaa8\ub4dc\uc5d0\uc11c\uc758 HingeLoss LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 HingeLoss LossFunction\uc5d0 \ub300\ud55c \uc785\ub825 Tensor\uc758 Gradient\ub97c \uacc4\uc0b0\ud55c\ub2e4 Parameters pTIme Time \ucd95\uc758 \uc778\ub371\uc2a4, \ubbf8\uc9c0\uc815 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 Returns NULL class KNearestNeighbor \u00b6 Summary Members Descriptions public inline KNearestNeighbor () public KNearestNeighbor (int dim,int noClass,int noRef,int * pRefLabel,float * pRefVector) public virtual ~KNearestNeighbor () public void AddReference (int label,float * pRefVector) public int Recognize (float * pInput,int k) public float GetAccuracy (int noTestSamples,int * pTestLabels,float * pTestVectors,int k) Members public inline KNearestNeighbor () public KNearestNeighbor (int dim,int noClass,int noRef,int * pRefLabel,float * pRefVector) public virtual ~KNearestNeighbor () public void AddReference (int label,float * pRefVector) public int Recognize (float * pInput,int k) public float GetAccuracy (int noTestSamples,int * pTestLabels,float * pTestVectors,int k) class Linear \u00b6 class Linear : public Module< DTYPE > \uad6c\uc131\ud574 fully connected layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 fully connected layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4 Summary Members Descriptions public inline Linear ( Operator < DTYPE > * pInput,int pNumInputCol,int pNumOutputCol,int use_bias,std::string pName) Linear \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline virtual ~Linear () Linear \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput,int pNumInputCol,int pNumOutputCol,int use_bias,std::string pName) Linear(Fully Connected) Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Members public inline Linear ( Operator < DTYPE > * pInput,int pNumInputCol,int pNumOutputCol,int use_bias,std::string pName) Linear \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 Linear \ud074\ub798\uc2a4\uc758 Alloc \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. See also : linear ::Alloc(Operator *pInput, int pNumInputCol, int pNumOutputCol, int use_bias, std::string pName) public inline virtual ~Linear () Linear \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ub2e8, \ub3d9\uc801 \ud560\ub2f9 \ubc1b\uc740 Operator\ub4e4\uc740 NeuralNetwork\uc5d0\uc11c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. public inline int Alloc ( Operator < DTYPE > * pInput,int pNumInputCol,int pNumOutputCol,int use_bias,std::string pName) Linear(Fully Connected) Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Input Operator\uc758 Element\uc5d0 \ub300\ud574 Weight\ub97c \uc774\uc6a9\ud574 \ud589\ub82c \uacf1(Matrix Multiplication)\uc744 \uc218\ud589\ud558\uace0 Bias\uac00 \uc874\uc7ac\ud560 \uc2dc Bias\ub97c \ud569(Column Wise Addition)\ud574 Output Operator\ub85c \ub0b4\ubcf4\ub0b4\ub294 layer\ub97c \uad6c\uc131\ud55c\ub2e4. Parameters pInput \ud574\ub2f9 Layer\uc758 Input\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pNumInputCol \ud574\ub2f9 Layer\uc758 Input Operator\uc758 Column\uc758 \uac2f\uc218, Input Column\uc5d0 \ub300\ud55c Dimension pNumOutputCol \ud574\ub2f9 Layer\uc758 Output Operator\uc758 Column\uc758 \uac2f\uc218, Output Column\uc5d0 \ub300\ud55c Dimension use_bias Bias \uc0ac\uc6a9 \uc720\ubb34, 0\uc77c \uc2dc \uc0ac\uc6a9 \uc548 \ud568, 0\uc774 \uc544\ub2d0 \uc2dc \uc0ac\uc6a9 pName Module\uc758 \uc774\ub984 Returns TRUE See also : MatMul ::MatMul(Operator *pWeight, Operator *pInput, std::string pName) AddColWise ::AddColWise(Operator *pInput, Operator *pBias, std::string pName) Module ::AnalyzeGraph(Operator *pResultOperator) class LongArray \u00b6 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4. \ud559\uc2b5\uc5d0 \uc0ac\uc6a9 \ub420 Tensor\uc758 \ub9f4\ubc84\ubcc0\uc218 \uc911 LongArray\ub97c \uc815\uc758\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4. \uc2e4\uc9c8\uc801\uc73c\ub85c Tensor\ud074\ub798\uc2a4\uc758 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\uae30\uc704\ud55c \ud074\ub798\uc2a4. \ub370\uc774\ud130\ub97c \ucd08\uae30\ud654\ud558\uace0 CPU\uc640 GPU\uac04 \ub370\uc774\ud130\uc758 \uc774\ub3d9\uc744 \uac00\ub2a5\ud558\uac8c \ud55c\ub2e4. Summary Members Descriptions public LongArray (unsigned int pCapacity) public LongArray (unsigned int pTimeSize,unsigned int pCapacityPerTime) \uc785\ub825\ubc1b\uc740 TimeSize\uc640 Capacity\ud06c\uae30\uc758 LongArray\ub97c Alloc\ud558\ub294 \uc0dd\uc131\uc790. public LongArray ( LongArray * pLongArray) LongArray\ub97c deep copy\ud558\ub294 \uba54\uc18c\ub4dc. public virtual ~LongArray () LongArray\uc758 \uc18c\uba78\uc790. public int GetCapacity () public int GetTimeSize () public int GetCapacityPerTime () public DTYPE GetElement (unsigned int index) LongArray\uc758 \ud2b9\uc815 \uc6d0\uc18c\uc758 \uac12\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc. public DTYPE & operator[] (unsigned int index) []\uc5f0\uc0b0\uc790 Overloading public Device GetDevice () public int GetDeviceID () public DTYPE * GetCPULongArray (unsigned int pTime) m_aaHostLongArray\uc911 pTime\uc5d0 \uc788\ub294 LongArray\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc. public int SetDeviceCPU () LongArray\uc758 m_Device\ub97c CPU\ub85c \ubc14\uafb8\ub294 \uba54\uc18c\ub4dc. public int Save (FILE * fp) LongArray\uc758 \ub370\uc774\ud130\ub97c \ud30c\uc77c\uc5d0 \uc800\uc7a5\ud558\ub294 \uba54\uc18c\ub4dc. public int Load (FILE * fp) Members public LongArray (unsigned int pCapacity) public LongArray (unsigned int pTimeSize,unsigned int pCapacityPerTime) \uc785\ub825\ubc1b\uc740 TimeSize\uc640 Capacity\ud06c\uae30\uc758 LongArray\ub97c Alloc\ud558\ub294 \uc0dd\uc131\uc790. Parameters pTimeSize Alloc\ud560 LongArray\uc758 TimeSize pCapacity Alloc\ud560 LongArray\uc758 Capacity Returns \uc5c6\uc74c. See also : LongArray ::Alloc(unsigned int pTimeSize, unsigned int pCapacityPerTime) public LongArray ( LongArray * pLongArray) LongArray\ub97c deep copy\ud558\ub294 \uba54\uc18c\ub4dc. Parameters *pLongArray deep copy\ud560 \ub300\uc0c1 LongArray Returns \uc5c6\uc74c. See also : LongArray ::Alloc(LongArray *pLongArray) public virtual ~LongArray () LongArray\uc758 \uc18c\uba78\uc790. Delete\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud574\ub2f9 LongArray\ub97c \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc0ad\uc81c\ud55c\ub2e4 Returns \uc5c6\uc74c. See also : void LongArray ::Delete() public int GetCapacity () public int GetTimeSize () public int GetCapacityPerTime () public DTYPE GetElement (unsigned int index) LongArray\uc758 \ud2b9\uc815 \uc6d0\uc18c\uc758 \uac12\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc. \uba54\ubaa8\ub9ac\uc5d0 \uc788\ub294 LongArray\ub370\uc774\ud130 \uc911 index\ubc88\uc9f8 \uc788\ub294 \uc6d0\uc18c\uc758 \uac12\uc744 \ubc18\ud658\ud55c\ub2e4. \ub2e8, m_Device\uac00 GPU\uc774\uba74 \ubc14\ub85c \uac12\uc744 \uaebc\ub0b4\uc62c \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 CPU\ub85c \ubc14\uafd4 \uc900 \ud6c4 \uac12\uc744 \ucc3e\uc544 \ubc18\ud658\ud55c\ub2e4. Returns m_aaHostLongArray[index / m_CapacityPerTime][index % m_CapacityPerTime] See also : LongArray ::SetDeviceCPU() public DTYPE & operator[] (unsigned int index) []\uc5f0\uc0b0\uc790 Overloading m_aLongArray\uc758 \ud2b9\uc815 \uc704\uce58\uc5d0 \uc788\ub294 \uac12\uc744 return\ud560 \uc218 \uc788\uac8c \ud55c\ub2e4. \ub2e8, m_Device\uac00 GPU\uc77c \uc2dc CPU\ub85c \ubc14\uafd4 \uc900 \ud6c4 \uac12\uc744 \ucc3e\uc544 \ubc18\ud658\ud55c\ub2e4. GetElement\uc640 \ub2e4\ub974\uac8c \uc8fc\uc18c\uac12\uc744 \ubc18\ud658\ud558\uae30 \ub54c\ubb38\uc5d0 LongArray\uc758 \uac12\uc744 \ubcc0\uacbd \ud560 \uc218 \uc788\ub2e4. See also : LongArray ::SetDeviceCPU() public Device GetDevice () public int GetDeviceID () public DTYPE * GetCPULongArray (unsigned int pTime) m_aaHostLongArray\uc911 pTime\uc5d0 \uc788\ub294 LongArray\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc. m_CapacityOfLongArray\ub97c m_TimeSize\ub85c \ub098\ub208 LongArray\ube14\ub7ed \uc911 pTime\ubc88\uc9f8\uc758 LongArray\ube14\ub7ed\uc744 \ubc18\ud658\ud55c\ub2e4. \ub2e8, m_Device\uac00 GPU\uc77c \uc2dc CPU\ub85c \ubc14\uafd4 \uc900 \ud6c4 \uac12\uc744 \ucc3e\uc544 \ubc18\ud658\ud55c\ub2e4. Returns m_aaHostLongArray[pTime] See also : LongArray ::SetDeviceCPU() public int SetDeviceCPU () LongArray\uc758 m_Device\ub97c CPU\ub85c \ubc14\uafb8\ub294 \uba54\uc18c\ub4dc. m_Device\ub97c CPU\ub85c \ubc14\uafbc\ub2e4. CUDNN\uc774 \uc788\uc744 \uacbd\uc6b0 GPU \uba54\ubaa8\ub9ac\uc758 \uac12\ub4e4\uc744 CPU\uba54\ubaa8\ub9ac\ub85c \ubcf5\uc0ac\ud55c\ub2e4. Returns \uc5c6\uc74c. See also : MemcpyGPU2CPU() public int Save (FILE * fp) LongArray\uc758 \ub370\uc774\ud130\ub97c \ud30c\uc77c\uc5d0 \uc800\uc7a5\ud558\ub294 \uba54\uc18c\ub4dc. fwrite\ud568\uc218\ub97c \ud1b5\ud574 *fileForSave\uac00 \uac00\ub9ac\ud0a4\ub294 \ud30c\uc77c\uc5d0 LongArray\ub370\uc774\ud130\ub97c \uc4f4\ub2e4. \ub2e8, m_Device\uac00 GPU\uc77c \uc2dc CPU\ub85c \ubc14\uafd4 \uc900 \ud6c4 \uac12\uc744 \ucc3e\uc544 \ubc18\ud658\ud55c\ub2e4. Parameters *fileForSave \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud560 file\uc744 \uac00\ub9ac\ub294 \ud3ec\uc778\ud130. Returns \uc131\uacf5 \uc2dc TRUE. See also : LongArray ::SetDeviceCPU() public int Load (FILE * fp) class LossFunction \u00b6 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc744 \ube44\uad50\ud574 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4. Summary Members Descriptions public LossFunction (std::string pName) LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public LossFunction ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public virtual ~LossFunction () LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public virtual int Alloc ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel) LossFunction\uc758 \uc785\ub825\uacfc \ub808\uc774\ube14\uc744 \uc9c0\uc815\ud558\ub294 \uba54\uc18c\ub4dc public virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public void SetResult ( Tensor < DTYPE > * pTensor) public void SetGradient ( Tensor < DTYPE > * pTensor) public Tensor < DTYPE > * GetResult () const public Tensor < DTYPE > * GetGradient () const public Operator < DTYPE > * GetOperator () const public Tensor < DTYPE > * GetTensor () const public Operator < DTYPE > * GetLabel () const public std::string GetName () const public virtual Device GetDevice () public virtual int GetDeviceID () public virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public DTYPE & operator[] (unsigned int index) [] \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 public virtual void SetDeviceCPU () public int ResetResult () Result \ud150\uc11c\uc758 ELement\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc public int ResetGradient () Gradient \ud150\uc11c\uc758 ELement\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc Members public LossFunction (std::string pName) LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\uac12\uc73c\ub85c \ucd08\uae30\ud654\ud558\uace0, \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 \uc2a4\ud2b8\ub9c1\uc744 m_name\uc5d0 \uc800\uc7a5\ud558\uace0, m_Device\ub97c CPU\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. Parameters pName m_name\uc5d0 \ud560\ub2f9\ud560 LossFunction\uc758 \uc774\ub984, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc \"NO NAME\"\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns \uc5c6\uc74c public LossFunction ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\uac12\uc73c\ub85c \ucd08\uae30\ud654\ud558\uace0, \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 \uc2a4\ud2b8\ub9c1\uc744 m_name\uc5d0 \uc800\uc7a5\ud558\uace0, m_Device\ub97c CPU\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. pOperator\uc640 pLabel\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c LossFunction ::Alloc(Operator *pOperator, Operator *pLabel) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator Alloc \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 LossFunction\uc758 \uc785\ub825\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pLabel Alloc \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 LossFunction\uc758 \uc785\ub825\uc5d0 \ud574\ub2f9\ud558\ub294 \ub808\uc774\ube14 pName m_name\uc5d0 \ud560\ub2f9\ud560 LossFunction\uc758 \uc774\ub984, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc \"NO NAME\"\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns \uc5c6\uc74c public virtual ~LossFunction () LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 LossFunction ::Delete() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\uc2dc\ud0a8\ub2e4. Returns \uc5c6\uc74c public virtual int Alloc ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel) LossFunction\uc758 \uc785\ub825\uacfc \ub808\uc774\ube14\uc744 \uc9c0\uc815\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Operator\uc640 Operator\uc758 Result \ud3ec\uc778\ud130 \uac12\uacfc \ub808\uc774\ube14 \uac12\uc744 \uc800\uc7a5\ud55c\ub2e4. Parameters pOperator LossFunction\uc758 \uc785\ub825\uc774 \ub418\ub294 Operator plabel LossFunction\uc758 \uc785\ub825\uc774 \ub418\ub294 \ub808\uc774\ube14 Returns TRUE public virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public void SetResult ( Tensor < DTYPE > * pTensor) public void SetGradient ( Tensor < DTYPE > * pTensor) public Tensor < DTYPE > * GetResult () const public Tensor < DTYPE > * GetGradient () const public Operator < DTYPE > * GetOperator () const public Tensor < DTYPE > * GetTensor () const public Operator < DTYPE > * GetLabel () const public std::string GetName () const public virtual Device GetDevice () public virtual int GetDeviceID () public virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public DTYPE & operator[] (unsigned int index) [] \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 index \uac12 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec Result \ud150\uc11c\uc5d0\uc11c []\uc5f0\uc0b0\uc790 \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters index Tensor\uc758 [] \uc5f0\uc0b0\uc790 \uba54\uc18c\ub4dc\uc5d0 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 \uc778\ub371\uc2a4 \uac12 Returns (*m_aResult)[index] See also : Tensor ::operator public virtual void SetDeviceCPU () public int ResetResult () Result \ud150\uc11c\uc758 ELement\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc Result \ud150\uc11c\uc758 Device \uba64\ubc84 \ubcc0\uc218\uac00 CPU\uc778 \uacbd\uc6b0 CPU \uba54\ubaa8\ub9ac\uc5d0\uc11c \ucd08\uae30\ud654\ud558\uace0, CPU\uc778 \uacbd\uc6b0 GPU \uba54\ubaa8\ub9ac\uc5d0\uc11c \ucd08\uae30\ud654\ud55c\ub2e4. Returns Result \ud150\uc11c\uc758 Device \uba64\ubc84 \ubcc0\uc218\uac00 Invalid\ud55c \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uacbd\uc6b0 FALSE\ub97c \uadf8 \uc678\uc758 \uacbd\uc6b0 TRUE\ub97c \ubc18\ud658\ud55c\ub2e4. public int ResetGradient () Gradient \ud150\uc11c\uc758 ELement\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc Gradient \ud150\uc11c\uc758 Device \uba64\ubc84 \ubcc0\uc218\uac00 CPU\uc778 \uacbd\uc6b0 CPU \uba54\ubaa8\ub9ac\uc5d0\uc11c \ucd08\uae30\ud654\ud558\uace0, CPU\uc778 \uacbd\uc6b0 GPU \uba54\ubaa8\ub9ac\uc5d0\uc11c \ucd08\uae30\ud654\ud55c\ub2e4. Returns Gradient \ud150\uc11c\uc758 Device \uba64\ubc84 \ubcc0\uc218\uac00 Invalid\ud55c \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uacbd\uc6b0 FALSE\ub97c \uadf8 \uc678\uc758 \uacbd\uc6b0 TRUE\ub97c \ubc18\ud658\ud55c\ub2e4. class LRelu \u00b6 class LRelu : public Operator< DTYPE > Summary Members Descriptions public inline LRelu ( Operator < DTYPE > * pInput,float negativeSlope,int pLoadflag) LRelu\uc758 \uc0dd\uc131\uc790. public inline LRelu ( Operator < DTYPE > * pInput,float negativeSlope,std::string pName,int pLoadflag) LRelu\uc758 \uc0dd\uc131\uc790. public inline ~LRelu () LRelu\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput,float negativeSlope) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pinput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () public inline virtual int ForwardPropagate (int pTime) LRelu\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) LRelu\uc758 BackPropagate\ub9e4\uc18c\ub4dc. Members public inline LRelu ( Operator < DTYPE > * pInput,float negativeSlope,int pLoadflag) LRelu\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, negativeSlope\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator negativeSlope \uc785\ub825\uac12\uc774 \uc74c\uc218\uc77c \uacbd\uc6b0 \uc0ac\uc6a9\ud558\ub294 \uae30\uc6b8\uae30 int Alloc(Operator *pInput, float negativeSlope) public inline LRelu ( Operator < DTYPE > * pInput,float negativeSlope,std::string pName,int pLoadflag) LRelu\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, negativeSlope\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator negativeSlope \uc785\ub825\uac12\uc774 \uc74c\uc218\uc77c \uacbd\uc6b0 \uc0ac\uc6a9\ud558\ub294 \uae30\uc6b8\uae30 pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pInput, float negativeSlope) public inline ~LRelu () LRelu\uc758 \uc18c\uba78\uc790. See also : void Delete() public inline int Alloc ( Operator < DTYPE > * pInput,float negativeSlope) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pinput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. negativeSlope\uc740 m_negativeSlope\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pInput \uc0dd\uc131\ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator negativeSlope \uc785\ub825\uac12\uc774 \uc74c\uc218\uc77c \uacbd\uc6b0 \uc0ac\uc6a9\ud558\ub294 \uae30\uc6b8\uae30 Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () public inline virtual int ForwardPropagate (int pTime) LRelu\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. input\uc758 Tensor\uac12\ub4e4 \uc911 0.f\uc774\uc0c1\uc758 \uac12\uc740 \uadf8\ub300\ub85c result\uc5d0 \uc800\uc7a5\ud558\uace0, 0.f\ubbf8\ub9cc\uc758 \uac12\uc740 m_negativeSlope\uc744 \uacf1\ud55c \ud6c4 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime pInput\uc758 m_timesize\uac12, default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) LRelu\uc758 BackPropagate\ub9e4\uc18c\ub4dc. result\uac12\uc774 0\ubcf4\ub2e4 \ud074 \uacbd\uc6b0 input_delta\uc5d0 \ub354\ud558\uace0, 0\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0 input_delta\uc5d0 m_negativeSlope\uc744 \uacf1\ud55c \ud6c4 \ub354\ud55c\ub2e4. Parameters pTime pInput\uc758 m_timesize\uac12, default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class MatMul \u00b6 class MatMul : public Operator< DTYPE > Summary Members Descriptions public inline MatMul ( Operator < DTYPE > * pWeight, Operator < DTYPE > * pInput,std::string pName,int pLoadflag) MatMul\uc758 \uc0dd\uc131\uc790. public inline virtual ~MatMul () MatMul\uc758 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pWeight, Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pWeight, pInput\uc73c\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud558\uace0 \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) MatMul\uc758 ForwardPropagate\ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) MatMul\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline MatMul ( Operator < DTYPE > * pWeight, Operator < DTYPE > * pInput,std::string pName,int pLoadflag) MatMul\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pWeight\uc640 pInput\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pWeight MatMul\ud560 weight. pInput Matmul\ud560 input Operator . pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pWeight, Operator *pInput) public inline virtual ~MatMul () MatMul\uc758 \uc18c\uba78\uc790 Delete\ub9e4\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uac12\ub4e4\uc744 \ud574\uc81c\ud55c\ub2e4. void Delete() public inline int Alloc ( Operator < DTYPE > * pWeight, Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pWeight, pInput\uc73c\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. timesize, batchsize, channelsize, row_size\ub294 pInput\uc758 Shape\uacfc \uac19\uac8c, colsize\ub294 pWeight\uc640 \uac19\uac8c \ucd08\uae30\ud654\ud55c\ub2e4. input x weight\uc744 \ud558\uae30 \ub54c\ubb38\uc5d0 rowsize\ub294 pInput\uc758 Shape\uc744, colsize\ub294 pWeight\uc758 Shape\uc744 \ubc1b\ub294\ub2e4. Result\uc640 Delta\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 input\uc758 rowsize, weight\uc758 colsize\ub97c \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. Parameters pWeight MatMul\ud560 weight. pInput Matmul\ud560 input Operator . Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud558\uace0 \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. inputTensorDesc, outputTensorDesc,deltaDesc, inputDeltaDesc, convDesc, filterDesc,filterDeltaDesc\ub4e4\uc744 \uc0ad\uc81c\ud558\uace0 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. m_devWorkSpace, m_dataDevWorkSpace, m_filterDevWorkSpace\ub4e4\uc774 \uac00\ub9ac\ud0a4\ub294 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) MatMul\uc758 ForwardPropagate\ub9e4\uc18c\ub4dc. weight\uc758 \uac01 row\uc758 \uac12\ub4e4\uacfc input\uc758 Colunm\uc758 \uac01 \uac12\ub4e4\uc744 \uacf1\ud558\uc5ec result\uc5d0 \ub354\ud55c\ub2e4. [2 x 3] x [3 x 1]\uc77c\ub54c 3\uc774 hiddensize Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) MatMul\uc758 BackPropagate \ub9e4\uc18c\ub4dc. input_delta\uc5d0 weight * this_delta\uac12\uc744 \ub354\ud574\uc8fc\uace0, weight_gradient\uc5d0\ub294 input * this_delta\uac12\uc744 \ub354\ud574\uc900\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class Maxpooling2D \u00b6 class Maxpooling2D : public Operator< DTYPE > Summary Members Descriptions public inline Maxpooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,std::string pName,int pLoadflag) Maxpooling2D\uc758 \uc0dd\uc131\uc790 public inline Maxpooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,int padding,std::string pName,int pLoadflag) Maxpooling2D\uc758 \uc0dd\uc131\uc790 public inline ~Maxpooling2D () Maxpooling2D\uc758 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput,int strideRow,int strideCol,int maskRow,int maskCol,int padding1,int padding2) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \ubcc0\uc218\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () Delete \uba54\uc18c\ub4dc public inline virtual int ForwardPropagate (int pTime) Maxpooling2D\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) Maxpooling2D\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline Maxpooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,std::string pName,int pLoadflag) Maxpooling2D\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, strideRow, strideCol, maskRow, maskCol\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Maxpooling2D\ud560 \ub300\uc0c1 Operator . maskRow Filter\uc758 Row size maskCol Filter\uc758 Colunm size strideRow Row stirde\uac12 strideCol Colunm stride\uac12 pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984 public inline Maxpooling2D ( Operator < DTYPE > * pInput,int maskRow,int maskCol,int strideRow,int strideCol,int padding,std::string pName,int pLoadflag) Maxpooling2D\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, strideRow, strideCol, maskRow, maskCol\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Maxpooling2D\ud560 \ub300\uc0c1 Operator . maskRow Filter\uc758 Row size maskCol Filter\uc758 Colunm size strideRow Row stirde\uac12 strideCol Colunm stride\uac12 padding padding size pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984 public inline ~Maxpooling2D () Maxpooling2D\uc758 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput,int strideRow,int strideCol,int maskRow,int maskCol,int padding1,int padding2) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \ubcc0\uc218\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. m_stride, m_mask, m_padding\uac12\ub4e4\uc744 \ucd08\uae30\ud654 \ud558\uace0 rowsize, colsize\ub97c \uacb0\uc815\ud55c\ub2e4. Parameters pInput \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator . strideRow Row stirde\uac12. strideCol Colunm stride\uac12. maskRow Filter\uc758 Row size. maskCol Filter\uc758 Colunm size. padding1 row_padding \uac12. padding2 col_padding \uac12. Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () Delete \uba54\uc18c\ub4dc cudnnDescriptor\ub4e4\uc744 GPU\uba54\ubaa8\ub9ac\uc5d0\uc11c \ud574\uc81c\ud558\uace0 \ud3ec\uc778\ud130\ub97c null\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Maxpooling2D\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. Filter(temprow * tempcol)\uc758 \ubc94\uc704 \uc911 \uac00\uc7a5 \ud070 \uac12\uc744 result\uc5d0 \uc800\uc7a5\ud558\uace0, index\ub294 indexOfMaxInput\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) Maxpooling2D\uc758 BackPropagate \ub9e4\uc18c\ub4dc. \uacc4\uc0b0\ud55c delta\uac12\uc744 input_delta\uc5d0 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class Module \u00b6 class Module : public Operator< DTYPE > \uad6c\uc131\ud574 \ubaa8\ub4c8\ud654\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 \ub2e8\uc77c Operator\ub85c\uc11c \ud560 \uc218 \uc5c6\ub294 \uae30\ub2a5\ub4e4\uc744 \uc218\ud589\ud558\uac8c \ud55c\ub2e4 Module\uc740 \ud558\ub098\uc758 Operator\ucc98\ub7fc \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c \uc548\uc5d0\uc11c \uc791\ub3d9\ud55c\ub2e4 Summary Members Descriptions public Module (std::string pName) Module \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public virtual ~Module () Module \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public virtual int SetInput (int pNumOfInput,...) public virtual Operator < DTYPE > * SetInput ( Operator < DTYPE > * pInput) public virtual Operator < DTYPE > * SetParameter ( Operator < DTYPE > * pParameter) public virtual Operator < DTYPE > * SetExecutableOperater ( Operator < DTYPE > * pExecutableOperater) public int IsInput ( Operator < DTYPE > * pOperator) \ud574\ub2f9 Operator\uac00 Module\uc758 Input\uc778\uc9c0 \ud655\uc778\ud558\ub294 \uba54\uc18c\ub4dc public int IsValid ( Operator < DTYPE > * pOperator) \ud574\ub2f9 Operator\uc758 Output Operator\ub4e4\uc774 \ubaa8\ub4c8 \uadf8\ub798\ud504\uc5d0 \uc911\ubcf5\uc73c\ub85c \ud3ec\ud568\ub418\ub294 \uc9c0 \ud655\uc778\ud558\ub294 \uba54\uc18c\ub4dc public Operator < DTYPE > * AnalyzeGraph ( Operator < DTYPE > * pResultOperator) \ud559\uc2b5 \uac00\ub2a5\ud55c \ud615\ud0dc\ub85c \ubaa8\ub4c8 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc public int FeedInputTensor (int pNumOfInput,...) \uc2e0\uacbd\ub9dd\uc5d0 Input \ub9ac\uc2a4\ud2b8\ub97c \ucd94\uac00\ud558\ub294 \uba54\uc18c\ub4dc public Container](#classContainer)< [Operator < DTYPE > * > * GetExcutableOperatorContainer () public int GetNumOfExcutableOperator () public virtual Tensor < DTYPE > * GetResult () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetResultContainer () public virtual Tensor < DTYPE > * GetGradient () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetGradientContainer () public virtual Tensor < DTYPE > * GetDelta () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetDeltaContainer () public Container](#classContainer)< [Operator < DTYPE > * > * GetParameterContainer () public Container](#classContainer)< [Operator < DTYPE > * > * GetParameter () public virtual int SetIsTensorholder (int pIsParameter) public virtual int SetIsTrainable (int pIsTrainable) public virtual int SetModeTrain () public virtual int SetModeAccumulate () public virtual int SetModeInference () public virtual int ForwardPropagate (int pTime) \ubaa8\ub4c8 \uadf8\ub798\ud504\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public virtual int BackPropagate (int pTime) \ubaa8\ub4c8 \uadf8\ub798\ud504\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public virtual int ResetResult () \uc5f0\uc0b0\uc5d0 \ucc38\uc5ec\ud558\ub294 Operator\ub4e4\uc758 Result Container\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. public virtual int ResetGradient () \uc5f0\uc0b0\uc5d0 \ucc38\uc5ec\ud558\ub294 Operator\ub4e4\uc758 Gradient Container\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. public virtual void PrintInformation (int level) public virtual void SetDeviceCPU () \ubaa8\ub4c8 \uadf8\ub798\ud504 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc7a5\uce58\ub97c CPU\ub85c \uc804\ud658\ud558\ub294 \uba54\uc18c\ub4dc public void SetDeviceCPUOnModule () public virtual int Save (char * nameOfFile) public virtual int Load (char * nameOfFile) public virtual int Save (FILE * fp) public virtual int Load (FILE * fp) public virtual int SaveComponents (char * nameOfDir) public virtual int LoadComponents (char * nameOfDir) Members public Module (std::string pName) Module \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 \uac01 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Module \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4. \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL \uac12\uc73c\ub85c, \uac01 \uc815\uc218 \ud0c0\uc785 \ubcc0\uc218\ub4e4\uc740 0\uc73c\ub85c \ucd08\uae30\ud654\ud558\uace0 Module ::Alloc() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. See also : Module ::Alloc() Returns \uc5c6\uc74c public virtual ~Module () Module \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc1b\uc740 Module \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\uc2dc\ud0a8\ub2e4. Returns \uc5c6\uc74c See also : Module ::Delete() public virtual int SetInput (int pNumOfInput,...) public virtual Operator < DTYPE > * SetInput ( Operator < DTYPE > * pInput) public virtual Operator < DTYPE > * SetParameter ( Operator < DTYPE > * pParameter) public virtual Operator < DTYPE > * SetExecutableOperater ( Operator < DTYPE > * pExecutableOperater) public int IsInput ( Operator < DTYPE > * pOperator) \ud574\ub2f9 Operator\uac00 Module\uc758 Input\uc778\uc9c0 \ud655\uc778\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Operator\uac00 Module\uc758 Input Container\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uc9c0 \ud655\uc778\ud55c\ub2e4. Parameters pOperator Input \uc5ec\ubd80\ub97c \ud655\uc778\ud558\uace0\uc790 \ud558\ub294 Operator Returns Input container\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uacbd\uc6b0 TRUE, \ud3ec\ud568\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub294 \uacbd\uc6b0 FALSE\ub97c \ubc18\ud658\ud55c\ub2e4. public int IsValid ( Operator < DTYPE > * pOperator) \ud574\ub2f9 Operator\uc758 Output Operator\ub4e4\uc774 \ubaa8\ub4c8 \uadf8\ub798\ud504\uc5d0 \uc911\ubcf5\uc73c\ub85c \ud3ec\ud568\ub418\ub294 \uc9c0 \ud655\uc778\ud558\ub294 \uba54\uc18c\ub4dc \ud574\ub2f9 Operator\uc758 Output container \uba64\ubc84 \ubcc0\uc218\uc5d0 \ub2f4\uaca8 \uc788\ub294 Operator\ub4e4\uc774 Module\uc758 Excutable Operator container\uc5d0 \uc911\ubcf5\ub418\uc5b4 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uc9c0 \uc5ec\ubd80\ub97c \ud655\uc778\ud55c\ub2e4. Parameters pOperator Output Container \uba64\ubc84 \ubcc0\uc218\uac00 Excutable Operator Container\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uc9c0 \ud655\uc778\ud558\uace0\uc790 \ud558\ub294 Operator Returns \ud574\ub2f9 Operator\uc758 Output Container \uba64\ubc84 \ubcc0\uc218\uac00 Excutable Operator Container\uc5d0 \uc911\ubcf5\ub418\uc5b4 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba74 TRUE\ub97c \uc544\ub2c8\uba74 FALSE\ub97c \ubc18\ud658\ud55c\ub2e4. public Operator < DTYPE > * AnalyzeGraph ( Operator < DTYPE > * pResultOperator) \ud559\uc2b5 \uac00\ub2a5\ud55c \ud615\ud0dc\ub85c \ubaa8\ub4c8 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc \ubaa8\ub4c8\uc758 Output\uc5d0 \ud574\ub2f9\ud558\ub294 Operator\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9\uc73c\ub85c \ubaa8\ub4c8 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud55c\ub2e4. \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 \ubaa8\ub4c8\uc758 Output\uc5d0 \ud574\ub2f9\ud558\ub294 Operator\ub97c \uc2dc\uc791\uc73c\ub85c \ubaa8\ub4c8\uc758 Input\uc5d0 \ud574\ub2f9\ud558\ub294 Operator\uae4c\uc9c0 \uc5ed\uc21c\uc73c\ub85c, Operator\uac00 Input Tensor \ubc0f \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130\uc778 \uacbd\uc6b0 Module \ud074\ub798\uc2a4\uc758 Input Container \uba64\ubc84 \ubcc0\uc218\uc5d0 \ucd94\uac00\ud558\uace0 \ub098\uba38\uc9c0 \uacbd\uc6b0\uc5d0\ub294 Module \ud074\ub798\uc2a4\uc758 Excutable Operator Container \uba64\ubc84 \ubcc0\uc218\uc5d0 \ucd94\uac00\ud55c\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\uc758 Excutable Operator Container \uba64\ubc84 \ubcc0\uc218\uc5d0 Operator\ub4e4\uc774 \ubaa8\ub450 \ucd94\uac00\ub418\uba74 Container\ub97c \uc5ed\uc21c\uc73c\ub85c \ubcc0\uacbd\ud55c\ub2e4. Operator \ud0d0\uc0c9 \uc21c\uc11c\ub294 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9\uc744 \ub530\ub974\uba70, \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Output Operator\ubd80\ud130 \ud574\ub2f9 Operator\uc758 Input Operator \ub9ac\uc2a4\ud2b8\ub97c \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9 \ubc29\uc2dd\uc744 \uc774\uc6a9\ud574 \uc21c\uc11c\ub300\ub85c \uc9c4\ud589\ud55c\ub2e4. \uac01 Operator\ub4e4\uc740 Module ::IsValid(Operator *pOperator) \uba54\uc18c\ub4dc\ub97c \uc774\uc6a9\ud558\uc5ec \ubaa8\ub4c8 \uadf8\ub798\ud504 \uc548\uc5d0\uc11c\uc758 \uc911\ubcf5 \uc5ec\ubd80\ub97c \ud655\uc778\ud558\uba70 \uc911\ubcf5\ub418\ub294 \uacbd\uc6b0 \uadf8\ub798\ud504\uc5d0 \ucd94\uac00\ud558\uc9c0 \uc54a\ub294\ub2e4. Parameters pResultOperator \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\uace0\uc790 \ud558\ub294 \uc2e0\uacbd\ub9dd\uc758 Output\uc5d0 \ud574\ub2f9\ud558\ub294 Operator Returns \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\uace0\uc790 \ud558\ub294 \uc2e0\uacbd\ub9dd\uc758 Output\uc5d0 \ud574\ub2f9\ud558\ub294 Operator public int FeedInputTensor (int pNumOfInput,...) \uc2e0\uacbd\ub9dd\uc5d0 Input \ub9ac\uc2a4\ud2b8\ub97c \ucd94\uac00\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Tensor\ub4e4\uc744 \uc21c\uc11c\ub300\ub85c NeuralNetwork\uc758 Input Container\uc5d0 \ub2f4\uaca8 \uc788\ub294 Operator\ub4e4\uc758 Result\ub85c \uc124\uc815\ud55c\ub2e4. Parameters pNumOfInput Input Container\uc5d0 \ucd94\uac00\ud558\uace0 \uc2f6\uc740 Tensor\ub4e4\uc758 \uac1c\uc218 ... Input Container\uc5d0 \ucd94\uac00\ud558\uace0 \uc2f6\uc740 Tensor\ub4e4\uc758 \ub9ac\uc2a4\ud2b8 Returns TRUE See also : Operator ::SetResult(Tensor *pTensor) public Container](#classContainer)< [Operator < DTYPE > * > * GetExcutableOperatorContainer () public int GetNumOfExcutableOperator () public virtual Tensor < DTYPE > * GetResult () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetResultContainer () public virtual Tensor < DTYPE > * GetGradient () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetGradientContainer () public virtual Tensor < DTYPE > * GetDelta () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetDeltaContainer () public Container](#classContainer)< [Operator < DTYPE > * > * GetParameterContainer () public Container](#classContainer)< [Operator < DTYPE > * > * GetParameter () public virtual int SetIsTensorholder (int pIsParameter) public virtual int SetIsTrainable (int pIsTrainable) public virtual int SetModeTrain () public virtual int SetModeAccumulate () public virtual int SetModeInference () public virtual int ForwardPropagate (int pTime) \ubaa8\ub4c8 \uadf8\ub798\ud504\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Excutable Operator Container\uc758 \uac01 Operator\ub4e4\uc5d0\uc11c Operator ::ForwardPropagate(int pTime) \uba54\uc18c\ub4dc\ub97c \uc21c\uc11c\ub300\ub85c \ud638\ucd9c\ud55c\ub2e4. Parameters pTime \uac01 ForwardPropagate \uba54\uc18c\ub4dc\uc5d0 \uc804\ub2ec\ud560 Time\uc758 \uc778\ub371\uc2a4 Returns TRUE public virtual int BackPropagate (int pTime) \ubaa8\ub4c8 \uadf8\ub798\ud504\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uc5ed\uc21c\uc73c\ub85c Excutable Operator Container\uc758 \uac01 Operator\ub4e4\uc5d0\uc11c Operator ::ForwardPropagate(int pTime) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pTime \uac01 ForwardPropagate \uba54\uc18c\ub4dc\uc5d0 \uc804\ub2ec\ud560 Time\uc758 \uc778\ub371\uc2a4 Returns TRUE public virtual int ResetResult () \uc5f0\uc0b0\uc5d0 \ucc38\uc5ec\ud558\ub294 Operator\ub4e4\uc758 Result Container\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. Excutable Operator Container\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uac01 Operator\ub4e4\uc5d0\uc11c Operator ::ResetResult() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns TRUE public virtual int ResetGradient () \uc5f0\uc0b0\uc5d0 \ucc38\uc5ec\ud558\ub294 Operator\ub4e4\uc758 Gradient Container\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. Excutable Operator Container\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uac01 Operator\ub4e4\uc5d0\uc11c Operator ::ResetGradient() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns TRUE public virtual void PrintInformation (int level) public virtual void SetDeviceCPU () \ubaa8\ub4c8 \uadf8\ub798\ud504 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc7a5\uce58\ub97c CPU\ub85c \uc804\ud658\ud558\ub294 \uba54\uc18c\ub4dc Module\uc758 Device \uba64\ubc84\ubcc0\uc218\ub97c CPU\ub85c \uc804\ud658\ud558\uace0, Excutable Operator Container\uc758 \uac01 Operator\ub4e4\uc5d0\uc11c Operator ::SetDeviceCPU() \uba54\uc18c\ub4dc\ub97c \uc21c\uc11c\ub300\ub85c \ud638\ucd9c\ud55c\ub2e4. Returns \uc5c6\uc74c public void SetDeviceCPUOnModule () public virtual int Save (char * nameOfFile) public virtual int Load (char * nameOfFile) public virtual int Save (FILE * fp) public virtual int Load (FILE * fp) public virtual int SaveComponents (char * nameOfDir) public virtual int LoadComponents (char * nameOfDir) class MSE \u00b6 class MSE : public LossFunction< DTYPE > Squared Error) Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 MSE(Mean Squared Error) \uacc4\uc0b0 \uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4 Summary Members Descriptions public inline MSE ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) MSE(Mean Squared Error) LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline virtual ~MSE () MSE(Mean Squared Error) LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline virtual int Alloc ( Operator < DTYPE > * pOperator) MSE(Mean Squared Error) LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ub3d9\uc801 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) MSE(Mean Squared Error) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) MSE(Mean Squared Error) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline DTYPE Error (DTYPE pred,DTYPE ans) Members public inline MSE ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) MSE(Mean Squared Error) LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec MSE ::Alloc(Operator *pOperator) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator MSE ::Alloc(Operator *pOperator) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pName LossFunction\uc758 \uc774\ub984 Returns \uc5c6\uc74c See also : MSE ::Alloc(Operator *pOperator) public inline virtual ~MSE () MSE(Mean Squared Error) LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline virtual int Alloc ( Operator < DTYPE > * pOperator) MSE(Mean Squared Error) LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ub3d9\uc801 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Operator\ub97c Input Operator\uc5d0 \ud560\ub2f9\ud558\uace0 \ucd08\uae30\ud654 \ub41c Result \ud150\uc11c\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uc0dd\uc131\ud55c\ub2e4. Parameters pOperator MSE LossFunction\uc758 \uc785\ub825\uc5d0 \ud574\ub2f9\ud558\ub294 Operator Returns TRUE public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) MSE(Mean Squared Error) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 \uacb0\uacfc \uac12\uc744 \ub808\uc774\ube14 \uac12\uacfc \ube44\uad50\ud574 Mse(Mean Squared Error)\ub97c \uad6c\ud55c\ub2e4 Parameters pTime \uc785\ub825 Tensor\uc758 Time \ucd95\uc758 Dimension Returns \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uacb0\uacfc \uac12\uc5d0 \ub300\ud55c MSE(Mean Squared Error) public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) MSE(Mean Squared Error) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 MSE(Mean Squared Error) \uc5d0 \ub300\ud55c \uc785\ub825 Tensor\uc758 Gradient\ub97c \uacc4\uc0b0\ud55c\ub2e4 Parameters pTime \uc785\ub825 Tensor\uc758 Time \ucd95\uc758 Dimension Returns NULL public inline DTYPE Error (DTYPE pred,DTYPE ans) class NagOptimizer \u00b6 class NagOptimizer : public Optimizer< DTYPE > Summary Members Descriptions public inline NagOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,OptimizeDirection pOptimizeDirection) NagOptimizer\uc758 \uc0dd\uc131\uc790. public inline NagOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,float weightDecayRate,OptimizeDirection pOptimizeDirection) NagOptimizer\uc758 \uc0dd\uc131\uc790. public inline ~NagOptimizer () NagOptimizer\uc758 \uc18c\uba78\uc790 public inline virtual void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc public inline int Alloc (float momentum) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * pVelocity) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Members public inline NagOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,OptimizeDirection pOptimizeDirection) NagOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pLearningRate Optimizer\uc758 learning rate momentum step size \uc870\uc815 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(momentum) public inline NagOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float momentum,float weightDecayRate,OptimizeDirection pOptimizeDirection) NagOptimizer\uc758 \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pLearningRate Optimizer\uc758 learning rate m_momentum step size \uc870\uc815 \uac12 weightDecayRate \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218\uac00 \ud074 \ub54c \ud328\ub110\ud2f0\ub97c \ubd80\uacfc\ud558\ub294 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(momentum) public inline ~NagOptimizer () NagOptimizer\uc758 \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline virtual void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_aaVelocity\uc758 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline int Alloc (float momentum) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_ppParameter, m_numOfParameter, m_aaVelocity\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. m_aaVelocity\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. Parameters m_momentum step size \uc870\uc815 \uac12 Returns \uc131\uacf5 \uc2dc TRUE See also : Container < Operator > GetTrainableTensor() See also : int GetTrainableTensorDegree() public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_momentum \uc720\ubb34\uc5d0 \ub530\ub77c UpdateParameter \ud638\ucd9c\uacfc \uc5d0\ub7ec \uba54\uc138\uc9c0 \ud638\ucd9c Returns \uc131\uacf5 \uc2dc TRUE See also : int UpdateParameter (( Operator *pParameter, Tensor *pVelocity) public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 Returns \uc131\uacf5 \uc2dc TRUE public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * pVelocity) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc prev_Velocity \ud150\uc11c \uc0dd\uc131 \ud6c4 \ud604\uc7ac pVelocity \uc800\uc7a5 pVelocity\ub97c Update \ud55c\ub2e4. m_momentum \uac12\uc73c\ub85c \uc870\uc815\ub41c prev_Velocity\uc640 pVelocity\uc758 \uc5f0\uc0b0\uc73c\ub85c \ud30c\ub77c\ubbf8\ud130 Update \ud559\uc2b5 \ucd08\ubc18 \ubd80, pFirstMomentum, pFirstVelocity\ub294 0\uc73c\ub85c biased \uc0c1\ud0dc\uc774\ubbc0\ub85c \uc774\ub97c unbiased \ud574\uc8fc\ub294 \uc5f0\uc0b0\ud558\uc5ec \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. signed_learning_rate\uc640 pUnbiasedMomentum\uacf1\uc744 root\uac00 \uc801\uc6a9\ub41c pUnbiasedVelocity\uc640 m_epsilon\uc73c\ub85c \ub098\ub208 \uac12\uc73c\ub85c weight(trainable_data)\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pVelocity \uc5c5\ub370\uc774\ud2b8 \ud560 pVelocity Returns \uc131\uacf5 \uc2dc TURE class NeuralNetwork \u00b6 class NeuralNetwork : public Module< DTYPE > \ubaa8\ub378 \uc0dd\uc131, \ud559\uc2b5 \ubc0f \ud3c9\uac00\ub97c \ucd1d\uad04\ud558\ub294 \ud074\ub798\uc2a4 Operator , Module , Loss Function, Optimizer \ud074\ub798\uc2a4\ub97c \uc0dd\uc131 \ubc0f \ud65c\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\ub97c \uad6c\uc131\ud558\uace0 \ud559\uc2b5\uc2dc\ud0a8\ub2e4 Summary Members Descriptions public NeuralNetwork () NeuralNetwork \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public virtual ~NeuralNetwork () NeuralNetwork \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public LossFunction < DTYPE > * SetLossFunction ( LossFunction < DTYPE > * pLossFunction) \ud2b9\uc815 Loss Function\uc744 \ub9e4\uac1c \ubcc0\uc218\ub85c \ubc1b\uc544 \uc774\ub97c \uc2e0\uacbd\ub9dd\uc758 Loss Function\ub85c \uc9c0\uc815\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc public Optimizer < DTYPE > * SetOptimizer ( Optimizer < DTYPE > * pOptimizer) \ud2b9\uc815 Optimizer\ub97c \ub9e4\uac1c \ubcc0\uc218\ub85c \ubc1b\uc544 \uc774\ub97c \uc2e0\uacbd\ub9dd\uc758 Optimizer\ub85c \uc9c0\uc815\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc public Operator < DTYPE > * GetResultOperator () public virtual Tensor < DTYPE > * GetResult () public LossFunction < DTYPE > * GetLossFunction () public Optimizer < DTYPE > * GetOptimizer () public virtual void SetDeviceCPU () \uc2e0\uacbd\ub9dd \uadf8\ub798\ud504 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc7a5\uce58\ub97c CPU\ub85c \uc804\ud658\ud558\ub294 \uba54\uc18c\ub4dc public void SetDeviceCPUOnNeuralNetwork () public int Train () \uc2e0\uacbd\ub9dd\uc758 \ud559\uc2b5\uc744 \uc9c4\ud589\ud558\ub294 \uba54\uc18c\ub4dc public int Test () \uc2e0\uacbd\ub9dd\uc758 \ud14c\uc2a4\ud2b8\ub97c \uc9c4\ud589\ud558\ub294 \uba54\uc18c\ub4dc public int TrainOnCPU () CPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \uba54\uc18c\ub4dc public int TestOnCPU () CPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud14c\uc2a4\ud2b8\ud558\ub294 \uba54\uc18c\ub4dc public int TrainOnGPU () GPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \uba54\uc18c\ub4dc public int TestOnGPU () GPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud14c\uc2a4\ud2b8\ud558\ub294 \uba54\uc18c\ub4dc public float GetAccuracy (int numOfClass) \ubd84\ub958(Classification)\ub97c \uc704\ud574 \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 Top 1 Accuracy\ub97c \uacc4\uc0b0\ud558\ub294 \uba54\uc18c\ub4dc public int GetMaxIndex ( Tensor < DTYPE > * data,int ba,int ti,int numOfClass) Tensor\uc758 LongArray\uc758 Element\ub4e4 \uc911 \uac00\uc7a5 \ud070 \uac12\uc758 \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud574 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public float GetTop5Accuracy (int numOfClass) \ubd84\ub958(Classification)\ub97c \uc704\ud574 \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 Top 5 Accuracy\ub97c \uacc4\uc0b0\ud558\ub294 \uba54\uc18c\ub4dc public void GetTop5Index ( Tensor < DTYPE > * data,int * top5Index,int ba,int ti,int numOfClass) Tensor\uc758 LongArray\uc758 Element\ub4e4 \uc911 \uac00\uc7a5 \ud070 \ub2e4\uc12f \uac1c \uac12\uc5d0 \ub300\ud55c \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud574 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public float GetLoss () \ub370\uc774\ud130\uc5d0 \ub300\ud574 \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 \ud3c9\uade0 Loss\ub97c \uacc4\uc0b0\ud558\uc5ec \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public void PrintGraphInformation () \uc2e0\uacbd\ub9dd \uadf8\ub798\ud504\uc758 \uac01 \uad6c\uc131 \uc694\uc18c\uc5d0 \ub300\ud574 \uc815\ubcf4\ub97c \ucd9c\ub825\ud558\ub294 \uba54\uc18c\ub4dc public int ResetLossFunctionResult () LossFunction\uc758 Result Tensor\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. public int ResetLossFunctionGradient () LossFunction\uc758 Gradient Tensor\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. public int ResetParameterGradient () Optimizer\uc758 Gradient\uc640 Parameter\ub4e4\uc758 Gradient\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. public Operator < DTYPE > * SearchOperator (std::string pName) public void InputToFeature (int inDim,int noSample,float * pSamples,int outDim,float * pFeatures,int batchSize) Members public NeuralNetwork () NeuralNetwork \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 \uac01 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 NeuralNetwork \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4. \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL \uac12\uc73c\ub85c, \uac01 \uc815\uc218 \ud0c0\uc785 \ubcc0\uc218\ub4e4\uc740 0\uc73c\ub85c, Device\ub294 CPU\ub85c \ucd08\uae30\ud654\ud558\uace0 NeuralNetwork ::Alloc() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns \uc5c6\uc74c See also : NeuralNetwork ::Alloc() public virtual ~NeuralNetwork () NeuralNetwork \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc1b\uc740 NeuralNetwork \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\uc2dc\ud0a8\ub2e4. Returns \uc5c6\uc74c See also : NeuralNetwork ::Delete() public LossFunction < DTYPE > * SetLossFunction ( LossFunction < DTYPE > * pLossFunction) \ud2b9\uc815 Loss Function\uc744 \ub9e4\uac1c \ubcc0\uc218\ub85c \ubc1b\uc544 \uc774\ub97c \uc2e0\uacbd\ub9dd\uc758 Loss Function\ub85c \uc9c0\uc815\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc Parameters pLossFunction \uc2e0\uacbd\ub9dd\uc758 Loss Function\ub85c \uc9c0\uc815\ud558\uace0\uc790 \ud558\ub294 Loss Function Returns \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Loss Function public Optimizer < DTYPE > * SetOptimizer ( Optimizer < DTYPE > * pOptimizer) \ud2b9\uc815 Optimizer\ub97c \ub9e4\uac1c \ubcc0\uc218\ub85c \ubc1b\uc544 \uc774\ub97c \uc2e0\uacbd\ub9dd\uc758 Optimizer\ub85c \uc9c0\uc815\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc Parameters pLossFunction \uc2e0\uacbd\ub9dd\uc758 Optimizer\ub85c \uc9c0\uc815\ud558\uace0\uc790 \ud558\ub294 Optimizer Returns \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Optimizer public Operator < DTYPE > * GetResultOperator () public virtual Tensor < DTYPE > * GetResult () public LossFunction < DTYPE > * GetLossFunction () public Optimizer < DTYPE > * GetOptimizer () public virtual void SetDeviceCPU () \uc2e0\uacbd\ub9dd \uadf8\ub798\ud504 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc7a5\uce58\ub97c CPU\ub85c \uc804\ud658\ud558\ub294 \uba54\uc18c\ub4dc NeuralNetwork\uc758 Device \uba64\ubc84\ubcc0\uc218\ub97c CPU\ub85c \uc804\ud658\ud558\uace0, Excutable Operator Container\uc758 \uac01 Operator\ub4e4\uc5d0\uc11c Operator ::SetDeviceCPU() \uba54\uc18c\ub4dc\ub97c \uc21c\uc11c\ub300\ub85c \ud638\ucd9c\ud558\uace0, Lossfunction\uc758 LossFunction ::SetDeviceCPU() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns \uc5c6\uc74c public void SetDeviceCPUOnNeuralNetwork () public int Train () \uc2e0\uacbd\ub9dd\uc758 \ud559\uc2b5\uc744 \uc9c4\ud589\ud558\ub294 \uba54\uc18c\ub4dc NeuralNetwork\uc758 Device \uba64\ubc84 \ubcc0\uc218\ub97c \ud655\uc778\ud558\uc5ec CPU \uc2dc NeuralNetwork ::TrainingOnCPU()\uc744 \ud638\ucd9c\ud558\uace0, GPU \uc2dc NeuralNetwork ::TrainingOnGPU()\uc744 \ud638\ucd9c\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE, m_Device \uba64\ubc84 \ubcc0\uc218\uac00 \uc798\ubabb\ub41c \uac12\uc744 \uac16\uace0 \uc788\uc744 \ub54c FALSE\ub97c \ubc18\ud658\ud55c\ub2e4. public int Test () \uc2e0\uacbd\ub9dd\uc758 \ud14c\uc2a4\ud2b8\ub97c \uc9c4\ud589\ud558\ub294 \uba54\uc18c\ub4dc NeuralNetwork\uc758 Device \uba64\ubc84 \ubcc0\uc218\ub97c \ud655\uc778\ud558\uc5ec CPU \uc2dc NeuralNetwork ::TestingOnCPU()\uc744 \ud638\ucd9c\ud558\uace0, GPU \uc2dc NeuralNetwork ::TestingOnGPU()\uc744 \ud638\ucd9c\ud55c\ub2e4. Returns \uc131\uacf5 \uc2dc TRUE, m_Device \uba64\ubc84 \ubcc0\uc218\uac00 \uc798\ubabb\ub41c \uac12\uc744 \uac16\uace0 \uc788\uc744 \ub54c FALSE\ub97c \ubc18\ud658\ud55c\ub2e4. public int TrainOnCPU () CPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \uba54\uc18c\ub4dc \uc21c\uc11c\ub300\ub85c Excutable Operator\ub4e4\uc758 Result\uc640 Gradient\ub97c \ucd08\uae30\ud654\ud558\uace0 Loss Function\uc758 Result\uc640 Gradient\ub97c \ucd08\uae30\ud654\ud558\uace0 ForwardPropagate, BackwardPropagate \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uace0 Optimizer\ub85c \ud30c\ub77c\ubbf8\ud130\ub97c \ud559\uc2b5\uc2dc\ud0a8\ub2e4. \uac01 \uba54\uc18c\ub4dc \ucc38\uc870 Returns TRUE See also : NeuralNetwork ::ResetOperatorResult() NeuralNetwork ::ResetOperatorGradient() NeuralNetwork ::ResetLossFunctionResult() NeuralNetwork ::ResetLossFunctionGradient() See also : NeuralNetwork ::ForwardPropagate() NeuralNetwork ::BackPropagate() Optimizer ::UpdateParameter() public int TestOnCPU () CPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud14c\uc2a4\ud2b8\ud558\ub294 \uba54\uc18c\ub4dc \uc21c\uc11c\ub300\ub85c Excutable Operator\ub4e4\uc758 Result\ub97c \ucd08\uae30\ud654\ud558\uace0 Loss Function\uc758 Result\ub97c \ucd08\uae30\ud654\ud558\uace0 ForwardPropagate\uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. \uac01 \uba54\uc18c\ub4dc \ucc38\uc870 Returns TRUE See also : NeuralNetwork ::ResetOperatorResult() NeuralNetwork ::ResetLossFunctionResult() NeuralNetwork ::ForwardPropagate() public int TrainOnGPU () GPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \uba54\uc18c\ub4dc \uc21c\uc11c\ub300\ub85c Excutable Operator\ub4e4\uc758 Result\uc640 Gradient\ub97c \ucd08\uae30\ud654\ud558\uace0 Loss Function\uc758 Result\uc640 Gradient\ub97c \ucd08\uae30\ud654\ud558\uace0 @detaisl ForwardPropagateOnGPU, BackwardPropagateOnGPU \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uace0 Optimizer\ub85c \ud30c\ub77c\ubbf8\ud130\ub97c \ud559\uc2b5\uc2dc\ud0a8\ub2e4. \uac01 \uba54\uc18c\ub4dc \ucc38\uc870 Returns TRUE See also : NeuralNetwork ::ResetOperatorResult() NeuralNetwork ::ResetOperatorGradient() NeuralNetwork ::ResetLossFunctionResult() NeuralNetwork ::ResetLossFunctionGradient() See also : NeuralNetwork ::ForwardPropagateOnGPU() NeuralNetwork ::BackPropagateOnGPU() Optimizer ::UpdateParameterOnGPU() public int TestOnGPU () GPU\ub97c \ud65c\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \ud14c\uc2a4\ud2b8\ud558\ub294 \uba54\uc18c\ub4dc \uc21c\uc11c\ub300\ub85c Excutable Operator\ub4e4\uc758 Result\ub97c \ucd08\uae30\ud654\ud558\uace0 Loss Function\uc758 Result\ub97c \ucd08\uae30\ud654\ud558\uace0 ForwardPropagateOnGPU\uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. \uac01 \uba54\uc18c\ub4dc \ucc38\uc870 Returns TRUE See also : NeuralNetwork ::ResetOperatorResult() NeuralNetwork ::ResetLossFunctionResult() NeuralNetwork ::ForwardPropagateOnGPU() public float GetAccuracy (int numOfClass) \ubd84\ub958(Classification)\ub97c \uc704\ud574 \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 Top 1 Accuracy\ub97c \uacc4\uc0b0\ud558\ub294 \uba54\uc18c\ub4dc Parameters numOfClass \ub370\uc774\ud130\uc758 \ubd84\ub958(Classification)\uc5d0 \uc774\uc6a9\ub418\ub294 label\uc758 \uac1c\uc218 Returns \uc2e0\uacbd\ub9dd\uc758 Top 1 Accuracy : 0. ~ 1. public int GetMaxIndex ( Tensor < DTYPE > * data,int ba,int ti,int numOfClass) Tensor\uc758 LongArray\uc758 Element\ub4e4 \uc911 \uac00\uc7a5 \ud070 \uac12\uc758 \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud574 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Parameters data \ud0d0\uc0c9\ud558\uace0\uc790 \ud558\ub294 Tensor ba Tensor\uc758 batch Size ti Tensor\uc758 Time Size numOfClass Tensor\uc758 LongArray\uc758 Element \uac1c\uc218 Returns \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Tensor\uc758 LongArray\uc758 Element\ub4e4 \uc911 \uac00\uc7a5 \ud070 \uac12\uc758 \uc778\ub371\uc2a4 public float GetTop5Accuracy (int numOfClass) \ubd84\ub958(Classification)\ub97c \uc704\ud574 \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 Top 5 Accuracy\ub97c \uacc4\uc0b0\ud558\ub294 \uba54\uc18c\ub4dc Parameters numOfClass \ub370\uc774\ud130\uc758 \ubd84\ub958(Classification)\uc5d0 \uc774\uc6a9\ub418\ub294 label\uc758 \uac1c\uc218 Returns \uc2e0\uacbd\ub9dd\uc758 Accuracy : 0. ~ 1. public void GetTop5Index ( Tensor < DTYPE > * data,int * top5Index,int ba,int ti,int numOfClass) Tensor\uc758 LongArray\uc758 Element\ub4e4 \uc911 \uac00\uc7a5 \ud070 \ub2e4\uc12f \uac1c \uac12\uc5d0 \ub300\ud55c \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud574 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Parameters data \ud0d0\uc0c9\ud558\uace0\uc790 \ud558\ub294 Tensor ba Tensor\uc758 batch Size ti Tensor\uc758 Time Size numOfClass Tensor\uc758 LongArray\uc758 Element \uac1c\uc218 Returns \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ubc1b\uc740 Tensor\uc758 LongArray\uc758 Element\ub4e4 \uc911 \uac00\uc7a5 \ud070 \ub2e4\uc12f \uac1c \uac12\uc5d0 \ub300\ud55c \uc778\ub371\uc2a4 public float GetLoss () \ub370\uc774\ud130\uc5d0 \ub300\ud574 \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 \ud3c9\uade0 Loss\ub97c \uacc4\uc0b0\ud558\uc5ec \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Returns \ud559\uc2b5\ub41c \uc2e0\uacbd\ub9dd\uc758 \ud3c9\uade0 Loss public void PrintGraphInformation () \uc2e0\uacbd\ub9dd \uadf8\ub798\ud504\uc758 \uac01 \uad6c\uc131 \uc694\uc18c\uc5d0 \ub300\ud574 \uc815\ubcf4\ub97c \ucd9c\ub825\ud558\ub294 \uba54\uc18c\ub4dc Returns \uc5c6\uc74c See also : Operator ::PrintInformation() LossFunction ::GetName() public int ResetLossFunctionResult () LossFunction\uc758 Result Tensor\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. LossFunction\uc758 LossFunction ::ResetResult() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns TRUE public int ResetLossFunctionGradient () LossFunction\uc758 Gradient Tensor\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. LossFunction\uc758 Lossfunction ::ResetGradient() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns TRUE public int ResetParameterGradient () Optimizer\uc758 Gradient\uc640 Parameter\ub4e4\uc758 Gradient\ub97c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. Optimizer\uc758 Optimzier ::ResetParameterGradient() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Returns TRUE public Operator < DTYPE > * SearchOperator (std::string pName) public void InputToFeature (int inDim,int noSample,float * pSamples,int outDim,float * pFeatures,int batchSize) class NoiseGenerator \u00b6 class NoiseGenerator : public Operator< DTYPE > Tensor \ud074\ub798\uc2a4\uc758 Random_normal \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubc94\uc704 \ub0b4\uc758 \uc784\uc758\uc758 \uac12\uc744 \uac16\ub294 Tensor \uc0dd\uc131 Operator \ud615\uc2dd\uc774\uc9c0\ub9cc Tensor\ub97c \uc800\uc7a5\ud558\ub294 \uc6a9\ub3c4\ub85c\ub9cc \uc0ac\uc6a9 Summary Members Descriptions public inline NoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName) public inline NoiseGenerator ( Shape * pShape,std::string pName) public inline ~NoiseGenerator () Members public inline NoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName) public inline NoiseGenerator ( Shape * pShape,std::string pName) public inline ~NoiseGenerator () class Operator \u00b6 \ubcf8 \ud504\ub798\uc784\uc6cc\ud06c\uc758 \uac00\uc7a5 \uc791\uc740 \uc5f0\uc0b0 \ub2e8\uc704. Summary Members Descriptions public Operator (std::string pName,int pLoadflag) public Operator ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) public Operator ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,std::string pName,int pLoadflag) public Operator ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1, Operator < DTYPE > * pInput2,std::string pName,int pLoadflag) public Operator (int numInput,...) public virtual ~Operator () public int AddEdgebetweenOperators ( Operator < DTYPE > * pInput) public int AddEdgebetweenOperators (int numInput,va_list ap) public int AddEdgebetweenOperators (int numInput,...) public int AddResult ( Tensor < DTYPE > * pTensor) public int AddGradient ( Tensor < DTYPE > * pTensor) public int AddDelta ( Tensor < DTYPE > * pTensor) public int SetResult ( Tensor < DTYPE > * pTensor) public int SetGradient ( Tensor < DTYPE > * pTensor) public int SetDelta ( Tensor < DTYPE > * pTensor) public int SetDevice (Device pDevice) public int SetDeviceID (unsigned int idOfDevice) public int SetIsTensorholder (int pIsParameter) public int SetIsTrainable (int pIsTrainable) public virtual int SetModeTrain () public virtual int SetModeAccumulate () public virtual int SetModeInference () public virtual Operator < DTYPE > ** GetOutput () public virtual Container](#classContainer)< [Operator < DTYPE > * > * GetOutputContainer () public virtual Operator < DTYPE > ** GetInput () public virtual Container](#classContainer)< [Operator < DTYPE > * > * GetInputContainer () public virtual Tensor < DTYPE > * GetResult () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetResultContainer () public virtual Tensor < DTYPE > * GetGradient () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetGradientContainer () public virtual Tensor < DTYPE > * GetDelta () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetDeltaContainer () public std::string GetName () const public virtual Device GetDevice () public virtual int GetDeviceID () public int GetIsTensorholder () public int GetIsTrainable () public virtual int ForwardPropagate (int pTime) public virtual int BackPropagate (int pTime) public virtual int ResetResult () public virtual int ResetGradient () public virtual void PrintInformation (int level) public virtual void SetDeviceCPU () public virtual int SetResultOnCPU () public virtual int SetGradientOnCPU () public virtual int Save (char * nameOfFile) public virtual int Load (char * nameOfFile) public virtual int Load (FILE * fp) public virtual int Save (FILE * fp) Members public Operator (std::string pName,int pLoadflag) public Operator ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) public Operator ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,std::string pName,int pLoadflag) public Operator ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1, Operator < DTYPE > * pInput2,std::string pName,int pLoadflag) public Operator (int numInput,...) public virtual ~Operator () public int AddEdgebetweenOperators ( Operator < DTYPE > * pInput) public int AddEdgebetweenOperators (int numInput,va_list ap) public int AddEdgebetweenOperators (int numInput,...) public int AddResult ( Tensor < DTYPE > * pTensor) public int AddGradient ( Tensor < DTYPE > * pTensor) public int AddDelta ( Tensor < DTYPE > * pTensor) public int SetResult ( Tensor < DTYPE > * pTensor) public int SetGradient ( Tensor < DTYPE > * pTensor) public int SetDelta ( Tensor < DTYPE > * pTensor) public int SetDevice (Device pDevice) public int SetDeviceID (unsigned int idOfDevice) public int SetIsTensorholder (int pIsParameter) public int SetIsTrainable (int pIsTrainable) public virtual int SetModeTrain () public virtual int SetModeAccumulate () public virtual int SetModeInference () public virtual Operator < DTYPE > ** GetOutput () public virtual Container](#classContainer)< [Operator < DTYPE > * > * GetOutputContainer () public virtual Operator < DTYPE > ** GetInput () public virtual Container](#classContainer)< [Operator < DTYPE > * > * GetInputContainer () public virtual Tensor < DTYPE > * GetResult () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetResultContainer () public virtual Tensor < DTYPE > * GetGradient () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetGradientContainer () public virtual Tensor < DTYPE > * GetDelta () const public virtual Container](#classContainer)< [Tensor < DTYPE > * > * GetDeltaContainer () public std::string GetName () const public virtual Device GetDevice () public virtual int GetDeviceID () public int GetIsTensorholder () public int GetIsTrainable () public virtual int ForwardPropagate (int pTime) public virtual int BackPropagate (int pTime) public virtual int ResetResult () public virtual int ResetGradient () public virtual void PrintInformation (int level) public virtual void SetDeviceCPU () public virtual int SetResultOnCPU () public virtual int SetGradientOnCPU () public virtual int Save (char * nameOfFile) public virtual int Load (char * nameOfFile) public virtual int Load (FILE * fp) public virtual int Save (FILE * fp) class Optimizer \u00b6 Summary Members Descriptions public Optimizer ( Operator < DTYPE > ** pParameters,float pLearningRate,OptimizeDirection pOptimizeDirection) public Optimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public Optimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,float pWeightDecayRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public virtual ~Optimizer () Optimizer \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public int Alloc ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc5d0 \uac12\uc744 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc public int Alloc ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,float pWeightDecayRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc5d0 \uac12\uc744 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc public int Delete () public virtual int UpdateParameter () Trainable Tensor Container\uc758 Operator\ub4e4\uc758 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \uc21c\uc11c\ub300\ub85c \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \uba54\uc18c\ub4dc public int UpdateParameter ( Operator < DTYPE > * pTrainableTensor) public void SetLearningRate (float pLearningRate) public void SetTrainableTensorDegree (int pTrainableTensorDegree) public void SetWeightDecayRate (int pWeightDecayRate) public float GetLearningRate () const public int GetOptimizeDirection () const public Container](#classContainer)< [Operator < DTYPE > * > * GetTrainableTensor () public int GetTrainableTensorDegree () const public float GetWeightDecayRate () const public int ResetParameterGradient () Trainable Tensor Container\uc758 Operator\ub4e4\uc758 Gradient\ub97c \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc Members public Optimizer ( Operator < DTYPE > ** pParameters,float pLearningRate,OptimizeDirection pOptimizeDirection) public Optimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 0 \ub610\ub294 NULL\ub85c \ucd08\uae30\ud654\ud558\uace0, \uc804\ub2ec\ubc1b\uc740 \ub9e4\uac1c\ubcc0\uc218\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ud558\uc5ec Optimizer\uc758 Alloc \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pParameters Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 Trainable Tensor container pLearningRate Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 learning Rate pOptimizeDirection Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 optimize Direction Returns \uc5c6\uc74c See also : Optimizer ::Alloc(Container *> *pParameters, float pLearningRate, OptimizeDirection pOptimizeDirection) public Optimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,float pWeightDecayRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 0 \ub610\ub294 NULL\ub85c \ucd08\uae30\ud654\ud558\uace0, \uc804\ub2ec\ubc1b\uc740 \ub9e4\uac1c\ubcc0\uc218\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ud558\uc5ec Optimizer\uc758 Alloc \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pParameters Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 Trainable Tensor container pLearningRate Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 learning Rate pWeightDecayRate Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 Weight Decay Rate pOptimizeDirection Optimizer \ud074\ub798\uc2a4\uc758 alloc \uba54\uc18c\ub4dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 optimize Direction Returns \uc5c6\uc74c See also : Optimizer ::Alloc(Container *> *pParameters, float pLearningRate, float pWeightDecayRate, OptimizeDirection pOptimizeDirection) public virtual ~Optimizer () Optimizer \ud074\ub798\uc2a4 \uc18c\uba78\uc790 Optimizer ::Delete() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\uc2dc\ud0a8\ub2e4. Returns \uc5c6\uc74c public int Alloc ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc5d0 \uac12\uc744 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec \ubc1b\uc740 \uac12\ub4e4\uc744 \uac01\uac01 Trainable Tensor Conatiner, learning rate, Optimize Direction, Weight Decay Rate \uba64\ubc84 \ubcc0\uc218\uc5d0 \ud560\ub2f9\ud55c\ub2e4. Parameters pParameters Optimizer \ud074\ub798\uc2a4\uc5d0\uc758 Trainable Tensor container \uba64\ubc84 \ubcc0\uc218 pLearningRate Optimizer \ud074\ub798\uc2a4\uc758 learning Rate \uba64\ubc84 \ubcc0\uc218 pOptimizeDirection Optimizer \ud074\ub798\uc2a4\uc758 optimize Direction \uba64\ubc84 \ubcc0\uc218 Returns TRUE public int Alloc ( Container](#classContainer)< [Operator < DTYPE > * > * pParameters,float pLearningRate,float pWeightDecayRate,OptimizeDirection pOptimizeDirection) Optimizer \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc5d0 \uac12\uc744 \ud560\ub2f9\ud558\ub294 \uba54\uc18c\ub4dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec \ubc1b\uc740 \uac12\ub4e4\uc744 \uac01\uac01 Trainable Tensor Conatiner, learning rate, Optimize Direction, Weight Decay Rate \uba64\ubc84 \ubcc0\uc218\uc5d0 \ud560\ub2f9\ud55c\ub2e4. Parameters pParameters Optimizer \ud074\ub798\uc2a4\uc5d0\uc758 Trainable Tensor container \uba64\ubc84 \ubcc0\uc218 pLearningRate Optimizer \ud074\ub798\uc2a4\uc758 learning Rate \uba64\ubc84 \ubcc0\uc218 pWeightDecayRate Optimizer \ud074\ub798\uc2a4\uc758 Weight Decay Rate \uba64\ubc84 \ubcc0\uc218 pOptimizeDirection Optimizer \ud074\ub798\uc2a4\uc758 optimize Direction \uba64\ubc84 \ubcc0\uc218 Returns TRUE public int Delete () public virtual int UpdateParameter () Trainable Tensor Container\uc758 Operator\ub4e4\uc758 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \uc21c\uc11c\ub300\ub85c \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \uba54\uc18c\ub4dc \ud30c\uc0dd \ud074\ub798\uc2a4\uc5d0\uc11c \uc624\ubc84\ub77c\uc774\ub4dc\ud574\uc11c \uc0ac\uc6a9\ud558\ub294 \uba54\uc18c\ub4dc Returns TRUE public int UpdateParameter ( Operator < DTYPE > * pTrainableTensor) public void SetLearningRate (float pLearningRate) public void SetTrainableTensorDegree (int pTrainableTensorDegree) public void SetWeightDecayRate (int pWeightDecayRate) public float GetLearningRate () const public int GetOptimizeDirection () const public Container](#classContainer)< [Operator < DTYPE > * > * GetTrainableTensor () public int GetTrainableTensorDegree () const public float GetWeightDecayRate () const public int ResetParameterGradient () Trainable Tensor Container\uc758 Operator\ub4e4\uc758 Gradient\ub97c \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc Returns TRUE Operator ::ResetGradient() class PRelu \u00b6 class PRelu : public Operator< DTYPE > Summary Members Descriptions public inline PRelu ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int pLoadflag) PRelu\uc758 \uc0dd\uc131\uc790. public inline PRelu ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,std::string pName,int pLoadflag) PRelu\uc758 \uc0dd\uc131\uc790. public inline ~PRelu () LRelu\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pinput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () public inline virtual int ForwardPropagate (int pTime) PRelu\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) PRelu\uc758 BackPropagate\ub9e4\uc18c\ub4dc. Members public inline PRelu ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int pLoadflag) PRelu\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator pWeight \uc785\ub825\uac12\uc774 \uc74c\uc218\uc77c \uacbd\uc6b0 \uc0ac\uc6a9\ud558\ub294 \uae30\uc6b8\uae30 int Alloc(Operator *pInput, Operator *pWeight) public inline PRelu ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,std::string pName,int pLoadflag) PRelu\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator pWeight \uc785\ub825\uac12\uc774 \uc74c\uc218\uc77c \uacbd\uc6b0 \uc0ac\uc6a9\ud558\ub294 \uae30\uc6b8\uae30 pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight) public inline ~PRelu () LRelu\uc758 \uc18c\uba78\uc790. See also : void Delete() public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pinput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. Parameters pInput \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator pWeight \uc785\ub825\uac12\uc774 \uc74c\uc218\uc77c \uacbd\uc6b0 \uc0ac\uc6a9\ud558\ub294 Tensor\uc758 \uc815\ubcf4\ub97c \uac00\uc9c4 Operator Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () public inline virtual int ForwardPropagate (int pTime) PRelu\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. input\uc758 Tensor\uac12\ub4e4 \uc911 0.f\uc774\uc0c1\uc758 \uac12\uc740 \uadf8\ub300\ub85c result\uc5d0 \uc800\uc7a5\ud558\uace0, 0.f\ubbf8\ub9cc\uc758 \uac12\uc740 weight Tensor\uc758 \uac12\uacfc \uacf1\ud55c \ud6c4 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime pInput\uc758 m_timesize\uac12, default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) PRelu\uc758 BackPropagate\ub9e4\uc18c\ub4dc. input_delta\ub294 result\uac12\uc774 0\ubcf4\ub2e4 \ud074 \uacbd\uc6b0 input_delta\uc5d0 \ub354\ud558\uace0, 0\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0 input_delta\uc5d0 weight\uc744 \uacf1\ud55c \ud6c4 \ub354\ud55c\ub2e4. weight_delta\ub294 result\uac12\uc774 0\ubcf4\ub2e4 \ud074 \uacbd\uc6b0 0\uc5d0 \ub354\ud558\uace0, 0\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0 input_delta\uc5d0 input\uc744 \uacf1\ud55c \ud6c4 \ub354\ud55c\ub2e4. Parameters pTime pInput\uc758 m_timesize\uac12, default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class ReconstructionError \u00b6 class ReconstructionError : public Operator< DTYPE > Summary Members Descriptions public inline ReconstructionError ( Operator < DTYPE > * pInput, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~ReconstructionError () public inline virtual int Alloc ( Operator < DTYPE > * pInput) public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline ReconstructionError ( Operator < DTYPE > * pInput, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~ReconstructionError () public inline virtual int Alloc ( Operator < DTYPE > * pInput) public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class Recurrent \u00b6 class Recurrent : public Operator< DTYPE > Summary Members Descriptions public inline Recurrent ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeightXH, Operator < DTYPE > * pWeightHH, Operator < DTYPE > * pWeightHY) public inline Recurrent ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeightXH, Operator < DTYPE > * pWeightHH, Operator < DTYPE > * pWeightHY,std::string pName) public inline ~Recurrent () public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeightXH, Operator < DTYPE > * pWeightHH, Operator < DTYPE > * pWeightHY) public inline void Delete () public inline int ForwardPropagate (int pTime,int pThreadNum) public inline int BackPropagate (int pTime,int pThreadNum) Members public inline Recurrent ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeightXH, Operator < DTYPE > * pWeightHH, Operator < DTYPE > * pWeightHY) public inline Recurrent ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeightXH, Operator < DTYPE > * pWeightHH, Operator < DTYPE > * pWeightHY,std::string pName) public inline ~Recurrent () public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeightXH, Operator < DTYPE > * pWeightHH, Operator < DTYPE > * pWeightHY) public inline void Delete () public inline int ForwardPropagate (int pTime,int pThreadNum) public inline int BackPropagate (int pTime,int pThreadNum) class Relu \u00b6 class Relu : public Operator< DTYPE > Summary Members Descriptions public inline Relu ( Operator < DTYPE > * pInput,int pLoadflag) Relu\uc758 \uc0dd\uc131\uc790. public inline Relu ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) Relu\uc758 \uc0dd\uc131\uc790. public inline ~Relu () Relu\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pinput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () public inline virtual int ForwardPropagate (int pTime) Relu\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) Relu\uc758 BackPropagate\ub9e4\uc18c\ub4dc. Members public inline Relu ( Operator < DTYPE > * pInput,int pLoadflag) Relu\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator int Alloc(Operator *pInput) public inline Relu ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) Relu\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pInput) public inline ~Relu () Relu\uc758 \uc18c\uba78\uc790. See also : void Delete() public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pinput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. Parameters pInput \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () public inline virtual int ForwardPropagate (int pTime) Relu\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. input\uc758 Tensor\uac12\ub4e4 \uc911 0.f\uc774\uc0c1\uc758 \uac12\uc740 \uadf8\ub300\ub85c result\uc5d0 \uc800\uc7a5\ud558\uace0, 0.f\ubbf8\ub9cc\uc758 \uac12\uc740 0.f\ub85c \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) Relu\uc758 BackPropagate\ub9e4\uc18c\ub4dc. result\uac12\uc774 0\ubcf4\ub2e4 \ud074 \uacbd\uc6b0 input_delta\uc5d0 \ub354\ud558\uace0, 0\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0 0.f\ub97c \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class ReShape \u00b6 class ReShape : public Operator< DTYPE > Summary Members Descriptions public inline ReShape ( Operator < DTYPE > * pInput,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 public inline ReShape ( Operator < DTYPE > * pInput,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 public inline ReShape ( Operator < DTYPE > * pInput,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 public inline ReShape ( Operator < DTYPE > * pInput,int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 public inline ~ReShape () ReShape\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput,int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \uac12\ub4e4\ub85c Shape\uc758 dim\ub4e4\uc744 \ubc14\uafbc\ub2e4. public inline void Delete () Delete \ub9e4\uc18c\ub4dc. public inline virtual int ForwardPropagate (int pTime) ReShape\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc public inline virtual int BackPropagate (int pTime) ReShape\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline ReShape ( Operator < DTYPE > * pInput,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pRowSize, pColSize\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput ReShape\ud560 Operator . pRowSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 rowsize. pColSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 colsize. @paramp pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc758 \uc774\ub984. int Alloc(Operator *pInput, int pTimeSize, int pBatchSize, int pChannelSize, int pRowSize, int pColSize) public inline ReShape ( Operator < DTYPE > * pInput,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pRowSize, pColSize\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput ReShape\ud560 Operator . pChannelSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 channelsize pRowSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 rowsize. pColSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 colsize. @paramp pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc758 \uc774\ub984. int Alloc(Operator *pInput, int pTimeSize, int pBatchSize, int pChannelSize, int pRowSize, int pColSize) public inline ReShape ( Operator < DTYPE > * pInput,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pRowSize, pColSize\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput ReShape\ud560 Operator . pBatchSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 batchsize. pChannelSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 channelsize. pRowSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 rowsize. pColSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 colsize. @paramp pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc758 \uc774\ub984. int Alloc(Operator *pInput, int pTimeSize, int pBatchSize, int pChannelSize, int pRowSize, int pColSize) public inline ReShape ( Operator < DTYPE > * pInput,int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pLoadflag) ReShape\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pRowSize, pColSize\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput ReShape\ud560 Operator . pTimeSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 timesize. pBatchSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 batchsize. pChannelSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 channelsize. pRowSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 rowsize. pColSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 colsize. @paramp pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc758 \uc774\ub984. int Alloc(Operator *pInput, int pTimeSize, int pBatchSize, int pChannelSize, int pRowSize, int pColSize) public inline ~ReShape () ReShape\uc758 \uc18c\uba78\uc790. Delete \ub9e4\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud55c\ub2e4. void Delete() public inline int Alloc ( Operator < DTYPE > * pInput,int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \uac12\ub4e4\ub85c Shape\uc758 dim\ub4e4\uc744 \ubc14\uafbc\ub2e4. result\uc5d0 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \uac12\ub4e4\ub85c result\uc758 shape\uc744 \ubc14\uafb8\uc5b4 \ub123\uace0, Delta\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c \ubc1b\uc740 Dimension \uc815\ubcf4\ub4e4\ub85c \uc0c8\ub85c\uc6b4 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4, Parameters pInput ReShape\ud560 Operator . pTimeSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 timesize. pBatchSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 batchsize. pChannelSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 channelsize. pRowSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 rowsize. pColSize ReShape\uc73c\ub85c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 Tensor\uc758 colsize. Returns \uc131\uacf5 \uc2dc TRUE. public inline void Delete () Delete \ub9e4\uc18c\ub4dc. \ubcc4\ub2e4\ub978 \uae30\ub2a5\uc740 \uc5c6\ub2e4. public inline virtual int ForwardPropagate (int pTime) ReShape\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc input\uac12\uc744 result(\uc0c8\ub85c\uc6b4 Shape\uc744 \uac16\ub294 Tensor )\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) ReShape\uc758 BackPropagate \ub9e4\uc18c\ub4dc. input_delta\uc5d0 this_delta\uac12\uc744 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class RMSPropOptimizer \u00b6 class RMSPropOptimizer : public Optimizer< DTYPE > Summary Members Descriptions public inline RMSPropOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float decay,float epsilon,bool centered,OptimizeDirection pOptimizeDirection) RMSPropOptmizer \uc0dd\uc131\uc790. public inline RMSPropOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float decay,float epsilon,bool centered,float weightDecayRate,OptimizeDirection pOptimizeDirection) RMSPropOptmizer \uc0dd\uc131\uc790. public inline ~RMSPropOptimizer () RMSPropOpmitzer \uc18c\uba78\uc790 public inline virtual void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc public inline int Alloc (float decay,float epsilon,bool centered) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * m_pMeanSquared) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * m_pMeanSquared, Tensor < DTYPE > * m_pMeanGrad) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc Members public inline RMSPropOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float decay,float epsilon,bool centered,OptimizeDirection pOptimizeDirection) RMSPropOptmizer \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pLearningRate Optimizer\uc758 learning rate decay m_aaMeanSquared, m_pMeanGrad, m_aaMeanGrad, gradient \uc870\uc815 \uac00\uc911\uce58 \uac12 epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 centered cemtered version enable boolean \ubcc0\uc218 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(decay, epsilon, centered) public inline RMSPropOptimizer ( Container](#classContainer)< [Operator < DTYPE > * > * pParameterContainer,float pLearningRate,float decay,float epsilon,bool centered,float weightDecayRate,OptimizeDirection pOptimizeDirection) RMSPropOptmizer \uc0dd\uc131\uc790. \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uace0 Alloc \ub9e4\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters *pParameterContainer \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pLearningRate Optimizer\uc758 learning rate decay m_aaMeanSquared, m_pMeanGrad, m_aaMeanGrad, gradient \uc870\uc815 \uac00\uc911\uce58 \uac12 epsilon \ubd84\ubaa8 \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 weightDecayRate \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218\uac00 \ud074 \ub54c \ud328\ub110\ud2f0\ub97c \ubd80\uacfc\ud558\ub294 \uac12 pOptimizeDirection Optimizing\uc758 \ubc29\ud5a5(MAXIMIZE or MINIMIZE) Returns \uc5c6\uc74c See also : int Alloc(decay, epsilon, centered) public inline ~RMSPropOptimizer () RMSPropOpmitzer \uc18c\uba78\uc790 Returns \uc5c6\uc74c public inline virtual void Delete () Optimizer\uc758 Delete \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_aaMeanSquared, m_aaMeanGrad\uc758 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline int Alloc (float decay,float epsilon,bool centered) Optimizer\uc758 Alloc \ub9e4\uc18c\ub4dc \ub9f4\ubc84 \ubcc0\uc218 m_ppParameter, m_numOfParameter, m_aaMeanSquared, m_aaMeanGrad\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. m_aaMeanSquared\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. m_aaMeanGrad\ub97c m_ppParameter\uc640 \uac19\uc740 Shape\uc758 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec \ub123\ub294\ub2e4. Parameters decay m_aaMeanSquared, m_pMeanGrad, m_aaMeanGrad, gradient \uc870\uc815 \uac00\uc911\uce58 \uac12 epsilon Root Sqaure \uac12\uc774 0\uc774 \ub418\ub294 \uac83\uc744 \ubc29\uc9c0 \ud558\ub294 \uac12 centered cemtered version enable boolean \ubcc0\uc218 Returns \uc131\uacf5 \uc2dc TRUE See also : Container < Operator > GetTrainableTensor() See also : int GetTrainableTensorDegree() public inline virtual int UpdateParameter () \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_centered \uc720\ubb34\uc5d0 \ub530\ub77c centered version \uacfc not use RMSProp UpdateParameter \ud638\ucd9c Returns \uc131\uacf5 \uc2dc TRUE See also : int UpdateParameter(Operator *pParameter, Tensor *m_pMeanSquared) See also : int UpdateParameter(Operator *pParameter, Tensor *m_pMeanSquared, Tensor *m_pMeanGrad) public inline virtual int UpdateParameter ( Operator < DTYPE > * pParameter) UpdateParameter default \ud568\uc218 Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 Returns \uc131\uacf5 \uc2dc TRUE public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * m_pMeanSquared) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_decay \uac00\uc911\uce58\ub85c \uc870\uc815\ub41c m_pMeanSquared, gradinet\ub85c m_pMeanSquared \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. \uc5c5\ub370\uc774\ud2b8 \ub41c m_pMeanSquared\ub85c \uc9c0\uc218\ud3c9\uade0 \uc774\ub3d9 \uacf5\uc2dd\uc744 \uc801\uc6a9\ud558\uc5ec \ud30c\ub77c\ubbf8\ud130\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pMeanSquared \uc5c5\ub370\uc774\ud2b8 \ud560 pMeanSquared Returns \uc131\uacf5 \uc2dc TURE public inline int UpdateParameter ( Operator < DTYPE > * pParameter, Tensor < DTYPE > * m_pMeanSquared, Tensor < DTYPE > * m_pMeanGrad) \ud30c\ub77c\ubbf8\ud130 \uac12\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \uba54\uc18c\ub4dc m_decay \uac00\uc911\uce58\ub85c \uc870\uc815\ub41c gradient\ub85c m_pMeanGrad\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. m_decay \uac00\uc911\uce58\ub85c \uc870\uc815\ub41c m_pMeanSquared, gradinet\ub85c m_pMeanSquared \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. \uc5c5\ub370\uc774\ud2b8 \ub41c m_pMeanSquared\uc640 \uc5c5\ub370\uc774\ud2b8 \ub41c m_pMeanGrad\uc758 \uc81c\uacf1\uc758 \ucc28\ub97c \uc9c0\uc218\ud3c9\uade0\uc774\ub3d9\uacf5\uc2dd\uc5d0 \uc801\uc6a9\ud558\uc5ec \ud30c\ub77c\ubbf8\ud130\ub97c \uc5c5\ub370\uc774\ud2b8 \ud55c\ub2e4. Parameters pParameter \uc5c5\ub370\uc774\ud2b8 \ud560 Tensor\ub97c \uac00\uc9c0\uace0 \uc788\ub294 Operator\ud3ec\uc778\ud130 pMeanSquared \uc5c5\ub370\uc774\ud2b8 \ud560 pMeanSquared pMeanGrad \uc5c5\ub370\uc774\ud2b8 \ud560 pMeanGrad Returns \uc131\uacf5 \uc2dc TURE class Sequential \u00b6 class Sequential : public Operator< DTYPE > Summary Members Descriptions public inline Sequential (int numOfOperator,...) public inline ~Sequential () public inline int Alloc (int numOfOperator,va_list * ap) public inline int ForwardPropagate () public inline int BackPropagate () Members public inline Sequential (int numOfOperator,...) public inline ~Sequential () public inline int Alloc (int numOfOperator,va_list * ap) public inline int ForwardPropagate () public inline int BackPropagate () class Shape \u00b6 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape\uc744 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 Tensor\uc758 \ucc28\uc6d0 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape\uc744 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 Summary Members Descriptions public Shape (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4) 5D-Shape \uc0dd\uc131\uc790 public Shape (int pSize0,int pSize1,int pSize2,int pSize3) 4D-Shape \uc0dd\uc131\uc790 public Shape (int pSize0,int pSize1,int pSize2) 3D-Shape \uc0dd\uc131\uc790 public Shape (int pSize0,int pSize1) 2D-Shape \uc0dd\uc131\uc790 public Shape (int pSize0) 1D-Shape \uc0dd\uc131\uc790 public Shape ( Shape * pShape) Shape \ud074\ub798\uc2a4\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 \uae4a\uc740 \ubcf5\uc0ac(Deep Copy)\ud558\ub294 Shape \uc0dd\uc131\uc790 public virtual ~Shape () Shape \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public int GetRank () Shape \ud074\ub798\uc2a4\uc758 Rank \uba64\ubc84 \ubcc0\uc218\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public int GetDim (int pRanknum) Rank \uc778\ub371\uc2a4\ub97c \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc544 Dimension\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public int & operator[] (int pRanknum) []\uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 public Device GetDevice () Shape \ud074\ub798\uc2a4\uc758 Device \uba64\ubc84 \ubcc0\uc218\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public int GetDeviceID () Shape \ud074\ub798\uc2a4\uc758 idOfDevice \uba64\ubc84 \ubcc0\uc218\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc public int ReShape (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4) \uc0c8\ub85c\uc6b4 Shape\uc744 \ub9cc\ub4e4\uc5b4 \ubc18\ud658 \ud558\ub294 \uba54\uc18c\ub4dc. public int ReShape (int pRank,...) Shape \uac01 \ucd95\uc758 Dimension\uc815\ubcf4\ub97c \ucd08\uae30\ud654 \ud558\ub294 \uba54\uc18c\ub4dc. public int SetDeviceCPU () Shape \ud074\ub798\uc2a4\uc758 Device \uba64\ubc84 \ubcc0\uc218\ub97c CPU\ub85c \ubcc0\uacbd\ud55c\ub2e4. Members public Shape (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4) 5D-Shape \uc0dd\uc131\uc790 5\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790 Parameters pSize0 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize1 \ub450 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize2 \uc138 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize3 \ub124 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize4 \ub2e4\uc12f \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 Returns \uc5c6\uc74c See also : Shape::Alloc(int pRank, ...) public Shape (int pSize0,int pSize1,int pSize2,int pSize3) 4D-Shape \uc0dd\uc131\uc790 4\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790 Parameters pSize0 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize1 \ub450 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize2 \uc138 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize3 \ub124 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 See also : Shape::Alloc(int pRank, ...) Returns \uc5c6\uc74c public Shape (int pSize0,int pSize1,int pSize2) 3D-Shape \uc0dd\uc131\uc790 3\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790 Parameters pSize0 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize1 \ub450 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize2 \uc138 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 See also : Shape::Alloc(int pRank, ...) Returns \uc5c6\uc74c public Shape (int pSize0,int pSize1) 2D-Shape \uc0dd\uc131\uc790 2\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790 Parameters pSize0 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 pSize1 \ub450 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 Returns \uc5c6\uc74c See also : Shape::Alloc(int pRank, ...) public Shape (int pSize0) 1D-Shape \uc0dd\uc131\uc790 1\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790 Parameters pSize0 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30 Returns \uc5c6\uc74c See also : Shape::Alloc(int pRank, ...) public Shape ( Shape * pShape) Shape \ud074\ub798\uc2a4\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 \uae4a\uc740 \ubcf5\uc0ac(Deep Copy)\ud558\ub294 Shape \uc0dd\uc131\uc790 Parameters pShape \uae4a\uc740 \ubcf5\uc0ac(Deep Copy)\uc758 \ub300\uc0c1\uc774 \ub418\ub294 Shape \ud074\ub798\uc2a4 Returns \uc5c6\uc74c See also : Shape::Alloc(Shape *pShape) public virtual ~Shape () Shape \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ud574\ub2f9 Shape \ud074\ub798\uc2a4\ub97c \uc704\ud574 \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ub41c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \ubc18\ud658\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\ud55c\ub2e4. Returns \uc5c6\uc74c See also : Shape::Delete() public int GetRank () Shape \ud074\ub798\uc2a4\uc758 Rank \uba64\ubc84 \ubcc0\uc218\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Returns m_Rank public int GetDim (int pRanknum) Rank \uc778\ub371\uc2a4\ub97c \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc544 Dimension\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Parameters pRanknum Dimension\uc744 \ubc18\ud658\ud558\uace0\uc790 \ud558\ub294 \ucd95\uc758 \ubc88\ud638 Returns \uc131\uacf5 \uc2dc m_aDim[pRanknum], \uc2e4\ud328 \uc2dc \uc608\uc678 \ucc98\ub9ac public int & operator[] (int pRanknum) []\uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 Rank \uc778\ub371\uc2a4\ub97c \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc544 Dimension\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Parameters pRanknum Dimension\uc744 \ubc18\ud658\ud558\uace0\uc790 \ud558\ub294 \ucd95\uc758 \ubc88\ud638 Returns \uc131\uacf5 \uc2dc m_aDim[pRanknum], \uc2e4\ud328 \uc2dc \uc608\uc678 \ucc98\ub9ac public Device GetDevice () Shape \ud074\ub798\uc2a4\uc758 Device \uba64\ubc84 \ubcc0\uc218\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Returns m_Device public int GetDeviceID () Shape \ud074\ub798\uc2a4\uc758 idOfDevice \uba64\ubc84 \ubcc0\uc218\ub97c \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Returns m_idOfDevice public int ReShape (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4) \uc0c8\ub85c\uc6b4 Shape\uc744 \ub9cc\ub4e4\uc5b4 \ubc18\ud658 \ud558\ub294 \uba54\uc18c\ub4dc. \ud30c\ub9c8\ubbf8\ud130\ub85c \uc804\ub2ec\ubc1b\uc740 \uac01 \ucd95\uc758 Dimension\uc815\ubcf4\ub97c \ubc14\ud0d5\uc73c\ub85c \uc0c8\ub85c\uc6b4 Shape\uc744 \uc0dd\uc131\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4. Parameters pSize0 Time\uc758 Dimension pSize1 Batch\uc758 Dimension pSize2 Channel\uc758 Dimension pSize3 Row\uc758 Dimension pSize4 Column\uc758 Dimension Returns \ud30c\ub77c\ubbf8\ud130 \uc815\ubcf4\ub97c \ubc14\ud0d5\uc73c\ub85c \ub9cc\ub4e0 Shape public int ReShape (int pRank,...) Shape \uac01 \ucd95\uc758 Dimension\uc815\ubcf4\ub97c \ucd08\uae30\ud654 \ud558\ub294 \uba54\uc18c\ub4dc. \ud30c\ub9c8\ubbf8\ud130\ub85c \uc804\ub2ec\ubc1b\uc740 \uac01 \ucd95\uc758 Dimension\uc815\ubcf4\ub97c m_aDim\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pRank Shape\uc744 \uc774\ub8e8\ub294 \ucd95\uc758 \uac2f\uc218\ub97c \ub098\ud0c0\ub0b4\ub294 \ubcc0\uc218. ... \uac01 \ucd95\uc758 Dimension\uc815\ubcf4\ub97c \uac00\uc9c0\uace0 \uc788\ub294 \uac00\ubcc0\uc778\uc790. Returns \uc131\uacf5 \uc2dc TRUE public int SetDeviceCPU () Shape \ud074\ub798\uc2a4\uc758 Device \uba64\ubc84 \ubcc0\uc218\ub97c CPU\ub85c \ubcc0\uacbd\ud55c\ub2e4. Returns TRUE class Sigmoid \u00b6 class Sigmoid : public Operator< DTYPE > Summary Members Descriptions public inline Sigmoid ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) Sigmoid\uc758 \uc0dd\uc131\uc790. public inline ~Sigmoid () Sigmoid\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Sigmoid\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) SIGMOID\uc758 BackPropagate \ub9e4\uc18c\ub4dc. public inline DTYPE SIGMOID (DTYPE data) SIGMOID \ud568\uc218 Members public inline Sigmoid ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) Sigmoid\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. int Alloc(Operator *pInput) public inline ~Sigmoid () Sigmoid\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. Parameters pInput \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int ForwardPropagate (int pTime) Sigmoid\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc. input\uc758 Tensor\uac12\ub4e4\uc744 SIGMOID\uac12\uc744 \ucde8\ud55c \ub4a4 result\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) SIGMOID\uc758 BackPropagate \ub9e4\uc18c\ub4dc. result\uac12\uc73c\ub85c Sigmoid \ubbf8\ubd84 \uac12\uc744 \uacc4\uc0b0\ud558\uc5ec input_delta\uc5d0 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline DTYPE SIGMOID (DTYPE data) SIGMOID \ud568\uc218 1.0/(1.0 + e^(-x)) Parameters data SIGMOID\ud560 \uac12 Returns data\ub97c SIGMOID\ud568\uc218\uc5d0 \ub123\uc740 \uacb0\uacfc \uac12. class Softmax \u00b6 class Softmax : public Operator< DTYPE > Summary Members Descriptions public inline Softmax ( Operator < DTYPE > * pOperator,DTYPE epsilon,int pLoadflag) Softmax\uc758 \uc0dd\uc131\uc790. public inline Softmax ( Operator < DTYPE > * pOperator,std::string pName,int pLoadflag) Softmax\uc758 \uc0dd\uc131\uc790. public inline Softmax ( Operator < DTYPE > * pOperator,DTYPE epsilon,std::string pName,int pLoadflag) Softmax\uc758 \uc0dd\uc131\uc790. public inline ~Softmax () Softmax\uc758 \uc18c\uba78\uc790. public inline virtual int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pOperator\ub85c \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud558\uace0 Result, Gradient\ub97c \uc124\uc815\ud55c\ub2e4. public inline virtual void Delete () Alloc\ub9e4\uc18c\ub4dc\uc5d0\uc11c \ud560\ub2f9\ud588\ub358 sum, max\ub97c \uc0ad\uc81c\ud558\uace0 \ud3ec\uc778\ud130\ub97c NULL\ub85c \ucd08\uae30\ud654 \ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Softmax\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc public inline virtual int BackPropagate (int pTime) softmax\uc758 BackPropagate \ub9e4\uc18c\ub4dc. public inline DTYPE Max ( Tensor < DTYPE > * input,int start,int end) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 Tensor\uc5d0\uc11c \uac00\uc7a5 \ud070 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218. Members public inline Softmax ( Operator < DTYPE > * pOperator,DTYPE epsilon,int pLoadflag) Softmax\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pOperator, epsilon\uc744 Alloc\uc2dc\ud0a8\ub2e4. Parameters pOperator Softmax\ud560 \ub300\uc0c1 Operator , \uc774 \ub9e4\uc18c\ub4dc\uc5d0\uc11c Alloc\uc2dc\ud0a8\ub2e4. epsilon ForwardPropagate\uc5d0 \uc0ac\uc6a9\ud790 \uac12. 0\uc73c\ub85c \ub098\ub204\uc5b4\uc9c0\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\ub294 \uc5ed\ud560\uc744 \ud55c\ub2e4. virtual int Alloc( Operator *pOperator, DTYPE epsilon = 1e-6f public inline Softmax ( Operator < DTYPE > * pOperator,std::string pName,int pLoadflag) Softmax\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pOperator\uc744 Alloc\ud55c\ub2e4. Parameters pOperator Softmax\ud560 \ub300\uc0c1 Operator , \uc774 \ub9e4\uc18c\ub4dc\uc5d0\uc11c Alloc\uc2dc\ud0a8\ub2e4. pName \uc0ac\uc6a9\uc790\uac00 Operator\uc5d0 \ubd80\uc5ec\ud55c \uc774\ub984. virtual int Alloc( Operator *pOperator, DTYPE epsilon = 1e-6f public inline Softmax ( Operator < DTYPE > * pOperator,DTYPE epsilon,std::string pName,int pLoadflag) Softmax\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pOperator, epsilon\uc744 Alloc\uc2dc\ud0a8\ub2e4. Parameters pOperator Softmax\ud560 \ub300\uc0c1 Operator , \uc774 \ub9e4\uc18c\ub4dc\uc5d0\uc11c Alloc\uc2dc\ud0a8\ub2e4. @prram epsilon ForwardPropagate\uc5d0 \uc0ac\uc6a9\ud790 \uac12. 0\uc73c\ub85c \ub098\ub204\uc5b4\uc9c0\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\ub294 \uc5ed\ud560\uc744 \ud55c\ub2e4. pName \uc0ac\uc6a9\uc790\uac00 Operator\uc5d0 \ubd80\uc5ec\ud55c \uc774\ub984. virtual int Alloc( Operator *pOperator, DTYPE epsilon = 1e-6f public inline ~Softmax () Softmax\uc758 \uc18c\uba78\uc790. public inline virtual int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pOperator\ub85c \ub9f4\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud558\uace0 Result, Gradient\ub97c \uc124\uc815\ud55c\ub2e4. input\uc73c\ub85c \ubc1b\uc740 Operator\uc758 Shape\uc815\ubcf4\ub4e4\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4dc\uc744 \ucd08\uae30\ud654 \ud558\uace0, \uac19\uc740 Shape\uc744 \uac16\ub294 Tensor\ub97c \ub9cc\ub4e4\uc5b4 Result\uc640 Gradient\ub85c \uc124\uc815\ud55c\ub2e4. Parameters pOperator Softmax\ud560 Operator\ub4e4 epsilon 0\uc73c\ub85c \ub098\ub204\uc5b4\uc9c0\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uae30\uc704\ud574 softmax\uc2dd\uc758 \ubd84\ubaa8\uc5d0 \ub354\ud558\ub294 \uac12. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual void Delete () Alloc\ub9e4\uc18c\ub4dc\uc5d0\uc11c \ud560\ub2f9\ud588\ub358 sum, max\ub97c \uc0ad\uc81c\ud558\uace0 \ud3ec\uc778\ud130\ub97c NULL\ub85c \ucd08\uae30\ud654 \ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Softmax\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc max\uac12\uc744 \uacc4\uc0b0\ud558\uace0, exp()\ud55c \ubaa8\ub4e0 \uac12\ub4e4\uc744 \ub354\ud574 sum\uc744 \uad6c\ud55c \ub4a4, \uac01\uac01\uc758 exp(input)\ud55c \uac12\uc744 sum\uc73c\ub85c \ub098\ub204\uc5b4\uc8fc\uc5b4 \ud655\ub960\uac12\uc744 \uad6c\ud558\uace0 result\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) softmax\uc758 BackPropagate \ub9e4\uc18c\ub4dc. softmax\uc758 \ubbf8\ubd84 \uac12\uc744 \uad6c\ud558\uc5ec input_delta\uc5d0 \ub123\uc5b4\uc900\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline DTYPE Max ( Tensor < DTYPE > * input,int start,int end) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 Tensor\uc5d0\uc11c \uac00\uc7a5 \ud070 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218. Parameters input \uac00\uc7a5 \ud070 \uac12\uc744 \ucc3e\uc744 \ub300\uc0c1 Tensor . start \uac12\uc744 \ucc3e\uc744 Tensor\uc548\uc5d0\uc11c\uc758 \uc2dc\uc791\uc704\uce58. end \uac12\uc744 \ucc3e\uc744 Tensor\uc548\uc5d0\uc11c\uc758 \uc885\ub8cc\uc704\uce58. Returns input Tensor\uc758 \uac12\ub4e4 \uc911 \uac00\uc7a5 \ud070 \uac12.. class SoftmaxCrossEntropy \u00b6 class SoftmaxCrossEntropy : public LossFunction< DTYPE > \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 Cross Entropy \uacc4\uc0b0 \uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4 Softmax Function\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \ub9c8\uc9c0\ub9c9 Operator\ub85c \uc0ac\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 Gradient \uacc4\uc0b0\uc744 \uc6a9\uc774\ud558\uac8c \ud55c\ub2e4 Summary Members Descriptions public inline SoftmaxCrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE epsilon,std::string pName) SoftmaxCrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline SoftmaxCrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) SoftmaxCrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline virtual ~SoftmaxCrossEntropy () SoftmaxCrossEntropy LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) SoftmaxCrossEntropy \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \uba54\ubaa8\ub9ac \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) SoftmaxCrossEntropy LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) Softmax CrossEntropy LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline DTYPE Max ( Tensor < DTYPE > * input,int start,int end) \uc9c0\uc815\ub41c \ubc94\uc704 \uc548\uc5d0\uc11c \uc785\ub825 Tensor\uc758 \ub370\uc774\ud130 \uac12 \uc911 \ucd5c\ub313\uac12\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Members public inline SoftmaxCrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE epsilon,std::string pName) SoftmaxCrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 epsilon\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec SoftmaxCrossEntropy ::Alloc(Operator *pOperator, DTYPE epsilon) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator SoftmaxCrossEntropy ::Alloc(Operator *pOperator, DTYPE epsilon) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator epsilon \uc5f0\uc0b0\uc5d0 \ub300\ud55c translation \uc694\uc18c pName LossFunction\uc758 \uc774\ub984, \uc9c0\uc815\ud558\uc9c0 \uc54a\uc744 \uc2dc \"NO NAME\"\uc73c\ub85c \ucd08\uae30\ud654 Returns \uc5c6\uc74c See also : SoftmaxCrossEntropy ::Alloc(Operator *pOperator, DTYPE epsilon) public inline SoftmaxCrossEntropy ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) SoftmaxCrossEntropy LossFunction \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 LossFunction \ud074\ub798\uc2a4\uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uace0, Operator\uc640 1e-6f\uc5d0 \ud574\ub2f9\ud558\ub294 epsilon \uac12\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc5ec SoftmaxCrossEntropy ::Alloc(Operator *pOperator, DTYPE epsilon) \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. Parameters pOperator SoftmaxCrossEntropy ::Alloc(Operator *pOperator, DTYPE epsilon) \uba54\uc18c\ub4dc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 Operator pLabel LossFunction\uc758 \uc785\ub825 \ub808\uc774\ube14\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pName LossFunction\uc758 \uc774\ub984, \uc9c0\uc815\ud558\uc9c0 \uc54a\uc744 \uc2dc \"NO NAME\"\uc73c\ub85c \ucd08\uae30\ud654 Returns \uc5c6\uc74c See also : SoftmaxCrossEntropy ::Alloc(Operator *pOperator, DTYPE epsilon) public inline virtual ~SoftmaxCrossEntropy () SoftmaxCrossEntropy LossFunction \ud074\ub798\uc2a4 \uc18c\uba78\uc790 SoftmaxCrossEntropy ::Delete() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uace0 \ud074\ub798\uc2a4\ub97c \uc18c\uba78\uc2dc\ud0a8\ub2e4 Returns \uc5c6\uc74c public inline int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) SoftmaxCrossEntropy \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\ub294 \uba54\uc18c\ub4dc SoftmaxCrossEntropy \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc758 \uac12\uc744 \ucd08\uae30\ud654 \ud558\uace0 \ud3ec\uc778\ud130 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc5d0 \ub3d9\uc801\uc73c\ub85c \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud55c\ub2e4. Parameters pOperator SoftmaxCrossEntropy \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \uc785\ub825 Operator epsilon \uc5f0\uc0b0\uc5d0 \ub300\ud55c translation \uc694\uc18c Returns TRUE public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \uba54\ubaa8\ub9ac \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc softmax Result \ud150\uc11c \ud3ec\uc778\ud130, sum \ud3ec\uc778\ud130, max \ud3ec\uc778\ud130\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4 Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) SoftmaxCrossEntropy LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc LossFunction\uc758 \uc785\ub825 Operator\uc758 Tensor \uac12\uc5d0 \ub300\ud574\uc11c softmax \ud568\uc218 \uac12\uc744 \uacc4\uc0b0\ud558\uace0 \uc774\ub97c \ub808\uc774\ube14 \uac12\uacfc \ube44\uad50\ud574 Cross Entropy\ub97c \uad6c\ud55c\ub2e4 \uc5f0\uc0b0\uc744 \uc6a9\uc774\ud558\uac8c \ud558\uae30 \uc704\ud574 Max\uac12\uacfc epsilon \uac12\uc744 \uc0ac\uc6a9\ud55c\ub2e4 Parameters pTime \uc785\ub825 Tensor\uc758 Time \ucd95\uc758 Dimension Returns LossFunction\uc758 \uc785\ub825 Operator\uc5d0 \ub300\ud55c Softmax Cross Entropy public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) Softmax CrossEntropy LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc \uad6c\uc131\ud55c \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 Softmax CrossEntropy LossFunction\uc5d0 \ub300\ud55c \uc785\ub825 Tensor\uc758 Gradient\ub97c \uacc4\uc0b0\ud55c\ub2e4 Parameters pTime \uc785\ub825 Tensor\uc758 Time \ucd95\uc758 Dimension Returns NULL public inline DTYPE Max ( Tensor < DTYPE > * input,int start,int end) \uc9c0\uc815\ub41c \ubc94\uc704 \uc548\uc5d0\uc11c \uc785\ub825 Tensor\uc758 \ub370\uc774\ud130 \uac12 \uc911 \ucd5c\ub313\uac12\uc744 \ubc18\ud658\ud558\ub294 \uba54\uc18c\ub4dc Parameters input \uc785\ub825 Tensor\uc758 \ud3ec\uc778\ud130 start \ubc94\uc704\uc758 \uc2dc\uc791 \uc778\ub371\uc2a4 end \ubc94\uc704 \uc885\ub8cc \uc778\ub371\uc2a4 Returns \uc9c0\uc815\ub41c \ubc94\uc704 \uc548\uc5d0\uc11c \uc785\ub825 Tensor\uc758 \ub370\uc774\ud130 \uac12\uc758 \ucd5c\ub313\uac12 class Switch \u00b6 class Switch : public Operator< DTYPE > Summary Members Descriptions public inline Switch ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,int pLoadflag) public inline Switch ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,std::string pName,int pLoadflag) public inline ~Switch () public inline int GetSwitchNumber () public inline int SetSwitchNumber (int pSwitchNumber) public inline int Alloc ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1) public inline void Delete () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline Switch ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,int pLoadflag) public inline Switch ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1,std::string pName,int pLoadflag) public inline ~Switch () public inline int GetSwitchNumber () public inline int SetSwitchNumber (int pSwitchNumber) public inline int Alloc ( Operator < DTYPE > * pInput0, Operator < DTYPE > * pInput1) public inline void Delete () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class Tanh \u00b6 class Tanh : public Operator< DTYPE > Summary Members Descriptions public inline Tanh ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) Tanh\uc758 \uc0dd\uc131\uc790 public inline ~Tanh () Tanh\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) Tanh\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc public inline virtual int BackPropagate (int pTime) Tanh\uc758 BackPropagate \ub9e4\uc18c\ub4dc. Members public inline Tanh ( Operator < DTYPE > * pInput,std::string pName,int pLoadflag) Tanh\uc758 \uc0dd\uc131\uc790 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pInput Alloc\ud560 \ub300\uc0c1 Operator pName Operator\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c \uc774\ub984. public inline ~Tanh () Tanh\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput\uc73c\ub85c\ubd80\ud130 \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. Result\uc640 Gradient\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 pInput\uc758 Shape\uacfc \uac19\uc740 dim\uc744 \uac16\ub294 Tensor\ub97c \uc0dd\uc131\ud55c\ub2e4. Parameters pInput \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc815\ubcf4\ub97c \uac00\uc9c4 Operator Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int ForwardPropagate (int pTime) Tanh\uc758 ForwardPropagate \ub9e4\uc18c\ub4dc input\uc758 Tensor\uac12\ub4e4\uc744 Tanh\uc744 \ucde8\ud55c \ub4a4 result\uc5d0 \uc800\uc7a5\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) Tanh\uc758 BackPropagate \ub9e4\uc18c\ub4dc. result\uac12\uc73c\ub85c tanh\uc758 \ubbf8\ubd84 \uac12\uc744 \uacc4\uc0b0\ud558\uc5ec input_delta\uc5d0 \ub354\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class Tensor \u00b6 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub420 Tensor\ub97c \uc815\uc758\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4 Tensor\ud074\ub798\uc2a4\ub294 Shape\uc640 LongArray\ub97c \uc774\uc6a9\ud558\uc5ec Tensor\uc758 \ubaa8\uc591\uacfc \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud55c\ub2e4. Operator\ud074\ub798\uc2a4\uc5d0\uc11c m_aaResult(ForwardPropagate\ud55c \uac12)\uc640 m_aaGradient(BackPropagate\ud55c \uac12)\uc744 \uc800\uc7a5\ud55c\ub2e4. Summary Members Descriptions public Tensor (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4,IsUseTime pAnswer) public Tensor (int pSize0,int pSize1,int pSize2,int pSize3,IsUseTime pAnswer) public Tensor (int pSize0,int pSize1,int pSize2,IsUseTime pAnswer) public Tensor (int pSize0,int pSize1,IsUseTime pAnswer) public Tensor (int pSize0,IsUseTime pAnswer) public Tensor ( Shape * pShape,IsUseTime pAnswer) public Tensor ( Tensor < DTYPE > * pTensor) public virtual ~Tensor () public Shape * GetShape () public int GetRank () public int GetDim (int pRanknum) public LongArray < DTYPE > * GetLongArray () public int GetCapacity () public int GetElement (unsigned int index) public DTYPE & operator[] (unsigned int index) public Device GetDevice () public IsUseTime GetIsUseTime () public DTYPE * GetCPULongArray (unsigned int pTime) public int GetTimeSize () public int GetBatchSize () public int GetChannelSize () public int GetRowSize () public int GetColSize () public int ReShape (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4) public int ReShape (int pSize0,int pSize1,int pSize2,int pSize3) public int ReShape (int pSize0,int pSize1,int pSize2) public int ReShape (int pSize0,int pSize1) public int ReShape (int pSize0) public void Reset () public void SetDeviceCPU () public int Save (FILE * fp) public int Load (FILE * fp) public void Clip (float min,float max) public void MultiplyScalar (unsigned int pTime,float pScalar) Members public Tensor (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4,IsUseTime pAnswer) public Tensor (int pSize0,int pSize1,int pSize2,int pSize3,IsUseTime pAnswer) public Tensor (int pSize0,int pSize1,int pSize2,IsUseTime pAnswer) public Tensor (int pSize0,int pSize1,IsUseTime pAnswer) public Tensor (int pSize0,IsUseTime pAnswer) public Tensor ( Shape * pShape,IsUseTime pAnswer) public Tensor ( Tensor < DTYPE > * pTensor) public virtual ~Tensor () public Shape * GetShape () public int GetRank () public int GetDim (int pRanknum) public LongArray < DTYPE > * GetLongArray () public int GetCapacity () public int GetElement (unsigned int index) public DTYPE & operator[] (unsigned int index) public Device GetDevice () public IsUseTime GetIsUseTime () public DTYPE * GetCPULongArray (unsigned int pTime) public int GetTimeSize () public int GetBatchSize () public int GetChannelSize () public int GetRowSize () public int GetColSize () public int ReShape (int pSize0,int pSize1,int pSize2,int pSize3,int pSize4) public int ReShape (int pSize0,int pSize1,int pSize2,int pSize3) public int ReShape (int pSize0,int pSize1,int pSize2) public int ReShape (int pSize0,int pSize1) public int ReShape (int pSize0) public void Reset () public void SetDeviceCPU () public int Save (FILE * fp) public int Load (FILE * fp) public void Clip (float min,float max) public void MultiplyScalar (unsigned int pTime,float pScalar) class Tensorholder \u00b6 Result\ub9cc \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4. \uc8fc\ub85c Network\uc758 input, label\uac12\uc744 \uc800\uc7a5\ud558\uae30 \uc704\ud574 \uad6c\ud604\ub418\uc5c8\ub2e4. Summary Members Descriptions public inline Tensorholder ( Tensor < DTYPE > * pTensor,std::string pName,int pTrainable,int pLoadflag) Tensorholder\uc758 \uc0dd\uc131\uc790. public inline Tensorholder (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pTrainable,int pLoadflag) Tensorholder\uc758 \uc0dd\uc131\uc790. public inline ~Tensorholder () Tensorholder\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Tensor < DTYPE > * pTensor,int pTrainable) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc53\uc740 pTensor\ub85c Tensorholder\ub97c \uc124\uc815\ud55c\ub2e4. public inline int Alloc (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,int pTrainable) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc53\uc740 \ubcc0\uc218\ub4e4\ub85c pTensor\ub97c \uc0dd\uc131\ud558\uace0 Tensorholder\ub97c \uc124\uc815\ud55c\ub2e4. public inline Tensor < DTYPE > * GetTensor () public inline void SetTensor ( Tensor < DTYPE > * pTensor) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 Tensor\ub97c Result\ub85c \uc124\uc815\ud55c\ub2e4. public inline void FeedTensor ( Tensor < DTYPE > * pTensor) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 Tensor\ub97c Result\ub85c \uc124\uc815\ud55c\ub2e4. Members public inline Tensorholder ( Tensor < DTYPE > * pTensor,std::string pName,int pTrainable,int pLoadflag) Tensorholder\uc758 \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pTensor, pTrainable\uc73c\ub85c Alloc\ud55c\ub2e4. Parameters pTensor Alloc\uc5d0 \uc0ac\uc6a9\ud560 Tensor , \uacb0\ub860\uc801\uc73c\ub85c Tensorholder\uc758 Result\ub85c \uc124\uc815\ub41c\ub2e4. pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Tensorholder\uc758 \uc774\ub984. pTrainable \uc0dd\uc131 \ud560 Operator(Tensorholder) \uac00 Trainable\uc778\uc9c0 \uc54c\ub9ac\ub294 \ubcc0\uc218. default\ub85c TRUE\ub97c \uc0ac\uc6a9\ud55c\ub2e4. int Alloc(Tensor *pTensor, int pTrainable) public inline Tensorholder (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,std::string pName,int pTrainable,int pLoadflag) Tensorholder\uc758 \uc0dd\uc131\uc790. \ud30c\ub9ac\ubbf8\ud130\ub85c \ubc1b\uc740 pTimeSize, pBatchSize, pChannelSize, pRowSize, pColSize, pTrainable\ub85c Alloc\ud55c\ub2e4. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \ubcc0\uc218\ub4e4\uc740 Alloc\uc5d0\uc11c \uc0dd\uc131 \ud560 Tensor\uc758 Shape\uc744 \uacb0\uc815\ud55c\ub2e4. Parameters pTimeSize Alloc\uc5d0 \uc0ac\uc6a9 \ud560 timesize. pBatchSize Alloc\uc5d0 \uc0ac\uc6a9 \ud560 batchsize. pChannelSize Alloc\uc5d0 \uc0ac\uc6a9 \ud560 channelsize. pRowSize Alloc\uc5d0 \uc0ac\uc6a9 \ud560 rowsize pColSize Alloc\uc5d0 \uc0ac\uc6a9 \ud560 colsize pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Tensorholder\uc758 \uc774\ub984. pTrainable \uc0dd\uc131 \ud560 Operator(Tensorholder) \uac00 Trainable\uc778\uc9c0 \uc54c\ub9ac\ub294 \ubcc0\uc218. default\ub85c TRUE\ub97c \uc0ac\uc6a9\ud55c\ub2e4. int Alloc(int pTimeSize, int pBatchSize, int pChannelSize, int pRowSize, int pColSize, int pTrainable) public inline ~Tensorholder () Tensorholder\uc758 \uc18c\uba78\uc790. \ub531\ud788 \ud558\ub294 \uc77c\uc740 \uc5c6\ub2e4. public inline int Alloc ( Tensor < DTYPE > * pTensor,int pTrainable) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc53\uc740 pTensor\ub85c Tensorholder\ub97c \uc124\uc815\ud55c\ub2e4. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pTensor\ub97c Result\uac12\uc73c\ub85c \uc124\uc815\ud55c\ub2e4. SetIsTensorholder\ub97c \ud1b5\ud574 Tensorholder\uc784\uc744 \uc124\uc815\ud558\uace0, pTensor\uc758 Shape\uacfc \uac19\uc740 Shape\uc744 \uac16\ub294 Tensor\ub97c \ub9cc\ub4e4\uc5b4 Gradient\ub85c \uc124\uc815\ud55c\ub2e4. Parameters pTensor Tensorholder\uc758 Result\ub85c \uc800\uc7a5 \ub420\uac12\uc744 \uac00\uc9c4 Tensor . pTrainable Training\uc774 \uac00\ub2a5\ud55c\uc9c0 \uc544\ub2cc\uc9c0 \uc54c\ub9ac\ub294 \ubcc0\uc218 Returns \uc131\uacf5 \uc2dc TRUE. int Operator ::ResetResult() int Operator ::SetIsTensorholder(int pIsParameter) int Operator ::SetIsTrainable(int pIsTrainable) int Operator ::AddGradient(Tensor *pTensor) public inline int Alloc (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,int pTrainable) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc53\uc740 \ubcc0\uc218\ub4e4\ub85c pTensor\ub97c \uc0dd\uc131\ud558\uace0 Tensorholder\ub97c \uc124\uc815\ud55c\ub2e4. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 \ubcc0\uc218\ub4e4\ub85c pTensor\ub97c \uc0dd\uc131\ud558\uace0 Result\ub85c \uc124\uc815\ud55c\ub2e4. \uc0dd\uc131\ud55c pTensor\uc758 Shape\uacfc \uac19\uc740 Tensor\ub97c \uc0dd\uc131\ud558\uc5ec Gradient\ub85c \uc124\uc815\ud55c\ub2e4. Parameters pTimeSize \uc0dd\uc131\ud560 pTensor\uc758 timesize pBatchSize \uc0dd\uc131\ud560 pTensor\uc758 batchsize pChannelSize \uc0dd\uc131\ud560 pTensor\uc758 channelsize pRowSize \uc0dd\uc131\ud560 pTensor\uc758 rowsize pColSize \uc0dd\uc131\ud560 pTensor\uc758 colsize pTrainable Training\uc774 \uac00\ub2a5\ud55c\uc9c0 \uc544\ub2cc\uc9c0 \uc54c\ub9ac\ub294 \ubcc0\uc218 Returns \uc131\uacf5 \uc2dc TRUE. int Operator ::ResetResult() int Operator ::SetIsTensorholder(int pIsParameter) int Operator ::SetIsTrainable(int pIsTrainable) Shape *Tensor ::GetShape() int Operator ::AddGradient(Tensor *pTensor) public inline Tensor < DTYPE > * GetTensor () public inline void SetTensor ( Tensor < DTYPE > * pTensor) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 Tensor\ub97c Result\ub85c \uc124\uc815\ud55c\ub2e4. Parameters pTensor Result\ub85c \uc124\uc815 \ud560 Tensor . public inline void FeedTensor ( Tensor < DTYPE > * pTensor) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 Tensor\ub97c Result\ub85c \uc124\uc815\ud55c\ub2e4. Parameters pTensor Result\ub85c \uc124\uc815 \ud560 Tensor . class TransposedConvolution2D \u00b6 class TransposedConvolution2D : public Operator< DTYPE > Summary Members Descriptions public inline TransposedConvolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,std::string pName,int pLoadflag) TransposedConvolution2D \uc0dd\uc131\uc790. public inline TransposedConvolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding,std::string pName,int pLoadflag) TransposedConvolution2D \uc0dd\uc131\uc790. public inline TransposedConvolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2,std::string pName,int pLoadflag) TransposedConvolution2D \uc0dd\uc131\uc790. public inline virtual ~TransposedConvolution2D () TransposedConvolution2D\uc758 \uc18c\uba78\uc790. public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding1, padding2\uc73c\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. public inline void Delete () GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud558\uace0 \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. public inline virtual int ForwardPropagate (int pTime) TransposedConvolution2D\uc758 ForwardPropagate \uba54\uc18c\ub4dc. public inline virtual int BackPropagate (int pTime) TRANSPOSEDCONVOLUTION_2D\uc758 BackPropagate \uba54\uc18c\ub4dc. Members public inline TransposedConvolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,std::string pName,int pLoadflag) TransposedConvolution2D \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2\ub85c Alloc\ud55c\ub2e4. Parameters pInput TransposedConvolution\ud560 Operator pWeight TransposedConvolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight, int stride1, int stride2, int padding1, int padding2) public inline TransposedConvolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding,std::string pName,int pLoadflag) TransposedConvolution2D \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2\ub85c Alloc\ud55c\ub2e4. Parameters pInput TransposedConvolution\ud560 Operator pWeight TransposedConvolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 padding padding \ud560 \uac12. height, width \ubaa8\ub450 \uc774 \uac12\uc73c\ub85c \ud55c\ub2e4. pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight, int stride1, int stride2, int padding1, int padding2) public inline TransposedConvolution2D ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2,std::string pName,int pLoadflag) TransposedConvolution2D \uc0dd\uc131\uc790. \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding1, padding2\ub85c Alloc\ud55c\ub2e4. Parameters pInput TransposedConvolution\ud560 Operator pWeight TransposedConvolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 padding1 height padding\uac12 padding2 width padding\uac12 pName \uc0ac\uc6a9\uc790\uac00 \ubd80\uc5ec\ud55c Operator\uc774\ub984. int Alloc(Operator *pInput, Operator *pWeight, int stride1, int stride2, int padding1, int padding2) public inline virtual ~TransposedConvolution2D () TransposedConvolution2D\uc758 \uc18c\uba78\uc790. Delete\ub9e4\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud574 GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uac12\ub4e4\uc744 \ud574\uc81c\ud55c\ub2e4. void Delete() public inline int Alloc ( Operator < DTYPE > * pInput, Operator < DTYPE > * pWeight,int stride1,int stride2,int padding1,int padding2) \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\uc740 pInput, pWeight, stride1, stride2, padding1, padding2\uc73c\ub85c \ub9f4\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654 \ud55c\ub2e4. pInput\uacfc pWeight\uc758 Shape\uacfc stride, padding\uac12\uc73c\ub85c output\uc73c\ub85c Result\uc640 Delta\ub85c \uc0ac\uc6a9 \ud560 Tensor\uc758 Shape\uc744 \uc815\uc758\ud55c\ub2e4. Parameters pInput transposedConvolution\ud560 Operator pWeight transposedConvolution\ud560 weight. stride1 stride row\uac12 stride2 stride colunm\uac12 padding1 height padding\uac12 padding2 width padding\uac12 public inline void Delete () GPU\uc5d0 \ud560\ub2f9\ud588\ub358 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud558\uace0 \uac01 \ud3ec\uc778\ud130\ub4e4\uc744 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. inputTensorDesc, outputTensorDesc,deltaDesc, inputDeltaDesc, convDesc, filterDesc,filterDeltaDesc\ub4e4\uc744 \uc0ad\uc81c\ud558\uace0 NULL\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. cudnn\uc5f0\uc0b0\uc744 \uc704\ud574 \ud560\ub2f9 \ud588\ub358 \uba54\ubaa8\ub9ac\ub4e4\uc744 \ud574\uc81c\uc2dc\ud0a8\ub2e4. public inline virtual int ForwardPropagate (int pTime) TransposedConvolution2D\uc758 ForwardPropagate \uba54\uc18c\ub4dc. weight(filter size = rowsizeOfWeight * colsizeOfWeight)\uc640 input\uc758 \uacf1\ud55c \uac12\uc744 result\uc5d0 \ub354\ud574 \ub123\ub294\ub2e4. \uc774\ub54c m_stride\uac12\ub4e4 \ub9cc\ud07c \uc774\ub3d9\ud558\uba70 result\ub97c \uacc4\uc0b0\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. public inline virtual int BackPropagate (int pTime) TRANSPOSEDCONVOLUTION_2D\uc758 BackPropagate \uba54\uc18c\ub4dc. TransposedConvolution\uc758 \ubbf8\ubd84 \uac12(weight * this_delta, input * this_delta)\uc744 \uacc4\uc0b0\ud558\uc5ec input_delta\uc640 weight_gradient\uc5d0 \uac01\uac01 \ub354\ud574 \ub123\ub294\ub2e4. \uc774\ub54c m_stride\uac12\ub4e4 \ub9cc\ud07c \uc774\ub3d9\ud558\uba70 \ubbf8\ubd84 \uac12\uc744 \ub123\uc744 \uc704\uce58\ub97c \uacc4\uc0b0\ud55c\ub2e4. Parameters pTime \uc5f0\uc0b0 \ud560 Tensor\uac00 \uc704\uce58\ud55c Time\uac12. default\ub294 0\uc744 \uc0ac\uc6a9. Returns \uc131\uacf5 \uc2dc TRUE. class TransposedConvolutionLayer2D \u00b6 class TransposedConvolutionLayer2D : public Module< DTYPE > \uad6c\uc131\ud574 2-Dimensional TransposedConvolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 2-Dimensional Transposedconvolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4 Summary Members Descriptions public inline TransposedConvolutionLayer2D ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPadding,int use_bias,std::string pName) TransposedConvolutionLayer2D \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 public inline virtual ~TransposedConvolutionLayer2D () TransposedConvolutionLayer2D \ud074\ub798\uc2a4 \uc18c\uba78\uc790 public inline int Alloc ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPaddingRow,int pPaddingCol,int use_bias,std::string pName) 2D TransposedConvolution Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Members public inline TransposedConvolutionLayer2D ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPadding,int use_bias,std::string pName) TransposedConvolutionLayer2D \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 TransposedConvolutionLayer2D \ud074\ub798\uc2a4\uc758 Alloc \ud568\uc218\ub97c \ud638\ucd9c\ud55c\ub2e4. See also : TransposedConvolutionLayer2D ::Alloc(Operator *pInput, int pNumInputChannel, int pNumOutputChannel, int pNumKernelRow, int pNumKernelCol, int pStrideRow, int pStrideCol, int pPaddingRow, int pPaddingCol, int use_bias, std::string pName) public inline virtual ~TransposedConvolutionLayer2D () TransposedConvolutionLayer2D \ud074\ub798\uc2a4 \uc18c\uba78\uc790 \ub2e8, \ub3d9\uc801 \ud560\ub2f9 \ubc1b\uc740 Operator\ub4e4\uc740 NeuralNetwork\uc5d0\uc11c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. public inline int Alloc ( Operator < DTYPE > * pInput,int pNumInputChannel,int pNumOutputChannel,int pNumKernelRow,int pNumKernelCol,int pStrideRow,int pStrideCol,int pPaddingRow,int pPaddingCol,int use_bias,std::string pName) 2D TransposedConvolution Layer \uadf8\ub798\ud504\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9 \ubc0f \uad6c\uc131\ud558\ub294 \uba54\uc18c\ub4dc Input Operator\uc758 Element\uc5d0 \ub300\ud574 2D TransposedConvolution \uc218\ud589\ud55c\ub2e4. Input Operator\uc758 Element\uc5d0 \ub300\ud574 Weight\ub97c \uc774\uc6a9\ud574 2\ucc28\uc6d0 \uc804\uce58\ud569\uc131 \uacf1(2D TransposedConvolution)\uc744 \uc218\ud589\ud558\uace0 Bias\uac00 \uc874\uc7ac\ud560 \uc2dc Bias\ub97c \ud569(Column Wise Addition)\ud574 Output Operator\ub85c \ub0b4\ubcf4\ub0b4\ub294 layer\ub97c \uad6c\uc131\ud55c\ub2e4. Parameters pInput \ud574\ub2f9 Layer\uc758 Input\uc5d0 \ud574\ub2f9\ud558\ub294 Operator pNumInputChannel \ud574\ub2f9 Layer\uc758 Input Operator\uc758 Channel\uc758 \uac2f\uc218, Input Column\uc5d0 \ub300\ud55c Dimension pNumOutputChannel \ud574\ub2f9 Layer\uc758 Output Operator\uc758 Channel\uc758 \uac2f\uc218, Output Column\uc5d0 \ub300\ud55c Dimension pNumKernelRow 2D TransposedConvolution Layer \ucee4\ub110\uc758 Row Size pNumKernelCol 2D TransposedConvolution Layer \ucee4\ub110\uc758 Column Size pStrideRow 2D TransposedConvolution Layer\uc758 Row Stride Size pStrideCol 2D TransposedConvolution Layer\uc758 Column Stride Size pPaddingRow 2D TransposedConvolution Layer\uc758 Row Padding \uac12 pPaddingCol 2D TransposedConvolution Layer\uc758 Column Padding \uac12 use_bias Bias \uc0ac\uc6a9 \uc720\ubb34, 0\uc77c \uc2dc \uc0ac\uc6a9 \uc548 \ud568, 0\uc774 \uc544\ub2d0 \uc2dc \uc0ac\uc6a9 pName Module\uc758 \uc774\ub984 Returns TRUE See also : TransposedConvolutionLayer2D ::TransposedConvolutionLayer2D ( Operator *pInput, Operator *pWeight, int stride1, int stride2, std::string pName = \"NO NAME\") AddColWise ::AddColWise(Operator *pInput, Operator *pBias, std::string pName) Module ::AnalyzeGraph(Operator *pResultOperator) class TripletLoss \u00b6 class TripletLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline TripletLoss ( Operator < DTYPE > * pOperator,DTYPE margin,std::string pName) public inline TripletLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE margin,std::string pName) public inline ~TripletLoss () public inline int Alloc ( Operator < DTYPE > * pOperator,DTYPE margin) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline TripletLoss ( Operator < DTYPE > * pOperator,DTYPE margin,std::string pName) public inline TripletLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE margin,std::string pName) public inline ~TripletLoss () public inline int Alloc ( Operator < DTYPE > * pOperator,DTYPE margin) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL class UniformNoiseGenerator \u00b6 class UniformNoiseGenerator : public NoiseGenerator< DTYPE > Summary Members Descriptions public inline UniformNoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,float pLowerLimit,float pUpperLimit,IsUseTime pAnswer,std::string pName) public inline ~UniformNoiseGenerator () public inline void StartProduce () public inline void StopProduce () public inline int GenerateNoise () public inline int AddNoise2Buffer ( Tensor < DTYPE > * noise) public inline Tensor < DTYPE > * GetNoiseFromBuffer () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) Members public inline UniformNoiseGenerator (int pTimeSize,int pBatchSize,int pChannelSize,int pRowSize,int pColSize,float pLowerLimit,float pUpperLimit,IsUseTime pAnswer,std::string pName) public inline ~UniformNoiseGenerator () public inline void StartProduce () public inline void StopProduce () public inline int GenerateNoise () public inline int AddNoise2Buffer ( Tensor < DTYPE > * noise) public inline Tensor < DTYPE > * GetNoiseFromBuffer () public inline virtual int ForwardPropagate (int pTime) public inline virtual int BackPropagate (int pTime) class VanillaGANDiscriminatorLoss \u00b6 class VanillaGANDiscriminatorLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline VanillaGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE epsilon,std::string pName) public inline VanillaGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~VanillaGANDiscriminatorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline VanillaGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE epsilon,std::string pName) public inline VanillaGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~VanillaGANDiscriminatorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL class VanillaGANGeneratorLoss \u00b6 class VanillaGANGeneratorLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline VanillaGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE epsilon,std::string pName) public inline VanillaGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~VanillaGANGeneratorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline VanillaGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,DTYPE epsilon,std::string pName) public inline VanillaGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~VanillaGANGeneratorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator,DTYPE epsilon) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL class WData \u00b6 Summary Members Descriptions public DTYPE * m_aData public int m_capacity public inline WData (DTYPE * data,int capacity) public inline virtual ~WData () public inline virtual DTYPE * GetData () public inline virtual int GetCapacity () public inline DTYPE & operator[] (int idx) Members public DTYPE * m_aData public int m_capacity public inline WData (DTYPE * data,int capacity) public inline virtual ~WData () public inline virtual DTYPE * GetData () public inline virtual int GetCapacity () public inline DTYPE & operator[] (int idx) class WGANDiscriminatorLoss \u00b6 class WGANDiscriminatorLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline WGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~WGANDiscriminatorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline WGANDiscriminatorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~WGANDiscriminatorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL class WGANGeneratorLoss \u00b6 class WGANGeneratorLoss : public LossFunction< DTYPE > Summary Members Descriptions public inline WGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~WGANGeneratorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Members public inline WGANGeneratorLoss ( Operator < DTYPE > * pOperator, Operator < DTYPE > * pLabel,std::string pName) public inline virtual ~WGANGeneratorLoss () public inline virtual int Alloc ( Operator < DTYPE > * pOperator) public inline virtual void Delete () \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ubc1b\uc740 LossFunction\uc758 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ud560\ub2f9 \ud574\uc81c\ud558\ub294 \uba54\uc18c\ub4dc Result\uc640 Gradient\uc5d0 \ud574\ub2f9\ud558\ub294 Tensor\ub4e4\uc758 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9 \ud574\uc81c\ud55c\ub2e4. Returns \uc5c6\uc74c public inline virtual Tensor < DTYPE > * ForwardPropagate (int pTime) LossFunction\uc758 \uc21c\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL public inline virtual Tensor < DTYPE > * BackPropagate (int pTime) LossFunction\uc758 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\ub294 \uba54\uc18c\ub4dc Parameters pTime \ud559\uc2b5 \ub370\uc774\ud130 \ud150\uc11c\uc758 Time \uc778\ub371\uc2a4, \uac12\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\uc744 \uc2dc 0\uc73c\ub85c \ucd08\uae30\ud654 \ub428 Returns NULL Generated by Moxygen","title":"API"},{"location":"api/#summary","text":"Members Descriptions class AdagradOptimizer class Adam class AdamOptimizer class Addall \uac12\ub4e4\uc744 \uc11c\ub85c \ub354\ud558\ub294 class class AddChannelWise \uc11c\ub85c \ub354\ud558\ub294 class class AddColWise \uc911 Colunm\uc5d0\ub9cc \uac12\uc744 \ub354\ud558\ub294 class class AvaragePooling2D class BatchNormalize class BatchNormalizeLayer \uad6c\uc131\ud574 Batch Normalization Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class BEGAN class BEGANDiscriminatorLoss class BEGANGeneratorLoss class ConcatenateChannelWise class Container \uc800\uc7a5\ud558\uae30 \uc704\ud55c Queue\uc5d0 \ud574\ub2f9\ud558\ub294 \ud074\ub798\uc2a4 class Convolution2D class ConvolutionLayer2D \uad6c\uc131\ud574 2-Dimensional Convolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class CrossEntropy Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class DataLoader class Dataset class Dropout class FewShotClassifier class GAN class GaussianNoiseGenerator class GlobalAvaragePooling2D Row * Colunm \uacf5\uac04\uc744 GlobalAvaragePooling\ud558\ub294 \ud074\ub798\uc2a4. class GradientDescentOptimizer class HingeLoss Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class KNearestNeighbor class Linear \uad6c\uc131\ud574 fully connected layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class LongArray \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4. class LossFunction \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class LRelu class MatMul class Maxpooling2D class Module \uad6c\uc131\ud574 \ubaa8\ub4c8\ud654\ud558\ub294 \ud074\ub798\uc2a4 class MSE Squared Error) Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class NagOptimizer class NeuralNetwork \ubaa8\ub378 \uc0dd\uc131, \ud559\uc2b5 \ubc0f \ud3c9\uac00\ub97c \ucd1d\uad04\ud558\ub294 \ud074\ub798\uc2a4 class NoiseGenerator Tensor \ud074\ub798\uc2a4\uc758 Random_normal \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubc94\uc704 \ub0b4\uc758 \uc784\uc758\uc758 \uac12\uc744 \uac16\ub294 Tensor \uc0dd\uc131 class Operator \ubcf8 \ud504\ub798\uc784\uc6cc\ud06c\uc758 \uac00\uc7a5 \uc791\uc740 \uc5f0\uc0b0 \ub2e8\uc704. class Optimizer class PRelu class ReconstructionError class Recurrent class Relu class ReShape class RMSPropOptimizer class Sequential class Shape \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape\uc744 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 class Sigmoid class Softmax class SoftmaxCrossEntropy \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 class Switch class Tanh class Tensor \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 class Tensorholder Result\ub9cc \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4. class TransposedConvolution2D class TransposedConvolutionLayer2D \uad6c\uc131\ud574 2-Dimensional TransposedConvolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 class TripletLoss class UniformNoiseGenerator class VanillaGANDiscriminatorLoss class VanillaGANGeneratorLoss class WData class WGANDiscriminatorLoss class WGANGeneratorLoss","title":"Summary"},{"location":"api/#classAdagradOptimizer","text":"class AdagradOptimizer : public Optimizer< DTYPE >","title":"class AdagradOptimizer"},{"location":"api/#classAdam","text":"","title":"class Adam"},{"location":"api/#classAdamOptimizer","text":"class AdamOptimizer : public Optimizer< DTYPE >","title":"class AdamOptimizer"},{"location":"api/#classAddall","text":"class Addall : public Operator< DTYPE > \uac12\ub4e4\uc744 \uc11c\ub85c \ub354\ud558\ub294 class","title":"class Addall"},{"location":"api/#classAddChannelWise","text":"class AddChannelWise : public Operator< DTYPE > \uc11c\ub85c \ub354\ud558\ub294 class","title":"class AddChannelWise"},{"location":"api/#classAddColWise","text":"class AddColWise : public Operator< DTYPE > \uc911 Colunm\uc5d0\ub9cc \uac12\uc744 \ub354\ud558\ub294 class","title":"class AddColWise"},{"location":"api/#classAvaragePooling2D","text":"class AvaragePooling2D : public Operator< DTYPE >","title":"class AvaragePooling2D"},{"location":"api/#classBatchNormalize","text":"class BatchNormalize : public Operator< DTYPE >","title":"class BatchNormalize"},{"location":"api/#classBatchNormalizeLayer","text":"class BatchNormalizeLayer : public Module< DTYPE > \uad6c\uc131\ud574 Batch Normalization Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 Batch Normalization Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4","title":"class BatchNormalizeLayer"},{"location":"api/#classBEGAN","text":"class BEGAN : public GAN< DTYPE >","title":"class BEGAN"},{"location":"api/#classBEGANDiscriminatorLoss","text":"class BEGANDiscriminatorLoss : public LossFunction< DTYPE >","title":"class BEGANDiscriminatorLoss"},{"location":"api/#classBEGANGeneratorLoss","text":"class BEGANGeneratorLoss : public LossFunction< DTYPE >","title":"class BEGANGeneratorLoss"},{"location":"api/#classConcatenateChannelWise","text":"class ConcatenateChannelWise : public Operator< DTYPE >","title":"class ConcatenateChannelWise"},{"location":"api/#classContainer","text":"\uc800\uc7a5\ud558\uae30 \uc704\ud55c Queue\uc5d0 \ud574\ub2f9\ud558\ub294 \ud074\ub798\uc2a4 Tensor , Operator , Tensorholder \uc138 \uac00\uc9c0 \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c Queue\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud55c\ub2e4. \uae30\ubcf8 queue \uad6c\uc870\uc5d0 \uc778\ub371\uc2a4\ub97c \uc774\uc6a9\ud55c \uc811\uadfc \ubc0f \uc5ed\uc21c\uc73c\ub85c \uc811\uadfc \ub4f1 \ucd94\uac00\uc801\uc778 \uba54\uc18c\ub4dc\uac00 \uad6c\ud604\ub418\uc5b4 \uc788\ub2e4.","title":"class Container"},{"location":"api/#classConvolution2D","text":"class Convolution2D : public Operator< DTYPE >","title":"class Convolution2D"},{"location":"api/#classConvolutionLayer2D","text":"class ConvolutionLayer2D : public Module< DTYPE > \uad6c\uc131\ud574 2-Dimensional Convolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 2-Dimensional convolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4","title":"class ConvolutionLayer2D"},{"location":"api/#classCrossEntropy","text":"class CrossEntropy : public LossFunction< DTYPE > Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 Cross Entropy \uacc4\uc0b0\uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4","title":"class CrossEntropy"},{"location":"api/#classDataLoader","text":"","title":"class DataLoader"},{"location":"api/#classDataset","text":"","title":"class Dataset"},{"location":"api/#classDropout","text":"class Dropout : public Operator< DTYPE >","title":"class Dropout"},{"location":"api/#classFewShotClassifier","text":"","title":"class FewShotClassifier"},{"location":"api/#classGAN","text":"class GAN : public NeuralNetwork< DTYPE >","title":"class GAN"},{"location":"api/#classGaussianNoiseGenerator","text":"class GaussianNoiseGenerator : public NoiseGenerator< DTYPE >","title":"class GaussianNoiseGenerator"},{"location":"api/#classGlobalAvaragePooling2D","text":"class GlobalAvaragePooling2D : public Operator< DTYPE > Row * Colunm \uacf5\uac04\uc744 GlobalAvaragePooling\ud558\ub294 \ud074\ub798\uc2a4.","title":"class GlobalAvaragePooling2D"},{"location":"api/#classGradientDescentOptimizer","text":"class GradientDescentOptimizer : public Optimizer< DTYPE >","title":"class GradientDescentOptimizer"},{"location":"api/#classHingeLoss","text":"class HingeLoss : public LossFunction< DTYPE > Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 Hinge Loss \uacc4\uc0b0 \uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4","title":"class HingeLoss"},{"location":"api/#classKNearestNeighbor","text":"","title":"class KNearestNeighbor"},{"location":"api/#classLinear","text":"class Linear : public Module< DTYPE > \uad6c\uc131\ud574 fully connected layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 fully connected layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4","title":"class Linear"},{"location":"api/#classLongArray","text":"\ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4. \ud559\uc2b5\uc5d0 \uc0ac\uc6a9 \ub420 Tensor\uc758 \ub9f4\ubc84\ubcc0\uc218 \uc911 LongArray\ub97c \uc815\uc758\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4. \uc2e4\uc9c8\uc801\uc73c\ub85c Tensor\ud074\ub798\uc2a4\uc758 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\uae30\uc704\ud55c \ud074\ub798\uc2a4. \ub370\uc774\ud130\ub97c \ucd08\uae30\ud654\ud558\uace0 CPU\uc640 GPU\uac04 \ub370\uc774\ud130\uc758 \uc774\ub3d9\uc744 \uac00\ub2a5\ud558\uac8c \ud55c\ub2e4.","title":"class LongArray"},{"location":"api/#classLossFunction","text":"\uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc744 \ube44\uad50\ud574 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4.","title":"class LossFunction"},{"location":"api/#classLRelu","text":"class LRelu : public Operator< DTYPE >","title":"class LRelu"},{"location":"api/#classMatMul","text":"class MatMul : public Operator< DTYPE >","title":"class MatMul"},{"location":"api/#classMaxpooling2D","text":"class Maxpooling2D : public Operator< DTYPE >","title":"class Maxpooling2D"},{"location":"api/#classModule","text":"class Module : public Operator< DTYPE > \uad6c\uc131\ud574 \ubaa8\ub4c8\ud654\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 \ub2e8\uc77c Operator\ub85c\uc11c \ud560 \uc218 \uc5c6\ub294 \uae30\ub2a5\ub4e4\uc744 \uc218\ud589\ud558\uac8c \ud55c\ub2e4 Module\uc740 \ud558\ub098\uc758 Operator\ucc98\ub7fc \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c \uc548\uc5d0\uc11c \uc791\ub3d9\ud55c\ub2e4","title":"class Module"},{"location":"api/#classMSE","text":"class MSE : public LossFunction< DTYPE > Squared Error) Metric\ub97c \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 MSE(Mean Squared Error) \uacc4\uc0b0 \uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4","title":"class MSE"},{"location":"api/#classNagOptimizer","text":"class NagOptimizer : public Optimizer< DTYPE >","title":"class NagOptimizer"},{"location":"api/#classNeuralNetwork","text":"class NeuralNetwork : public Module< DTYPE > \ubaa8\ub378 \uc0dd\uc131, \ud559\uc2b5 \ubc0f \ud3c9\uac00\ub97c \ucd1d\uad04\ud558\ub294 \ud074\ub798\uc2a4 Operator , Module , Loss Function, Optimizer \ud074\ub798\uc2a4\ub97c \uc0dd\uc131 \ubc0f \ud65c\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\ub97c \uad6c\uc131\ud558\uace0 \ud559\uc2b5\uc2dc\ud0a8\ub2e4","title":"class NeuralNetwork"},{"location":"api/#classNoiseGenerator","text":"class NoiseGenerator : public Operator< DTYPE > Tensor \ud074\ub798\uc2a4\uc758 Random_normal \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubc94\uc704 \ub0b4\uc758 \uc784\uc758\uc758 \uac12\uc744 \uac16\ub294 Tensor \uc0dd\uc131 Operator \ud615\uc2dd\uc774\uc9c0\ub9cc Tensor\ub97c \uc800\uc7a5\ud558\ub294 \uc6a9\ub3c4\ub85c\ub9cc \uc0ac\uc6a9","title":"class NoiseGenerator"},{"location":"api/#classOperator","text":"\ubcf8 \ud504\ub798\uc784\uc6cc\ud06c\uc758 \uac00\uc7a5 \uc791\uc740 \uc5f0\uc0b0 \ub2e8\uc704.","title":"class Operator"},{"location":"api/#classOptimizer","text":"","title":"class Optimizer"},{"location":"api/#classPRelu","text":"class PRelu : public Operator< DTYPE >","title":"class PRelu"},{"location":"api/#classReconstructionError","text":"class ReconstructionError : public Operator< DTYPE >","title":"class ReconstructionError"},{"location":"api/#classRecurrent","text":"class Recurrent : public Operator< DTYPE >","title":"class Recurrent"},{"location":"api/#classRelu","text":"class Relu : public Operator< DTYPE >","title":"class Relu"},{"location":"api/#classReShape","text":"class ReShape : public Operator< DTYPE >","title":"class ReShape"},{"location":"api/#classRMSPropOptimizer","text":"class RMSPropOptimizer : public Optimizer< DTYPE >","title":"class RMSPropOptimizer"},{"location":"api/#classSequential","text":"class Sequential : public Operator< DTYPE >","title":"class Sequential"},{"location":"api/#classShape","text":"\uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape\uc744 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 Tensor\uc758 \ucc28\uc6d0 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape\uc744 \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4","title":"class Shape"},{"location":"api/#classSigmoid","text":"class Sigmoid : public Operator< DTYPE >","title":"class Sigmoid"},{"location":"api/#classSoftmax","text":"class Softmax : public Operator< DTYPE >","title":"class Softmax"},{"location":"api/#classSoftmaxCrossEntropy","text":"class SoftmaxCrossEntropy : public LossFunction< DTYPE > \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4 Cross Entropy \uacc4\uc0b0 \uc2dd\uc744 \uc774\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uacc4\uc0b0\ub41c \ucd9c\ub825 Tensor\uc640 \ub808\uc774\ube14 \uac12\uc758 \uc190\uc2e4 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4 Softmax Function\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \ub9c8\uc9c0\ub9c9 Operator\ub85c \uc0ac\uc6a9\ud574 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 Gradient \uacc4\uc0b0\uc744 \uc6a9\uc774\ud558\uac8c \ud55c\ub2e4","title":"class SoftmaxCrossEntropy"},{"location":"api/#classSwitch","text":"class Switch : public Operator< DTYPE >","title":"class Switch"},{"location":"api/#classTanh","text":"class Tanh : public Operator< DTYPE >","title":"class Tanh"},{"location":"api/#classTensor","text":"\uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\ub294 \ud074\ub798\uc2a4 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub420 Tensor\ub97c \uc815\uc758\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4 Tensor\ud074\ub798\uc2a4\ub294 Shape\uc640 LongArray\ub97c \uc774\uc6a9\ud558\uc5ec Tensor\uc758 \ubaa8\uc591\uacfc \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud55c\ub2e4. Operator\ud074\ub798\uc2a4\uc5d0\uc11c m_aaResult(ForwardPropagate\ud55c \uac12)\uc640 m_aaGradient(BackPropagate\ud55c \uac12)\uc744 \uc800\uc7a5\ud55c\ub2e4.","title":"class Tensor"},{"location":"api/#classTensorholder","text":"Result\ub9cc \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4. \uc8fc\ub85c Network\uc758 input, label\uac12\uc744 \uc800\uc7a5\ud558\uae30 \uc704\ud574 \uad6c\ud604\ub418\uc5c8\ub2e4.","title":"class Tensorholder"},{"location":"api/#classTransposedConvolution2D","text":"class TransposedConvolution2D : public Operator< DTYPE >","title":"class TransposedConvolution2D"},{"location":"api/#classTransposedConvolutionLayer2D","text":"class TransposedConvolutionLayer2D : public Module< DTYPE > \uad6c\uc131\ud574 2-Dimensional TransposedConvolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud558\ub294 \ubaa8\ub4c8\uc744 \uc0dd\uc131\ud558\ub294 \ud074\ub798\uc2a4 Operator\ub4e4\uc744 \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc11c\ube0c \uadf8\ub798\ud504\ub85c \uad6c\uc131\ud574 2-Dimensional Transposedconvolution Layer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4","title":"class TransposedConvolutionLayer2D"},{"location":"api/#classTripletLoss","text":"class TripletLoss : public LossFunction< DTYPE >","title":"class TripletLoss"},{"location":"api/#classUniformNoiseGenerator","text":"class UniformNoiseGenerator : public NoiseGenerator< DTYPE >","title":"class UniformNoiseGenerator"},{"location":"api/#classVanillaGANDiscriminatorLoss","text":"class VanillaGANDiscriminatorLoss : public LossFunction< DTYPE >","title":"class VanillaGANDiscriminatorLoss"},{"location":"api/#classVanillaGANGeneratorLoss","text":"class VanillaGANGeneratorLoss : public LossFunction< DTYPE >","title":"class VanillaGANGeneratorLoss"},{"location":"api/#classWData","text":"","title":"class WData"},{"location":"api/#classWGANDiscriminatorLoss","text":"class WGANDiscriminatorLoss : public LossFunction< DTYPE >","title":"class WGANDiscriminatorLoss"},{"location":"api/#classWGANGeneratorLoss","text":"class WGANGeneratorLoss : public LossFunction< DTYPE >","title":"class WGANGeneratorLoss"},{"location":"test/","text":"Summary \u00b6 Members Descriptions namespace cimg_library_suffixed Contains all classes and functions of the \\CImg library. namespace cimg_library_suffixed::cimg Contains low-level functions and variables of the \\CImg Library. struct cimg_library_suffixed::CImg::_cimg_math_parser struct cimg_library_suffixed::CImg::_functor2d_expr struct cimg_library_suffixed::CImg::_functor2d_float struct cimg_library_suffixed::CImg::_functor2d_int struct cimg_library_suffixed::CImg::_functor3d_expr struct cimg_library_suffixed::CImg::_functor3d_float struct cimg_library_suffixed::CImg::_functor3d_int struct cimg_library_suffixed::CImg::_functor4d_int struct cimg_library_suffixed::CImg::_functor4d_streamline2d_directed struct cimg_library_suffixed::CImg::_functor4d_streamline2d_oriented struct cimg_library_suffixed::CImg::_functor4d_streamline3d_directed struct cimg_library_suffixed::CImg::_functor4d_streamline3d_oriented struct cimg_library_suffixed::CImg::_functor4d_streamline_expr struct cimg_library_suffixed::CImg::_functor_isoline3d struct cimg_library_suffixed::CImg::_functor_isosurface3d namespace cimg_library_suffixed \u00b6 Contains all classes and functions of the \\CImg library. This namespace is defined to avoid functions and class names collisions that could happen with the inclusion of other C++ header files. Anyway, it should not happen often and you should reasonably start most of your \\CImg-based programs with #include \"CImg.h\" using namespace cimg_library ; to simplify the declaration of \\CImg Library objects afterwards. Summary Members Descriptions public _cimg_create_operator (bool) const public template<> inline CImg < _cimg_Tfloat > operator- (const char *const expression,const CImg < T > & img) public template<> inline CImg < _cimg_Tfloat > operator* (const char *const expression,const CImg < T > & img) public template<> inline CImg < _cimg_Tfloat > operator/ (const char *const expression,const CImg < T > & img) public template<> inline CImg < T > operator& (const char *const expression,const CImg < T > & img) public template<> inline CImg < T > operator\\| (const char *const expression,const CImg < T > & img) public template<> inline CImg < T > operator^ (const char *const expression,const CImg < T > & img) public template<> inline bool operator== (const char *const expression,const CImg < T > & img) public template<> inline bool operator!= (const char *const expression,const CImg < T > & img) public template<> inline CImg < T > transpose (const CImg < T > & instance) public template<> inline CImg < _cimg_Tfloat > invert (const CImg < T > & instance) public template<> inline CImg < _cimg_Tfloat > pseudoinvert (const CImg < T > & instance) struct cimg_library_suffixed::CImg Class representing an image (up to 4 dimensions wide), each pixel being of type T . struct cimg_library_suffixed::CImgAbortException struct cimg_library_suffixed::CImgArgumentException struct cimg_library_suffixed::CImgDisplayException struct cimg_library_suffixed::CImgException Instances of [CImgException](#structcimg__library__suffixed_1_1CImgException) are thrown when errors are encountered in a \\CImg function call. struct cimg_library_suffixed::CImgInstanceException struct cimg_library_suffixed::CImgIOException struct cimg_library_suffixed::CImgList Represent a list of images CImg . struct cimg_library_suffixed::CImgWarningException Members public _cimg_create_operator (bool) const public template<> inline CImg < _cimg_Tfloat > operator- (const char *const expression,const CImg < T > & img) public template<> inline CImg < _cimg_Tfloat > operator* (const char *const expression,const CImg < T > & img) public template<> inline CImg < _cimg_Tfloat > operator/ (const char *const expression,const CImg < T > & img) public template<> inline CImg < T > operator& (const char *const expression,const CImg < T > & img) public template<> inline CImg < T > operator| (const char *const expression,const CImg < T > & img) public template<> inline CImg < T > operator^ (const char *const expression,const CImg < T > & img) public template<> inline bool operator== (const char *const expression,const CImg < T > & img) public template<> inline bool operator!= (const char *const expression,const CImg < T > & img) public template<> inline CImg < T > transpose (const CImg < T > & instance) public template<> inline CImg < _cimg_Tfloat > invert (const CImg < T > & instance) public template<> inline CImg < _cimg_Tfloat > pseudoinvert (const CImg < T > & instance) struct cimg_library_suffixed::CImg \u00b6 Class representing an image (up to 4 dimensions wide), each pixel being of type T . This is the main class of the CImg Library. It declares and constructs an image, allows access to its pixel values, and is able to perform various image operations. Image representation A CImg image is defined as an instance of the container CImg<T> , which contains a regular grid of pixels, each pixel value being of type T . The image grid can have up to 4 dimensions: width, height, depth and number of channels. Usually, the three first dimensions are used to describe spatial coordinates (x,y,z) , while the number of channels is rather used as a vector-valued dimension (it may describe the R,G,B color channels for instance). If you need a fifth dimension, you can use image lists CImgList<T> rather than simple images CImg<T> . Thus, the CImg<T> class is able to represent volumetric images of vector-valued pixels, as well as images with less dimensions (1D scalar signal, 2D color images, ...). Most member functions of the class CImg < T> are designed to handle this maximum case of (3+1) dimensions. Concerning the pixel value type T: fully supported template types are the basic C++ types: unsigned char, char, short, unsigned int, int, unsigned long, long, float, double, ... . Typically, fast image display can be done using CImg<unsigned char> images, while complex image processing algorithms may be rather coded using CImg<float> or CImg<double> images that have floating-point pixel values. The default value for the template T is float . Using your own template types may be possible. However, you will certainly have to define the complete set of arithmetic and logical operators for your class. Image structure The CImg<T> structure contains six fields: _width defines the number of columns of the image (size along the X-axis). _height defines the number of rows of the image (size along the Y-axis). _depth defines the number of slices of the image (size along the Z-axis). _spectrum defines the number of channels of the image (size along the C-axis). _data defines a pointer to the pixel**data (of type T ). _is_shared is a boolean that tells if the memory buffer data is shared with another image. You can access these fields publicly although it is recommended to use the dedicated functions width() , height() , depth() , spectrum() and ptr() to do so. Image dimensions are not limited to a specific range (as long as you got enough available memory). A value of 1 usually means that the corresponding dimension is flat . If one of the dimensions is 0 , or if the data pointer is null, the image is considered as empty . Empty images should not contain any pixel data and thus, will not be processed by CImg member functions (a CImgInstanceException will be thrown instead). Pixel data are stored in memory, in a non interlaced mode (See cimg_storage). Image declaration and construction Declaring an image can be done by using one of the several available constructors. Here is a list of the most used: Construct images from arbitrary dimensions: CImg<char> img; declares an empty image. CImg<unsigned char> img(128,128); declares a 128x128 greyscale image with unsigned``char pixel values. CImg<double> img(3,3); declares a 3x3 matrix with double coefficients. CImg<unsigned char> img(256,256,1,3); declares a 256x256x1x3 (color) image (colors are stored as an image with three channels). CImg<double> img(128,128,128); declares a 128x128x128 volumetric and greyscale image (with double pixel values). CImg<> img(128,128,128,3); declares a 128x128x128 volumetric color image (with float pixels, which is the default value of the template parameter T ). Note: images pixels are not automatically initialized to 0 . You may use the function [fill()](#structcimg__library__suffixed_1_1CImg_1ab7ab19191c8b913121d5c99a0e5806db) to do it, or use the specific constructor taking 5 parameters like this: CImg<> img(128,128,128,3,0); declares a 128x128x128 volumetric color image with all pixel values to 0. Construct images from filenames: CImg<unsigned char> img(\"image.jpg\"); reads a JPEG color image from the file \"image.jpg\". CImg<float> img(\"analyze.hdr\"); reads a volumetric image (ANALYZE7.5 format) from the file \"analyze.hdr\". Note: You need to install ImageMagick to be able to read common compressed image formats (JPG,PNG, ...) (See cimg_files_io). Construct images from C-style arrays: CImg<int> img(data_buffer,256,256); constructs a 256x256 greyscale image from a int* buffer data_buffer (of size 256x256=65536). CImg<unsigned char> img(data_buffer,256,256,1,3); constructs a 256x256 color image from a unsigned``char* buffer data_buffer (where R,G,B channels follow each others). The complete list of constructors can be found here . Most useful functions The CImg<T> class contains a lot of functions that operates on images. Some of the most useful are: operator()() : Read or write pixel values. display() : displays the image in a new window. Summary Members Descriptions public unsigned int _width public unsigned int _height public unsigned int _depth public unsigned int _spectrum public bool _is_shared public T * _data typedef iterator Simple iterator type, to loop through each pixel value of an image instance. typedef const_iterator Simple const iterator type, to loop through each pixel value of a const image instance. typedef value_type Pixel value type. typedef Tbool typedef Tuchar typedef Tchar typedef Tushort typedef Tshort typedef Tuint typedef Tint typedef Tulong typedef Tlong typedef Tfloat typedef Tdouble typedef boolT typedef ucharT typedef charT typedef ushortT typedef shortT typedef uintT typedef intT typedef ulongT typedef longT typedef uint64T typedef int64T typedef floatT typedef doubleT Members public unsigned int _width public unsigned int _height public unsigned int _depth public unsigned int _spectrum public bool _is_shared public T * _data typedef iterator Simple iterator type, to loop through each pixel value of an image instance. The [CImg<T>::iterator](#structcimg__library__suffixed_1_1CImg_1a14869a2d3849994eb07f80d2e2c36bbd) type is defined to be a T* . You will seldom have to use iterators in CImg, most classical operations being achieved (often in a faster way) using methods of CImg<T> . Example CImg < float > img ( \"reference.jpg\" ); // Load image from file // Set all pixels to '0', with a CImg iterator. for ( CImg < float >:: iterator it = img . begin (), it < img . end (); ++ it ) * it = 0 ; img . fill ( 0 ); // Do the same with a built-in method typedef const_iterator Simple const iterator type, to loop through each pixel value of a const image instance. The [CImg<T>::const_iterator](#structcimg__library__suffixed_1_1CImg_1a0539e36c0285d3e4647e0ed1919e947e) type is defined to be a const``T* . You will seldom have to use iterators in CImg, most classical operations being achieved (often in a faster way) using methods of CImg<T> . Example const CImg < float > img ( \"reference.jpg\" ); // Load image from file float sum = 0 ; // Compute sum of all pixel values, with a CImg iterator. for ( CImg < float >:: iterator it = img . begin (), it < img . end (); ++ it ) sum +=* it ; const float sum2 = img . sum (); // Do the same with a built-in method typedef value_type Pixel value type. Refer to the type of the pixel values of an image instance. The [CImg<T>::value_type](#structcimg__library__suffixed_1_1CImg_1a9a18781e1d4ca73670e52bc4a56ec3d2) type of a CImg<T> is defined to be a T . [CImg<T>::value_type](#structcimg__library__suffixed_1_1CImg_1a9a18781e1d4ca73670e52bc4a56ec3d2) is actually not used in CImg methods. It has been mainly defined for compatibility with STL naming conventions. typedef Tbool typedef Tuchar typedef Tchar typedef Tushort typedef Tshort typedef Tuint typedef Tint typedef Tulong typedef Tlong typedef Tfloat typedef Tdouble typedef boolT typedef ucharT typedef charT typedef ushortT typedef shortT typedef uintT typedef intT typedef ulongT typedef longT typedef uint64T typedef int64T typedef floatT typedef doubleT struct cimg_library_suffixed::CImgAbortException \u00b6 struct cimg_library_suffixed::CImgAbortException : public exception Summary Members Descriptions public char * _message public inline CImgAbortException () public inline CImgAbortException (const char *const format,...) public inline CImgAbortException (const CImgAbortException & e) public inline ~CImgAbortException () public inline CImgAbortException & operator= (const CImgAbortException & e) public inline const char * what () const Return a C-string containing the error message associated to the thrown exception. Members public char * _message public inline CImgAbortException () public inline CImgAbortException (const char *const format,...) public inline CImgAbortException (const CImgAbortException & e) public inline ~CImgAbortException () public inline CImgAbortException & operator= (const CImgAbortException & e) public inline const char * what () const Return a C-string containing the error message associated to the thrown exception. struct cimg_library_suffixed::CImgArgumentException \u00b6 struct cimg_library_suffixed::CImgArgumentException : public cimg_library_suffixed::CImgException Summary Members Descriptions public inline CImgArgumentException (const char *const format,...) Members public inline CImgArgumentException (const char *const format,...) struct cimg_library_suffixed::CImgDisplayException \u00b6 struct cimg_library_suffixed::CImgDisplayException : public cimg_library_suffixed::CImgException Summary Members Descriptions public inline CImgDisplayException (const char *const format,...) Members public inline CImgDisplayException (const char *const format,...) struct cimg_library_suffixed::CImgException \u00b6 struct cimg_library_suffixed::CImgException : public exception Instances of [CImgException](#structcimg__library__suffixed_1_1CImgException) are thrown when errors are encountered in a \\CImg function call. Overview CImgException is the base class of all exceptions thrown by \\CImg (except CImgAbortException ). CImgException is never thrown itself. Derived classes that specify the type of errord are thrown instead. These classes can be: CImgAbortException : Thrown when a computationally-intensive function is aborted by an external signal. This is the only non-derived exception class. CImgArgumentException : Thrown when one argument of a called \\CImg function is invalid. This is probably one of the most thrown exception by \\CImg. For instance, the following example throws a [CImgArgumentException](#structcimg__library__suffixed_1_1CImgArgumentException): CImg < float > img ( 100 , 100 , 1 , 3 ); // Define a 100x100 color image with float-valued pixels img . mirror ( 'e' ); // Try to mirror image along the (non-existing) 'e'-axis CImgDisplayException : Thrown when something went wrong during the display of images in CImgDisplay instances. CImgInstanceException : Thrown when an instance associated to a called \\CImg method does not fit the function requirements. For instance, the following example throws a [CImgInstanceException](#structcimg__library__suffixed_1_1CImgInstanceException): const CImg < float > img ; // Define an empty image const float value = img . at ( 0 ); // Try to read first pixel value (does not exist) CImgIOException : Thrown when an error occurred when trying to load or save image files. This happens when trying to read files that do not exist or with invalid formats. For instance, the following example throws a [CImgIOException](#structcimg__library__suffixed_1_1CImgIOException): const CImg < float > img ( \"missing_file.jpg\" ); // Try to load a file that does not exist CImgWarningException : Thrown only if configuration macro cimg_strict_warnings is set, and when a \\CImg function has to display a warning message (see cimg::warn() ). It is not recommended to throw CImgException instances by yourself, since they are expected to be thrown only by \\CImg. When an error occurs in a library function call, \\CImg may display error messages on the screen or on the standard output, depending on the current \\CImg exception mode. The \\CImg exception mode can be get and set by functions cimg::exception_mode() and cimg::exception_mode(unsigned int) . Exceptions handling In all cases, when an error occurs in \\CImg, an instance of the corresponding exception class is thrown. This may lead the program to break (this is the default behavior), but you can bypass this behavior by handling the exceptions by yourself, using a usual try { ... } catch () { ... } bloc, as in the following example: #define \"CImg.h\" using namespace cimg_library ; int main () { cimg :: exception_mode ( 0 ); // Enable quiet exception mode try { ... // Here, do what you want to stress CImg } catch ( CImgException & e ) { // You succeeded: something went wrong! std :: fprintf ( stderr , \"CImg Library Error: %s\" , e . what ()); // Display your custom error message ... // Do what you want now to save the ship! } } Summary Members Descriptions public char * _message public inline CImgException () public inline CImgException (const char *const format,...) public inline CImgException (const CImgException & e) public inline ~CImgException () public inline CImgException & operator= (const CImgException & e) public inline const char * what () const Return a C-string containing the error message associated to the thrown exception. Members public char * _message public inline CImgException () public inline CImgException (const char *const format,...) public inline CImgException (const CImgException & e) public inline ~CImgException () public inline CImgException & operator= (const CImgException & e) public inline const char * what () const Return a C-string containing the error message associated to the thrown exception. struct cimg_library_suffixed::CImgInstanceException \u00b6 struct cimg_library_suffixed::CImgInstanceException : public cimg_library_suffixed::CImgException Summary Members Descriptions public inline CImgInstanceException (const char *const format,...) Members public inline CImgInstanceException (const char *const format,...) struct cimg_library_suffixed::CImgIOException \u00b6 struct cimg_library_suffixed::CImgIOException : public cimg_library_suffixed::CImgException Summary Members Descriptions public inline CImgIOException (const char *const format,...) Members public inline CImgIOException (const char *const format,...) struct cimg_library_suffixed::CImgList \u00b6 Represent a list of images CImg . Summary Members Descriptions public unsigned int _width public unsigned int _allocated_width public CImg < T > * _data typedef iterator Simple iterator type, to loop through each image of a list. typedef const_iterator Simple const iterator type, to loop through each image of a const list instance. typedef value_type Pixel value type. typedef Tbool typedef Tuchar typedef Tchar typedef Tushort typedef Tshort typedef Tuint typedef Tint typedef Tulong typedef Tlong typedef Tfloat typedef Tdouble typedef boolT typedef ucharT typedef charT typedef ushortT typedef shortT typedef uintT typedef intT typedef ulongT typedef longT typedef uint64T typedef int64T typedef floatT typedef doubleT Members public unsigned int _width public unsigned int _allocated_width public CImg < T > * _data typedef iterator Simple iterator type, to loop through each image of a list. The [CImgList<T>::iterator](#structcimg__library__suffixed_1_1CImgList_1a9d3e27da63f536e04fc7249f8e13dba0) type is defined as a CImg<T>* . You may use it like this: CImgList <> list ; // Assuming this image list is not empty for ( CImgList <>:: iterator it = list . begin (); it < list . end (); ++ it ) ( * it ). mirror ( 'x' ); Using the loop macro cimglist_for is another (more concise) alternative: cimglist_for ( list , l ) list [ l ]. mirror ( 'x' ); typedef const_iterator Simple const iterator type, to loop through each image of a const list instance. The [CImgList<T>::const_iterator](#structcimg__library__suffixed_1_1CImgList_1aabe27c2b223cefcbdf081b4a7220a12c) type is defined to be a const CImg<T>* . Similar to CImgList ::iterator , but for constant list instances. typedef value_type Pixel value type. Refer to the pixels value type of the images in the list. The [CImgList<T>::value_type](#structcimg__library__suffixed_1_1CImgList_1a41c952483793b049e58c27e11d0dd955) type of a CImgList<T> is defined to be a T . It is then similar to CImg ::value_type . [CImgList<T>::value_type](#structcimg__library__suffixed_1_1CImgList_1a41c952483793b049e58c27e11d0dd955) is actually not used in CImg methods. It has been mainly defined for compatibility with STL naming conventions. typedef Tbool typedef Tuchar typedef Tchar typedef Tushort typedef Tshort typedef Tuint typedef Tint typedef Tulong typedef Tlong typedef Tfloat typedef Tdouble typedef boolT typedef ucharT typedef charT typedef ushortT typedef shortT typedef uintT typedef intT typedef ulongT typedef longT typedef uint64T typedef int64T typedef floatT typedef doubleT struct cimg_library_suffixed::CImgWarningException \u00b6 struct cimg_library_suffixed::CImgWarningException : public cimg_library_suffixed::CImgException Summary Members Descriptions public inline CImgWarningException (const char *const format,...) Members public inline CImgWarningException (const char *const format,...) namespace cimg_library_suffixed::cimg \u00b6 Contains low-level functions and variables of the \\CImg Library. Most of the functions and variables within this namespace are used by the \\CImg library for low-level operations. You may use them to access specific const values or environment variables internally used by \\CImg. Never write using namespace cimg_library::cimg; in your source code. Lot of functions in the cimg:: namespace have the same names as standard C functions that may be defined in the global namespace :: . Summary Members Descriptions public inline std::FILE * output (std::FILE * file) Get/set default output stream for the \\CImg library messages. public inline void info () Print information about \\CImg environment variables. public template<> inline void unused (const T &,...) Avoid warning messages due to unused parameters. Do nothing actually. public inline int mutex (const unsigned int n,const int lock_mode) public inline unsigned int & exception_mode (const unsigned int value,const bool is_set) public inline FILE * _stdin (const bool throw_exception) public inline FILE * _stdout (const bool throw_exception) public inline FILE * _stderr (const bool throw_exception) public inline unsigned int & exception_mode (const unsigned int mode) Set current \\CImg exception mode. public inline unsigned int & exception_mode () Return current \\CImg exception mode. public inline unsigned int openmp_mode (const unsigned int value,const bool is_set) public inline unsigned int openmp_mode (const unsigned int mode) Set current \\CImg openmp mode. public inline unsigned int openmp_mode () Return current \\CImg openmp mode. public inline int dialog (const char *const title,const char *const msg,const char *const button1_label,const char *const button2_label,const char *const button3_label,const char *const button4_label,const char *const button5_label,const char *const button6_label,const bool centering) Display a simple dialog box, and wait for the user's response \\specialization. public inline double eval (const char *const expression,const double x,const double y,const double z,const double c) Evaluate math expression. public inline Mutex_static & Mutex_attr () public inline unsigned int nb_cpus () public inline void warn (const char *const format,...) Display a warning message on the default output stream. public inline int system (const char *const command,const char *const module_name,const bool is_verbose) #### Parameters public template<> inline T & temporary (const T &) Return a reference to a temporary variable of type T. public template<> inline void swap (T & a,T & b) Exchange values of variables a and b . public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2) Exchange values of variables ( a1 , a2 ) and ( b1 , b2 ). public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2,T3 & a3,T3 & b3) Exchange values of variables ( a1 , a2 , a3 ) and ( b1 , b2 , b3 ). public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2,T3 & a3,T3 & b3,T4 & a4,T4 & b4) Exchange values of variables ( a1 , a2 ,..., a4 ) and ( b1 , b2 ,..., b4 ). public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2,T3 & a3,T3 & b3,T4 & a4,T4 & b4,T5 & a5,T5 & b5) Exchange values of variables ( a1 , a2 ,..., a5 ) and ( b1 , b2 ,..., b5 ). public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2,T3 & a3,T3 & b3,T4 & a4,T4 & b4,T5 & a5,T5 & b5,T6 & a6,T6 & b6) Exchange values of variables ( a1 , a2 ,..., a6 ) and ( b1 , b2 ,..., b6 ). public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2,T3 & a3,T3 & b3,T4 & a4,T4 & b4,T5 & a5,T5 & b5,T6 & a6,T6 & b6,T7 & a7,T7 & b7) Exchange values of variables ( a1 , a2 ,..., a7 ) and ( b1 , b2 ,..., b7 ). public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2,T3 & a3,T3 & b3,T4 & a4,T4 & b4,T5 & a5,T5 & b5,T6 & a6,T6 & b6,T7 & a7,T7 & b7,T8 & a8,T8 & b8) Exchange values of variables ( a1 , a2 ,..., a8 ) and ( b1 , b2 ,..., b8 ). public inline bool endianness () Return the endianness of the current architecture. public template<> inline void invert_endianness (T *const buffer,const cimg_ulong size) Reverse endianness of all elements in a memory buffer. public template<> inline T & invert_endianness (T & a) Reverse endianness of a single variable. public inline unsigned int float2uint (const float f) public inline float uint2float (const unsigned int u) public inline cimg_uint64 time () Return the value of a system timer, with a millisecond precision. public inline cimg_uint64 tictoc (const bool is_tic) public inline cimg_uint64 tic () Start tic/toc timer for time measurement between code instructions. public inline cimg_uint64 toc () End tic/toc timer and displays elapsed time from last call to tic() . public inline void sleep (const unsigned int milliseconds) Sleep for a given numbers of milliseconds. public inline unsigned int wait (const unsigned int milliseconds,cimg_uint64 *const p_timer) public inline unsigned int wait (const unsigned int milliseconds) Wait for a given number of milliseconds since the last call to wait(). public inline cimg_uint64 & rng () public inline unsigned int _rand (cimg_uint64 *const p_rng) public inline unsigned int _rand () public inline void srand (cimg_uint64 *const p_rng) public inline void srand () public inline void srand (const cimg_uint64 seed) public inline double rand (const double val_min,const double val_max,cimg_uint64 *const p_rng) public inline double rand (const double val_min,const double val_max) public inline double rand (const double val_max,cimg_uint64 *const p_rng) public inline double rand (const double val_max) public inline double grand (cimg_uint64 *const p_rng) public inline double grand () public inline unsigned int prand (const double z,cimg_uint64 *const p_rng) public inline unsigned int prand (const double z) public template<> inline T cut (const T & val,const t & val_min,const t & val_max) Cut (i.e. clamp) value in specified interval. public template<> inline T rol (const T & a,const unsigned int n) Bitwise-rotate value on the left. public inline float rol (const float a,const unsigned int n) public inline double rol (const double a,const unsigned int n) public inline double rol (const long double a,const unsigned int n) public template<> inline T ror (const T & a,const unsigned int n) Bitwise-rotate value on the right. public inline float ror (const float a,const unsigned int n) public inline double ror (const double a,const unsigned int n) public inline double ror (const long double a,const unsigned int n) public template<> inline T abs (const T & a) Return absolute value of a value. public inline bool abs (const bool a) public inline int abs (const unsigned char a) public inline int abs (const unsigned short a) public inline int abs (const unsigned int a) public inline int abs (const int a) public inline cimg_int64 abs (const cimg_uint64 a) public inline double abs (const double a) public inline float abs (const float a) public inline double acosh (const double x) Return hyperbolic arcosine of a value. public inline double asinh (const double x) Return hyperbolic arcsine of a value. public inline double atanh (const double x) Return hyperbolic arctangent of a value. public inline double sinc (const double x) Return the sinc of a given value. public inline double log2 (const double x) Return base-2 logarithm of a value. public template<> inline T sqr (const T & val) Return square of a value. public template<> inline double cbrt (const T & x) Return cubic root of a value. public template<> inline T pow3 (const T & val) public template<> inline T pow4 (const T & val) public template<> inline t min (const t & a,const t & b,const t & c) Return the minimum between three values. public template<> inline t min (const t & a,const t & b,const t & c,const t & d) Return the minimum between four values. public template<> inline t minabs (const t & a,const t & b) Return the minabs between two values. public template<> inline t minabs (const t & a,const t & b,const t & abs_b) public template<> inline t max (const t & a,const t & b,const t & c) Return the maximum between three values. public template<> inline t max (const t & a,const t & b,const t & c,const t & d) Return the maximum between four values. public template<> inline t maxabs (const t & a,const t & b) Return the maxabs between two values. public template<> inline t maxabs (const t & a,const t & b,const t & abs_b) public template<> inline T sign (const T & x) Return the sign of a value. public template<> inline cimg_uint64 nearest_pow2 (const T & x) Return the nearest power of 2 higher than given value. public template<> inline T mod (const T & x,const T & m) Return the modulo of a value. public inline int mod (const bool x,const bool m) public inline int mod (const unsigned char x,const unsigned char m) public inline int mod (const char x,const char m) public inline int mod (const unsigned short x,const unsigned short m) public inline int mod (const short x,const short m) public inline int mod (const unsigned int x,const unsigned int m) public inline int mod (const int x,const int m) public inline cimg_int64 mod (const cimg_uint64 x,const cimg_uint64 m) public inline cimg_int64 mod (const cimg_int64 x,const cimg_int64 m) public template<> inline T minmod (const T & a,const T & b) Return the min-mod of two values. public template<> inline T round (const T & x) public template<> inline int uiround (const T x) public template<> inline T round (const T & x,const double y,const int rounding_type) Return rounded value. public template<> inline T median (T val0,T val1) public template<> inline T median (T val0,T val1,T val2) public template<> inline T median (T val0,T val1,T val2,T val3,T val4) public template<> inline T median (T val0,T val1,T val2,T val3,T val4,T val5,T val6) public template<> inline T median (T val0,T val1,T val2,T val3,T val4,T val5,T val6,T val7,T val8) public template<> inline T median (T val0,T val1,T val2,T val3,T val4,T val5,T val6,T val7,T val8,T val9,T val10,T val11,T val12) public template<> inline T median (T val0,T val1,T val2,T val3,T val4,T val5,T val6,T val7,T val8,T val9,T val10,T val11,T val12,T val13,T val14,T val15,T val16,T val17,T val18,T val19,T val20,T val21,T val22,T val23,T val24) public template<> inline T median (T val0,T val1,T val2,T val3,T val4,T val5,T val6,T val7,T val8,T val9,T val10,T val11,T val12,T val13,T val14,T val15,T val16,T val17,T val18,T val19,T val20,T val21,T val22,T val23,T val24,T val25,T val26,T val27,T val28,T val29,T val30,T val31,T val32,T val33,T val34,T val35,T val36,T val37,T val38,T val39,T val40,T val41,T val42,T val43,T val44,T val45,T val46,T val47,T val48) public template<> inline T hypot (const T x,const T y) Return sqrt(x^2 + y^2). public template<> inline T hypot (const T x,const T y,const T z) public template<> inline T _hypot (const T x,const T y) public inline double factorial (const int n) Return the factorial of n. public inline double permutations (const int k,const int n,const bool with_order) Return the number of permutations of k objects in a set of n objects. public inline double _fibonacci (int exp) public inline double fibonacci (const int n) Calculate fibonacci number. public inline long gcd (long a,long b) Calculate greatest common divisor. public inline char lowercase (const char x) Convert character to lower case. public inline double lowercase (const double x) public inline void lowercase (char *const str) Convert C-string to lower case. public inline char uppercase (const char x) Convert character to upper case. public inline double uppercase (const double x) public inline void uppercase (char *const str) Convert C-string to upper case. public inline bool is_blank (const char c) Return true if input character is blank (space, tab, or non-printable character). public inline double atof (const char *const str) Read value in a C-string. public inline int strncasecmp (const char *const str1,const char *const str2,const int l) Compare the first l characters of two C-strings, ignoring the case. public inline int strcasecmp (const char *const str1,const char *const str2) Compare two C-strings, ignoring the case. public inline char * strellipsize (char *const str,const unsigned int l,const bool is_ending) Ellipsize a string. public inline char * strellipsize (const char *const str,char *const res,const unsigned int l,const bool is_ending) Ellipsize a string. public inline bool strpare (char *const str,const char delimiter,const bool is_symmetric,const bool is_iterative) Remove delimiters on the start and/or end of a C-string. public inline bool strpare (char *const str,const bool is_symmetric,const bool is_iterative) Remove white spaces on the start and/or end of a C-string. public inline void strwindows_reserved (char *const str,const char c) Replace reserved characters (for Windows filename) by another character. public inline void strunescape (char *const str) Replace escape sequences in C-strings by character values. public inline const char * strbuffersize (const cimg_ulong size) public inline const char * stros () public inline const char * basename (const char *const s,const char separator) Return the basename of a filename. public inline const char * filenamerand () public inline void winformat_string (char *const str) public inline std::FILE * std_fopen (const char *const path,const char *const mode) public inline std::FILE * fopen (const char *const path,const char *const mode) Open a file. public inline int fclose (std::FILE * file) Close a file. public inline int fseek (FILE * stream,cimg_long offset,int origin) Version of ' fseek() ' that supports >=64bits offsets everywhere (for Windows). public inline cimg_long ftell (FILE * stream) Version of ' ftell() ' that supports >=64bits offsets everywhere (for Windows). public inline bool is_directory (const char *const path) Check if a path is a directory. public inline bool is_file (const char *const path) Check if a path is a file. public inline cimg_int64 fsize (const char *const filename) Get file size. public template<> inline int fdate (const char *const path,T * attr,const unsigned int nb_attr) Get last write time of a given file or directory (multiple-attributes version). public inline int fdate (const char *const path,unsigned int attr) Get last write time of a given file or directory (single-attribute version). public template<> inline int date (T * attr,const unsigned int nb_attr) Get current local time (multiple-attributes version). public inline int date (unsigned int attr) Get current local time (single-attribute version). public inline const char * temporary_path (const char *const user_path,const bool reinit_path) Get the file or directory attributes with support for UTF-8 paths (Windows only). public inline const char * imagemagick_path (const char *const user_path,const bool reinit_path) Get/set path to the Program Files/ directory (Windows only). public inline const char * graphicsmagick_path (const char *const user_path,const bool reinit_path) Get/set path to the GraphicsMagick's gm binary. public inline const char * medcon_path (const char *const user_path,const bool reinit_path) Get/set path to the XMedcon's medcon binary. public inline const char * ffmpeg_path (const char *const user_path,const bool reinit_path) Get/set path to the FFMPEG's ffmpeg binary. public inline const char * gzip_path (const char *const user_path,const bool reinit_path) Get/set path to the gzip binary. public inline const char * gunzip_path (const char *const user_path,const bool reinit_path) Get/set path to the gunzip binary. public inline const char * dcraw_path (const char *const user_path,const bool reinit_path) Get/set path to the dcraw binary. public inline const char * wget_path (const char *const user_path,const bool reinit_path) Get/set path to the wget binary. public inline const char * curl_path (const char *const user_path,const bool reinit_path) Get/set path to the curl binary. public inline const char * split_filename (const char *const filename,char *const body) Split filename into two C-strings body and extension . public inline char * number_filename (const char *const filename,const int number,const unsigned int digits,char *const str) Generate a numbered version of a filename. public template<> inline size_t fread (T *const ptr,const size_t nmemb,std::FILE * stream) Read data from file. public template<> inline size_t fwrite (const T * ptr,const size_t nmemb,std::FILE * stream) Write data to file. public inline void fempty (std::FILE *const file,const char *const filename) Create an empty file. public inline const char * ftype (std::FILE *const file,const char *const filename) Try to guess format from an image file. public inline bool & network_mode (const bool value,const bool is_set) public inline bool & network_mode () public inline char * load_network (const char *const url,char *const filename_local,const unsigned int timeout,const bool try_fallback,const char *const referer) Load file from network as a local temporary file. public inline const char * option (const char *const name,const int argc,const char *const *const argv,const char *const _default,const char *const usage,const bool reset_static) Return options specified on the command line. public inline const char * option (const char *const name,const int argc,const char *const *const argv,const char *const _default,const char *const usage) public inline bool option (const char *const name,const int argc,const char *const *const argv,const bool _default,const char *const usage) public inline int option (const char *const name,const int argc,const char *const *const argv,const int _default,const char *const usage) public inline char option (const char *const name,const int argc,const char *const *const argv,const char _default,const char *const usage) public inline float option (const char *const name,const int argc,const char *const *const argv,const float _default,const char *const usage) public inline double option (const char *const name,const int argc,const char *const *const argv,const double _default,const char *const usage) public inline int _sort_files (const void * a,const void * b) public inline CImgList < char > files (const char *const path,const bool is_pattern,const unsigned int mode,const bool include_path) Return list of files/directories in specified directory. public template<> inline int dialog (const char *const title,const char *const msg,const char *const button1_label,const char *const button2_label,const char *const button3_label,const char *const button4_label,const char *const button5_label,const char *const button6_label,const CImg < t > & logo,const bool is_centered) Display a simple dialog box, and wait for the user's response. public template<> inline CImg](#structcimg__library__suffixed_1_1CImg)< typename [cimg::superset](#structcimg__library__suffixed_1_1cimg_1_1superset)< double, t >::[type > eval (const char *const expression,const CImg < t > & xyzc) struct cimg_library_suffixed::cimg::last struct cimg_library_suffixed::cimg::Mutex_static struct cimg_library_suffixed::cimg::superset struct cimg_library_suffixed::cimg::superset2 struct cimg_library_suffixed::cimg::superset3 struct cimg_library_suffixed::cimg::superset< bool, char > struct cimg_library_suffixed::cimg::superset< bool, cimg_int64 > struct cimg_library_suffixed::cimg::superset< bool, cimg_uint64 > struct cimg_library_suffixed::cimg::superset< bool, double > struct cimg_library_suffixed::cimg::superset< bool, float > struct cimg_library_suffixed::cimg::superset< bool, int > struct cimg_library_suffixed::cimg::superset< bool, short > struct cimg_library_suffixed::cimg::superset< bool, signed char > struct cimg_library_suffixed::cimg::superset< bool, unsigned char > struct cimg_library_suffixed::cimg::superset< bool, unsigned int > struct cimg_library_suffixed::cimg::superset< bool, unsigned short > struct cimg_library_suffixed::cimg::superset< char, cimg_int64 > struct cimg_library_suffixed::cimg::superset< char, cimg_uint64 > struct cimg_library_suffixed::cimg::superset< char, double > struct cimg_library_suffixed::cimg::superset< char, float > struct cimg_library_suffixed::cimg::superset< char, int > struct cimg_library_suffixed::cimg::superset< char, short > struct cimg_library_suffixed::cimg::superset< char, signed char > struct cimg_library_suffixed::cimg::superset< char, unsigned char > struct cimg_library_suffixed::cimg::superset< char, unsigned int > struct cimg_library_suffixed::cimg::superset< char, unsigned short > struct cimg_library_suffixed::cimg::superset< cimg_int64, double > struct cimg_library_suffixed::cimg::superset< cimg_int64, float > struct cimg_library_suffixed::cimg::superset< cimg_uint64, char > struct cimg_library_suffixed::cimg::superset< cimg_uint64, cimg_int64 > struct cimg_library_suffixed::cimg::superset< cimg_uint64, double > struct cimg_library_suffixed::cimg::superset< cimg_uint64, float > struct cimg_library_suffixed::cimg::superset< cimg_uint64, int > struct cimg_library_suffixed::cimg::superset< cimg_uint64, short > struct cimg_library_suffixed::cimg::superset< cimg_uint64, signed char > struct cimg_library_suffixed::cimg::superset< float, double > struct cimg_library_suffixed::cimg::superset< int, cimg_int64 > struct cimg_library_suffixed::cimg::superset< int, cimg_uint64 > struct cimg_library_suffixed::cimg::superset< int, double > struct cimg_library_suffixed::cimg::superset< int, float > struct cimg_library_suffixed::cimg::superset< int, unsigned int > struct cimg_library_suffixed::cimg::superset< short, cimg_int64 > struct cimg_library_suffixed::cimg::superset< short, cimg_uint64 > struct cimg_library_suffixed::cimg::superset< short, double > struct cimg_library_suffixed::cimg::superset< short, float > struct cimg_library_suffixed::cimg::superset< short, int > struct cimg_library_suffixed::cimg::superset< short, unsigned int > struct cimg_library_suffixed::cimg::superset< short, unsigned short > struct cimg_library_suffixed::cimg::superset< signed char, char > struct cimg_library_suffixed::cimg::superset< signed char, cimg_int64 > struct cimg_library_suffixed::cimg::superset< signed char, cimg_uint64 > struct cimg_library_suffixed::cimg::superset< signed char, double > struct cimg_library_suffixed::cimg::superset< signed char, float > struct cimg_library_suffixed::cimg::superset< signed char, int > struct cimg_library_suffixed::cimg::superset< signed char, short > struct cimg_library_suffixed::cimg::superset< signed char, unsigned char > struct cimg_library_suffixed::cimg::superset< signed char, unsigned int > struct cimg_library_suffixed::cimg::superset< signed char, unsigned short > struct cimg_library_suffixed::cimg::superset< unsigned char, char > struct cimg_library_suffixed::cimg::superset< unsigned char, cimg_int64 > struct cimg_library_suffixed::cimg::superset< unsigned char, cimg_uint64 > struct cimg_library_suffixed::cimg::superset< unsigned char, double > struct cimg_library_suffixed::cimg::superset< unsigned char, float > struct cimg_library_suffixed::cimg::superset< unsigned char, int > struct cimg_library_suffixed::cimg::superset< unsigned char, short > struct cimg_library_suffixed::cimg::superset< unsigned char, signed char > struct cimg_library_suffixed::cimg::superset< unsigned char, unsigned int > struct cimg_library_suffixed::cimg::superset< unsigned char, unsigned short > struct cimg_library_suffixed::cimg::superset< unsigned int, char > struct cimg_library_suffixed::cimg::superset< unsigned int, cimg_int64 > struct cimg_library_suffixed::cimg::superset< unsigned int, cimg_uint64 > struct cimg_library_suffixed::cimg::superset< unsigned int, double > struct cimg_library_suffixed::cimg::superset< unsigned int, float > struct cimg_library_suffixed::cimg::superset< unsigned int, int > struct cimg_library_suffixed::cimg::superset< unsigned int, short > struct cimg_library_suffixed::cimg::superset< unsigned int, signed char > struct cimg_library_suffixed::cimg::superset< unsigned short, char > struct cimg_library_suffixed::cimg::superset< unsigned short, cimg_int64 > struct cimg_library_suffixed::cimg::superset< unsigned short, cimg_uint64 > struct cimg_library_suffixed::cimg::superset< unsigned short, double > struct cimg_library_suffixed::cimg::superset< unsigned short, float > struct cimg_library_suffixed::cimg::superset< unsigned short, int > struct cimg_library_suffixed::cimg::superset< unsigned short, short > struct cimg_library_suffixed::cimg::superset< unsigned short, signed char > struct cimg_library_suffixed::cimg::superset< unsigned short, unsigned int > struct cimg_library_suffixed::cimg::type struct cimg_library_suffixed::cimg::type< bool > struct cimg_library_suffixed::cimg::type< char > struct cimg_library_suffixed::cimg::type< cimg_int64 > struct cimg_library_suffixed::cimg::type< cimg_uint64 > struct cimg_library_suffixed::cimg::type< double > struct cimg_library_suffixed::cimg::type< float > struct cimg_library_suffixed::cimg::type< int > struct cimg_library_suffixed::cimg::type< long double > struct cimg_library_suffixed::cimg::type< short > struct cimg_library_suffixed::cimg::type< signed char > struct cimg_library_suffixed::cimg::type< unsigned char > struct cimg_library_suffixed::cimg::type< unsigned int > struct cimg_library_suffixed::cimg::type< unsigned short > Members public inline std::FILE * output (std::FILE * file) Get/set default output stream for the \\CImg library messages. Parameters file Desired output stream. Set to 0 to get the currently used output stream only. Returns Currently used output stream. public inline void info () Print information about \\CImg environment variables. Output is done on the default output stream. public template<> inline void unused (const T &,...) Avoid warning messages due to unused parameters. Do nothing actually. public inline int mutex (const unsigned int n,const int lock_mode) public inline unsigned int & exception_mode (const unsigned int value,const bool is_set) public inline FILE * _stdin (const bool throw_exception) public inline FILE * _stdout (const bool throw_exception) public inline FILE * _stderr (const bool throw_exception) public inline unsigned int & exception_mode (const unsigned int mode) Set current \\CImg exception mode. The way error messages are handled by \\CImg can be changed dynamically, using this function. Parameters mode Desired exception mode. Possible values are: 0 : Hide library messages (quiet mode). 1 : Print library messages on the console. 2 : Display library messages on a dialog window. 3 : Do as 1 + add extra debug warnings (slow down the code!). 4 : Do as 2 + add extra debug warnings (slow down the code!). public inline unsigned int & exception_mode () Return current \\CImg exception mode. By default, return the value of configuration macro cimg_verbosity public inline unsigned int openmp_mode (const unsigned int value,const bool is_set) public inline unsigned int openmp_mode (const unsigned int mode) Set current \\CImg openmp mode. The way openmp-based methods are handled by \\CImg can be changed dynamically, using this function. Parameters mode Desired openmp mode. Possible values are: 0 : Never parallelize. 1 : Always parallelize. 2 : Adaptive parallelization mode (default behavior). public inline unsigned int openmp_mode () Return current \\CImg openmp mode. public inline int dialog (const char *const title,const char *const msg,const char *const button1_label,const char *const button2_label,const char *const button3_label,const char *const button4_label,const char *const button5_label,const char *const button6_label,const bool centering) Display a simple dialog box, and wait for the user's response \\specialization. public inline double eval (const char *const expression,const double x,const double y,const double z,const double c) Evaluate math expression. Parameters expression C-string describing the formula to evaluate. x Value of the pre-defined variable x . y Value of the pre-defined variable y . z Value of the pre-defined variable z . c Value of the pre-defined variable c . Returns Result of the formula evaluation. Set expression to 0 to keep evaluating the last specified expression . Example const double res1 = cimg :: eval ( \"cos(x)^2 + sin(y)^2\" , 2 , 2 ), // will return '1' res2 = cimg :: eval ( 0 , 1 , 1 ); // will return '1' too public inline Mutex_static & Mutex_attr () public inline unsigned int nb_cpus () public inline void warn (const char *const format,...) Display a warning message on the default output stream. Parameters format C-string containing the format of the message, as with std::printf() . If configuration macro cimg_strict_warnings is set, this function throws a [CImgWarningException](#structcimg__library__suffixed_1_1CImgWarningException) instead. As the first argument is a format string, it is highly recommended to write cimg :: warn ( \"%s\" , warning_message ); instead of cimg :: warn ( warning_message ); if warning_message can be arbitrary, to prevent nasty memory access. public inline int system (const char *const command,const char *const module_name,const bool is_verbose) Parameters command C-string containing the command line to execute. module_name Module name. Returns Status value of the executed command, whose meaning is OS-dependent. This function is similar to std::system() but it does not open an extra console windows on Windows-based systems. public template<> inline T & temporary (const T &) Return a reference to a temporary variable of type T. public template<> inline void swap (T & a,T & b) Exchange values of variables a and b . public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2) Exchange values of variables ( a1 , a2 ) and ( b1 , b2 ). public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2,T3 & a3,T3 & b3) Exchange values of variables ( a1 , a2 , a3 ) and ( b1 , b2 , b3 ). public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2,T3 & a3,T3 & b3,T4 & a4,T4 & b4) Exchange values of variables ( a1 , a2 ,..., a4 ) and ( b1 , b2 ,..., b4 ). public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2,T3 & a3,T3 & b3,T4 & a4,T4 & b4,T5 & a5,T5 & b5) Exchange values of variables ( a1 , a2 ,..., a5 ) and ( b1 , b2 ,..., b5 ). public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2,T3 & a3,T3 & b3,T4 & a4,T4 & b4,T5 & a5,T5 & b5,T6 & a6,T6 & b6) Exchange values of variables ( a1 , a2 ,..., a6 ) and ( b1 , b2 ,..., b6 ). public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2,T3 & a3,T3 & b3,T4 & a4,T4 & b4,T5 & a5,T5 & b5,T6 & a6,T6 & b6,T7 & a7,T7 & b7) Exchange values of variables ( a1 , a2 ,..., a7 ) and ( b1 , b2 ,..., b7 ). public template<> inline void swap (T1 & a1,T1 & b1,T2 & a2,T2 & b2,T3 & a3,T3 & b3,T4 & a4,T4 & b4,T5 & a5,T5 & b5,T6 & a6,T6 & b6,T7 & a7,T7 & b7,T8 & a8,T8 & b8) Exchange values of variables ( a1 , a2 ,..., a8 ) and ( b1 , b2 ,..., b8 ). public inline bool endianness () Return the endianness of the current architecture. Returns false for Little Endian or true for Big Endian . public template<> inline void invert_endianness (T *const buffer,const cimg_ulong size) Reverse endianness of all elements in a memory buffer. Parameters buffer Memory buffer whose endianness must be reversed. size Number of buffer elements to reverse. public template<> inline T & invert_endianness (T & a) Reverse endianness of a single variable. Parameters a Variable to reverse. Returns Reference to reversed variable. public inline unsigned int float2uint (const float f) public inline float uint2float (const unsigned int u) public inline cimg_uint64 time () Return the value of a system timer, with a millisecond precision. The timer does not necessarily starts from 0 . public inline cimg_uint64 tictoc (const bool is_tic) public inline cimg_uint64 tic () Start tic/toc timer for time measurement between code instructions. Returns Current value of the timer (same value as time() ). public inline cimg_uint64 toc () End tic/toc timer and displays elapsed time from last call to tic() . Returns Time elapsed (in ms) since last call to tic() . public inline void sleep (const unsigned int milliseconds) Sleep for a given numbers of milliseconds. Parameters milliseconds Number of milliseconds to wait for. This function frees the CPU resources during the sleeping time. It can be used to temporize your program properly, without wasting CPU time. public inline unsigned int wait (const unsigned int milliseconds,cimg_uint64 *const p_timer) public inline unsigned int wait (const unsigned int milliseconds) Wait for a given number of milliseconds since the last call to wait(). Parameters milliseconds Number of milliseconds to wait for. Returns Number of milliseconds elapsed since the last call to wait(). Same as sleep() with a waiting time computed with regard to the last call of wait(). It may be used to temporize your program properly, without wasting CPU time. public inline cimg_uint64 & rng () public inline unsigned int _rand (cimg_uint64 *const p_rng) public inline unsigned int _rand () public inline void srand (cimg_uint64 *const p_rng) public inline void srand () public inline void srand (const cimg_uint64 seed) public inline double rand (const double val_min,const double val_max,cimg_uint64 *const p_rng) public inline double rand (const double val_min,const double val_max) public inline double rand (const double val_max,cimg_uint64 *const p_rng) public inline double rand (const double val_max) public inline double grand (cimg_uint64 *const p_rng) public inline double grand () public inline unsigned int prand (const double z,cimg_uint64 *const p_rng) public inline unsigned int prand (const double z) public template<> inline T cut (const T & val,const t & val_min,const t & val_max) Cut (i.e. clamp) value in specified interval. public template<> inline T rol (const T & a,const unsigned int n) Bitwise-rotate value on the left. public inline float rol (const float a,const unsigned int n) public inline double rol (const double a,const unsigned int n) public inline double rol (const long double a,const unsigned int n) public template<> inline T ror (const T & a,const unsigned int n) Bitwise-rotate value on the right. public inline float ror (const float a,const unsigned int n) public inline double ror (const double a,const unsigned int n) public inline double ror (const long double a,const unsigned int n) public template<> inline T abs (const T & a) Return absolute value of a value. public inline bool abs (const bool a) public inline int abs (const unsigned char a) public inline int abs (const unsigned short a) public inline int abs (const unsigned int a) public inline int abs (const int a) public inline cimg_int64 abs (const cimg_uint64 a) public inline double abs (const double a) public inline float abs (const float a) public inline double acosh (const double x) Return hyperbolic arcosine of a value. public inline double asinh (const double x) Return hyperbolic arcsine of a value. public inline double atanh (const double x) Return hyperbolic arctangent of a value. public inline double sinc (const double x) Return the sinc of a given value. public inline double log2 (const double x) Return base-2 logarithm of a value. public template<> inline T sqr (const T & val) Return square of a value. public template<> inline double cbrt (const T & x) Return cubic root of a value. public template<> inline T pow3 (const T & val) public template<> inline T pow4 (const T & val) public template<> inline t min (const t & a,const t & b,const t & c) Return the minimum between three values. public template<> inline t min (const t & a,const t & b,const t & c,const t & d) Return the minimum between four values. public template<> inline t minabs (const t & a,const t & b) Return the minabs between two values. public template<> inline t minabs (const t & a,const t & b,const t & abs_b) public template<> inline t max (const t & a,const t & b,const t & c) Return the maximum between three values. public template<> inline t max (const t & a,const t & b,const t & c,const t & d) Return the maximum between four values. public template<> inline t maxabs (const t & a,const t & b) Return the maxabs between two values. public template<> inline t maxabs (const t & a,const t & b,const t & abs_b) public template<> inline T sign (const T & x) Return the sign of a value. public template<> inline cimg_uint64 nearest_pow2 (const T & x) Return the nearest power of 2 higher than given value. public template<> inline T mod (const T & x,const T & m) Return the modulo of a value. Parameters x Input value. m Modulo value. This modulo function accepts negative and floating-points modulo numbers, as well as variables of any type. public inline int mod (const bool x,const bool m) public inline int mod (const unsigned char x,const unsigned char m) public inline int mod (const char x,const char m) public inline int mod (const unsigned short x,const unsigned short m) public inline int mod (const short x,const short m) public inline int mod (const unsigned int x,const unsigned int m) public inline int mod (const int x,const int m) public inline cimg_int64 mod (const cimg_uint64 x,const cimg_uint64 m) public inline cimg_int64 mod (const cimg_int64 x,const cimg_int64 m) public template<> inline T minmod (const T & a,const T & b) Return the min-mod of two values. minmod( a , b ) is defined to be: minmod( a , b ) = min( a , b ) , if a and b have the same sign. minmod( a , b ) = 0 , if a and b have different signs. public template<> inline T round (const T & x) public template<> inline int uiround (const T x) public template<> inline T round (const T & x,const double y,const int rounding_type) Return rounded value. Parameters x Value to be rounded. y Rounding precision. rounding_type Type of rounding operation ( 0 = nearest, -1 = backward, 1 = forward). Returns Rounded value, having the same type as input value x . public template<> inline T median (T val0,T val1) public template<> inline T median (T val0,T val1,T val2) public template<> inline T median (T val0,T val1,T val2,T val3,T val4) public template<> inline T median (T val0,T val1,T val2,T val3,T val4,T val5,T val6) public template<> inline T median (T val0,T val1,T val2,T val3,T val4,T val5,T val6,T val7,T val8) public template<> inline T median (T val0,T val1,T val2,T val3,T val4,T val5,T val6,T val7,T val8,T val9,T val10,T val11,T val12) public template<> inline T median (T val0,T val1,T val2,T val3,T val4,T val5,T val6,T val7,T val8,T val9,T val10,T val11,T val12,T val13,T val14,T val15,T val16,T val17,T val18,T val19,T val20,T val21,T val22,T val23,T val24) public template<> inline T median (T val0,T val1,T val2,T val3,T val4,T val5,T val6,T val7,T val8,T val9,T val10,T val11,T val12,T val13,T val14,T val15,T val16,T val17,T val18,T val19,T val20,T val21,T val22,T val23,T val24,T val25,T val26,T val27,T val28,T val29,T val30,T val31,T val32,T val33,T val34,T val35,T val36,T val37,T val38,T val39,T val40,T val41,T val42,T val43,T val44,T val45,T val46,T val47,T val48) public template<> inline T hypot (const T x,const T y) Return sqrt(x^2 + y^2). public template<> inline T hypot (const T x,const T y,const T z) public template<> inline T _hypot (const T x,const T y) public inline double factorial (const int n) Return the factorial of n. public inline double permutations (const int k,const int n,const bool with_order) Return the number of permutations of k objects in a set of n objects. public inline double _fibonacci (int exp) public inline double fibonacci (const int n) Calculate fibonacci number. public inline long gcd (long a,long b) Calculate greatest common divisor. public inline char lowercase (const char x) Convert character to lower case. public inline double lowercase (const double x) public inline void lowercase (char *const str) Convert C-string to lower case. public inline char uppercase (const char x) Convert character to upper case. public inline double uppercase (const double x) public inline void uppercase (char *const str) Convert C-string to upper case. public inline bool is_blank (const char c) Return true if input character is blank (space, tab, or non-printable character). public inline double atof (const char *const str) Read value in a C-string. Parameters str C-string containing the float value to read. Returns Read value. Same as std::atof() extended to manage the retrieval of fractions from C-strings, as in \"\u00bd\" . public inline int strncasecmp (const char *const str1,const char *const str2,const int l) Compare the first l characters of two C-strings, ignoring the case. Parameters str1 C-string. str2 C-string. l Number of characters to compare. Returns 0 if the two strings are equal, something else otherwise. This function has to be defined since it is not provided by all C++-compilers (not ANSI). public inline int strcasecmp (const char *const str1,const char *const str2) Compare two C-strings, ignoring the case. Parameters str1 C-string. str2 C-string. Returns 0 if the two strings are equal, something else otherwise. This function has to be defined since it is not provided by all C++-compilers (not ANSI). public inline char * strellipsize (char *const str,const unsigned int l,const bool is_ending) Ellipsize a string. Parameters str C-string. l Max number of characters. is_ending Tell if the dots are placed at the end or at the center of the ellipsized string. public inline char * strellipsize (const char *const str,char *const res,const unsigned int l,const bool is_ending) Ellipsize a string. Parameters str C-string. res output C-string. l Max number of characters. is_ending Tell if the dots are placed at the end or at the center of the ellipsized string. public inline bool strpare (char *const str,const char delimiter,const bool is_symmetric,const bool is_iterative) Remove delimiters on the start and/or end of a C-string. Parameters str C-string to work with (modified at output). delimiter Delimiter character code to remove. is_symmetric Tells if the removal is done only if delimiters are symmetric (both at the beginning and the end of s ). is_iterative Tells if the removal is done if several iterations are possible. Returns true if delimiters have been removed, false otherwise. public inline bool strpare (char *const str,const bool is_symmetric,const bool is_iterative) Remove white spaces on the start and/or end of a C-string. public inline void strwindows_reserved (char *const str,const char c) Replace reserved characters (for Windows filename) by another character. Parameters str C-string to work with (modified at output). c Replacement character. public inline void strunescape (char *const str) Replace escape sequences in C-strings by character values. Parameters str C-string to work with (modified at output). public inline const char * strbuffersize (const cimg_ulong size) public inline const char * stros () public inline const char * basename (const char *const s,const char separator) Return the basename of a filename. public inline const char * filenamerand () public inline void winformat_string (char *const str) public inline std::FILE * std_fopen (const char *const path,const char *const mode) public inline std::FILE * fopen (const char *const path,const char *const mode) Open a file. Parameters path Path of the filename to open. mode C-string describing the opening mode. Returns Opened file. Same as std::fopen() but throw a [CImgIOException](#structcimg__library__suffixed_1_1CImgIOException) when the specified file cannot be opened, instead of returning 0 . public inline int fclose (std::FILE * file) Close a file. Parameters file File to close. Returns 0 if file has been closed properly, something else otherwise. Same as std::fclose() but display a warning message if the file has not been closed properly. public inline int fseek (FILE * stream,cimg_long offset,int origin) Version of ' fseek() ' that supports >=64bits offsets everywhere (for Windows). public inline cimg_long ftell (FILE * stream) Version of ' ftell() ' that supports >=64bits offsets everywhere (for Windows). public inline bool is_directory (const char *const path) Check if a path is a directory. Parameters path Specified path to test. public inline bool is_file (const char *const path) Check if a path is a file. Parameters path Specified path to test. public inline cimg_int64 fsize (const char *const filename) Get file size. Parameters filename Specified filename to get size from. Returns File size or '-1' if file does not exist. public template<> inline int fdate (const char *const path,T * attr,const unsigned int nb_attr) Get last write time of a given file or directory (multiple-attributes version). Parameters path Specified path to get attributes from. attr Type of requested time attributes. Can be { 0=year | 1=month | 2=day | 3=day of week | 4=hour | 5=minute | 6=second } Replaced by read attributes after return (or -1 if an error occurred). nb_attr Number of attributes to read/write. Returns Latest read attribute. public inline int fdate (const char *const path,unsigned int attr) Get last write time of a given file or directory (single-attribute version). Parameters path Specified path to get attributes from. attr Type of requested time attributes. Can be { 0=year | 1=month | 2=day | 3=day of week | 4=hour | 5=minute | 6=second } Returns Specified attribute or -1 if an error occurred. public template<> inline int date (T * attr,const unsigned int nb_attr) Get current local time (multiple-attributes version). Parameters attr Type of requested time attributes. Can be { 0=year | 1=month | 2=day | 3=day of week | 4=hour | 5=minute | 6=second | 7=millisecond } Replaced by read attributes after return (or -1 if an error occurred). nb_attr Number of attributes to read/write. Returns Latest read attribute. public inline int date (unsigned int attr) Get current local time (single-attribute version). Parameters attr Type of requested time attribute. Can be { 0=year | 1=month | 2=day | 3=day of week | 4=hour | 5=minute | 6=second | 7=millisecond } Returns Specified attribute or -1 if an error occurred. public inline const char * temporary_path (const char *const user_path,const bool reinit_path) Get the file or directory attributes with support for UTF-8 paths (Windows only). Get/set path to store temporary files. Parameters user_path Specified path, or 0 to get the path currently used. reinit_path Force path to be recalculated (may take some time). Returns Path where temporary files can be saved. public inline const char * imagemagick_path (const char *const user_path,const bool reinit_path) Get/set path to the Program Files/ directory (Windows only). Parameters user_path Specified path, or 0 to get the path currently used. reinit_path Force path to be recalculated (may take some time). Returns Path containing the program files. Get/set path to the ImageMagick's convert binary. Parameters user_path Specified path, or 0 to get the path currently used. reinit_path Force path to be recalculated (may take some time). Returns Path containing the convert binary. public inline const char * graphicsmagick_path (const char *const user_path,const bool reinit_path) Get/set path to the GraphicsMagick's gm binary. Parameters user_path Specified path, or 0 to get the path currently used. reinit_path Force path to be recalculated (may take some time). Returns Path containing the gm binary. public inline const char * medcon_path (const char *const user_path,const bool reinit_path) Get/set path to the XMedcon's medcon binary. Parameters user_path Specified path, or 0 to get the path currently used. reinit_path Force path to be recalculated (may take some time). Returns Path containing the medcon binary. public inline const char * ffmpeg_path (const char *const user_path,const bool reinit_path) Get/set path to the FFMPEG's ffmpeg binary. Parameters user_path Specified path, or 0 to get the path currently used. reinit_path Force path to be recalculated (may take some time). Returns Path containing the ffmpeg binary. public inline const char * gzip_path (const char *const user_path,const bool reinit_path) Get/set path to the gzip binary. Parameters user_path Specified path, or 0 to get the path currently used. reinit_path Force path to be recalculated (may take some time). Returns Path containing the gzip binary. public inline const char * gunzip_path (const char *const user_path,const bool reinit_path) Get/set path to the gunzip binary. Parameters user_path Specified path, or 0 to get the path currently used. reinit_path Force path to be recalculated (may take some time). Returns Path containing the gunzip binary. public inline const char * dcraw_path (const char *const user_path,const bool reinit_path) Get/set path to the dcraw binary. Parameters user_path Specified path, or 0 to get the path currently used. reinit_path Force path to be recalculated (may take some time). Returns Path containing the dcraw binary. public inline const char * wget_path (const char *const user_path,const bool reinit_path) Get/set path to the wget binary. Parameters user_path Specified path, or 0 to get the path currently used. reinit_path Force path to be recalculated (may take some time). Returns Path containing the wget binary. public inline const char * curl_path (const char *const user_path,const bool reinit_path) Get/set path to the curl binary. Parameters user_path Specified path, or 0 to get the path currently used. reinit_path Force path to be recalculated (may take some time). Returns Path containing the curl binary. public inline const char * split_filename (const char *const filename,char *const body) Split filename into two C-strings body and extension . filename and body must not overlap! public inline char * number_filename (const char *const filename,const int number,const unsigned int digits,char *const str) Generate a numbered version of a filename. public template<> inline size_t fread (T *const ptr,const size_t nmemb,std::FILE * stream) Read data from file. Parameters ptr Pointer to memory buffer that will contain the binary data read from file. nmemb Number of elements to read. stream File to read data from. Returns Number of read elements. Same as std::fread() but may display warning message if all elements could not be read. public template<> inline size_t fwrite (const T * ptr,const size_t nmemb,std::FILE * stream) Write data to file. Parameters ptr Pointer to memory buffer containing the binary data to write on file. nmemb Number of elements to write. stream File to write data on. Returns Number of written elements. Similar to std::fwrite but may display warning messages if all elements could not be written. public inline void fempty (std::FILE *const file,const char *const filename) Create an empty file. Parameters file Input file (can be 0 if filename is set). filename Filename, as a C-string (can be 0 if file is set). public inline const char * ftype (std::FILE *const file,const char *const filename) Try to guess format from an image file. Parameters file Input file (can be 0 if filename is set). filename Filename, as a C-string (can be 0 if file is set). Returns C-string containing the guessed file format, or 0 if nothing has been guessed. public inline bool & network_mode (const bool value,const bool is_set) public inline bool & network_mode () public inline char * load_network (const char *const url,char *const filename_local,const unsigned int timeout,const bool try_fallback,const char *const referer) Load file from network as a local temporary file. Parameters url URL of the filename, as a C-string. filename_local C-string containing the path to a local copy of filename . timeout Maximum time (in seconds) authorized for downloading the file from the URL. try_fallback When using libcurl, tells using system calls as fallbacks in case of libcurl failure. referer Referer used, as a C-string. Returns Value of filename_local . Use the libcurl library, or the external binaries wget or curl to perform the download. public inline const char * option (const char *const name,const int argc,const char *const *const argv,const char *const _default,const char *const usage,const bool reset_static) Return options specified on the command line. public inline const char * option (const char *const name,const int argc,const char *const *const argv,const char *const _default,const char *const usage) public inline bool option (const char *const name,const int argc,const char *const *const argv,const bool _default,const char *const usage) public inline int option (const char *const name,const int argc,const char *const *const argv,const int _default,const char *const usage) public inline char option (const char *const name,const int argc,const char *const *const argv,const char _default,const char *const usage) public inline float option (const char *const name,const int argc,const char *const *const argv,const float _default,const char *const usage) public inline double option (const char *const name,const int argc,const char *const *const argv,const double _default,const char *const usage) public inline int _sort_files (const void * a,const void * b) public inline CImgList < char > files (const char *const path,const bool is_pattern,const unsigned int mode,const bool include_path) Return list of files/directories in specified directory. Parameters path Path to the directory. Set to 0 for current directory. is_pattern Tell if specified path has a matching pattern in it. mode Output type, can be primary { 0=files only | 1=folders only | 2=files + folders }. include_path Tell if path must be included in resulting filenames. Returns A list of filenames. public template<> inline int dialog (const char *const title,const char *const msg,const char *const button1_label,const char *const button2_label,const char *const button3_label,const char *const button4_label,const char *const button5_label,const char *const button6_label,const CImg < t > & logo,const bool is_centered) Display a simple dialog box, and wait for the user's response. Parameters title Title of the dialog window. msg Main message displayed inside the dialog window. button1_label Label of the 1 st button. button2_label Label of the 2 nd button ( 0 to hide button). button3_label Label of the 3 rd button ( 0 to hide button). button4_label Label of the 4 th button ( 0 to hide button). button5_label Label of the 5 th button ( 0 to hide button). button6_label Label of the 6 th button ( 0 to hide button). logo Image logo displayed at the left of the main message. is_centered Tells if the dialog window must be centered on the screen. Returns Index of clicked button (from 0 to 5 ), or -1 if the dialog window has been closed by the user. Up to 6 buttons can be defined in the dialog window. The function returns when a user clicked one of the button or closed the dialog window. If a button text is set to 0, the corresponding button (and the following) will not appear in the dialog box. At least one button must be specified. public template<> inline CImg](#structcimg__library__suffixed_1_1CImg)< typename [cimg::superset](#structcimg__library__suffixed_1_1cimg_1_1superset)< double, t >::[type > eval (const char *const expression,const CImg < t > & xyzc) struct cimg_library_suffixed::cimg::last \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::Mutex_static \u00b6 Summary Members Descriptions public inline Mutex_static () public inline void lock (const unsigned int) public inline void unlock (const unsigned int) public inline int trylock (const unsigned int) Members public inline Mutex_static () public inline void lock (const unsigned int) public inline void unlock (const unsigned int) public inline int trylock (const unsigned int) struct cimg_library_suffixed::cimg::superset \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset2 \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset3 \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< bool, char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< bool, cimg_int64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< bool, cimg_uint64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< bool, double > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< bool, float > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< bool, int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< bool, short > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< bool, signed char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< bool, unsigned char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< bool, unsigned int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< bool, unsigned short > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< char, cimg_int64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< char, cimg_uint64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< char, double > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< char, float > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< char, int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< char, short > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< char, signed char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< char, unsigned char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< char, unsigned int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< char, unsigned short > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< cimg_int64, double > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< cimg_int64, float > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< cimg_uint64, char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< cimg_uint64, cimg_int64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< cimg_uint64, double > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< cimg_uint64, float > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< cimg_uint64, int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< cimg_uint64, short > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< cimg_uint64, signed char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< float, double > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< int, cimg_int64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< int, cimg_uint64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< int, double > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< int, float > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< int, unsigned int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< short, cimg_int64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< short, cimg_uint64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< short, double > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< short, float > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< short, int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< short, unsigned int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< short, unsigned short > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< signed char, char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< signed char, cimg_int64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< signed char, cimg_uint64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< signed char, double > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< signed char, float > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< signed char, int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< signed char, short > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< signed char, unsigned char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< signed char, unsigned int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< signed char, unsigned short > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned char, char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned char, cimg_int64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned char, cimg_uint64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned char, double > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned char, float > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned char, int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned char, short > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned char, signed char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned char, unsigned int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned char, unsigned short > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned int, char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned int, cimg_int64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned int, cimg_uint64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned int, double > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned int, float > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned int, int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned int, short > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned int, signed char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned short, char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned short, cimg_int64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned short, cimg_uint64 > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned short, double > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned short, float > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned short, int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned short, short > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned short, signed char > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::superset< unsigned short, unsigned int > \u00b6 Summary Members Descriptions typedef type Members typedef type struct cimg_library_suffixed::cimg::type \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::cimg::type< bool > \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::cimg::type< char > \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::cimg::type< cimg_int64 > \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::cimg::type< cimg_uint64 > \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::cimg::type< double > \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::cimg::type< float > \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::cimg::type< int > \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::cimg::type< long double > \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::cimg::type< short > \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::cimg::type< signed char > \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::cimg::type< unsigned char > \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::cimg::type< unsigned int > \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::cimg::type< unsigned short > \u00b6 Summary Members Descriptions Members struct cimg_library_suffixed::CImg::_cimg_math_parser \u00b6 Summary Members Descriptions public CImg < doubleT > mem public CImg < intT > memtype public CImg < intT > memmerge public CImgList < ulongT > _code public CImgList < ulongT > & code public CImgList < ulongT > code_begin public CImgList < ulongT > code_end public CImgList < ulongT > _code_begin_t public CImgList < ulongT > & code_begin_t public CImgList < ulongT > _code_end_t public CImgList < ulongT > & code_end_t public CImg < ulongT > opcode public const CImg < ulongT > * p_code_end public const CImg < ulongT > * p_code public const CImg < ulongT > *const p_break public CImg < charT > expr public CImg < charT > pexpr public const CImg < T > & imgin public const CImgList < T > & listin public CImg < T > & imgout public CImgList < T > & listout public CImg < doubleT > _img_stats public CImg < doubleT > & img_stats public CImg < doubleT > constcache_vals public CImgList < doubleT > _list_stats public CImgList < doubleT > & list_stats public CImgList < doubleT > _list_median public CImgList < doubleT > & list_median public CImg < uintT > mem_img_stats public CImg < uintT > constcache_inds public CImg < uintT > level public CImg < uintT > variable_pos public CImg < uintT > reserved_label public CImgList < charT > variable_def public CImgList < charT > macro_def public CImgList < charT > macro_body public CImgList < boolT > macro_body_is_string public char * user_macro public unsigned int mempos public unsigned int mem_img_median public unsigned int mem_img_index public unsigned int debug_indent public unsigned int result_dim public unsigned int break_type public unsigned int constcache_size public bool is_parallelizable public bool is_end_code public bool is_fill public bool need_input_copy public double * result public cimg_uint64 rng public const char *const calling_function public const char *const * s_op public const char *const * ss_op public inline ~_cimg_math_parser () public inline _cimg_math_parser (const char *const expression,const char *const funcname,const CImg < T > & img_input, CImg < T > *const img_output,const CImgList < T > *const list_inputs, CImgList < T > *const list_outputs,const bool _is_fill) public inline _cimg_math_parser () public inline _cimg_math_parser (const _cimg_math_parser & mp) public inline unsigned int compile (char * ss,char * se,const unsigned int depth,unsigned int *const p_ref,const bool is_single) public inline double operator() (const double x,const double y,const double z,const double c) public template<> inline void operator() (const double x,const double y,const double z,const double c,t *const output) public inline void begin_t () public inline void end_t () public inline void end () public inline void merge ( _cimg_math_parser & mp) public inline CImg < charT > s_calling_function () const public inline CImg < charT > s_type (const unsigned int arg) const public inline CImg < uintT > get_level ( CImg < charT > & _expr) const public inline unsigned int get_mem_img_index () public inline void get_variable_pos (const char * variable_name,unsigned int & pos,unsigned int & rpos) public inline CImg < boolT > is_inside_string ( CImg < charT > & _expr) const public inline bool is_varchar (const char c) const public inline bool is_comp_vector (const unsigned int arg) const public inline void check_constant (const unsigned int arg,const unsigned int n_arg,const unsigned int mode,char *const ss,char *const se,const char saved_char) public inline void check_constant_index (const unsigned int arg,char *const ss,char *const se,const char saved_char) public inline void check_matrix_square (const unsigned int arg,const unsigned int n_arg,char *const ss,char *const se,const char saved_char) public inline void check_type (const unsigned int arg,const unsigned int n_arg,const unsigned int mode,const unsigned int N,char *const ss,char *const se,const char saved_char) public inline void check_list (const bool is_out,char *const ss,char *const se,const char saved_char) public inline unsigned int constant (const double val) public inline unsigned int scalar () public inline unsigned int vector (const unsigned int siz) public inline unsigned int vector (const unsigned int siz,const double value) public inline unsigned int vector_copy (const unsigned int arg) public inline void set_variable_vector (const unsigned int arg) public inline unsigned int scalar0 (const mp_func op) public inline unsigned int scalar1 (const mp_func op,const unsigned int arg1) public inline unsigned int scalar2 (const mp_func op,const unsigned int arg1,const unsigned int arg2) public inline unsigned int scalar3 (const mp_func op,const unsigned int arg1,const unsigned int arg2,const unsigned int arg3) public inline unsigned int scalar4 (const mp_func op,const unsigned int arg1,const unsigned int arg2,const unsigned int arg3,const unsigned int arg4) public inline unsigned int scalar5 (const mp_func op,const unsigned int arg1,const unsigned int arg2,const unsigned int arg3,const unsigned int arg4,const unsigned int arg5) public inline unsigned int scalar6 (const mp_func op,const unsigned int arg1,const unsigned int arg2,const unsigned int arg3,const unsigned int arg4,const unsigned int arg5,const unsigned int arg6) public inline unsigned int scalar7 (const mp_func op,const unsigned int arg1,const unsigned int arg2,const unsigned int arg3,const unsigned int arg4,const unsigned int arg5,const unsigned int arg6,const unsigned int arg7) public inline void self_vector_s (const unsigned int pos,const mp_func op,const unsigned int arg1) public inline void self_vector_v (const unsigned int pos,const mp_func op,const unsigned int arg1) public inline unsigned int vector1_v (const mp_func op,const unsigned int arg1) public inline unsigned int vector2_vv (const mp_func op,const unsigned int arg1,const unsigned int arg2) public inline unsigned int vector2_vs (const mp_func op,const unsigned int arg1,const unsigned int arg2) public inline unsigned int vector2_sv (const mp_func op,const unsigned int arg1,const unsigned int arg2) public inline unsigned int vector3_vss (const mp_func op,const unsigned int arg1,const unsigned int arg2,const unsigned int arg3) typedef mp_func Members public CImg < doubleT > mem public CImg < intT > memtype public CImg < intT > memmerge public CImgList < ulongT > _code public CImgList < ulongT > & code public CImgList < ulongT > code_begin public CImgList < ulongT > code_end public CImgList < ulongT > _code_begin_t public CImgList < ulongT > & code_begin_t public CImgList < ulongT > _code_end_t public CImgList < ulongT > & code_end_t public CImg < ulongT > opcode public const CImg < ulongT > * p_code_end public const CImg < ulongT > * p_code public const CImg < ulongT > *const p_break public CImg < charT > expr public CImg < charT > pexpr public const CImg < T > & imgin public const CImgList < T > & listin public CImg < T > & imgout public CImgList < T > & listout public CImg < doubleT > _img_stats public CImg < doubleT > & img_stats public CImg < doubleT > constcache_vals public CImgList < doubleT > _list_stats public CImgList < doubleT > & list_stats public CImgList < doubleT > _list_median public CImgList < doubleT > & list_median public CImg < uintT > mem_img_stats public CImg < uintT > constcache_inds public CImg < uintT > level public CImg < uintT > variable_pos public CImg < uintT > reserved_label public CImgList < charT > variable_def public CImgList < charT > macro_def public CImgList < charT > macro_body public CImgList < boolT > macro_body_is_string public char * user_macro public unsigned int mempos public unsigned int mem_img_median public unsigned int mem_img_index public unsigned int debug_indent public unsigned int result_dim public unsigned int break_type public unsigned int constcache_size public bool is_parallelizable public bool is_end_code public bool is_fill public bool need_input_copy public double * result public cimg_uint64 rng public const char *const calling_function public const char *const * s_op public const char *const * ss_op public inline ~_cimg_math_parser () public inline _cimg_math_parser (const char *const expression,const char *const funcname,const CImg < T > & img_input, CImg < T > *const img_output,const CImgList < T > *const list_inputs, CImgList < T > *const list_outputs,const bool _is_fill) public inline _cimg_math_parser () public inline _cimg_math_parser (const _cimg_math_parser & mp) public inline unsigned int compile (char * ss,char * se,const unsigned int depth,unsigned int *const p_ref,const bool is_single) public inline double operator() (const double x,const double y,const double z,const double c) public template<> inline void operator() (const double x,const double y,const double z,const double c,t *const output) public inline void begin_t () public inline void end_t () public inline void end () public inline void merge ( _cimg_math_parser & mp) public inline CImg < charT > s_calling_function () const public inline CImg < charT > s_type (const unsigned int arg) const public inline CImg < uintT > get_level ( CImg < charT > & _expr) const public inline unsigned int get_mem_img_index () public inline void get_variable_pos (const char * variable_name,unsigned int & pos,unsigned int & rpos) public inline CImg < boolT > is_inside_string ( CImg < charT > & _expr) const public inline bool is_varchar (const char c) const public inline bool is_comp_vector (const unsigned int arg) const public inline void check_constant (const unsigned int arg,const unsigned int n_arg,const unsigned int mode,char *const ss,char *const se,const char saved_char) public inline void check_constant_index (const unsigned int arg,char *const ss,char *const se,const char saved_char) public inline void check_matrix_square (const unsigned int arg,const unsigned int n_arg,char *const ss,char *const se,const char saved_char) public inline void check_type (const unsigned int arg,const unsigned int n_arg,const unsigned int mode,const unsigned int N,char *const ss,char *const se,const char saved_char) public inline void check_list (const bool is_out,char *const ss,char *const se,const char saved_char) public inline unsigned int constant (const double val) public inline unsigned int scalar () public inline unsigned int vector (const unsigned int siz) public inline unsigned int vector (const unsigned int siz,const double value) public inline unsigned int vector_copy (const unsigned int arg) public inline void set_variable_vector (const unsigned int arg) public inline unsigned int scalar0 (const mp_func op) public inline unsigned int scalar1 (const mp_func op,const unsigned int arg1) public inline unsigned int scalar2 (const mp_func op,const unsigned int arg1,const unsigned int arg2) public inline unsigned int scalar3 (const mp_func op,const unsigned int arg1,const unsigned int arg2,const unsigned int arg3) public inline unsigned int scalar4 (const mp_func op,const unsigned int arg1,const unsigned int arg2,const unsigned int arg3,const unsigned int arg4) public inline unsigned int scalar5 (const mp_func op,const unsigned int arg1,const unsigned int arg2,const unsigned int arg3,const unsigned int arg4,const unsigned int arg5) public inline unsigned int scalar6 (const mp_func op,const unsigned int arg1,const unsigned int arg2,const unsigned int arg3,const unsigned int arg4,const unsigned int arg5,const unsigned int arg6) public inline unsigned int scalar7 (const mp_func op,const unsigned int arg1,const unsigned int arg2,const unsigned int arg3,const unsigned int arg4,const unsigned int arg5,const unsigned int arg6,const unsigned int arg7) public inline void self_vector_s (const unsigned int pos,const mp_func op,const unsigned int arg1) public inline void self_vector_v (const unsigned int pos,const mp_func op,const unsigned int arg1) public inline unsigned int vector1_v (const mp_func op,const unsigned int arg1) public inline unsigned int vector2_vv (const mp_func op,const unsigned int arg1,const unsigned int arg2) public inline unsigned int vector2_vs (const mp_func op,const unsigned int arg1,const unsigned int arg2) public inline unsigned int vector2_sv (const mp_func op,const unsigned int arg1,const unsigned int arg2) public inline unsigned int vector3_vss (const mp_func op,const unsigned int arg1,const unsigned int arg2,const unsigned int arg3) typedef mp_func struct cimg_library_suffixed::CImg::_functor2d_expr \u00b6 Summary Members Descriptions public _cimg_math_parser * mp public inline ~_functor2d_expr () public inline _functor2d_expr (const char *const expr) public inline float operator() (const float x,const float y) const Members public _cimg_math_parser * mp public inline ~_functor2d_expr () public inline _functor2d_expr (const char *const expr) public inline float operator() (const float x,const float y) const struct cimg_library_suffixed::CImg::_functor2d_float \u00b6 Summary Members Descriptions public const CImg < T > & ref public inline _functor2d_float (const CImg < T > & pref) public inline float operator() (const float x,const float y) const Members public const CImg < T > & ref public inline _functor2d_float (const CImg < T > & pref) public inline float operator() (const float x,const float y) const struct cimg_library_suffixed::CImg::_functor2d_int \u00b6 Summary Members Descriptions public const CImg < T > & ref public inline _functor2d_int (const CImg < T > & pref) public inline float operator() (const float x,const float y) const Members public const CImg < T > & ref public inline _functor2d_int (const CImg < T > & pref) public inline float operator() (const float x,const float y) const struct cimg_library_suffixed::CImg::_functor3d_expr \u00b6 Summary Members Descriptions public _cimg_math_parser * mp public inline ~_functor3d_expr () public inline _functor3d_expr (const char *const expr) public inline float operator() (const float x,const float y,const float z) const Members public _cimg_math_parser * mp public inline ~_functor3d_expr () public inline _functor3d_expr (const char *const expr) public inline float operator() (const float x,const float y,const float z) const struct cimg_library_suffixed::CImg::_functor3d_float \u00b6 Summary Members Descriptions public const CImg < T > & ref public inline _functor3d_float (const CImg < T > & pref) public inline float operator() (const float x,const float y,const float z) const Members public const CImg < T > & ref public inline _functor3d_float (const CImg < T > & pref) public inline float operator() (const float x,const float y,const float z) const struct cimg_library_suffixed::CImg::_functor3d_int \u00b6 Summary Members Descriptions public const CImg < T > & ref public inline _functor3d_int (const CImg < T > & pref) public inline float operator() (const float x,const float y,const float z) const Members public const CImg < T > & ref public inline _functor3d_int (const CImg < T > & pref) public inline float operator() (const float x,const float y,const float z) const struct cimg_library_suffixed::CImg::_functor4d_int \u00b6 Summary Members Descriptions public const CImg < T > & ref public inline _functor4d_int (const CImg < T > & pref) public inline float operator() (const float x,const float y,const float z,const unsigned int c) const Members public const CImg < T > & ref public inline _functor4d_int (const CImg < T > & pref) public inline float operator() (const float x,const float y,const float z,const unsigned int c) const struct cimg_library_suffixed::CImg::_functor4d_streamline2d_directed \u00b6 Summary Members Descriptions public const CImg < T > & ref public inline _functor4d_streamline2d_directed (const CImg < T > & pref) public inline float operator() (const float x,const float y,const float z,const unsigned int c) const Members public const CImg < T > & ref public inline _functor4d_streamline2d_directed (const CImg < T > & pref) public inline float operator() (const float x,const float y,const float z,const unsigned int c) const struct cimg_library_suffixed::CImg::_functor4d_streamline2d_oriented \u00b6 Summary Members Descriptions public const CImg < T > & ref public CImg < floatT > * pI public inline _functor4d_streamline2d_oriented (const CImg < T > & pref) public inline ~_functor4d_streamline2d_oriented () public inline float operator() (const float x,const float y,const float z,const unsigned int c) const Members public const CImg < T > & ref public CImg < floatT > * pI public inline _functor4d_streamline2d_oriented (const CImg < T > & pref) public inline ~_functor4d_streamline2d_oriented () public inline float operator() (const float x,const float y,const float z,const unsigned int c) const struct cimg_library_suffixed::CImg::_functor4d_streamline3d_directed \u00b6 Summary Members Descriptions public const CImg < T > & ref public inline _functor4d_streamline3d_directed (const CImg < T > & pref) public inline float operator() (const float x,const float y,const float z,const unsigned int c) const Members public const CImg < T > & ref public inline _functor4d_streamline3d_directed (const CImg < T > & pref) public inline float operator() (const float x,const float y,const float z,const unsigned int c) const struct cimg_library_suffixed::CImg::_functor4d_streamline3d_oriented \u00b6 Summary Members Descriptions public const CImg < T > & ref public CImg < floatT > * pI public inline _functor4d_streamline3d_oriented (const CImg < T > & pref) public inline ~_functor4d_streamline3d_oriented () public inline float operator() (const float x,const float y,const float z,const unsigned int c) const Members public const CImg < T > & ref public CImg < floatT > * pI public inline _functor4d_streamline3d_oriented (const CImg < T > & pref) public inline ~_functor4d_streamline3d_oriented () public inline float operator() (const float x,const float y,const float z,const unsigned int c) const struct cimg_library_suffixed::CImg::_functor4d_streamline_expr \u00b6 Summary Members Descriptions public _cimg_math_parser * mp public inline ~_functor4d_streamline_expr () public inline _functor4d_streamline_expr (const char *const expr) public inline float operator() (const float x,const float y,const float z,const unsigned int c) const Members public _cimg_math_parser * mp public inline ~_functor4d_streamline_expr () public inline _functor4d_streamline_expr (const char *const expr) public inline float operator() (const float x,const float y,const float z,const unsigned int c) const struct cimg_library_suffixed::CImg::_functor_isoline3d \u00b6 Summary Members Descriptions public CImgList < T > & list public inline _functor_isoline3d ( CImgList < T > & _list) public template<> inline void operator() (const t x,const t y,const t z) public template<> inline void operator() (const t i,const t j) Members public CImgList < T > & list public inline _functor_isoline3d ( CImgList < T > & _list) public template<> inline void operator() (const t x,const t y,const t z) public template<> inline void operator() (const t i,const t j) struct cimg_library_suffixed::CImg::_functor_isosurface3d \u00b6 Summary Members Descriptions public CImgList < T > & list public inline _functor_isosurface3d ( CImgList < T > & _list) public template<> inline void operator() (const t x,const t y,const t z) Members public CImgList < T > & list public inline _functor_isosurface3d ( CImgList < T > & _list) public template<> inline void operator() (const t x,const t y,const t z) Generated by Moxygen","title":"Summary"},{"location":"test/#summary","text":"Members Descriptions namespace cimg_library_suffixed Contains all classes and functions of the \\CImg library. namespace cimg_library_suffixed::cimg Contains low-level functions and variables of the \\CImg Library. struct cimg_library_suffixed::CImg::_cimg_math_parser struct cimg_library_suffixed::CImg::_functor2d_expr struct cimg_library_suffixed::CImg::_functor2d_float struct cimg_library_suffixed::CImg::_functor2d_int struct cimg_library_suffixed::CImg::_functor3d_expr struct cimg_library_suffixed::CImg::_functor3d_float struct cimg_library_suffixed::CImg::_functor3d_int struct cimg_library_suffixed::CImg::_functor4d_int struct cimg_library_suffixed::CImg::_functor4d_streamline2d_directed struct cimg_library_suffixed::CImg::_functor4d_streamline2d_oriented struct cimg_library_suffixed::CImg::_functor4d_streamline3d_directed struct cimg_library_suffixed::CImg::_functor4d_streamline3d_oriented struct cimg_library_suffixed::CImg::_functor4d_streamline_expr struct cimg_library_suffixed::CImg::_functor_isoline3d struct cimg_library_suffixed::CImg::_functor_isosurface3d","title":"Summary"},{"location":"test/#namespacecimg__library__suffixed","text":"Contains all classes and functions of the \\CImg library. This namespace is defined to avoid functions and class names collisions that could happen with the inclusion of other C++ header files. Anyway, it should not happen often and you should reasonably start most of your \\CImg-based programs with #include \"CImg.h\" using namespace cimg_library ; to simplify the declaration of \\CImg Library objects afterwards.","title":"namespace cimg_library_suffixed"},{"location":"test/#structcimg__library__suffixed_1_1CImg","text":"Class representing an image (up to 4 dimensions wide), each pixel being of type T . This is the main class of the CImg Library. It declares and constructs an image, allows access to its pixel values, and is able to perform various image operations. Image representation A CImg image is defined as an instance of the container CImg<T> , which contains a regular grid of pixels, each pixel value being of type T . The image grid can have up to 4 dimensions: width, height, depth and number of channels. Usually, the three first dimensions are used to describe spatial coordinates (x,y,z) , while the number of channels is rather used as a vector-valued dimension (it may describe the R,G,B color channels for instance). If you need a fifth dimension, you can use image lists CImgList<T> rather than simple images CImg<T> . Thus, the CImg<T> class is able to represent volumetric images of vector-valued pixels, as well as images with less dimensions (1D scalar signal, 2D color images, ...). Most member functions of the class CImg < T> are designed to handle this maximum case of (3+1) dimensions. Concerning the pixel value type T: fully supported template types are the basic C++ types: unsigned char, char, short, unsigned int, int, unsigned long, long, float, double, ... . Typically, fast image display can be done using CImg<unsigned char> images, while complex image processing algorithms may be rather coded using CImg<float> or CImg<double> images that have floating-point pixel values. The default value for the template T is float . Using your own template types may be possible. However, you will certainly have to define the complete set of arithmetic and logical operators for your class. Image structure The CImg<T> structure contains six fields: _width defines the number of columns of the image (size along the X-axis). _height defines the number of rows of the image (size along the Y-axis). _depth defines the number of slices of the image (size along the Z-axis). _spectrum defines the number of channels of the image (size along the C-axis). _data defines a pointer to the pixel**data (of type T ). _is_shared is a boolean that tells if the memory buffer data is shared with another image. You can access these fields publicly although it is recommended to use the dedicated functions width() , height() , depth() , spectrum() and ptr() to do so. Image dimensions are not limited to a specific range (as long as you got enough available memory). A value of 1 usually means that the corresponding dimension is flat . If one of the dimensions is 0 , or if the data pointer is null, the image is considered as empty . Empty images should not contain any pixel data and thus, will not be processed by CImg member functions (a CImgInstanceException will be thrown instead). Pixel data are stored in memory, in a non interlaced mode (See cimg_storage). Image declaration and construction Declaring an image can be done by using one of the several available constructors. Here is a list of the most used: Construct images from arbitrary dimensions: CImg<char> img; declares an empty image. CImg<unsigned char> img(128,128); declares a 128x128 greyscale image with unsigned``char pixel values. CImg<double> img(3,3); declares a 3x3 matrix with double coefficients. CImg<unsigned char> img(256,256,1,3); declares a 256x256x1x3 (color) image (colors are stored as an image with three channels). CImg<double> img(128,128,128); declares a 128x128x128 volumetric and greyscale image (with double pixel values). CImg<> img(128,128,128,3); declares a 128x128x128 volumetric color image (with float pixels, which is the default value of the template parameter T ). Note: images pixels are not automatically initialized to 0 . You may use the function [fill()](#structcimg__library__suffixed_1_1CImg_1ab7ab19191c8b913121d5c99a0e5806db) to do it, or use the specific constructor taking 5 parameters like this: CImg<> img(128,128,128,3,0); declares a 128x128x128 volumetric color image with all pixel values to 0. Construct images from filenames: CImg<unsigned char> img(\"image.jpg\"); reads a JPEG color image from the file \"image.jpg\". CImg<float> img(\"analyze.hdr\"); reads a volumetric image (ANALYZE7.5 format) from the file \"analyze.hdr\". Note: You need to install ImageMagick to be able to read common compressed image formats (JPG,PNG, ...) (See cimg_files_io). Construct images from C-style arrays: CImg<int> img(data_buffer,256,256); constructs a 256x256 greyscale image from a int* buffer data_buffer (of size 256x256=65536). CImg<unsigned char> img(data_buffer,256,256,1,3); constructs a 256x256 color image from a unsigned``char* buffer data_buffer (where R,G,B channels follow each others). The complete list of constructors can be found here . Most useful functions The CImg<T> class contains a lot of functions that operates on images. Some of the most useful are: operator()() : Read or write pixel values. display() : displays the image in a new window.","title":"struct cimg_library_suffixed::CImg"},{"location":"test/#structcimg__library__suffixed_1_1CImgAbortException","text":"struct cimg_library_suffixed::CImgAbortException : public exception","title":"struct cimg_library_suffixed::CImgAbortException"},{"location":"test/#structcimg__library__suffixed_1_1CImgArgumentException","text":"struct cimg_library_suffixed::CImgArgumentException : public cimg_library_suffixed::CImgException","title":"struct cimg_library_suffixed::CImgArgumentException"},{"location":"test/#structcimg__library__suffixed_1_1CImgDisplayException","text":"struct cimg_library_suffixed::CImgDisplayException : public cimg_library_suffixed::CImgException","title":"struct cimg_library_suffixed::CImgDisplayException"},{"location":"test/#structcimg__library__suffixed_1_1CImgException","text":"struct cimg_library_suffixed::CImgException : public exception Instances of [CImgException](#structcimg__library__suffixed_1_1CImgException) are thrown when errors are encountered in a \\CImg function call. Overview CImgException is the base class of all exceptions thrown by \\CImg (except CImgAbortException ). CImgException is never thrown itself. Derived classes that specify the type of errord are thrown instead. These classes can be: CImgAbortException : Thrown when a computationally-intensive function is aborted by an external signal. This is the only non-derived exception class. CImgArgumentException : Thrown when one argument of a called \\CImg function is invalid. This is probably one of the most thrown exception by \\CImg. For instance, the following example throws a [CImgArgumentException](#structcimg__library__suffixed_1_1CImgArgumentException): CImg < float > img ( 100 , 100 , 1 , 3 ); // Define a 100x100 color image with float-valued pixels img . mirror ( 'e' ); // Try to mirror image along the (non-existing) 'e'-axis CImgDisplayException : Thrown when something went wrong during the display of images in CImgDisplay instances. CImgInstanceException : Thrown when an instance associated to a called \\CImg method does not fit the function requirements. For instance, the following example throws a [CImgInstanceException](#structcimg__library__suffixed_1_1CImgInstanceException): const CImg < float > img ; // Define an empty image const float value = img . at ( 0 ); // Try to read first pixel value (does not exist) CImgIOException : Thrown when an error occurred when trying to load or save image files. This happens when trying to read files that do not exist or with invalid formats. For instance, the following example throws a [CImgIOException](#structcimg__library__suffixed_1_1CImgIOException): const CImg < float > img ( \"missing_file.jpg\" ); // Try to load a file that does not exist CImgWarningException : Thrown only if configuration macro cimg_strict_warnings is set, and when a \\CImg function has to display a warning message (see cimg::warn() ). It is not recommended to throw CImgException instances by yourself, since they are expected to be thrown only by \\CImg. When an error occurs in a library function call, \\CImg may display error messages on the screen or on the standard output, depending on the current \\CImg exception mode. The \\CImg exception mode can be get and set by functions cimg::exception_mode() and cimg::exception_mode(unsigned int) . Exceptions handling In all cases, when an error occurs in \\CImg, an instance of the corresponding exception class is thrown. This may lead the program to break (this is the default behavior), but you can bypass this behavior by handling the exceptions by yourself, using a usual try { ... } catch () { ... } bloc, as in the following example: #define \"CImg.h\" using namespace cimg_library ; int main () { cimg :: exception_mode ( 0 ); // Enable quiet exception mode try { ... // Here, do what you want to stress CImg } catch ( CImgException & e ) { // You succeeded: something went wrong! std :: fprintf ( stderr , \"CImg Library Error: %s\" , e . what ()); // Display your custom error message ... // Do what you want now to save the ship! } }","title":"struct cimg_library_suffixed::CImgException"},{"location":"test/#structcimg__library__suffixed_1_1CImgInstanceException","text":"struct cimg_library_suffixed::CImgInstanceException : public cimg_library_suffixed::CImgException","title":"struct cimg_library_suffixed::CImgInstanceException"},{"location":"test/#structcimg__library__suffixed_1_1CImgIOException","text":"struct cimg_library_suffixed::CImgIOException : public cimg_library_suffixed::CImgException","title":"struct cimg_library_suffixed::CImgIOException"},{"location":"test/#structcimg__library__suffixed_1_1CImgList","text":"Represent a list of images CImg .","title":"struct cimg_library_suffixed::CImgList"},{"location":"test/#structcimg__library__suffixed_1_1CImgWarningException","text":"struct cimg_library_suffixed::CImgWarningException : public cimg_library_suffixed::CImgException","title":"struct cimg_library_suffixed::CImgWarningException"},{"location":"test/#namespacecimg__library__suffixed_1_1cimg","text":"Contains low-level functions and variables of the \\CImg Library. Most of the functions and variables within this namespace are used by the \\CImg library for low-level operations. You may use them to access specific const values or environment variables internally used by \\CImg. Never write using namespace cimg_library::cimg; in your source code. Lot of functions in the cimg:: namespace have the same names as standard C functions that may be defined in the global namespace :: .","title":"namespace cimg_library_suffixed::cimg"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1last","text":"","title":"struct cimg_library_suffixed::cimg::last"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1Mutex__static","text":"","title":"struct cimg_library_suffixed::cimg::Mutex_static"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset","text":"","title":"struct cimg_library_suffixed::cimg::superset"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset2","text":"","title":"struct cimg_library_suffixed::cimg::superset2"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset3","text":"","title":"struct cimg_library_suffixed::cimg::superset3"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01bool_00_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; bool, char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01bool_00_01cimg__int64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; bool, cimg_int64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01bool_00_01cimg__uint64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; bool, cimg_uint64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01bool_00_01double_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; bool, double &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01bool_00_01float_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; bool, float &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01bool_00_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; bool, int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01bool_00_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; bool, short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01bool_00_01signed_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; bool, signed char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01bool_00_01unsigned_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; bool, unsigned char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01bool_00_01unsigned_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; bool, unsigned int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01bool_00_01unsigned_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; bool, unsigned short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01char_00_01cimg__int64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; char, cimg_int64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01char_00_01cimg__uint64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; char, cimg_uint64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01char_00_01double_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; char, double &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01char_00_01float_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; char, float &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01char_00_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; char, int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01char_00_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; char, short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01char_00_01signed_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; char, signed char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01char_00_01unsigned_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; char, unsigned char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01char_00_01unsigned_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; char, unsigned int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01char_00_01unsigned_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; char, unsigned short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01cimg__int64_00_01double_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; cimg_int64, double &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01cimg__int64_00_01float_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; cimg_int64, float &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01cimg__uint64_00_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; cimg_uint64, char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01cimg__uint64_00_01cimg__int64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; cimg_uint64, cimg_int64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01cimg__uint64_00_01double_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; cimg_uint64, double &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01cimg__uint64_00_01float_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; cimg_uint64, float &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01cimg__uint64_00_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; cimg_uint64, int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01cimg__uint64_00_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; cimg_uint64, short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01cimg__uint64_00_01signed_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; cimg_uint64, signed char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01float_00_01double_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; float, double &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01int_00_01cimg__int64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; int, cimg_int64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01int_00_01cimg__uint64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; int, cimg_uint64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01int_00_01double_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; int, double &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01int_00_01float_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; int, float &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01int_00_01unsigned_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; int, unsigned int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01short_00_01cimg__int64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; short, cimg_int64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01short_00_01cimg__uint64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; short, cimg_uint64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01short_00_01double_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; short, double &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01short_00_01float_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; short, float &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01short_00_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; short, int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01short_00_01unsigned_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; short, unsigned int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01short_00_01unsigned_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; short, unsigned short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01signed_01char_00_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; signed char, char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01signed_01char_00_01cimg__int64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; signed char, cimg_int64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01signed_01char_00_01cimg__uint64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; signed char, cimg_uint64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01signed_01char_00_01double_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; signed char, double &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01signed_01char_00_01float_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; signed char, float &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01signed_01char_00_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; signed char, int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01signed_01char_00_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; signed char, short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01signed_01char_00_01unsigned_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; signed char, unsigned char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01signed_01char_00_01unsigned_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; signed char, unsigned int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01signed_01char_00_01unsigned_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; signed char, unsigned short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01char_00_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned char, char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01char_00_01cimg__int64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned char, cimg_int64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01char_00_01cimg__uint64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned char, cimg_uint64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01char_00_01double_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned char, double &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01char_00_01float_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned char, float &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01char_00_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned char, int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01char_00_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned char, short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01char_00_01signed_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned char, signed char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01char_00_01unsigned_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned char, unsigned int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01char_00_01unsigned_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned char, unsigned short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01int_00_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned int, char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01int_00_01cimg__int64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned int, cimg_int64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01int_00_01cimg__uint64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned int, cimg_uint64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01int_00_01double_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned int, double &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01int_00_01float_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned int, float &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01int_00_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned int, int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01int_00_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned int, short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01int_00_01signed_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned int, signed char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01short_00_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned short, char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01short_00_01cimg__int64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned short, cimg_int64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01short_00_01cimg__uint64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned short, cimg_uint64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01short_00_01double_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned short, double &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01short_00_01float_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned short, float &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01short_00_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned short, int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01short_00_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned short, short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01short_00_01signed_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned short, signed char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1superset_3_01unsigned_01short_00_01unsigned_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::superset&lt; unsigned short, unsigned int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type","text":"","title":"struct cimg_library_suffixed::cimg::type"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type_3_01bool_01_4","text":"","title":"struct cimg_library_suffixed::cimg::type&lt; bool &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type_3_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::type&lt; char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type_3_01cimg__int64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::type&lt; cimg_int64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type_3_01cimg__uint64_01_4","text":"","title":"struct cimg_library_suffixed::cimg::type&lt; cimg_uint64 &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type_3_01double_01_4","text":"","title":"struct cimg_library_suffixed::cimg::type&lt; double &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type_3_01float_01_4","text":"","title":"struct cimg_library_suffixed::cimg::type&lt; float &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type_3_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::type&lt; int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type_3_01long_01double_01_4","text":"","title":"struct cimg_library_suffixed::cimg::type&lt; long double &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type_3_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::type&lt; short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type_3_01signed_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::type&lt; signed char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type_3_01unsigned_01char_01_4","text":"","title":"struct cimg_library_suffixed::cimg::type&lt; unsigned char &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type_3_01unsigned_01int_01_4","text":"","title":"struct cimg_library_suffixed::cimg::type&lt; unsigned int &gt;"},{"location":"test/#structcimg__library__suffixed_1_1cimg_1_1type_3_01unsigned_01short_01_4","text":"","title":"struct cimg_library_suffixed::cimg::type&lt; unsigned short &gt;"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__cimg__math__parser","text":"","title":"struct cimg_library_suffixed::CImg::_cimg_math_parser"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor2d__expr","text":"","title":"struct cimg_library_suffixed::CImg::_functor2d_expr"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor2d__float","text":"","title":"struct cimg_library_suffixed::CImg::_functor2d_float"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor2d__int","text":"","title":"struct cimg_library_suffixed::CImg::_functor2d_int"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor3d__expr","text":"","title":"struct cimg_library_suffixed::CImg::_functor3d_expr"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor3d__float","text":"","title":"struct cimg_library_suffixed::CImg::_functor3d_float"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor3d__int","text":"","title":"struct cimg_library_suffixed::CImg::_functor3d_int"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor4d__int","text":"","title":"struct cimg_library_suffixed::CImg::_functor4d_int"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor4d__streamline2d__directed","text":"","title":"struct cimg_library_suffixed::CImg::_functor4d_streamline2d_directed"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor4d__streamline2d__oriented","text":"","title":"struct cimg_library_suffixed::CImg::_functor4d_streamline2d_oriented"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor4d__streamline3d__directed","text":"","title":"struct cimg_library_suffixed::CImg::_functor4d_streamline3d_directed"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor4d__streamline3d__oriented","text":"","title":"struct cimg_library_suffixed::CImg::_functor4d_streamline3d_oriented"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor4d__streamline__expr","text":"","title":"struct cimg_library_suffixed::CImg::_functor4d_streamline_expr"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor__isoline3d","text":"","title":"struct cimg_library_suffixed::CImg::_functor_isoline3d"},{"location":"test/#structcimg__library__suffixed_1_1CImg_1_1__functor__isosurface3d","text":"","title":"struct cimg_library_suffixed::CImg::_functor_isosurface3d"},{"location":"dev/GPU/cuda/","text":"CUDA \ub294 \uc5d4\ube44\ub514\uc544 GPU \ub97c \ud6a8\uacfc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. CUDA \uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uacfc \ucd94\uac00\uc801\uc778 \ud559\uc2b5\uc744 \uc704\ud55c \ud29c\ud1a0\ub9ac\uc5bc \uc790\ub8cc\ub294 \ub2e4\uc74c \ub9c1\ud06c\ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694. Official CUDA C++ Programming Guide Official CUDA C++ Documentation Unofficial CUDA C++ Tutorial Tip \uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ud559\uc2b5\ud558\uba74 \ub9e4\uc6b0 \uac04\ub2e8\ud558\uace0 \uc27d\uac8c CUDA \uc758 \uccab\uac78\uc74c\uc744 \ub5c4 \uc218 \uc788\uc5b4\uc11c \uac15\ucd94\ud569\ub2c8\ub2e4. \uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ud559\uc2b5\ud558\uace0 CUDA \uc758 \uacf5\uc2dd Programming Guide \ub97c \ud559\uc2b5\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4. Awesome-GPU Awesome-CUDA \uc5ec\uae30\uc5d0\uc11c\ub294 \uac04\ub2e8\ud558\uac8c CUDA \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. CUDA \uae30\ucd08 \u00b6 CUDA \uc5d0\uc11c\ub294 CPU \ub97c host , GPU \ub97c device \ub77c\uace0 \ud569\ub2c8\ub2e4. __global__ \ud0a4\uc6cc\ub4dc\ub97c \ud568\uc218 \uc120\uc5b8 \ub9e8 \uc55e\uc5d0 \uc4f0\uba74 \ud568\uc218\uac00 device \uc5d0\uc11c \uc2e4\ud589\ub41c\ub2e4. device \uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ud568\uc218\ub97c kernel \uc774\ub77c\uace0 \ud55c\ub2e4. Example __global__ void cuda_hello (){ printf ( \"Hello World from GPU! \\n \" ); } kernel \uc740 GPU \uc5d0\uc11c \uc2e4\ud589\ub418\ub294\ub370 GPU \ub294 CPU \uc640 \ub3c5\ub9bd\ub41c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uac16\uc2b5\ub2c8\ub2e4. \uc774\ub54c CPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 host memory , GPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 device memory \ub77c\uace0 \ud569\ub2c8\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c CPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uac00\ub974\ud0a4\ub294 \ud3ec\uc778\ud130\ub97c host pointer , GPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uac00\ub974\ud0a4\ub294 \ud3ec\uc778\ud130\ub97c device pointer \ub77c\uace0 \ud569\ub2c8\ub2e4. CUDA \ud504\ub85c\uadf8\ub7a8 \uae30\ubcf8 \ud750\ub984 \u00b6 device memory \uac00 host memory \uc640 \ub3c5\ub9bd\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0 host memory \uc758 \ub370\uc774\ud130\ub97c device memory \ub85c \uc62e\uaca8\uc8fc\uc5b4\uc57c\ub9cc GPU \uac00 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c CUDA \ud504\ub85c\uadf8\ub7a8\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc2e4\ud589\ud750\ub984\uc744 \uac16\uc2b5\ub2c8\ub2e4. host memory \ub97c \ud560\ub2f9\ud558\uace0, \ub370\uc774\ud130\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. device memory \ub97c \ud560\ub2f9\ud55c\ub2e4. host memory \uc758 \ub370\uc774\ud130\ub97c device memory \ub85c \uc62e\uae34\ub2e4. kernel \uc744 \uc2e4\ud589\ud55c\ub2e4. kernel \uc2e4\ud589 \uacb0\uacfc\ub97c device memory \uc5d0\uc11c host memory \ub85c \uc62e\uae34\ub2e4. Note host memory \ud560\ub2f9/\ud574\uc81c\ub294 malloc() / free() \ub610\ub294 new / delete \ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. device memory \ud560\ub2f9/\ud574\uc81c\ub294 cudaMalloc() / cudaFree() \ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. host memory \uc5d0\uc11c device memory \ub85c, \ub610\ub294 device memory \uc5d0\uc11c host memory \ub85c \ub370\uc774\ud130\ub97c \uc62e\uae30\ub294 \uac83\uc740 cudaMemcpy() \ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. kernel \uc2e4\ud589 \u00b6 \uc774\ub984 func \uc744 \uac16\ub294 kernel \uc740 func<<<GRID, THREADS>>>(...) \uc640 \uac19\uc774 \ud638\ucd9c\ub429\ub2c8\ub2e4. THREADS \ub294 \uc2a4\ub808\ub4dc \ube14\ub85d\uc774 \uac16\ub294 \uc2a4\ub808\ub4dc \uac1c\uc218\ub97c \ub73b\ud55c\ub2e4. GRID \ub294 \uc2a4\ub808\ub4dc \ube14\ub85d\uc758 \uac1c\uc218\ub97c \ub73b\ud55c\ub2e4. CUDA \ub294 <<<GRID, THREADS>>> \ub85c\uc368 kernel \uc744 \uc790\ub3d9\uc73c\ub85c GPU \uc758 \ubcd1\ub82c \uc2a4\ub808\ub4dc\ub85c \ud638\ucd9c\ud574\uc90d\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uac01\uac01\uc758 \uc2a4\ub808\ub4dc\uac00 kernal \uc758 \uc791\uc5c5\uc744 \uacf5\ud3c9\ud558\uac8c \ubc30\ubd84\ubc1b\uc744 \uc218 \uc788\ub3c4\ub85d \ud574\uc57c \ud569\ub2c8\ub2e4. \uc2a4\ub808\ub4dc\uc5d0 \uc791\uc5c5\uc744 \uacf5\ud3c9\ud558\uac8c \ubd84\ubc30\ud558\uae30 \uc704\ud558\uc5ec \uc2a4\ub808\ub4dc \uc778\ub371\uc2a4\uc640 \uc2a4\ub808\ub4dc \uac1c\uc218, \uc2a4\ub808\ub4dc \ube14\ub85d \uc778\ub371\uc2a4, \uc2a4\ub808\ub4dc \ube14\ub85d \uac1c\uc218 \uc815\ubcf4\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 kernel \ub0b4\ubd80\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ubcc0\uc218\ub4e4\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. threadIdx.x : \uc2a4\ub808\ub4dc \ube14\ub85d \ub0b4\ubd80\uc5d0\uc11c \ud604\uc7ac\uc758 \uc2a4\ub808\ub4dc\uc758 \uc778\ub371\uc2a4 blockDim.x : \uc2a4\ub808\ub4dc \ube14\ub85d \ub0b4\ubd80\uc758 \uc2a4\ub808\ub4dc \uac1c\uc218 blockIdx.x : \uc2a4\ub808\ub4dc \ube14\ub85d \uc778\ub371\uc2a4 gridDim.x : \uc2a4\ub808\ub4dc \ube14\ub85d\uc758 \uac1c\uc218 CUDA \ud504\ub85c\uadf8\ub7a8 \ubd84\uc11d \u00b6 nvprof \ub85c CUDA \ud504\ub85c\uadf8\ub7a8\uc758 \uc2e4\ud589\uacb0\uacfc\ub97c \uc790\uc138\ud788 \ubd84\uc11d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"cuda"},{"location":"dev/GPU/cuda/#cuda","text":"CUDA \uc5d0\uc11c\ub294 CPU \ub97c host , GPU \ub97c device \ub77c\uace0 \ud569\ub2c8\ub2e4. __global__ \ud0a4\uc6cc\ub4dc\ub97c \ud568\uc218 \uc120\uc5b8 \ub9e8 \uc55e\uc5d0 \uc4f0\uba74 \ud568\uc218\uac00 device \uc5d0\uc11c \uc2e4\ud589\ub41c\ub2e4. device \uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ud568\uc218\ub97c kernel \uc774\ub77c\uace0 \ud55c\ub2e4. Example __global__ void cuda_hello (){ printf ( \"Hello World from GPU! \\n \" ); } kernel \uc740 GPU \uc5d0\uc11c \uc2e4\ud589\ub418\ub294\ub370 GPU \ub294 CPU \uc640 \ub3c5\ub9bd\ub41c \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uac16\uc2b5\ub2c8\ub2e4. \uc774\ub54c CPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 host memory , GPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 device memory \ub77c\uace0 \ud569\ub2c8\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c CPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uac00\ub974\ud0a4\ub294 \ud3ec\uc778\ud130\ub97c host pointer , GPU \uc758 \uba54\ubaa8\ub9ac \uacf5\uac04\uc744 \uac00\ub974\ud0a4\ub294 \ud3ec\uc778\ud130\ub97c device pointer \ub77c\uace0 \ud569\ub2c8\ub2e4.","title":"CUDA \uae30\ucd08"},{"location":"dev/GPU/cuda/#cuda_1","text":"device memory \uac00 host memory \uc640 \ub3c5\ub9bd\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0 host memory \uc758 \ub370\uc774\ud130\ub97c device memory \ub85c \uc62e\uaca8\uc8fc\uc5b4\uc57c\ub9cc GPU \uac00 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c CUDA \ud504\ub85c\uadf8\ub7a8\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc2e4\ud589\ud750\ub984\uc744 \uac16\uc2b5\ub2c8\ub2e4. host memory \ub97c \ud560\ub2f9\ud558\uace0, \ub370\uc774\ud130\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. device memory \ub97c \ud560\ub2f9\ud55c\ub2e4. host memory \uc758 \ub370\uc774\ud130\ub97c device memory \ub85c \uc62e\uae34\ub2e4. kernel \uc744 \uc2e4\ud589\ud55c\ub2e4. kernel \uc2e4\ud589 \uacb0\uacfc\ub97c device memory \uc5d0\uc11c host memory \ub85c \uc62e\uae34\ub2e4. Note host memory \ud560\ub2f9/\ud574\uc81c\ub294 malloc() / free() \ub610\ub294 new / delete \ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. device memory \ud560\ub2f9/\ud574\uc81c\ub294 cudaMalloc() / cudaFree() \ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. host memory \uc5d0\uc11c device memory \ub85c, \ub610\ub294 device memory \uc5d0\uc11c host memory \ub85c \ub370\uc774\ud130\ub97c \uc62e\uae30\ub294 \uac83\uc740 cudaMemcpy() \ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"CUDA \ud504\ub85c\uadf8\ub7a8 \uae30\ubcf8 \ud750\ub984"},{"location":"dev/GPU/cuda/#kernel","text":"\uc774\ub984 func \uc744 \uac16\ub294 kernel \uc740 func<<<GRID, THREADS>>>(...) \uc640 \uac19\uc774 \ud638\ucd9c\ub429\ub2c8\ub2e4. THREADS \ub294 \uc2a4\ub808\ub4dc \ube14\ub85d\uc774 \uac16\ub294 \uc2a4\ub808\ub4dc \uac1c\uc218\ub97c \ub73b\ud55c\ub2e4. GRID \ub294 \uc2a4\ub808\ub4dc \ube14\ub85d\uc758 \uac1c\uc218\ub97c \ub73b\ud55c\ub2e4. CUDA \ub294 <<<GRID, THREADS>>> \ub85c\uc368 kernel \uc744 \uc790\ub3d9\uc73c\ub85c GPU \uc758 \ubcd1\ub82c \uc2a4\ub808\ub4dc\ub85c \ud638\ucd9c\ud574\uc90d\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uac01\uac01\uc758 \uc2a4\ub808\ub4dc\uac00 kernal \uc758 \uc791\uc5c5\uc744 \uacf5\ud3c9\ud558\uac8c \ubc30\ubd84\ubc1b\uc744 \uc218 \uc788\ub3c4\ub85d \ud574\uc57c \ud569\ub2c8\ub2e4. \uc2a4\ub808\ub4dc\uc5d0 \uc791\uc5c5\uc744 \uacf5\ud3c9\ud558\uac8c \ubd84\ubc30\ud558\uae30 \uc704\ud558\uc5ec \uc2a4\ub808\ub4dc \uc778\ub371\uc2a4\uc640 \uc2a4\ub808\ub4dc \uac1c\uc218, \uc2a4\ub808\ub4dc \ube14\ub85d \uc778\ub371\uc2a4, \uc2a4\ub808\ub4dc \ube14\ub85d \uac1c\uc218 \uc815\ubcf4\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 kernel \ub0b4\ubd80\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ubcc0\uc218\ub4e4\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. threadIdx.x : \uc2a4\ub808\ub4dc \ube14\ub85d \ub0b4\ubd80\uc5d0\uc11c \ud604\uc7ac\uc758 \uc2a4\ub808\ub4dc\uc758 \uc778\ub371\uc2a4 blockDim.x : \uc2a4\ub808\ub4dc \ube14\ub85d \ub0b4\ubd80\uc758 \uc2a4\ub808\ub4dc \uac1c\uc218 blockIdx.x : \uc2a4\ub808\ub4dc \ube14\ub85d \uc778\ub371\uc2a4 gridDim.x : \uc2a4\ub808\ub4dc \ube14\ub85d\uc758 \uac1c\uc218","title":"kernel \uc2e4\ud589"},{"location":"dev/GPU/cuda/#cuda_2","text":"nvprof \ub85c CUDA \ud504\ub85c\uadf8\ub7a8\uc758 \uc2e4\ud589\uacb0\uacfc\ub97c \uc790\uc138\ud788 \ubd84\uc11d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"CUDA \ud504\ub85c\uadf8\ub7a8 \ubd84\uc11d"},{"location":"dev/Git/git/","text":"Git \u00b6 \ucf54\ub529\uc744 \ub9c9 \ubc30\uc6b0\uae30 \uc2dc\uc791\ud558\uba74 \uc885\uc885 \uce74\ud1a1\uc774\ub098 \uba54\uc77c\uc5d0 \uc18c\uc2a4\ucf54\ub4dc\ub97c \ubc31\uc5c5 \ud558\uace4 \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ubc29\uc2dd\uc5d0\ub294 \uba87 \uac00\uc9c0 \ub2e8\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uba3c\uc800 \uc18c\uc2a4\ucf54\ub4dc\uc758 \uc800\uc7a5\uc7a5\uc18c\uac00 \ub9e4\uc6b0 \uc0b0\ubc1c\uc801\uc774\uace0 \uc77c\uad00\uc131\uc774 \uc5c6\uc5b4\uc11c \ub9e4\ubc88 \ucc3e\uae30\uac00 \ud798\ub4ed\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc18c\uc2a4\ucf54\ub4dc\uc758 \ubcc0\ud654\uacfc\uc815\uc744 \uc81c\ub300\ub85c \uc774\ud574\ud558\uae30 \ud798\ub4ed\ub2c8\ub2e4. \ub9cc\uc57d \ubc31\uc5c5\ud558\ub294 \uac83\ub3c4 \uc78a\uc5b4\ubc84\ub9ac\uace0 \ubc31\uc5c5\uc744 \ud558\uc9c0 \uc54a\uc558\ub2e4\uac00 \uc2e4\uc218\ub85c \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc0ad\uc81c\ud574\ubc84\ub9b0\ub2e4\uba74 \ubcf5\uad6c\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc804\ud600 \uc5c6\uc2b5\ub2c8\ub2e4. Danger \uc774\ub7f0 \ubb38\uc81c\ub294 \uaddc\ubaa8\uac00 \ud070 \ub2e8\uccb4 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \ub354 \uc2ec\uac01\ud574\uc9d1\ub2c8\ub2e4. \ub204\uac00 \ubb34\uc5c7\uc744 \uace0\ucce4\ub294\uc9c0, \uc18c\uc2a4\ucf54\ub4dc \uc800\uc7a5\uc18c\uac00 \uc5b4\ub514\uc5d0 \uc788\ub294\uc9c0, \ub9cc\uc57d \ub204\uac00 \uc2e4\uc218\ub85c \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc9c0\uc6cc\ubc84\ub838\uc744 \ub54c \ubcf5\uad6c\ub97c \ud560 \uc218 \uc5c6\uc744 \ub54c \uae30\uc5c5\uc740 \uc2e4\uc9c8\uc801\uc778 \uae08\uc804\uc801\uc778 \ud53c\ud574\ub97c \ubc1b\uac8c \ub429\ub2c8\ub2e4. \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \ub098\uc628 \uac83\uc774 \ubc84\uc804 \ucee8\ud2b8\ub864 \uc2dc\uc2a4\ud15c(Version Control System) \uc785\ub2c8\ub2e4. \uc904\uc5ec\uc11c VCS \ub294 \ub2e8\uc5b4 \uadf8\ub300\ub85c \"\ud504\ub85c\uc81d\ud2b8\uc758 \ubc84\uc804\uc744 \uc190\uc27d\uac8c \ub2e4\ub8f0 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \uc2dc\uc2a4\ud15c\" \uc785\ub2c8\ub2e4. VCS \uc5d0\ub294 \uc5ec\ub7ec \uc885\ub958\uac00 \uc788\uc9c0\ub9cc \uc774\uc81c \uc6b0\ub9ac\ub294 \uadf8 \uc911\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 VCS \uac00 Git \uc785\ub2c8\ub2e4. WICWIU \ub3c4 Git \uc744 \uc0ac\uc6a9\ud558\uc5ec \uad00\ub9ac\ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 WICWIU \uac1c\ubc1c\uc5d0 \ucc38\uc5ec\ud558\uae30 \uc704\ud574\uc11c\ub294 Git \uc744 \uc798 \uc774\ud574\ud574\uc57c \ud569\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 Git \uc73c\ub85c \ud611\uc5c5\ud558\uba70 WICWIU \ub97c \uac1c\ubc1c\ud558\ub294 \ubc95\uc744 \uac00\ubccd\uac8c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc7a0\uae50!! Git \uc5d0 \ub300\ud55c \uae30\ucd08\uac00 \uc5c6\uc73c\uc2e0\ubd84\ub4e4\uc740 \uba3c\uc800 \uc774\uacf3 \uc744 \ud1b5\ud558\uc5ec( \ucd94\ucc9c ), \ub610\ub294 \ub2e4\ub978 Git \ud559\uc2b5 \uc790\ub8cc\ub97c \ud1b5\ud558\uc5ec Git \uc774 \ud30c\uc77c\uc744 \uad00\ub9ac\ud558\ub294 4 \uac00\uc9c0 \uc0c1\ud0dc( untracked \uc0c1\ud0dc, modified \uc0c1\ud0dc, staged \uc0c1\ud0dc, committed \uc0c1\ud0dc ) Github \uc73c\ub85c Git \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uad00\ub9ac\ud558\ub294 \ubc29\ubc95 .gitignore \ud30c\uc77c \uad00\ub9ac\ud558\uae30 Git Branching \uacfc \ucda9\ub3cc\ud574\uacb0\ud558\uae30 Pull Requests \ud558\uae30 \ub97c \uba3c\uc800 \uc774\ud574\ud558\uace0 \uc624\uc2dc\uae38 \ubc14\ub78d\ub2c8\ub2e4. Git \uacfc Github \ub85c WICWIU \ud611\uc5c5\ud558\uae30 \u00b6 Git \uacfc Github \ub85c WICWIU \ub97c \ud611\uc5c5\ud558\ub294 \uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uad6c\uc870\ub85c \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 RNN \uc744 \ub9cc\ub4e4\uae30 \uc704\ud558\uc5ec RNN \ube0c\ub79c\uce58\uc5d0\uc11c \uac1c\ubc1c\uc744 \ud55c\ub2e4\uace0 \uac00\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. WICWIU \ub97c fork \ud55c\ub2e4. fork \ud55c \uc790\uc2e0\uc758 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ub525\ub7ec\ub2dd \ud559\uc2b5 \ud658\uacbd\uc5d0 clone \ud55c\ub2e4. RNN \ube0c\ub79c\uce58\ub97c \ub9cc\ub4e4\uace0 \uac1c\ubc1c\uc744 \ud55c \ud6c4 \ud14c\uc2a4\ud2b8\uac00 \ub05d\ub098\uba74 commit \ud558\uace0 \uc790\uc2e0\uc758 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub85c push \ud55c\ub2e4. WICWIU \ub85c Pull Requests \ub97c \ud55c\ub2e4.","title":"Collaborate with Git"},{"location":"dev/Git/git/#git","text":"\ucf54\ub529\uc744 \ub9c9 \ubc30\uc6b0\uae30 \uc2dc\uc791\ud558\uba74 \uc885\uc885 \uce74\ud1a1\uc774\ub098 \uba54\uc77c\uc5d0 \uc18c\uc2a4\ucf54\ub4dc\ub97c \ubc31\uc5c5 \ud558\uace4 \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ubc29\uc2dd\uc5d0\ub294 \uba87 \uac00\uc9c0 \ub2e8\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uba3c\uc800 \uc18c\uc2a4\ucf54\ub4dc\uc758 \uc800\uc7a5\uc7a5\uc18c\uac00 \ub9e4\uc6b0 \uc0b0\ubc1c\uc801\uc774\uace0 \uc77c\uad00\uc131\uc774 \uc5c6\uc5b4\uc11c \ub9e4\ubc88 \ucc3e\uae30\uac00 \ud798\ub4ed\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc18c\uc2a4\ucf54\ub4dc\uc758 \ubcc0\ud654\uacfc\uc815\uc744 \uc81c\ub300\ub85c \uc774\ud574\ud558\uae30 \ud798\ub4ed\ub2c8\ub2e4. \ub9cc\uc57d \ubc31\uc5c5\ud558\ub294 \uac83\ub3c4 \uc78a\uc5b4\ubc84\ub9ac\uace0 \ubc31\uc5c5\uc744 \ud558\uc9c0 \uc54a\uc558\ub2e4\uac00 \uc2e4\uc218\ub85c \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc0ad\uc81c\ud574\ubc84\ub9b0\ub2e4\uba74 \ubcf5\uad6c\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc804\ud600 \uc5c6\uc2b5\ub2c8\ub2e4. Danger \uc774\ub7f0 \ubb38\uc81c\ub294 \uaddc\ubaa8\uac00 \ud070 \ub2e8\uccb4 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \ub354 \uc2ec\uac01\ud574\uc9d1\ub2c8\ub2e4. \ub204\uac00 \ubb34\uc5c7\uc744 \uace0\ucce4\ub294\uc9c0, \uc18c\uc2a4\ucf54\ub4dc \uc800\uc7a5\uc18c\uac00 \uc5b4\ub514\uc5d0 \uc788\ub294\uc9c0, \ub9cc\uc57d \ub204\uac00 \uc2e4\uc218\ub85c \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc9c0\uc6cc\ubc84\ub838\uc744 \ub54c \ubcf5\uad6c\ub97c \ud560 \uc218 \uc5c6\uc744 \ub54c \uae30\uc5c5\uc740 \uc2e4\uc9c8\uc801\uc778 \uae08\uc804\uc801\uc778 \ud53c\ud574\ub97c \ubc1b\uac8c \ub429\ub2c8\ub2e4. \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \ub098\uc628 \uac83\uc774 \ubc84\uc804 \ucee8\ud2b8\ub864 \uc2dc\uc2a4\ud15c(Version Control System) \uc785\ub2c8\ub2e4. \uc904\uc5ec\uc11c VCS \ub294 \ub2e8\uc5b4 \uadf8\ub300\ub85c \"\ud504\ub85c\uc81d\ud2b8\uc758 \ubc84\uc804\uc744 \uc190\uc27d\uac8c \ub2e4\ub8f0 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \uc2dc\uc2a4\ud15c\" \uc785\ub2c8\ub2e4. VCS \uc5d0\ub294 \uc5ec\ub7ec \uc885\ub958\uac00 \uc788\uc9c0\ub9cc \uc774\uc81c \uc6b0\ub9ac\ub294 \uadf8 \uc911\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 VCS \uac00 Git \uc785\ub2c8\ub2e4. WICWIU \ub3c4 Git \uc744 \uc0ac\uc6a9\ud558\uc5ec \uad00\ub9ac\ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 WICWIU \uac1c\ubc1c\uc5d0 \ucc38\uc5ec\ud558\uae30 \uc704\ud574\uc11c\ub294 Git \uc744 \uc798 \uc774\ud574\ud574\uc57c \ud569\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 Git \uc73c\ub85c \ud611\uc5c5\ud558\uba70 WICWIU \ub97c \uac1c\ubc1c\ud558\ub294 \ubc95\uc744 \uac00\ubccd\uac8c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc7a0\uae50!! Git \uc5d0 \ub300\ud55c \uae30\ucd08\uac00 \uc5c6\uc73c\uc2e0\ubd84\ub4e4\uc740 \uba3c\uc800 \uc774\uacf3 \uc744 \ud1b5\ud558\uc5ec( \ucd94\ucc9c ), \ub610\ub294 \ub2e4\ub978 Git \ud559\uc2b5 \uc790\ub8cc\ub97c \ud1b5\ud558\uc5ec Git \uc774 \ud30c\uc77c\uc744 \uad00\ub9ac\ud558\ub294 4 \uac00\uc9c0 \uc0c1\ud0dc( untracked \uc0c1\ud0dc, modified \uc0c1\ud0dc, staged \uc0c1\ud0dc, committed \uc0c1\ud0dc ) Github \uc73c\ub85c Git \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uad00\ub9ac\ud558\ub294 \ubc29\ubc95 .gitignore \ud30c\uc77c \uad00\ub9ac\ud558\uae30 Git Branching \uacfc \ucda9\ub3cc\ud574\uacb0\ud558\uae30 Pull Requests \ud558\uae30 \ub97c \uba3c\uc800 \uc774\ud574\ud558\uace0 \uc624\uc2dc\uae38 \ubc14\ub78d\ub2c8\ub2e4.","title":"Git"},{"location":"dev/Git/git/#git-github-wicwiu","text":"Git \uacfc Github \ub85c WICWIU \ub97c \ud611\uc5c5\ud558\ub294 \uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uad6c\uc870\ub85c \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 RNN \uc744 \ub9cc\ub4e4\uae30 \uc704\ud558\uc5ec RNN \ube0c\ub79c\uce58\uc5d0\uc11c \uac1c\ubc1c\uc744 \ud55c\ub2e4\uace0 \uac00\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. WICWIU \ub97c fork \ud55c\ub2e4. fork \ud55c \uc790\uc2e0\uc758 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ub525\ub7ec\ub2dd \ud559\uc2b5 \ud658\uacbd\uc5d0 clone \ud55c\ub2e4. RNN \ube0c\ub79c\uce58\ub97c \ub9cc\ub4e4\uace0 \uac1c\ubc1c\uc744 \ud55c \ud6c4 \ud14c\uc2a4\ud2b8\uac00 \ub05d\ub098\uba74 commit \ud558\uace0 \uc790\uc2e0\uc758 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub85c push \ud55c\ub2e4. WICWIU \ub85c Pull Requests \ub97c \ud55c\ub2e4.","title":"Git \uacfc Github \ub85c WICWIU \ud611\uc5c5\ud558\uae30"},{"location":"dev/Git/message/","text":"Commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9 \uaddc\uce59 \u00b6 commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9\uc744 \uc815\ud560 \ub54c \uc77c\uad00\ub41c \uaddc\uce59\uc744 \uc0ac\uc6a9\ud574\uc57c \ud611\uc5c5\ud560 \ub54c \uc88b\uc2b5\ub2c8\ub2e4. WICWIU \ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uaddc\uce59\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. Branch: Update {UPDATED-FILE-NAMEs} (DESCRIPTION) \uc774 \uaddc\uce59\uc73c\ub85c \uc5b4\ub5bb\uac8c commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9\uc744 \uc815\ud560 \uc218 \uc788\ub294\uc9c0 \uc608\uc2dc\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Example RNN \ube0c\ub79c\uce58\uc5d0\uc11c src/RNN.cpp \uc5d0 main() \ud568\uc218\ub97c \ub9cc\ub4e4\uc5c8\ub2e4\uba74 RNN: Update src/RNN.cpp (create main function) \ub610\ub294 RNN: Update src/RNN.cpp (main \ud568\uc218 \uc0dd\uc131) \uc774\ub77c\ub294 commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9\uc744 \ub9cc\ub4e4\uba74 \ub429\ub2c8\ub2e4. \uc774\ub54c \uc124\uba85( DESCRIPTION ) \uc740 \ud611\uc5c5\ud558\ub294 \uc0ac\ub78c\uc774 \uc774\ud574\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \uc790\uc138\ud558\uace0 \uba85\ub8cc\ud560\uc218\ub85d \uc88b\uc2b5\ub2c8\ub2e4.","title":"Commit/PR protocol"},{"location":"dev/Git/message/#commit-pull-requests","text":"commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9\uc744 \uc815\ud560 \ub54c \uc77c\uad00\ub41c \uaddc\uce59\uc744 \uc0ac\uc6a9\ud574\uc57c \ud611\uc5c5\ud560 \ub54c \uc88b\uc2b5\ub2c8\ub2e4. WICWIU \ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uaddc\uce59\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. Branch: Update {UPDATED-FILE-NAMEs} (DESCRIPTION) \uc774 \uaddc\uce59\uc73c\ub85c \uc5b4\ub5bb\uac8c commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9\uc744 \uc815\ud560 \uc218 \uc788\ub294\uc9c0 \uc608\uc2dc\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Example RNN \ube0c\ub79c\uce58\uc5d0\uc11c src/RNN.cpp \uc5d0 main() \ud568\uc218\ub97c \ub9cc\ub4e4\uc5c8\ub2e4\uba74 RNN: Update src/RNN.cpp (create main function) \ub610\ub294 RNN: Update src/RNN.cpp (main \ud568\uc218 \uc0dd\uc131) \uc774\ub77c\ub294 commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9\uc744 \ub9cc\ub4e4\uba74 \ub429\ub2c8\ub2e4. \uc774\ub54c \uc124\uba85( DESCRIPTION ) \uc740 \ud611\uc5c5\ud558\ub294 \uc0ac\ub78c\uc774 \uc774\ud574\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \uc790\uc138\ud558\uace0 \uba85\ub8cc\ud560\uc218\ub85d \uc88b\uc2b5\ub2c8\ub2e4.","title":"Commit \uba54\uc2dc\uc9c0\uc640 Pull Requests \uc81c\ubaa9 \uaddc\uce59"},{"location":"dev/Git/update/","text":"fork \ud55c \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc5c5\ub370\uc774\ud2b8\ud558\uae30 \u00b6 WICWIU \ub97c \uc790\uc2e0\uc758 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c fork \ud574\uc654\ub294\ub370 \ud568\uaed8 \ud611\uc5c5\ud558\ub294 \uc0ac\ub78c\uc758 Pull Requests \uac00 WICWIU \ub85c \ubcd1\ud569\ub418\uba74 \uc790\uc2e0\uc758 fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc5c5\ub370\uc774\ud2b8\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. RNN \ube0c\ub79c\uce58\uc5d0\uc11c \uc791\uc5c5\uc744 \ud558\ub2e4\uac00 \uac19\uc774 \ud611\uc5c5\ud558\ub294 \uc0ac\ub78c\uc758 Pull Requests \uac00 \uc6d0\ubcf8 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\uc758 RNN \ube0c\ub79c\uce58\ub85c merge \ub418\uc5c8\ub2e4\uace0 \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774 \uacbd\uc6b0 \ub2e4\uc74c\uacfc \uac19\uc774 \uc790\uc2e0\uc758 fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc5c5\ub370\uc774\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Note fork \ud55c \ub808\ud3ec\uc9c0\ud1a0\ub9ac\uc774\uae30 \ub54c\ubb38\uc5d0 origin \uc774 https://github.com/WICWIU/WICWIU \uac00 \uc544\ub2c8\ub77c https://github.com/{USER_NAME}/WICWIU \uc73c\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc6d0\ubcf8 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c upstream \uc774\ub77c\ub294 remote \ub85c \ub4f1\ub85d\ud55c\ub2e4. EXECUTE: git remote add upstream https://github.com/WICWIU/WICWIU upstream (\uc6d0\ubcf8 WICWIU ) \uc73c\ub85c\ubd80\ud130 \uc5c5\ub370\uc774\ud2b8\ub41c \ub370\uc774\ud130\ub4e4\uc744 fetch \ud574\uc628\ub2e4. EXECUTE: git fetch upstream RNN \ube0c\ub79c\uce58\ub97c \uc5c5\ub370\uc774\ud2b8 \ud560 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 RNN \ube0c\ub79c\uce58\ub85c \uc774\ub3d9\ud55c\ub2e4. EXECUTE: git checkout RNN upstream (\uc6d0\ubcf8 WICWIU ) \uc73c\ub85c\ubd80\ud130 RNN \ube0c\ub79c\uce58\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. EXECUTE: git merge upstream/RNN Warning fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc218\uc815\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74 Git \uc740 fast-forward \ub97c \uc9c4\ud589\ud558\uc9c0\ub9cc \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc218\uc815\ud588\ub2e4\uba74 merge conflict \uac00 \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ubcd1\ud569 \ucda9\ub3cc \ud574\uacb0\ubc95\uc740 \uc774\uacf3 \uc744 \ucc38\uace0\ud558\uac70\ub098 \ub2e4\ub978 Git \ud559\uc2b5 \uc790\ub8cc\ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694. \uc790\uc2e0\uc758 fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub85c push \ud55c\ub2e4. EXECUTE: git push origin RNN","title":"Update forked repo"},{"location":"dev/Git/update/#fork","text":"WICWIU \ub97c \uc790\uc2e0\uc758 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c fork \ud574\uc654\ub294\ub370 \ud568\uaed8 \ud611\uc5c5\ud558\ub294 \uc0ac\ub78c\uc758 Pull Requests \uac00 WICWIU \ub85c \ubcd1\ud569\ub418\uba74 \uc790\uc2e0\uc758 fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc5c5\ub370\uc774\ud2b8\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. RNN \ube0c\ub79c\uce58\uc5d0\uc11c \uc791\uc5c5\uc744 \ud558\ub2e4\uac00 \uac19\uc774 \ud611\uc5c5\ud558\ub294 \uc0ac\ub78c\uc758 Pull Requests \uac00 \uc6d0\ubcf8 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\uc758 RNN \ube0c\ub79c\uce58\ub85c merge \ub418\uc5c8\ub2e4\uace0 \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774 \uacbd\uc6b0 \ub2e4\uc74c\uacfc \uac19\uc774 \uc790\uc2e0\uc758 fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc5c5\ub370\uc774\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Note fork \ud55c \ub808\ud3ec\uc9c0\ud1a0\ub9ac\uc774\uae30 \ub54c\ubb38\uc5d0 origin \uc774 https://github.com/WICWIU/WICWIU \uac00 \uc544\ub2c8\ub77c https://github.com/{USER_NAME}/WICWIU \uc73c\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc6d0\ubcf8 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c upstream \uc774\ub77c\ub294 remote \ub85c \ub4f1\ub85d\ud55c\ub2e4. EXECUTE: git remote add upstream https://github.com/WICWIU/WICWIU upstream (\uc6d0\ubcf8 WICWIU ) \uc73c\ub85c\ubd80\ud130 \uc5c5\ub370\uc774\ud2b8\ub41c \ub370\uc774\ud130\ub4e4\uc744 fetch \ud574\uc628\ub2e4. EXECUTE: git fetch upstream RNN \ube0c\ub79c\uce58\ub97c \uc5c5\ub370\uc774\ud2b8 \ud560 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 RNN \ube0c\ub79c\uce58\ub85c \uc774\ub3d9\ud55c\ub2e4. EXECUTE: git checkout RNN upstream (\uc6d0\ubcf8 WICWIU ) \uc73c\ub85c\ubd80\ud130 RNN \ube0c\ub79c\uce58\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4. EXECUTE: git merge upstream/RNN Warning fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc218\uc815\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74 Git \uc740 fast-forward \ub97c \uc9c4\ud589\ud558\uc9c0\ub9cc \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc218\uc815\ud588\ub2e4\uba74 merge conflict \uac00 \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ubcd1\ud569 \ucda9\ub3cc \ud574\uacb0\ubc95\uc740 \uc774\uacf3 \uc744 \ucc38\uace0\ud558\uac70\ub098 \ub2e4\ub978 Git \ud559\uc2b5 \uc790\ub8cc\ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694. \uc790\uc2e0\uc758 fork \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub85c push \ud55c\ub2e4. EXECUTE: git push origin RNN","title":"fork \ud55c \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc5c5\ub370\uc774\ud2b8\ud558\uae30"},{"location":"dev/VSCode/git/","text":"VSCode Git \uc5f0\ub3d9 \u00b6 VSCode \ub97c \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0 \uc5f0\ub3d9\ud588\uc73c\ub2c8 \uc5ec\ub7ec\uac00\uc9c0 Git \ud655\uc7a5\ub4e4\uc744 \uc124\uce58\ud558\uba74 \ud504\ub85c\uc81d\ud2b8 \uac1c\ubc1c\uc774 \ud6e8\uc52c \ud3b8\ud574\uc9d1\ub2c8\ub2e4. Git Graph \u00b6 Git Graph \ud655\uc7a5\uc744 \uc124\uce58\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 WICWIU \uc758 \ube0c\ub79c\uce58 \uc0c1\ud669\uc744 \uc790\uc138\ud788 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud655\uc7a5\uc758 \uc7a5\uc810\uc740 \ub204\uac00 \uc5b4\ub5a4 \ube0c\ub79c\uce58\ub97c \ub9cc\ub4e4\uc5c8\ub294\uc9c0 \uc2dc\uac01\uc801\uc73c\ub85c \ubcfc \uc218 \uc788\uace0 \ud074\ub9ad\uc744 \ud558\uba74 \uac01\uac01\uc758 commit \ub9c8\ub2e4 \uc5b4\ub5a4 \ub0b4\uc6a9\uc774 \uc218\uc815\ub418\uc5c8\ub294\uc9c0 \ubcfc \uc218 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. Git Lens \u00b6 Git Lens \ud655\uc7a5\uc744 \uc124\uce58\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 WICWIU \uc758 \uc18c\uc2a4\ucf54\ub4dc \ud55c\uc904 \ud55c\uc904\uc744 \ub204\uac00 \uc218\uc815\ud588\uace0 \uc5b8\uc81c \uc218\uc815\ud588\uace0 \uc65c \uc218\uc815\ud588\ub294\uc9c0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704 \uc0ac\uc9c4\uc744 \ubcf4\uba74 \ucee4\uc11c\uac00 \uc788\ub294 \uacf3\uc758 \uc624\ub978\ucabd\uc5d0 \ud76c\ubbf8\ud55c \uae00\uc528\ub85c chuniee0126, a year ago, Update MNIST... \ub77c\ub294 \uba54\uc2dc\uc9c0\uac00 \ub5a0\uc624\ub985\ub2c8\ub2e4. \uc774\ub85c\uc368 \uc774 \ucf54\ub4dc\ub97c \ub204\uac00 \uace0\ucce4\uace0, \uc5b8\uc81c \uace0\ucce4\uace0, \uc65c \uace0\ucce4\uace0( commit \uba54\uc2dc\uc9c0) \ub97c \ube60\ub974\uac8c \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. Git \uc758 \ud575\uc2ec \uae30\ub2a5\uc778 \ucc45\uc784 \ucd94\uc801\uc774 \uc27d\uac8c \uac00\ub2a5\ud574\uc9c0\ub294 \uac83\uc774\uc9c0\uc694. \uae30\ud0c0 \ud655\uc7a5 \u00b6 \uc774\ubfd0 \uc544\ub2c8\ub77c \uc5ec\ub7ec\ubd84\ub4e4\ub3c4 \ub2e4\ub978 \ud3b8\ub9ac\ud55c \ud655\uc7a5\uc744 \uc124\uce58\ud558\uc154\uc11c \uc0ac\uc6a9\ud558\uc138\uc694. \ud558\uc9c0\ub9cc \ud655\uc7a5\uc774 \ub108\ubb34 \ub9ce\uc73c\uba74 \ub809\uc774 \uac78\ub9b4 \uc218\ub3c4 \uc788\uc73c\ub2c8 \uc8fc\uc758\ud558\uc138\uc694. \uc815\ub9d0 \ud3b8\ub9ac\ud55c \ud655\uc7a5\uc744 \ucc3e\uc558\ub2e4\uba74 \uc774 \ubb38\uc11c\ub97c \uc218\uc815\ud558\uc154\uc11c \ub2e4\ub978 WICWIU \uac1c\ubc1c\uc790\ub4e4\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ucd94\ucc9c\ud574\uc8fc\uc138\uc694!","title":"VSCode Git \uc5f0\ub3d9"},{"location":"dev/VSCode/git/#vscode-git","text":"VSCode \ub97c \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0 \uc5f0\ub3d9\ud588\uc73c\ub2c8 \uc5ec\ub7ec\uac00\uc9c0 Git \ud655\uc7a5\ub4e4\uc744 \uc124\uce58\ud558\uba74 \ud504\ub85c\uc81d\ud2b8 \uac1c\ubc1c\uc774 \ud6e8\uc52c \ud3b8\ud574\uc9d1\ub2c8\ub2e4.","title":"VSCode Git \uc5f0\ub3d9"},{"location":"dev/VSCode/git/#git-graph","text":"Git Graph \ud655\uc7a5\uc744 \uc124\uce58\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 WICWIU \uc758 \ube0c\ub79c\uce58 \uc0c1\ud669\uc744 \uc790\uc138\ud788 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud655\uc7a5\uc758 \uc7a5\uc810\uc740 \ub204\uac00 \uc5b4\ub5a4 \ube0c\ub79c\uce58\ub97c \ub9cc\ub4e4\uc5c8\ub294\uc9c0 \uc2dc\uac01\uc801\uc73c\ub85c \ubcfc \uc218 \uc788\uace0 \ud074\ub9ad\uc744 \ud558\uba74 \uac01\uac01\uc758 commit \ub9c8\ub2e4 \uc5b4\ub5a4 \ub0b4\uc6a9\uc774 \uc218\uc815\ub418\uc5c8\ub294\uc9c0 \ubcfc \uc218 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.","title":"Git Graph"},{"location":"dev/VSCode/git/#git-lens","text":"Git Lens \ud655\uc7a5\uc744 \uc124\uce58\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 WICWIU \uc758 \uc18c\uc2a4\ucf54\ub4dc \ud55c\uc904 \ud55c\uc904\uc744 \ub204\uac00 \uc218\uc815\ud588\uace0 \uc5b8\uc81c \uc218\uc815\ud588\uace0 \uc65c \uc218\uc815\ud588\ub294\uc9c0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704 \uc0ac\uc9c4\uc744 \ubcf4\uba74 \ucee4\uc11c\uac00 \uc788\ub294 \uacf3\uc758 \uc624\ub978\ucabd\uc5d0 \ud76c\ubbf8\ud55c \uae00\uc528\ub85c chuniee0126, a year ago, Update MNIST... \ub77c\ub294 \uba54\uc2dc\uc9c0\uac00 \ub5a0\uc624\ub985\ub2c8\ub2e4. \uc774\ub85c\uc368 \uc774 \ucf54\ub4dc\ub97c \ub204\uac00 \uace0\ucce4\uace0, \uc5b8\uc81c \uace0\ucce4\uace0, \uc65c \uace0\ucce4\uace0( commit \uba54\uc2dc\uc9c0) \ub97c \ube60\ub974\uac8c \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. Git \uc758 \ud575\uc2ec \uae30\ub2a5\uc778 \ucc45\uc784 \ucd94\uc801\uc774 \uc27d\uac8c \uac00\ub2a5\ud574\uc9c0\ub294 \uac83\uc774\uc9c0\uc694.","title":"Git Lens"},{"location":"dev/VSCode/git/#_1","text":"\uc774\ubfd0 \uc544\ub2c8\ub77c \uc5ec\ub7ec\ubd84\ub4e4\ub3c4 \ub2e4\ub978 \ud3b8\ub9ac\ud55c \ud655\uc7a5\uc744 \uc124\uce58\ud558\uc154\uc11c \uc0ac\uc6a9\ud558\uc138\uc694. \ud558\uc9c0\ub9cc \ud655\uc7a5\uc774 \ub108\ubb34 \ub9ce\uc73c\uba74 \ub809\uc774 \uac78\ub9b4 \uc218\ub3c4 \uc788\uc73c\ub2c8 \uc8fc\uc758\ud558\uc138\uc694. \uc815\ub9d0 \ud3b8\ub9ac\ud55c \ud655\uc7a5\uc744 \ucc3e\uc558\ub2e4\uba74 \uc774 \ubb38\uc11c\ub97c \uc218\uc815\ud558\uc154\uc11c \ub2e4\ub978 WICWIU \uac1c\ubc1c\uc790\ub4e4\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ucd94\ucc9c\ud574\uc8fc\uc138\uc694!","title":"\uae30\ud0c0 \ud655\uc7a5"},{"location":"dev/VSCode/remote/","text":"\uba3c\uc800 VSCode \uc5d0 \uc775\uc219\ud558\uc9c0 \uc54a\ub2e4\uba74 \ub2e4\uc74c\uc758 \ub9c1\ud06c\ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694. VSCode \uacf5\uc2dd \ud29c\ud1a0\ub9ac\uc5bc ProgrammerBase \uc758 VSCode \ud29c\ud1a0\ub9ac\uc5bc (\ucd94\ucc9c) \uba85\ub839 \ud314\ub808\ud2b8\uac00 \ubb54\uc9c0 \ubaa8\ub974\uace0 \uc5b4\ub5bb\uac8c \uc5ec\ub294\uc9c0 \ubaa8\ub974\uaca0\ub2e4\uba74 \uc704 \ub9c1\ud06c\ub97c \ud1b5\ud558\uc5ec VSCode \uc758 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \uc644\uc218\ud574\uc8fc\uc138\uc694. \uc81c\uac00 \ub9cc\ub4e0 VSCode \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ubcf8\ub2e4\uba74 \ube60\ub974\uac8c \uc2dc\uac04\uc808\uc57d\uc744 \ud558\uba74\uc11c \ud29c\ud1a0\ub9ac\uc5bc\uc744 \uc644\uc218\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. VSCode \ub97c \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \uc774\uc720 \u00b6 \uc790\uc2e0\uc758 \ucef4\ud4e8\ud130\uc5d0 GPU \uac00 \uc5c4\uccad \uc88b\uc740 \uac8c \ub2ec\ub824\uc788\uc9c0 \uc54a\uc740 \uc774\uc0c1 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c WICWIU \uac1c\ubc1c\uc744 \ud560 \uc218\ubc16\uc5d0 \uc5c6\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c \uc6d0\uaca9\uc73c\ub85c \uac1c\ubc1c\ud558\ub294 \uac83\uc740 \uc27d\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 ssh \uc640 vim \ub4f1\uc744 \ud130\ubbf8\ub110 \ud658\uacbd\uc5d0\uc11c \uc0ac\uc6a9\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ubb3c\ub860 \uc775\uc219\ud55c \uc0ac\ub78c\uc740 \uad00\uacc4\uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc544\ubb34\ub9ac \ud130\ubbf8\ub110 \ud658\uacbd\uc5d0 \uc775\uc219\ud558\ub2e4\uace0 \ud574\ub3c4 WICWIU \uc758 \uc18c\uc2a4\ucf54\ub4dc\ub97c \ubd84\uc11d\ud560 \ub54c\uc5d0\ub294 \ud55c\uacc4\uc5d0 \ubd09\ucc29\ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub300\uc548\ucc45\uc73c\ub85c Github \uc18c\uc2a4\ubcf4\uae30\ub97c \ud1b5\ud558\uc5ec \uc18c\uc2a4\ubd84\uc11d\uc744 \ud558\uae30\ub3c4 \ud558\uc9c0\ub9cc VSCode \uc758 \uc18c\uc2a4\ucf54\ub4dc \ubd84\uc11d \ud234\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ud6e8\uc52c \ub0ab\uc2b5\ub2c8\ub2e4. VSCode \ub97c \uc0ac\uc6a9\ud558\uba74 \uc6d0\uaca9 \uc11c\ubc84\uc5d0 \uc5f0\uacb0\ud558\uc5ec \ud3b8\ud558\uac8c \uac1c\ubc1c\uc744 \ud560 \uc218 \uc788\uc744 \ubfd0\ub354\ub7ec VSCode \uac00 \uc81c\uacf5\ud558\ub294 \uc18c\uc2a4\ucf54\ub4dc \ubd84\uc11d \uae30\ub2a5\uae4c\uc9c0 \uc81c\uacf5\ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. VSCode \uc5f0\ub3d9 \ubc29\ubc95 \u00b6 \uba3c\uc800 VSCode \uc758 SSH \ud655\uc7a5 \uc744 \uc124\uce58\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uba85\ub839 \ud314\ub808\ud2b8\ub97c \uc5f4\uc5b4\uc11c \ub2e4\uc74c\uc758 \uae30\ub2a5\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ucd9c\ucc98 : https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh \uadf8\ub7ec\uba74 \uc11c\ubc84 IP \uc640 \uc544\uc774\ub514, \ube44\ubc00\ubc88\ud638\ub97c \uc785\ub825\ud560 \uc218 \uc788\ub294\ub370 \uc801\uc808\ud788 \uc798 \uc785\ub825\ud574\uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc11c \ud3f4\ub354 \uc5f4\uae30\ub97c \ud1b5\ud574 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0 \uc788\ub294 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc5f4\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc704 \uc0ac\uc9c4\uacfc \uac19\uc774 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc758 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\uc640 \uc5f0\ub3d9\uc774 \ub418\uc11c \ucf54\ub4dc\ub97c \ud3b8\uc9d1\ud558\uba74 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c\ub3c4 \ud3b8\uc9d1\ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 VSCode \uc758 \ud130\ubbf8\ub110\uc744 \uc5f4\uba74 \uc790\ub3d9\uc73c\ub85c \ub525\ub7ec\ub2dd \uc11c\ubc84\uc758 \ud130\ubbf8\ub110\ub85c \uc5f4\ub824\uc11c \ucef4\ud30c\uc77c\uacfc \uc2e4\ud589\ub3c4 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c \ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. VSCode C++ \ucf54\ub4dc \ubd84\uc11d \u00b6 WICWIU \ub294 C++ \ud504\ub85c\uc81d\ud2b8\uc774\uae30 \ub54c\ubb38\uc5d0 VSCode \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 C++ \ubd84\uc11d \ud5ec\ud37c\ub97c \uc0ac\uc6a9\ud558\uba74 \uc18c\uc2a4\ucf54\ub4dc \ubd84\uc11d\uc744 \ub9e4\uc6b0 \uc27d\uac8c \ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. \uba3c\uc800 C++ \ud655\uc7a5 \uc744 \uc124\uce58\ud558\uc138\uc694. \uc774\ub54c \uc911\uc694\ud55c \uc810\uc740 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c \uc5f0\ub3d9\ub418\ub294 VSCode \ud655\uc7a5\uc740 \ub530\ub85c \uc124\uce58\ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \ud655\uc7a5\uc744 \uc124\uce58\ud558\uace0 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0 VSCode \ub97c \uc5f0\ub3d9\ud574\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 Install on SSH: \uc11c\ubc84 \uc544\uc774\ud53c \ubc84\ud2bc\uc774 \uc0dd\uae41\ub2c8\ub2e4. \uc774\uac83\uc744 \ud074\ub9ad\ud558\uc5ec \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c\ub3c4 C++ \ud655\uc7a5\uc744 \uc124\uce58\ud574\uc8fc\uc138\uc694. \uadf8\ub7ec\uba74 C++ \ud655\uc7a5\uc774 \uc81c\uacf5\ud558\ub294 \ub9ce\uc740 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ud45c\uc801\uc73c\ub85c \ub2e4\uc74c\uacfc \uac19\uc740 \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcc0\uc218 \ucd94\ucc9c\ud558\uae30 \uc774\ubbf8\uc9c0 \ucd9c\ucc98 : https://code.visualstudio.com/docs/cpp/cpp-ide \uc815\uc758 \ucd94\ucc99\ud558\uae30 : F12 \ub97c \ub204\ub974\uba74 \uc815\uc758\ub85c \ubc14\ub85c \uac74\ub108\ub6f8 \uc218 \uc788\uace0, Ctrl + Shift + F10 \uc744 \ub204\ub974\uba74 \uc815\uc758\ub97c \uac04\ub2e8\ud558\uac8c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ucd9c\ucc98 : https://code.visualstudio.com/docs/cpp/cpp-ide Note \uc0ac\uc2e4\uc0c1 \ubd84\uc11d\ud560 \ub54c \uc774 \uae30\ub2a5\uc744 \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ud558\uac8c \ub429\ub2c8\ub2e4. \ud130\ubbf8\ub110\uc5d0\uc11c Vim \uc73c\ub85c \uc774\ub807\uac8c \uc815\uc758\ub97c \ucd94\uc801\ud558\ub824\uba74 \uc815\ub9d0 \ud798\ub4e4\uc5b4\uc694. VSCode \ub85c WICWIU \ubd84\uc11d\uc744 \ud558\ub294 \uac83\uc774 \uc27d\uace0 \ud3b8\ud569\ub2c8\ub2e4.","title":"\ub525\ub7ec\ub2dd \uc11c\ubc84 VSCode \uc5f0\ub3d9"},{"location":"dev/VSCode/remote/#vscode","text":"\uc790\uc2e0\uc758 \ucef4\ud4e8\ud130\uc5d0 GPU \uac00 \uc5c4\uccad \uc88b\uc740 \uac8c \ub2ec\ub824\uc788\uc9c0 \uc54a\uc740 \uc774\uc0c1 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c WICWIU \uac1c\ubc1c\uc744 \ud560 \uc218\ubc16\uc5d0 \uc5c6\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c \uc6d0\uaca9\uc73c\ub85c \uac1c\ubc1c\ud558\ub294 \uac83\uc740 \uc27d\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 ssh \uc640 vim \ub4f1\uc744 \ud130\ubbf8\ub110 \ud658\uacbd\uc5d0\uc11c \uc0ac\uc6a9\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ubb3c\ub860 \uc775\uc219\ud55c \uc0ac\ub78c\uc740 \uad00\uacc4\uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc544\ubb34\ub9ac \ud130\ubbf8\ub110 \ud658\uacbd\uc5d0 \uc775\uc219\ud558\ub2e4\uace0 \ud574\ub3c4 WICWIU \uc758 \uc18c\uc2a4\ucf54\ub4dc\ub97c \ubd84\uc11d\ud560 \ub54c\uc5d0\ub294 \ud55c\uacc4\uc5d0 \ubd09\ucc29\ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub300\uc548\ucc45\uc73c\ub85c Github \uc18c\uc2a4\ubcf4\uae30\ub97c \ud1b5\ud558\uc5ec \uc18c\uc2a4\ubd84\uc11d\uc744 \ud558\uae30\ub3c4 \ud558\uc9c0\ub9cc VSCode \uc758 \uc18c\uc2a4\ucf54\ub4dc \ubd84\uc11d \ud234\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ud6e8\uc52c \ub0ab\uc2b5\ub2c8\ub2e4. VSCode \ub97c \uc0ac\uc6a9\ud558\uba74 \uc6d0\uaca9 \uc11c\ubc84\uc5d0 \uc5f0\uacb0\ud558\uc5ec \ud3b8\ud558\uac8c \uac1c\ubc1c\uc744 \ud560 \uc218 \uc788\uc744 \ubfd0\ub354\ub7ec VSCode \uac00 \uc81c\uacf5\ud558\ub294 \uc18c\uc2a4\ucf54\ub4dc \ubd84\uc11d \uae30\ub2a5\uae4c\uc9c0 \uc81c\uacf5\ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"VSCode \ub97c \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \uc774\uc720"},{"location":"dev/VSCode/remote/#vscode_1","text":"\uba3c\uc800 VSCode \uc758 SSH \ud655\uc7a5 \uc744 \uc124\uce58\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uba85\ub839 \ud314\ub808\ud2b8\ub97c \uc5f4\uc5b4\uc11c \ub2e4\uc74c\uc758 \uae30\ub2a5\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ucd9c\ucc98 : https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh \uadf8\ub7ec\uba74 \uc11c\ubc84 IP \uc640 \uc544\uc774\ub514, \ube44\ubc00\ubc88\ud638\ub97c \uc785\ub825\ud560 \uc218 \uc788\ub294\ub370 \uc801\uc808\ud788 \uc798 \uc785\ub825\ud574\uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc11c \ud3f4\ub354 \uc5f4\uae30\ub97c \ud1b5\ud574 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0 \uc788\ub294 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc5f4\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc704 \uc0ac\uc9c4\uacfc \uac19\uc774 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc758 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\uc640 \uc5f0\ub3d9\uc774 \ub418\uc11c \ucf54\ub4dc\ub97c \ud3b8\uc9d1\ud558\uba74 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c\ub3c4 \ud3b8\uc9d1\ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 VSCode \uc758 \ud130\ubbf8\ub110\uc744 \uc5f4\uba74 \uc790\ub3d9\uc73c\ub85c \ub525\ub7ec\ub2dd \uc11c\ubc84\uc758 \ud130\ubbf8\ub110\ub85c \uc5f4\ub824\uc11c \ucef4\ud30c\uc77c\uacfc \uc2e4\ud589\ub3c4 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c \ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4.","title":"VSCode \uc5f0\ub3d9 \ubc29\ubc95"},{"location":"dev/VSCode/remote/#vscode-c","text":"WICWIU \ub294 C++ \ud504\ub85c\uc81d\ud2b8\uc774\uae30 \ub54c\ubb38\uc5d0 VSCode \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 C++ \ubd84\uc11d \ud5ec\ud37c\ub97c \uc0ac\uc6a9\ud558\uba74 \uc18c\uc2a4\ucf54\ub4dc \ubd84\uc11d\uc744 \ub9e4\uc6b0 \uc27d\uac8c \ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. \uba3c\uc800 C++ \ud655\uc7a5 \uc744 \uc124\uce58\ud558\uc138\uc694. \uc774\ub54c \uc911\uc694\ud55c \uc810\uc740 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c \uc5f0\ub3d9\ub418\ub294 VSCode \ud655\uc7a5\uc740 \ub530\ub85c \uc124\uce58\ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \ud655\uc7a5\uc744 \uc124\uce58\ud558\uace0 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0 VSCode \ub97c \uc5f0\ub3d9\ud574\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 Install on SSH: \uc11c\ubc84 \uc544\uc774\ud53c \ubc84\ud2bc\uc774 \uc0dd\uae41\ub2c8\ub2e4. \uc774\uac83\uc744 \ud074\ub9ad\ud558\uc5ec \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c\ub3c4 C++ \ud655\uc7a5\uc744 \uc124\uce58\ud574\uc8fc\uc138\uc694. \uadf8\ub7ec\uba74 C++ \ud655\uc7a5\uc774 \uc81c\uacf5\ud558\ub294 \ub9ce\uc740 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ud45c\uc801\uc73c\ub85c \ub2e4\uc74c\uacfc \uac19\uc740 \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcc0\uc218 \ucd94\ucc9c\ud558\uae30 \uc774\ubbf8\uc9c0 \ucd9c\ucc98 : https://code.visualstudio.com/docs/cpp/cpp-ide \uc815\uc758 \ucd94\ucc99\ud558\uae30 : F12 \ub97c \ub204\ub974\uba74 \uc815\uc758\ub85c \ubc14\ub85c \uac74\ub108\ub6f8 \uc218 \uc788\uace0, Ctrl + Shift + F10 \uc744 \ub204\ub974\uba74 \uc815\uc758\ub97c \uac04\ub2e8\ud558\uac8c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ucd9c\ucc98 : https://code.visualstudio.com/docs/cpp/cpp-ide Note \uc0ac\uc2e4\uc0c1 \ubd84\uc11d\ud560 \ub54c \uc774 \uae30\ub2a5\uc744 \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ud558\uac8c \ub429\ub2c8\ub2e4. \ud130\ubbf8\ub110\uc5d0\uc11c Vim \uc73c\ub85c \uc774\ub807\uac8c \uc815\uc758\ub97c \ucd94\uc801\ud558\ub824\uba74 \uc815\ub9d0 \ud798\ub4e4\uc5b4\uc694. VSCode \ub85c WICWIU \ubd84\uc11d\uc744 \ud558\ub294 \uac83\uc774 \uc27d\uace0 \ud3b8\ud569\ub2c8\ub2e4.","title":"VSCode C++ \ucf54\ub4dc \ubd84\uc11d"},{"location":"dev/cli/cli/","text":"WICWIU \ub294 \uc544\uc9c1 Linux \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc2e4\ud589\ub418\ub3c4\ub85d \uac1c\ubc1c\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 WICWIU \ub97c Linux \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uac1c\ubc1c\ud558\uba74\uc11c \ub514\ubc84\uae45\uc744 \ud574\uc57c \ud569\ub2c8\ub2e4. \ubcf4\ud1b5 \uc790\uc2e0\uc758 \ucef4\ud4e8\ud130\uac00 Linux \uac00 \uc544\ub2d0 \ubfd0\ub354\ub7ec \uac15\ub825\ud55c GPU \ud658\uacbd\ub3c4 \uad6c\ucd95\ub418\uc5b4 \uc788\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uae30\uacc4\ud559\uc2b5 \uc804\uc6a9 \uc11c\ubc84\uc5d0\uc11c WICWIU \ub97c \uac1c\ubc1c\ud558\uace0 \ub514\ubc84\uae45\uc744 \ud558\uac8c \ub429\ub2c8\ub2e4. \uc774\ub54c \ud544\uc694\ud55c \uac83\uc774 \ud6a8\uacfc\uc801\uc778 CLI(Command Line Interface) \ud504\ub85c\uadf8\ub7a8\ub4e4\uc785\ub2c8\ub2e4. \uae30\uc874\uc5d0 \uc0ac\uc6a9\ud558\ub358 bash \uc258, ls \uba85\ub839\uc5b4, cat \uba85\ub839\uc5b4, find \uba85\ub839\uc5b4, top \uba85\ub839\uc5b4, man \uba85\ub839\uc5b4, python \uba85\ub839\uc5b4 \ub4f1\uc740 \uc0ac\uc2e4 \ub108\ubb34 \uc624\ub798\uc804\uc5d0 \uc81c\uc791\ub41c \ud504\ub85c\uadf8\ub7a8\ub4e4\uc774\ub77c \uc0ac\uc6a9\ud558\uae30\uc5d0 \ub9e4\uc6b0 \ubd88\ud3b8\ud569\ub2c8\ub2e4. \uc774\uac83\ub4e4\uc744 \uc0c8\ub85c\uc6b4 CLI \ud504\ub85c\uadf8\ub7a8\ub4e4\ub85c \uc5c5\uadf8\ub808\uc774\ub4dc\ud558\uc5ec \uc0ac\uc6a9\ud558\uae30 \ub9e4\uc6b0 \ud3b8\ud558\uac8c \ubc14\uafb8\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Note \uc544\ub798\uc758 \ub0b4\uc6a9\uc740 \uc81c\uac00 \uace0\uc2a4\ud2b8 \uc2e0\uc785\uc744 \uac00\ub974\uce58\uae30 \uc704\ud574 \uc81c\uc791\ud55c \ud29c\ud1a0\ub9ac\uc5bc \uc744 WICWIU \uac1c\ubc1c\uc790\ub4e4\uc5d0\uac8c \uc801\ud569\ud558\ub3c4\ub85d \ud3b8\uc9d1\ud558\uc5ec \uc7ac\uc791\uc131\ud55c \uac83\uc785\ub2c8\ub2e4. \ud2b9\ud788 nvtop \uc740 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0\ub294 \uc5c6\uc9c0\ub9cc WICWIU \uac1c\ubc1c\uc790\uc5d0\uac8c\ub294 \ud544\uc694\ud558\uae30\uc5d0 \uc0c8\ub86d\uac8c \ucd94\uac00\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc758 \ub0b4\uc6a9\uc758 CLI \ud504\ub85c\uadf8\ub7a8 \uc124\uce58\ubc95\uc740 \uc6d0\ubcf8 \ud29c\ud1a0\ub9ac\uc5bc \uc744 \ucc38\uace0\ud574\uc8fc\uc138\uc694. \uc5ec\uae30\uc5d0\uc11c\ub294 CLI \uc720\ud2f8\ub9ac\ud2f0\ub97c \uc5c5\uadf8\ub808\uc774\ub4dc\ud558\uba74 \uc5b4\ub5bb\uac8c \uc0dd\uc0b0\uc131\uc774 \ud5a5\uc0c1\ub418\ub294\uc9c0 \ube44\uad50\ub9cc \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. alias \u00b6 \uba3c\uc800 \ub2e4\uc74c\uacfc \uac19\uc774 alias \ub97c \uc9c0\uc815\ud558\uba74 \uba85\ub839\uc5b4 \uc785\ub825 \uc2dc\uac04\uc744 \ud68d\uae30\uc801\uc73c\ub85c \uc904\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. alias command t tmux v vim c clear cs cd .. ls lsd --icon never cl clear;ls l ls la ls -a ll ls -la lt ls --tree g git q exit Info alias t=tmux \uba85\ub839\uc5b4\ub85c alias \ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc744 \ub9e4\ubc88 \ub85c\uadf8\uc778\ud560 \ub54c\ub9c8\ub2e4 \uc785\ub825\ud558\uae30 \uadc0\ucc2e\uae30 \ub54c\ubb38\uc5d0 zsh \uc258 \uc0ac\uc6a9 \uc720\uc800\ub77c\uba74 .zshrc \ub610\ub294 .zsh_aliases \uc5d0 alias t = tmux alias v = vim alias c = clear alias cs = 'cd ..' alias ls = 'lsd --icon never' alias cl = 'clear;ls' alias l = 'ls' alias la = 'ls -a' alias ll = 'ls -la' alias lt = 'ls --tree' alias g = 'git' alias q = 'exix' \uc744 \uc785\ub825\ud574\ub450\uba74 \ub429\ub2c8\ub2e4. bash \uc258 \uc0ac\uc6a9 \uc720\uc800\ub77c\uba74 .bashrc \ub610\ub294 .bash_aliases \uc5d0 \uc785\ub825\ud558\uba74 \ub418\ub294 \uac83\uc785\ub2c8\ub2e4. \ub354 \ube68\ub77c\uc9c4 git \u00b6 git \uc740 \uc9c0\uc6d0\ud558\ub294 \uc9c0\ub2a5\uc774 \ud558\ub3c4 \ub9ce\ub2e4\ubcf4\ub2c8 \ub0b4\ubd80\uc801\uc73c\ub85c alias \ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uac00\ub839 git commit -m \uc774\ub77c\ub294 \uba85\ub839\uc5b4\ub97c \ub9e4\ubc88 \uc785\ub825\ud558\uae30\uac00 \ub108\ubb34 \uadc0\ucc2e\uc544\uc11c \uacac\ub51c \uc218\uac00 \uc5c6\uc73c\ub2c8\uae4c \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uc5ec alias \ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. $ g config --global alias.cm \"commit -m\" Info alias \uc5d0\uc11c alias g=git \uc73c\ub85c git \uc758 \uc5d0\uc77c\ub9ac\uc5b4\uc2a4 g \ub97c \uc124\uc815\ud588\uc5c8\uae30 \ub54c\ubb38\uc5d0 git \uc774 \uc544\ub2cc g \ub9cc \uc785\ub825\ud574\ub3c4 \ub429\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc774\uc81c\ubd80\ud130 \uc6b0\ub9ac\ub294 git commit -m \uc774 \uc544\ub2c8\ub77c g cm \ub9cc \uc785\ub825\ud574\ub3c4 \ub418\ub294 \uac83\uc785\ub2c8\ub2e4. \uc800\uc758 dotfiles \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc758 .tmux.conf \uc5d0\ub294 \uc774\ub7f0 git \uc758 alias \ub4e4\uc774 \uc774\ubbf8 \uc124\uc815\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \ud30c\uc77c\uc744 ~/.gitconfig \uc5d0 \uc704\uce58\uc2dc\ud0a4\uae30\ub9cc \ud558\uba74 git alias \ub4e4\uc774 \ub2e8\ubc88\uc5d0 \uc124\uc815\ub429\ub2c8\ub2e4. git \uc758 alias \uac00 \ub9e4\uc6b0 \ub9ce\uc774 \uc124\uc815\ub418\uc5b4 \uc788\uc9c0\ub9cc \uadf8\uc911\uc5d0\uc11c \uc8fc\uc694\ud55c alias \ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. alias \uc6d0\ub798 \uba85\ub839\uc5b4 \uc644\uc131\ub41c \uba85\ub839\uc5b4 \uc758\ubbf8 i init g i git \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uad00\ub9ac\ub97c \uc2dc\uc791\ud558\ub3c4\ub85d \ud55c\ub2e4. s status g s \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc0c1\ud0dc\ub97c \ubcf8\ub2e4. sb status -s -b g sb \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc0c1\ud0dc\ub97c \uac04\ub7b5\ud558\uac8c \ubcf8\ub2e4. cm commit -m g cm \"<MESSAGE>\" \ucee4\ubc0b\uc744 \ud55c\ub2e4. a add --all g a \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub41c \ud30c\uc77c\uc744 \uc2a4\ud14c\uc774\uc9d5 \ud55c\ub2e4. l log --oneline g l git \uc758 \ucee4\ubc0b \uae30\ub85d\uc744 \ud55c\uc904\uc529 \ucd9c\ub825\ud55c\ub2e4. lg log --oneline --graph --decorate g lg git \uc758 \ucee4\ubc0b \uae30\ub85d\uc744 \uadf8\ub798\ud504\ub85c \ucd9c\ub825\ud55c\ub2e4. rao remote add origin g rao <REMOTE> \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ucd94\uac00\ud55c\ub2e4. cl clone g cl <URL> \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ubcf5\uc81c\ud574 \uc628\ub2e4. psom push origin master g psom \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub85c \ud478\uc26c\ud55c\ub2e4. plom pull origin master g plom \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uac00\uc838\uc628\ub2e4. b branch g b <BRANCH> \ube0c\ub79c\uce58\ub97c \uc0dd\uc131\ud55c\ub2e4. bd branch -d g bd <BRANCH> \ube0c\ub79c\uce58\ub97c \uc0ad\uc81c\ud55c\ub2e4. m merge g m \uc791\uc5c5\uc774 \uc644\ub8cc\ub41c \ube0c\ub79c\uce58\ub97c \ubcd1\ud569\ud55c\ub2e4. o checkout g o <BRANCH> \ube0c\ub79c\uce58\ub85c \uc774\ub3d9\ud55c\ub2e4. ob checkout -b g ob <BRANCH> \ube0c\ub79c\uce58\ub97c \uc0dd\uc131\ud568\uacfc \ub3d9\uc2dc\uc5d0 \uc774\ub3d9\ud55c\ub2e4. \uc774\ub85c\uc368 git \uc73c\ub85c \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uad00\ub9ac\ud558\ub294 \ub808\ud37c\ud1a0\ub9ac\uc778 \ub2e4\uc74c\uc758 \uba85\ub839\uc5b4\ub4e4\uc744 \ud68d\uae30\uc801\uc73c\ub85c \ub2e8\ucd95\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. $ mkdir git-test $ cd git-test $ git init $ touch test.txt $ git status $ git add test.txt $ git status $ git commit -m \"my first commit\" $ git status $ echo \"My test memo\" > test.txt $ cat test.txt My test memo $ git add . $ git commit -m \"My memo file\" $ git log $ git remote add origin https://github.com/<USER>/git-test $ git push -u origin master $ cd $ git clone https://github.com/<USER>/git-test git-test-remote $ cd git-test-remote $ echo \"very important message\" > test.txt $ git add . $ git commit -m \"very important file..\" $ git push origin master $ cd ~/git-test $ cat test.txt $ git pull origin master $ cat test.txt \uc704\uc640 \uac19\uc740 \uba85\ub839\uc5b4\ub97c alias \ub85c \ub2e8\ucd95\ud574\uc11c \ub2e4\uc2dc \uc785\ub825\ud574\ubcf4 \uba85\ub839\uc5b4\uac00 \uc815\ub9d0 \ube60\ub974\uac8c \uc785\ub825\ub429\ub2c8\ub2e4. $ cd $ mkdir alias-test $ cd alias-test $ g i $ touch test.txt $ g s $ g a $ g s $ g cm \"init\" $ g s $ echo \"My test memo\" > test.txt $ bat test.txt $ g a $ g cm \"memo\" $ g l $ g rao https://github.com/<USER>/alias-test $ g psom $ cd $ g cl https://github.com/<USER>/alias-test alias-test-remote $ cd alias-test-remote $ echo \"message\" > test.txt $ g a $ g cm \"important file\" $ g psom $ cd ~/alias-test $ bat test.txt $ g plom $ bat test.txt \uc774\ub85c\uc368 \ub2e4\uc74c\uacfc \uac19\uc774 213 \ud0c0\ub97c \uccd0\uc57c \ud588\ub358 \uac83\uc744 79 \ud0c0\ub9cc \uce60 \uc218 \uc788\ub3c4\ub85d \ub300\ud3ed \uc808\uc57d\uc744 \ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc6d0\ub798 \uba85\ub839\uc5b4 alias \uba85\ub839\uc5b4 git init g i git status g s git add g a git status g s git commit -m g cm git status g s git add . g a git commit -m g cm git log g l git remote add g rao git push -u origin master g psom git clone g cl git add . g a git commit g cm git push origin master g psom git pull origin master g plom \ucd1d\ud569 213 \uac1c \ucd1d\ud569 79 \uac1c Tip \uc774\ub7ec\ud55c git \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uad00\ub9ac \ud328\ud134\uc740 \ucf54\ub529\uc744 \ud560 \ub54c\ub9c8\ub2e4 \ubc18\ubcf5\ub418\ub294\ub370, \uc774 \ud328\ud134\uc744 \uac1c\ubc1c\uc790\ub85c \uc0b4\uc544\uac00\uba74\uc11c \uc801\uac8c \uc7a1\uc544\uc11c 10000 \ubc88 \ubc18\ubcf5\ud55c\ub2e4\uace0 \ud55c\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc740 10000 * 213 = 2\ubc31 13\ub9cc \ubc88 \uce60 \uac83\uc744 10000 * 79 = 79\ub9cc \ub9cc\ucce4\uc2b5\ub2c8\ub2e4. \uc989, \ub611\uac19\uc740 \uc77c\uc744 \ud558\ub294\ub370 134\ub9cc \ubc88\uc758 \ud0c0\uc790\ub97c \uc548 \uce5c\uac83\uc785\ub2c8\ub2e4! CLI \uc5c5\uadf8\ub808\uc774\ub4dc \u00b6 ls \u279c lsd \u00b6 lsd \ub294 \uad6c\uc2dd\uc778 ls \uba85\ub839\uc5b4\ub97c \ucd5c\uc2e0\uc2dd\uc73c\ub85c \ub300\uccb4\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. ls \uc640 lsd \ub97c \ube44\uad50\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. lsd \ub294 \uceec\ub7ec\ud480\ud558\uac8c \ucd9c\ub825\uacb0\uacfc\ub97c \ubcf4\uc5ec\uc918\uc11c \uac00\ub3c5\uc131\uc774 \ud6e8\uc52c \uc62c\ub824\uc90d\ub2c8\ub2e4. Info lsd --icon never \uc5d0\uc11c --icon never \uc635\uc158\uc740 \uc544\uc774\ucf58\uc744 \ucd9c\ub825\ud558\uc9c0 \uc54a\ub294 \uc635\uc158\uc785\ub2c8\ub2e4. \uc774\ub294 \uc21c\uc218 CLI \ud658\uacbd\uc5d0\uc11c \ud544\uc694\ud55c \uc635\uc158\uc774\uae30 \ub54c\ubb38\uc5d0 \ub9cc\uc57d GUI \ud658\uacbd( macOS \uc774\ub098 \ub9ac\ub205\uc2a4 \ub370\uc2a4\ud06c\ud0d1 \ud658\uacbd)\uc5d0\uc11c \uc544\uc774\ucf58\uc744 \uc124\uce58\ud558\uace0 --icon never \uc635\uc158\uc744 \uc81c\uac70\ud558\uace0 lsd \ub97c \uc2e4\ud589\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc544\uc774\ucf58\ub3c4 \ud568\uaed8 \ucd9c\ub825\ub418\uc5b4 \uac00\ub3c5\uc131\uc774 \ud6e8\uc52c \uc62c\ub77c\uac00\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. cat \u279c bat \u00b6 bat \ub294 \uad6c\uc2dd\uc778 cat \uba85\ub839\uc5b4\ub97c \ucd5c\uc2e0\uc2dd\uc73c\ub85c \ub300\uccb4\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \uadf8\ub7fc cat \uc640 bat \ub97c \ube44\uad50\ud574\ubd05\uc2dc\ub2e4. cat \uc774 \ub2e4\uc74c\uacfc \uac19\uc774 \ubc0b\ubc0b\ud558\uac8c \ucd9c\ub825\ub418\ub294 \ubc18\uba74, bat \uc774 \ub2e4\uc74c\uacfc \uac19\uc774 \uceec\ub7ec\ud480\ud558\uac8c \ucd9c\ub825\ub429\ub2c8\ub2e4. Tip bat \uc740 more \uc774\ub098 less \ucc98\ub7fc e \uc640 y \ub97c \ub204\ub974\uba74 \uc704\uc544\ub798\ub85c \uc6c0\uc9c1\uc77c \uc218 \uc788\uace0 Spacebar \uc640 u \ub97c \ub204\ub974\uba74 \ud398\uc774\uc9c0 \ub2e8\uc704\ub85c \uc704\uc544\ub798\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\uc73c\uba70 vim \ucc98\ub7fc / \ub85c \ud2b9\uc815 \ubb38\uc790\uc5f4\uc744 \uac80\uc0c9\ud560 \uc218 \uc788\uace0 q \ub85c \uc885\ub8cc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. find \u279c fd \u00b6 fd \ub294 \uad6c\uc2dd\uc778 find \uba85\ub839\uc5b4\ub97c \ucd5c\uc2e0\uc2dd\uc73c\ub85c \ub300\uccb4\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. fd \ub294 find \ubcf4\ub2e4 5\ubc30 \uc815\ub3c4 \ube60\ub974\uace0 \uc880 \ub354 \uc720\uc800\ub4e4\uc774 \uc0ac\uc6a9\ud558\uae30 \ud3b8\ud558\ub3c4\ub85d \uc778\ud130\ud398\uc774\uc2a4\uac00 \ub300\ud3ed \uac1c\uc120\ub41c \ubaa8\ub358\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. fd \ub294 find \uc640 \uc0c1\uc138\ud558\uac8c \ube44\uad50\ud558\uae30\ubcf4\ub2e4 \ub2e4\uc74c\uc758 \uc0ac\uc6a9\uc608\ub97c \uac00\ubccd\uac8c \ud55c\ubc88 \uc0b4\ud3b4\ubcf4\ub294 \uac83\uc73c\ub85c \ub9c8\ubb34\ub9ac\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ucd9c\ucc98 : https://github.com/sharkdp/fd fd \uc758 \uc0c1\uc138\ud55c \uc124\uba85\uc744 \uc54c\uace0 \uc2f6\ub2e4\uba74 \uacf5\uc2dd \ub808\ud3ec\uc9c0\ud1a0\ub9ac https://github.com/sharkdp/fd \ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694. top \u279c htop \u279c gotop \u00b6 top \uba85\ub839\uc5b4\ub294 \uc2dc\uc2a4\ud15c\uc758 \ub9ac\uc18c\uc2a4 \uc0c1\ud0dc(RAM, CPU \ub4f1) \uc744 \ucd9c\ub825\ud574\uc8fc\ub294 \uc88b\uc740 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \uae30\uc874\uc758 top \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc57d\uac04\uc740 \ubc0b\ubc0b\ud558\uac8c \uc2dc\uc2a4\ud15c\uc758 \uc0c1\ud0dc\ub97c \ucd9c\ub825\ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc htop \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc0c9\uae54\ub3c4 \uce60\ud558\uace0 \uba54\ubaa8\ub9ac\uc640 CPU \uc0c1\ud0dc\ub97c \ud578\ub4dc\ud3f0 \ubc30\ud130\ub9ac \ubc14\ucc98\ub7fc \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9\uc73c\ub85c gotop \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc644\ubcbd\ud55c \uadf8\ub798\ud504\ub85c \uc2dc\uc2a4\ud15c\uc758 \uc0c1\ud0dc\ub97c \uc9c1\uad00\uc801\uc73c\ub85c \ucd9c\ub825\ud574\uc90d\ub2c8\ub2e4. Note \uc2dc\uc2a4\ud15c \uc0c1\ud0dc\ub97c \ucd9c\ub825\ud574\uc904 \uc218 \uc788\ub294 \uc720\ud2f8\ub9ac\ud2f0\ub294 \uac1c\uc778\uc801\uc778 \uc120\ud638\uc5d0 \ub530\ub77c \uc88b\uace0 \ub098\uc068\uc774 \uacb0\uc815\ub418\ubbc0\ub85c \ud655\uc2e4\ud788 \uc5b4\ub5a4 \uac8c \uc88b\ub2e4\ub77c\uace0 \ub9d0\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uadf8\ub0e5 \uac1c\uc778\uc801\uc73c\ub85c \ub354 \ub098\uc740 \uac83 \uac19\uc740 CLI \ub97c \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4. \uc804 \uac1c\uc778\uc801\uc73c\ub85c gotop \uc774 \uc9c1\uad00\uc801\uc774\uace0 \uc88b\ub354\ub77c\uad6c\uc694. man \u279c tldr \u00b6 man \uc740 \uba85\ub839\uc5b4\uc758 \uc0ac\uc6a9\ubc95\uc744 \ucd9c\ub825\ud558\ub294 \ub9e4\uc6b0 \uc88b\uc740 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc man \uc758 \ud55c \uac00\uc9c0 \ub2e8\uc810\uc740 \uadf8 \uc0ac\uc6a9\ubc95\uc774 \ub108\ubb34 \ubc29\ub300\ud558\uace0 \uc7a5\ud669\ud558\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c \ud504\ub85c\uadf8\ub7a8\uc758 \ud575\uc2ec \uc0ac\uc6a9\ubc95\uc744 \uc27d\uace0 \ube60\ub974\uac8c \uc54c\uace0 \uc2f6\uc740 \uc0ac\uc6a9\uc790\ub4e4\uc740 \uadf8 \ubc29\ub300\ud55c \uc0ac\uc6a9\ubc95\uc5d0\uc11c \uc790\uc2e0\uc774 \uc6d0\ud558\ub294 \ud575\uc2ec \uc0ac\uc6a9\ubc95\uc744 \uc774\ub9ac\uc800\ub9ac \ucc3e\uace0 \uc788\uc5b4\uc57c\ub9cc \ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc tldr \uc740 man \ucc98\ub7fc \ubc29\ub300\ud55c \uc0ac\uc6a9\ubc95\uc744 \ubcf4\uc5ec\uc8fc\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ub9e4\uc6b0 \uac04\ub2e8\ud55c \ud575\uc2ec \uc0ac\uc6a9\ubc95\ub9cc\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. tldr \uc740 \uc0ac\uc6a9\uc790\ub4e4\uc758 \uc8fc\ub3c4\ub85c \ub9cc\ub4e4\uc5b4\uc838\uc11c \uac1c\ubc1c\uc790\ub4e4\uc774 \uacbd\ud5d8\uc801\uc73c\ub85c \"\uc774\uac8c \uac00\uc7a5 \ud575\uc2ec\uc801\uc778 \uc0ac\uc6a9\ubc95\uc774\ub2e4!\" \ub77c\ub294 \uc0ac\uc6a9\ubc95\ub9cc \uac04\ub2e8\ud558\uac8c \ucd9c\ub825\ud569\ub2c8\ub2e4. man \uc73c\ub85c tar \uba85\ub839\uc5b4\uc758 \uc124\uba85\uc744 \ubcf4\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uba74 \ub429\ub2c8\ub2e4. $ man tar \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 tar \uc758 \ubaa8\ub4e0 \uc0ac\uc6a9\ubc95 \uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4. \uc774\ub7f0... \ud558\uc9c0\ub9cc man \uc73c\ub85c tar \ub97c \ubcf4\ub2c8 \uc124\uba85\uc774 \ub9e4\uc6b0 \ubc29\ub300\ud558\uace0 \ub9e4\uc6b0 \uc5f0\uc5ed\uc801\uc73c\ub85c, \uadf8\ub7ec\ub2c8\uae4c \uc57d\uac04\uc740 \ucd94\uc0c1\uc801\uc73c\ub85c \uc124\uba85\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc774\uc81c tldr \ub85c tar \uc758 \uc0ac\uc6a9\ubc95\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. $ tldr tar \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uac1c\ubc1c\uc790\ub4e4\uc774 \uc790\uc8fc \uc0ac\uc6a9\ud558\ub294 tar \uc758 \ud575\uc2ec \uae30\ub2a5\ub4e4\uc774 \uc57d\uac04 \uadc0\ub0a9\uc801\uc73c\ub85c, \uc989 \uc0c1\ub2f9\ud788 \uad6c\uccb4\uc801\uc73c\ub85c \uc124\uba85\ub41c \uc0ac\uc6a9\ubc95\uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4. python \u279c bpython \u00b6 \uc774\ubc88\uc5d0\ub294 \ud30c\uc774\uc36c \uc778\ud130\ud504\ub9ac\ud130 python \uc5d0 \ucf54\ub4dc \ud558\uc774\ub77c\uc774\ud305\uacfc \uc790\ub3d9\uc644\uc131 \uae30\ub2a5 \ub4f1\uc758 \ud3b8\ub9ac\ud55c \uae30\ub2a5\uc774 \ucd94\uac00\ub41c bpython \uc785\ub2c8\ub2e4. \uae30\uc874\uc758 \ud30c\uc774\uc36c \uc778\ud130\ud504\ub9ac\ud130\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc2e4\ud589\ub42c\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc bpython \uc744 \uc0ac\uc6a9\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc \ud558\uc774\ub77c\uc774\ud305, \uc790\ub3d9 \uc644\uc131, \ud568\uc218 \ucd94\ucc9c \uae30\ub2a5, \uc790\ub3d9 \uc778\ub374\ud2b8 \ub4f1\uc758 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud76c\ubbf8\ud55c \uae00\uc528\ub85c \uc790\ub3d9 \uc644\uc131 \ucd94\ucc9c \uae30\ub2a5\uc774 \ubc1c\ub3d9\ub418\uba74 \ubc29\ud5a5\ud0a4 \u2192 \ub97c \ub20c\ub7ec\uc11c \uc790\ub3d9\uc644\uc131\uc744 \uc2dc\ucf1c\ubcf4\uc138\uc694. nvidia-smi \u279c nvtop \u00b6 WICWIU \ub97c \uac1c\ubc1c\ud558\uace0 \ub514\ubc84\uae45\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac GPU \uc0c1\ud669\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud574\uc57c \ud569\ub2c8\ub2e4. GPU \uac00 \ub108\ubb34 \ub35c \uc4f0\uc774\uace0 \uc788\ub294\uc9c0, \uc544\ub2c8\uba74 \ub108\ubb34 \uacfc\ud558\uac8c \uc4f0\uc5ec\uc9c0\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud574\uc57c \ud558\uace0 \ub2e4\ub978 \ub204\uad70\uac00 \uc4f0\uace0 \uc788\ub294 GPU \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc774\ub54c \ubcf4\ud1b5\uc740 nvidia-smi \ud504\ub85c\uadf8\ub7a8\uc744 \uc0ac\uc6a9\ud558\uc5ec GPU \uc0c1\ud669\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc nvida-smi \ub294 GPU \uc0c1\ud669\uc744 \ud55c \ubc88 \ucd9c\ub825\ud558\uace0 \ub05d\ub098\ubc84\ub9ac\uae30 \ub54c\ubb38\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 watch \ud504\ub85c\uadf8\ub7a8\uacfc \ud568\uaed8 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. $ watch -n 1 nvida-smi # 1\ucd08\uc5d0 \ud55c\ubc88 nvidia-smi \ub97c \uc2e4\ud589\ud55c\ub2e4. nvida-smi \uc2e4\ud589 \uacb0\uacfc \ud558\uc9c0\ub9cc nvtop \uc740 GPU \uc0c1\ud0dc\ub97c \uadf8\ub798\ud504 \ud615\ud0dc\ub85c \ub098\ud0c0\ub0b4\uc904 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc5b4\ub5a4 \uc720\uc800\uac00 GPU \ub97c \uc0ac\uc6a9\ud558\ub294 \ud504\ub85c\uc138\uc2a4\ub97c \uc2e4\ud589\ud588\ub294\uc9c0\ub3c4 \ub098\ud0c0\ub0b4\uc90d\ub2c8\ub2e4. $ nvtop nvtop \uc2e4\ud589 \uacb0\uacfc nvtop \uc124\uce58 \u00b6 Note nvtop \ud504\ub85c\uadf8\ub7a8\uc758 \uc124\uce58\ubc95\uc740 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0 \ub098\uc640\uc788\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c \uc124\uba85\ud574\ub4dc\ub9bd\ub2c8\ub2e4. nvtop \ud504\ub85c\uadf8\ub7a8\uc758 \uc124\uce58\ub294 \uc774\uacf3 \uc5d0 \ub4e4\uc5b4\uac00\uc11c \uc2dc\uc2a4\ud15c\uc5d0 \ub9de\ub294 \uc124\uce58\ubc95\uc744 \ub530\ub974\uba74 \ub429\ub2c8\ub2e4.","title":"CLI"},{"location":"dev/cli/cli/#alias","text":"\uba3c\uc800 \ub2e4\uc74c\uacfc \uac19\uc774 alias \ub97c \uc9c0\uc815\ud558\uba74 \uba85\ub839\uc5b4 \uc785\ub825 \uc2dc\uac04\uc744 \ud68d\uae30\uc801\uc73c\ub85c \uc904\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. alias command t tmux v vim c clear cs cd .. ls lsd --icon never cl clear;ls l ls la ls -a ll ls -la lt ls --tree g git q exit Info alias t=tmux \uba85\ub839\uc5b4\ub85c alias \ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc744 \ub9e4\ubc88 \ub85c\uadf8\uc778\ud560 \ub54c\ub9c8\ub2e4 \uc785\ub825\ud558\uae30 \uadc0\ucc2e\uae30 \ub54c\ubb38\uc5d0 zsh \uc258 \uc0ac\uc6a9 \uc720\uc800\ub77c\uba74 .zshrc \ub610\ub294 .zsh_aliases \uc5d0 alias t = tmux alias v = vim alias c = clear alias cs = 'cd ..' alias ls = 'lsd --icon never' alias cl = 'clear;ls' alias l = 'ls' alias la = 'ls -a' alias ll = 'ls -la' alias lt = 'ls --tree' alias g = 'git' alias q = 'exix' \uc744 \uc785\ub825\ud574\ub450\uba74 \ub429\ub2c8\ub2e4. bash \uc258 \uc0ac\uc6a9 \uc720\uc800\ub77c\uba74 .bashrc \ub610\ub294 .bash_aliases \uc5d0 \uc785\ub825\ud558\uba74 \ub418\ub294 \uac83\uc785\ub2c8\ub2e4.","title":"alias"},{"location":"dev/cli/cli/#git","text":"git \uc740 \uc9c0\uc6d0\ud558\ub294 \uc9c0\ub2a5\uc774 \ud558\ub3c4 \ub9ce\ub2e4\ubcf4\ub2c8 \ub0b4\ubd80\uc801\uc73c\ub85c alias \ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uac00\ub839 git commit -m \uc774\ub77c\ub294 \uba85\ub839\uc5b4\ub97c \ub9e4\ubc88 \uc785\ub825\ud558\uae30\uac00 \ub108\ubb34 \uadc0\ucc2e\uc544\uc11c \uacac\ub51c \uc218\uac00 \uc5c6\uc73c\ub2c8\uae4c \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uc5ec alias \ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. $ g config --global alias.cm \"commit -m\" Info alias \uc5d0\uc11c alias g=git \uc73c\ub85c git \uc758 \uc5d0\uc77c\ub9ac\uc5b4\uc2a4 g \ub97c \uc124\uc815\ud588\uc5c8\uae30 \ub54c\ubb38\uc5d0 git \uc774 \uc544\ub2cc g \ub9cc \uc785\ub825\ud574\ub3c4 \ub429\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc774\uc81c\ubd80\ud130 \uc6b0\ub9ac\ub294 git commit -m \uc774 \uc544\ub2c8\ub77c g cm \ub9cc \uc785\ub825\ud574\ub3c4 \ub418\ub294 \uac83\uc785\ub2c8\ub2e4. \uc800\uc758 dotfiles \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc758 .tmux.conf \uc5d0\ub294 \uc774\ub7f0 git \uc758 alias \ub4e4\uc774 \uc774\ubbf8 \uc124\uc815\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \ud30c\uc77c\uc744 ~/.gitconfig \uc5d0 \uc704\uce58\uc2dc\ud0a4\uae30\ub9cc \ud558\uba74 git alias \ub4e4\uc774 \ub2e8\ubc88\uc5d0 \uc124\uc815\ub429\ub2c8\ub2e4. git \uc758 alias \uac00 \ub9e4\uc6b0 \ub9ce\uc774 \uc124\uc815\ub418\uc5b4 \uc788\uc9c0\ub9cc \uadf8\uc911\uc5d0\uc11c \uc8fc\uc694\ud55c alias \ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. alias \uc6d0\ub798 \uba85\ub839\uc5b4 \uc644\uc131\ub41c \uba85\ub839\uc5b4 \uc758\ubbf8 i init g i git \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uad00\ub9ac\ub97c \uc2dc\uc791\ud558\ub3c4\ub85d \ud55c\ub2e4. s status g s \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc0c1\ud0dc\ub97c \ubcf8\ub2e4. sb status -s -b g sb \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc0c1\ud0dc\ub97c \uac04\ub7b5\ud558\uac8c \ubcf8\ub2e4. cm commit -m g cm \"<MESSAGE>\" \ucee4\ubc0b\uc744 \ud55c\ub2e4. a add --all g a \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub41c \ud30c\uc77c\uc744 \uc2a4\ud14c\uc774\uc9d5 \ud55c\ub2e4. l log --oneline g l git \uc758 \ucee4\ubc0b \uae30\ub85d\uc744 \ud55c\uc904\uc529 \ucd9c\ub825\ud55c\ub2e4. lg log --oneline --graph --decorate g lg git \uc758 \ucee4\ubc0b \uae30\ub85d\uc744 \uadf8\ub798\ud504\ub85c \ucd9c\ub825\ud55c\ub2e4. rao remote add origin g rao <REMOTE> \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ucd94\uac00\ud55c\ub2e4. cl clone g cl <URL> \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ubcf5\uc81c\ud574 \uc628\ub2e4. psom push origin master g psom \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub85c \ud478\uc26c\ud55c\ub2e4. plom pull origin master g plom \uc6d0\uaca9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uac00\uc838\uc628\ub2e4. b branch g b <BRANCH> \ube0c\ub79c\uce58\ub97c \uc0dd\uc131\ud55c\ub2e4. bd branch -d g bd <BRANCH> \ube0c\ub79c\uce58\ub97c \uc0ad\uc81c\ud55c\ub2e4. m merge g m \uc791\uc5c5\uc774 \uc644\ub8cc\ub41c \ube0c\ub79c\uce58\ub97c \ubcd1\ud569\ud55c\ub2e4. o checkout g o <BRANCH> \ube0c\ub79c\uce58\ub85c \uc774\ub3d9\ud55c\ub2e4. ob checkout -b g ob <BRANCH> \ube0c\ub79c\uce58\ub97c \uc0dd\uc131\ud568\uacfc \ub3d9\uc2dc\uc5d0 \uc774\ub3d9\ud55c\ub2e4. \uc774\ub85c\uc368 git \uc73c\ub85c \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uad00\ub9ac\ud558\ub294 \ub808\ud37c\ud1a0\ub9ac\uc778 \ub2e4\uc74c\uc758 \uba85\ub839\uc5b4\ub4e4\uc744 \ud68d\uae30\uc801\uc73c\ub85c \ub2e8\ucd95\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. $ mkdir git-test $ cd git-test $ git init $ touch test.txt $ git status $ git add test.txt $ git status $ git commit -m \"my first commit\" $ git status $ echo \"My test memo\" > test.txt $ cat test.txt My test memo $ git add . $ git commit -m \"My memo file\" $ git log $ git remote add origin https://github.com/<USER>/git-test $ git push -u origin master $ cd $ git clone https://github.com/<USER>/git-test git-test-remote $ cd git-test-remote $ echo \"very important message\" > test.txt $ git add . $ git commit -m \"very important file..\" $ git push origin master $ cd ~/git-test $ cat test.txt $ git pull origin master $ cat test.txt \uc704\uc640 \uac19\uc740 \uba85\ub839\uc5b4\ub97c alias \ub85c \ub2e8\ucd95\ud574\uc11c \ub2e4\uc2dc \uc785\ub825\ud574\ubcf4 \uba85\ub839\uc5b4\uac00 \uc815\ub9d0 \ube60\ub974\uac8c \uc785\ub825\ub429\ub2c8\ub2e4. $ cd $ mkdir alias-test $ cd alias-test $ g i $ touch test.txt $ g s $ g a $ g s $ g cm \"init\" $ g s $ echo \"My test memo\" > test.txt $ bat test.txt $ g a $ g cm \"memo\" $ g l $ g rao https://github.com/<USER>/alias-test $ g psom $ cd $ g cl https://github.com/<USER>/alias-test alias-test-remote $ cd alias-test-remote $ echo \"message\" > test.txt $ g a $ g cm \"important file\" $ g psom $ cd ~/alias-test $ bat test.txt $ g plom $ bat test.txt \uc774\ub85c\uc368 \ub2e4\uc74c\uacfc \uac19\uc774 213 \ud0c0\ub97c \uccd0\uc57c \ud588\ub358 \uac83\uc744 79 \ud0c0\ub9cc \uce60 \uc218 \uc788\ub3c4\ub85d \ub300\ud3ed \uc808\uc57d\uc744 \ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc6d0\ub798 \uba85\ub839\uc5b4 alias \uba85\ub839\uc5b4 git init g i git status g s git add g a git status g s git commit -m g cm git status g s git add . g a git commit -m g cm git log g l git remote add g rao git push -u origin master g psom git clone g cl git add . g a git commit g cm git push origin master g psom git pull origin master g plom \ucd1d\ud569 213 \uac1c \ucd1d\ud569 79 \uac1c Tip \uc774\ub7ec\ud55c git \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uad00\ub9ac \ud328\ud134\uc740 \ucf54\ub529\uc744 \ud560 \ub54c\ub9c8\ub2e4 \ubc18\ubcf5\ub418\ub294\ub370, \uc774 \ud328\ud134\uc744 \uac1c\ubc1c\uc790\ub85c \uc0b4\uc544\uac00\uba74\uc11c \uc801\uac8c \uc7a1\uc544\uc11c 10000 \ubc88 \ubc18\ubcf5\ud55c\ub2e4\uace0 \ud55c\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc740 10000 * 213 = 2\ubc31 13\ub9cc \ubc88 \uce60 \uac83\uc744 10000 * 79 = 79\ub9cc \ub9cc\ucce4\uc2b5\ub2c8\ub2e4. \uc989, \ub611\uac19\uc740 \uc77c\uc744 \ud558\ub294\ub370 134\ub9cc \ubc88\uc758 \ud0c0\uc790\ub97c \uc548 \uce5c\uac83\uc785\ub2c8\ub2e4!","title":"\ub354 \ube68\ub77c\uc9c4 git"},{"location":"dev/cli/cli/#cli","text":"","title":"CLI \uc5c5\uadf8\ub808\uc774\ub4dc"},{"location":"dev/cli/cli/#ls-lsd","text":"lsd \ub294 \uad6c\uc2dd\uc778 ls \uba85\ub839\uc5b4\ub97c \ucd5c\uc2e0\uc2dd\uc73c\ub85c \ub300\uccb4\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. ls \uc640 lsd \ub97c \ube44\uad50\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. lsd \ub294 \uceec\ub7ec\ud480\ud558\uac8c \ucd9c\ub825\uacb0\uacfc\ub97c \ubcf4\uc5ec\uc918\uc11c \uac00\ub3c5\uc131\uc774 \ud6e8\uc52c \uc62c\ub824\uc90d\ub2c8\ub2e4. Info lsd --icon never \uc5d0\uc11c --icon never \uc635\uc158\uc740 \uc544\uc774\ucf58\uc744 \ucd9c\ub825\ud558\uc9c0 \uc54a\ub294 \uc635\uc158\uc785\ub2c8\ub2e4. \uc774\ub294 \uc21c\uc218 CLI \ud658\uacbd\uc5d0\uc11c \ud544\uc694\ud55c \uc635\uc158\uc774\uae30 \ub54c\ubb38\uc5d0 \ub9cc\uc57d GUI \ud658\uacbd( macOS \uc774\ub098 \ub9ac\ub205\uc2a4 \ub370\uc2a4\ud06c\ud0d1 \ud658\uacbd)\uc5d0\uc11c \uc544\uc774\ucf58\uc744 \uc124\uce58\ud558\uace0 --icon never \uc635\uc158\uc744 \uc81c\uac70\ud558\uace0 lsd \ub97c \uc2e4\ud589\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc544\uc774\ucf58\ub3c4 \ud568\uaed8 \ucd9c\ub825\ub418\uc5b4 \uac00\ub3c5\uc131\uc774 \ud6e8\uc52c \uc62c\ub77c\uac00\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"ls \u279c lsd"},{"location":"dev/cli/cli/#cat-bat","text":"bat \ub294 \uad6c\uc2dd\uc778 cat \uba85\ub839\uc5b4\ub97c \ucd5c\uc2e0\uc2dd\uc73c\ub85c \ub300\uccb4\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \uadf8\ub7fc cat \uc640 bat \ub97c \ube44\uad50\ud574\ubd05\uc2dc\ub2e4. cat \uc774 \ub2e4\uc74c\uacfc \uac19\uc774 \ubc0b\ubc0b\ud558\uac8c \ucd9c\ub825\ub418\ub294 \ubc18\uba74, bat \uc774 \ub2e4\uc74c\uacfc \uac19\uc774 \uceec\ub7ec\ud480\ud558\uac8c \ucd9c\ub825\ub429\ub2c8\ub2e4. Tip bat \uc740 more \uc774\ub098 less \ucc98\ub7fc e \uc640 y \ub97c \ub204\ub974\uba74 \uc704\uc544\ub798\ub85c \uc6c0\uc9c1\uc77c \uc218 \uc788\uace0 Spacebar \uc640 u \ub97c \ub204\ub974\uba74 \ud398\uc774\uc9c0 \ub2e8\uc704\ub85c \uc704\uc544\ub798\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\uc73c\uba70 vim \ucc98\ub7fc / \ub85c \ud2b9\uc815 \ubb38\uc790\uc5f4\uc744 \uac80\uc0c9\ud560 \uc218 \uc788\uace0 q \ub85c \uc885\ub8cc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"cat \u279c bat"},{"location":"dev/cli/cli/#find-fd","text":"fd \ub294 \uad6c\uc2dd\uc778 find \uba85\ub839\uc5b4\ub97c \ucd5c\uc2e0\uc2dd\uc73c\ub85c \ub300\uccb4\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. fd \ub294 find \ubcf4\ub2e4 5\ubc30 \uc815\ub3c4 \ube60\ub974\uace0 \uc880 \ub354 \uc720\uc800\ub4e4\uc774 \uc0ac\uc6a9\ud558\uae30 \ud3b8\ud558\ub3c4\ub85d \uc778\ud130\ud398\uc774\uc2a4\uac00 \ub300\ud3ed \uac1c\uc120\ub41c \ubaa8\ub358\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. fd \ub294 find \uc640 \uc0c1\uc138\ud558\uac8c \ube44\uad50\ud558\uae30\ubcf4\ub2e4 \ub2e4\uc74c\uc758 \uc0ac\uc6a9\uc608\ub97c \uac00\ubccd\uac8c \ud55c\ubc88 \uc0b4\ud3b4\ubcf4\ub294 \uac83\uc73c\ub85c \ub9c8\ubb34\ub9ac\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ubbf8\uc9c0 \ucd9c\ucc98 : https://github.com/sharkdp/fd fd \uc758 \uc0c1\uc138\ud55c \uc124\uba85\uc744 \uc54c\uace0 \uc2f6\ub2e4\uba74 \uacf5\uc2dd \ub808\ud3ec\uc9c0\ud1a0\ub9ac https://github.com/sharkdp/fd \ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694.","title":"find \u279c fd"},{"location":"dev/cli/cli/#top-htop-gotop","text":"top \uba85\ub839\uc5b4\ub294 \uc2dc\uc2a4\ud15c\uc758 \ub9ac\uc18c\uc2a4 \uc0c1\ud0dc(RAM, CPU \ub4f1) \uc744 \ucd9c\ub825\ud574\uc8fc\ub294 \uc88b\uc740 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \uae30\uc874\uc758 top \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc57d\uac04\uc740 \ubc0b\ubc0b\ud558\uac8c \uc2dc\uc2a4\ud15c\uc758 \uc0c1\ud0dc\ub97c \ucd9c\ub825\ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc htop \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc0c9\uae54\ub3c4 \uce60\ud558\uace0 \uba54\ubaa8\ub9ac\uc640 CPU \uc0c1\ud0dc\ub97c \ud578\ub4dc\ud3f0 \ubc30\ud130\ub9ac \ubc14\ucc98\ub7fc \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9\uc73c\ub85c gotop \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc644\ubcbd\ud55c \uadf8\ub798\ud504\ub85c \uc2dc\uc2a4\ud15c\uc758 \uc0c1\ud0dc\ub97c \uc9c1\uad00\uc801\uc73c\ub85c \ucd9c\ub825\ud574\uc90d\ub2c8\ub2e4. Note \uc2dc\uc2a4\ud15c \uc0c1\ud0dc\ub97c \ucd9c\ub825\ud574\uc904 \uc218 \uc788\ub294 \uc720\ud2f8\ub9ac\ud2f0\ub294 \uac1c\uc778\uc801\uc778 \uc120\ud638\uc5d0 \ub530\ub77c \uc88b\uace0 \ub098\uc068\uc774 \uacb0\uc815\ub418\ubbc0\ub85c \ud655\uc2e4\ud788 \uc5b4\ub5a4 \uac8c \uc88b\ub2e4\ub77c\uace0 \ub9d0\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uadf8\ub0e5 \uac1c\uc778\uc801\uc73c\ub85c \ub354 \ub098\uc740 \uac83 \uac19\uc740 CLI \ub97c \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4. \uc804 \uac1c\uc778\uc801\uc73c\ub85c gotop \uc774 \uc9c1\uad00\uc801\uc774\uace0 \uc88b\ub354\ub77c\uad6c\uc694.","title":"top \u279c htop \u279c gotop"},{"location":"dev/cli/cli/#man-tldr","text":"man \uc740 \uba85\ub839\uc5b4\uc758 \uc0ac\uc6a9\ubc95\uc744 \ucd9c\ub825\ud558\ub294 \ub9e4\uc6b0 \uc88b\uc740 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc man \uc758 \ud55c \uac00\uc9c0 \ub2e8\uc810\uc740 \uadf8 \uc0ac\uc6a9\ubc95\uc774 \ub108\ubb34 \ubc29\ub300\ud558\uace0 \uc7a5\ud669\ud558\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c \ud504\ub85c\uadf8\ub7a8\uc758 \ud575\uc2ec \uc0ac\uc6a9\ubc95\uc744 \uc27d\uace0 \ube60\ub974\uac8c \uc54c\uace0 \uc2f6\uc740 \uc0ac\uc6a9\uc790\ub4e4\uc740 \uadf8 \ubc29\ub300\ud55c \uc0ac\uc6a9\ubc95\uc5d0\uc11c \uc790\uc2e0\uc774 \uc6d0\ud558\ub294 \ud575\uc2ec \uc0ac\uc6a9\ubc95\uc744 \uc774\ub9ac\uc800\ub9ac \ucc3e\uace0 \uc788\uc5b4\uc57c\ub9cc \ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc tldr \uc740 man \ucc98\ub7fc \ubc29\ub300\ud55c \uc0ac\uc6a9\ubc95\uc744 \ubcf4\uc5ec\uc8fc\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ub9e4\uc6b0 \uac04\ub2e8\ud55c \ud575\uc2ec \uc0ac\uc6a9\ubc95\ub9cc\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. tldr \uc740 \uc0ac\uc6a9\uc790\ub4e4\uc758 \uc8fc\ub3c4\ub85c \ub9cc\ub4e4\uc5b4\uc838\uc11c \uac1c\ubc1c\uc790\ub4e4\uc774 \uacbd\ud5d8\uc801\uc73c\ub85c \"\uc774\uac8c \uac00\uc7a5 \ud575\uc2ec\uc801\uc778 \uc0ac\uc6a9\ubc95\uc774\ub2e4!\" \ub77c\ub294 \uc0ac\uc6a9\ubc95\ub9cc \uac04\ub2e8\ud558\uac8c \ucd9c\ub825\ud569\ub2c8\ub2e4. man \uc73c\ub85c tar \uba85\ub839\uc5b4\uc758 \uc124\uba85\uc744 \ubcf4\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uba74 \ub429\ub2c8\ub2e4. $ man tar \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 tar \uc758 \ubaa8\ub4e0 \uc0ac\uc6a9\ubc95 \uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4. \uc774\ub7f0... \ud558\uc9c0\ub9cc man \uc73c\ub85c tar \ub97c \ubcf4\ub2c8 \uc124\uba85\uc774 \ub9e4\uc6b0 \ubc29\ub300\ud558\uace0 \ub9e4\uc6b0 \uc5f0\uc5ed\uc801\uc73c\ub85c, \uadf8\ub7ec\ub2c8\uae4c \uc57d\uac04\uc740 \ucd94\uc0c1\uc801\uc73c\ub85c \uc124\uba85\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc774\uc81c tldr \ub85c tar \uc758 \uc0ac\uc6a9\ubc95\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. $ tldr tar \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uac1c\ubc1c\uc790\ub4e4\uc774 \uc790\uc8fc \uc0ac\uc6a9\ud558\ub294 tar \uc758 \ud575\uc2ec \uae30\ub2a5\ub4e4\uc774 \uc57d\uac04 \uadc0\ub0a9\uc801\uc73c\ub85c, \uc989 \uc0c1\ub2f9\ud788 \uad6c\uccb4\uc801\uc73c\ub85c \uc124\uba85\ub41c \uc0ac\uc6a9\ubc95\uc774 \ucd9c\ub825\ub429\ub2c8\ub2e4.","title":"man \u279c tldr"},{"location":"dev/cli/cli/#python-bpython","text":"\uc774\ubc88\uc5d0\ub294 \ud30c\uc774\uc36c \uc778\ud130\ud504\ub9ac\ud130 python \uc5d0 \ucf54\ub4dc \ud558\uc774\ub77c\uc774\ud305\uacfc \uc790\ub3d9\uc644\uc131 \uae30\ub2a5 \ub4f1\uc758 \ud3b8\ub9ac\ud55c \uae30\ub2a5\uc774 \ucd94\uac00\ub41c bpython \uc785\ub2c8\ub2e4. \uae30\uc874\uc758 \ud30c\uc774\uc36c \uc778\ud130\ud504\ub9ac\ud130\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc2e4\ud589\ub42c\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc bpython \uc744 \uc0ac\uc6a9\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc \ud558\uc774\ub77c\uc774\ud305, \uc790\ub3d9 \uc644\uc131, \ud568\uc218 \ucd94\ucc9c \uae30\ub2a5, \uc790\ub3d9 \uc778\ub374\ud2b8 \ub4f1\uc758 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud76c\ubbf8\ud55c \uae00\uc528\ub85c \uc790\ub3d9 \uc644\uc131 \ucd94\ucc9c \uae30\ub2a5\uc774 \ubc1c\ub3d9\ub418\uba74 \ubc29\ud5a5\ud0a4 \u2192 \ub97c \ub20c\ub7ec\uc11c \uc790\ub3d9\uc644\uc131\uc744 \uc2dc\ucf1c\ubcf4\uc138\uc694.","title":"python \u279c bpython"},{"location":"dev/cli/cli/#nvidia-smi-nvtop","text":"WICWIU \ub97c \uac1c\ubc1c\ud558\uace0 \ub514\ubc84\uae45\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud604\uc7ac GPU \uc0c1\ud669\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud574\uc57c \ud569\ub2c8\ub2e4. GPU \uac00 \ub108\ubb34 \ub35c \uc4f0\uc774\uace0 \uc788\ub294\uc9c0, \uc544\ub2c8\uba74 \ub108\ubb34 \uacfc\ud558\uac8c \uc4f0\uc5ec\uc9c0\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud574\uc57c \ud558\uace0 \ub2e4\ub978 \ub204\uad70\uac00 \uc4f0\uace0 \uc788\ub294 GPU \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc774\ub54c \ubcf4\ud1b5\uc740 nvidia-smi \ud504\ub85c\uadf8\ub7a8\uc744 \uc0ac\uc6a9\ud558\uc5ec GPU \uc0c1\ud669\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc nvida-smi \ub294 GPU \uc0c1\ud669\uc744 \ud55c \ubc88 \ucd9c\ub825\ud558\uace0 \ub05d\ub098\ubc84\ub9ac\uae30 \ub54c\ubb38\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 watch \ud504\ub85c\uadf8\ub7a8\uacfc \ud568\uaed8 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. $ watch -n 1 nvida-smi # 1\ucd08\uc5d0 \ud55c\ubc88 nvidia-smi \ub97c \uc2e4\ud589\ud55c\ub2e4. nvida-smi \uc2e4\ud589 \uacb0\uacfc \ud558\uc9c0\ub9cc nvtop \uc740 GPU \uc0c1\ud0dc\ub97c \uadf8\ub798\ud504 \ud615\ud0dc\ub85c \ub098\ud0c0\ub0b4\uc904 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc5b4\ub5a4 \uc720\uc800\uac00 GPU \ub97c \uc0ac\uc6a9\ud558\ub294 \ud504\ub85c\uc138\uc2a4\ub97c \uc2e4\ud589\ud588\ub294\uc9c0\ub3c4 \ub098\ud0c0\ub0b4\uc90d\ub2c8\ub2e4. $ nvtop nvtop \uc2e4\ud589 \uacb0\uacfc","title":"nvidia-smi \u279c nvtop"},{"location":"dev/cli/cli/#nvtop","text":"Note nvtop \ud504\ub85c\uadf8\ub7a8\uc758 \uc124\uce58\ubc95\uc740 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0 \ub098\uc640\uc788\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c \uc124\uba85\ud574\ub4dc\ub9bd\ub2c8\ub2e4. nvtop \ud504\ub85c\uadf8\ub7a8\uc758 \uc124\uce58\ub294 \uc774\uacf3 \uc5d0 \ub4e4\uc5b4\uac00\uc11c \uc2dc\uc2a4\ud15c\uc5d0 \ub9de\ub294 \uc124\uce58\ubc95\uc744 \ub530\ub974\uba74 \ub429\ub2c8\ub2e4.","title":"nvtop \uc124\uce58"},{"location":"dev/cli/tmux/","text":"tmux \ub85c \ud130\ubbf8\ub110 \ud3b8\ud558\uac8c \uc0ac\uc6a9\ud558\uae30 \u00b6 \uc9c0\uae08\uae4c\uc9c0 \ud568\uaed8 \uc0b4\ud3b4\ubcf4\uc558\ub358 CLI \ud504\ub85c\uadf8\ub7a8\ub4e4\ub85c Linux \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub3c4 \ud3b8\ud558\uace0 \ube60\ub974\uac8c \uac1c\ubc1c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uac70\uc758 \ubaa8\ub4e0 \uac1c\ubc1c \uc0c1\ud669\uc5d0\uc11c \ud130\ubbf8\ub110 \ucc3d \ud558\ub098\ub294 \ubd80\uc871\ud569\ub2c8\ub2e4. \uc774\ub54c tmux \uac00 \ud544\uc694\ud569\ub2c8\ub2e4. tmux \uc0ac\uc6a9\ubc95\ub3c4 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0 \uc790\uc138\ud788 \uc368\ub193\uc558\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c\ub294 tmux \ub97c \uc0ac\uc6a9\ud558\uba74, \ub610 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\ud558\uba74 \uc5bc\ub9c8\ub098 \uc0dd\uc0b0\uc131\uc774 \ud5a5\uc0c1\ub418\ub294\uc9c0\ub9cc \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub354 \ube68\ub77c\uc9c4 tmux ! \u00b6 tmux \uc5c5\uadf8\ub808\uc774\ub4dc\ub294 \uc0ac\uc2e4 \uc2e4\uc81c\uc801\uc778 \uc5c5\uadf8\ub808\uc774\ub4dc\uac00 \uc544\ub2c8\ub77c tmux \uc758 \uc124\uc815\uc744 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\ud560 \uc218 \uc788\ub294 ~/.tmux.conf \ud30c\uc77c\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ub354 \ud3b8\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uc815\uc744 \uc870\uc791\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c\ub294 \uc81c\uac00 \uc124\uc815\ud55c ~/.tmux.conf \ud30c\uc77c\uc744 \uc911\uc2ec\uc73c\ub85c tmux \ub97c \uc0ac\uc6a9\ud558\uae30\uac00 \uc5bc\ub9c8\ub098 \ud3b8\ud574\uc84c\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub354 \ube68\ub77c\uc9c4 alias \u00b6 \uba3c\uc800 tmux \ub77c\ub294 \uba85\ub839\uc5b4\ub97c \ub9e4\ubc88 \uce58\ub294 \uac83\uc740 \ub108\ubb34 \ube44\ud6a8\uc728\uc801\uc785\ub2c8\ub2e4. \ubb34\ub824 4 \ubc88\uc774\ub098 \ud0a4\ubcf4\ub4dc\ub97c \uccd0\uc57c\ud558\uae30 \ub54c\ubb38\uc774\uc8e0. \uadf8\ub798\uc11c ~/.zsh_aliases \uc5d0 alias t = tmux \ub97c \ucd94\uac00\ud558\uc5ec t \ub9cc \ub20c\ub7ec\ub3c4 tmux \uac00 \ucf1c\uc9c0\ub3c4\ub85d \ud569\ub2c8\ub2e4. Note bash \uc258 \uc720\uc800\ub294 ~/.bashrc \ud30c\uc77c\uc5d0 \ucd94\uac00\ud558\uba74 \ub429\ub2c8\ub2e4. \uc774\uc81c \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c tmux \ub97c \ucf30\ub2e4\uac00 \ub04c \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example $ t $ q \ub354 \uc774\ubed0\uc9c4 \ud14c\ub9c8 \u00b6 tmux \uc758 \uc624\ub9ac\uc9c0\ub110 \ud14c\ub9c8\ub294 \ub108\ubb34 \uc548\uc774\uc058\ub124\uc694. \uadf8\ub798\uc11c \uc880 \ub354 \uac00\ub3c5\uc131\ub3c4 \ub192\uc544\uc9c0\uace0 \ubcf4\uae30\uc5d0\ub3c4 \uc88b\uace0 \uc2dc\uac04\ub3c4 \uc54c \uc218 \uc788\ub3c4\ub85d \ub2e4\uc74c\uacfc \uac19\uc740 \uc124\uc815\uc73c\ub85c \ud14c\ub9c8\ub97c \uace0\uce69\ub2c8\ub2e4. set -g status-bg default set -g status-fg colour137 set -g status-style dim set -g status-left '#[fg=colour51,bg=colour0,bold] %R ' # set -g status-right '#[fg=colour51,bg=colour0,bold] #(uname -r) ' set -g status-right '#[fg=colour51,bg=colour0,bold] #(osname) ' set -g status-right-length 100 setw -g window-status-current-style bg = colour14,fg = colour00,bold setw -g window-status-current-format ' #I#[fg=colour0] #[fg=colour0]#W#[fg=colour0] ' setw -g window-status-style fg = colour49,none,bg = colour00 setw -g window-status-format '#I #W ' setw -g window-status-bell-style fg = colour255,bold,bg = colour1 set -g message-style fg = colour232,bold,bg = colour16 \uc774 \uc124\uc815\ub4e4\uc744 ~/.tmux.conf \uc5d0 \ub123\uc73c\uba74 \ub429\ub2c8\ub2e4. Example \ub2e4\uc74c\uc740 \ud14c\ub9c8\ub97c \uc124\uc815\ud558\uae30 \uc804\uc758 \uc624\ub9ac\uc9c0\ub110 tmux \uc758 \ud14c\ub9c8\uc785\ub2c8\ub2e4. \uc0c1\ud0dc\ubc14\uac00 \uc544\ub798\ucabd\uc5d0 \uc788\uace0, \uc0c8 \ud654\uba74\uc744 \ub9cc\ub4e4\uc5c8\uc9c0\ub9cc \ud55c \ub208\uc5d0 \ub4e4\uc5b4\uc624\uc9c0\uac00 \uc54a\uc2b5\ub2c8\ub2e4. \uc624\ub978\ucabd\uc5d0 \uc2dc\uac04\ub3c4 \ud45c\uc2dc\ub418\ub294\ub370 \uc5ed\uc2dc \ud55c \ub208\uc5d0 \ub4e4\uc5b4\uc624\uc9c0 \uc54a\ub124\uc694. \ud558\uc9c0\ub9cc \ub2e4\uc74c\uacfc \uac19\uc774 \ud14c\ub9c8\ub97c \ubc14\uafd4\uc11c \uac00\ub3c5\uc131\uc744 \ud655\uc5f0\ud788 \ub192\ud614\uc2b5\ub2c8\ub2e4. \uc0c1\ud0dc\ubc14\uac00 \uc704\ub85c \uc62c\ub77c\uac14\uace0, \uc67c\ucabd\uc5d0\ub294 \uc2dc\uac04\uc774 \uac04\ub7b5\ud558\uc9c0\ub9cc \ub208\uc5d0 \ud655 \ub4e4\uc5b4\uc624\uac8c \ubcf4\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 0 \ubc88\uc9f8 \ud654\uba74\uc5d0\ub294 zsh \uc774 \ucf1c\uc838\uc788\uace0, 1 \ubc88\uc9f8 \ud654\uba74\uc5d0\ub294 vim \uc774 \ucf1c\uc838\uc788\ub294\ub370 \ud604\uc7ac \uc0c1\uc8fc\ud558\uace0 \uc788\ub294 \ud654\uba74\uc5d0 \ud558\uc774\ub77c\uc774\ud305\uc774 \ub418\uc11c \uac00\ub3c5\uc131\uc774 \ub9e4\uc6b0 \ub192\uc544\uc9d1\ub2c8\ub2e4. \uc624\ub978\ucabd\uc5d0\ub294 \uc6b4\uc601\uccb4\uc81c\uc758 \uc774\ub984\ub3c4 \ub098\ud0c0\ub0a9\ub2c8\ub2e4. \ub354 \ube68\ub77c\uc9c4 \uba54\ud0c0 \ud0a4 \u00b6 \uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 Meta \ud0a4 Ctrl + b Ctrl + a tmux \ub294 Meta \ud0a4 \ub97c \uc0ac\uc6a9\ud558\uc5ec \uba85\ub839\uc5b4\ub4e4\uc744 \uc815\uc758\ud558\uae30 \ub54c\ubb38\uc5d0 Ctrl + b \ub97c \uc785\ub825\ud588\uc5b4\uc57c \ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Ctrl \uc640 b \ub294 \uac70\ub9ac\uac00 \ub108\ubb34 \uba40\uc5b4\uc11c \uc190\uc774 \uc544\ud515\ub2c8\ub2e4. \uadf8\ub798\uc11c ~/.tmux.conf \uc5d0 unbind C-b set-option -g prefix C-a bind-key C-a send-prefix \ub97c \ucd94\uac00\ud558\uc5ec \uac70\ub9ac\uac00 \uac00\uae4c\uc6b4 Ctrl + a \ub85c Meta \ud0a4\ub97c \uc7ac\uc124\uc815\ud569\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc758 \ub3c4\ucee4 \ucee8\ud14c\uc774\ub108\uc5d0\ub294 \uc774\ubbf8 \uc124\uc815 \ub418\uc5b4\uc788\uc73c\ub2c8 \uac71\uc815\ud558\uc9c0 \ub9c8\uc138\uc694. Info \uc55e\uc73c\ub85c \uc0b4\ud3b4\ubcfc tmux \uc5c5\uadf8\ub808\uc774\ub4dc\ub4e4\ub3c4 \uc704\uc640 \uac19\uc740 \uc124\uc815 \ud30c\uc77c\uc744 \uc870\uc791\ud558\ub294 \uac83\uc73c\ub85c \uc774\ub8e8\uc5b4\uc84c\uc9c0\ub9cc, \uc77c\uc77c\uc774 \uc5b4\ub5a4 \uc124\uc815\uc73c\ub85c tmux \uac00 \uc5c5\uadf8\ub808\uc774\ub4dc\ub418\uc5c8\ub294\uc9c0 \uc0c1\uc138\ud788 \uc124\uba85\ud558\uc9c0\ub294 \uc54a\uaca0\uc2b5\ub2c8\ub2e4. .tmux.conf \ub97c \ubcf4\uc2dc\ub824\uba74 .tmux.conf \ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694. \ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \ubd84\ud560 \u00b6 \uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \ud130\ubbf8\ub110 \uc218\uc9c1 \ubd84\ud560 Meta + % Meta + \u29f5 \ud130\ubbf8\ub110 \uc218\ud3c9 \ubd84\ud560 Meta + \" Meta + - \ub2e4\uc74c \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 Meta + o Alt + o (\uc22b\uc790) \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 Meta + q + (\uc22b\uc790) tmux \uc5d0\uc11c \ud130\ubbf8\ub110\uc744 \uc218\ud3c9\uc73c\ub85c \ubd84\ud560\ud558\ub824\uba74 \uae30\uc874\uc758 \uba85\ub839\uc5b4 Meta + \" \ub97c \uc785\ub825\ud574\uc57c \ud558\ub294\ub370 \uc774\uac74 \uc678\uc6b0\uae30\uac00 \ub108\ubb34 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc678\uc6b0\uae30 \uc27d\ub3c4\ub85d \uc218\ud3c9\uc73c\ub85c \ub098\ub208\ub2e4\ub294 \uc758\ubbf8\uc5d0\uc11c Meta + - \ub85c \uc9c1\uad00\uc801\uc73c\ub85c \ubc14\uafc9\ub2c8\ub2e4. \ub610\ud55c \ud130\ubbf8\ub110\uc744 \uc218\uc9c1\uc73c\ub85c \ubd84\ud560\ud558\ub824\uba74 \uae30\uc874\uc758 \uba85\ub839\uc5b4 Meta + % \ub97c \uc785\ub825\ud574\uc57c \ud558\ub294\ub370 \uc774\uac83 \uc5ed\uc2dc \uc678\uc6b0\uae30\uac00 \ub108\ubb34 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc678\uc6b0\uae30 \uc27d\ub3c4\ub85d \uc218\uc9c1\uc73c\ub85c \ub098\ub208\ub2e4\ub294 \uc758\ubbf8\uc5d0\uc11c \ubc31\uc2ac\ub798\uc26c\ub85c \ubc14\uafd4\uc11c Meta + \u29f5 \ub85c \uc9c1\uad00\uc801\uc778 \ub2e8\ucd95\ud0a4\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub2e4\uc74c \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud558\ub294 \ub2e8\ucd95\ud0a4 Meta + o \ub294 \uc2e4\uc81c\ub85c ( Ctrl + a ) + o \uc778\ub370, \ub2e4\uc74c \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud558\ub294 \uc791\uc5c5\uc740 \ub9e4\uc6b0 \ub9ce\uc774 \uc77c\uc5b4\ub098\ubbc0\ub85c \ud0a4\ub97c 3 \ubc88\uc774\ub098 \ub20c\ub7ec\uc57c \ud558\ub294 \uac83\uc740 \ub108\ubb34 \ube44\ud6a8\uc728\uc801\uc774\uc5b4\uc11c \ucc38\uc744 \uc218\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c Alt + o \ub85c \ubc14\uafc9\ub2c8\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud130\ubbf8\ub110\uc744 \uc218\uc9c1, \uc218\ud3c9\uc73c\ub85c \uc5ec\ub7ec\ubc88 \ubd84\ud560\ud574\ubcf4\uace0 Alt \ub97c \uacc4\uc18d \ub204\ub978 \ucc44\ub85c o \ub97c \ub20c\ub7ec\uc11c \ud130\ubbf8\ub110\uc744 \uc774\ub3d9\ud574\ubcf4\uc138\uc694. \ud130\ubbf8\ub110 \uc774\ub3d9\uc774 \uc815\ub9d0 \ube68\ub77c\uc84c\uc2b5\ub2c8\ub2e4. \ub354 \ube68\ub77c\uc9c4 \ud654\uba74 \uc0dd\uc131 \u00b6 \uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ud654\uba74 \uc0dd\uc131 Meta + c Alt + c \ub2e4\uc74c \ud654\uba74\uc73c\ub85c \uc774\ub3d9 Meta + n Alt + n \uc774\uc804 \ud654\uba74\uc73c\ub85c \uc774\ub3d9 Meta + p Alt + p \uc0c8\ub85c\uc6b4 \ud654\uba74\uc744 \uc0dd\uc131\ud558\uace0 \ud654\uba74\uc744 \ub118\uae30\ub294 \uc77c\ub3c4 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud558\uc5ec Meta \ud0a4 \ub300\uc2e0 Alt \ub97c \uc0ac\uc6a9\ud569\uc2dc\ub2e4. \uba54\ud0c0\ud0a4\ub97c Alt \ud0a4\ub85c \ubc14\uafb8\ub294 \uac83\ub9cc\uc73c\ub85c \uc5bc\ub9c8\ub098 \uc791\uc5c5\uc774 \ube68\ub77c\uc9c0\ub294\uc9c0 \ubcf4\uc138\uc694. Example \ub2e4\uc74c\uacfc \uac19\uc774 Alt \ub97c \uacc4\uc18d \ub204\ub978\ucc44\ub85c c \ub97c \uc5f0\ud0c0\ud574\uc11c \ud654\uba74\uc744 \ub354\uc6b1 \ube60\ub974\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc5ec\ub7ec \ud654\uba74\uc744 \ub9c8\ucc2c\uac00\uc9c0\ub85c Alt \ub97c \uacc4\uc18d \ub204\ub978\ucc44\ub85c n \ub610\ub294 p \ub97c \ub204\ub974\uba74\uc11c \uc774\ub3d9\ud574\ubcf4\uc138\uc694. \ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \uc774\ub3d9 \u00b6 \uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \uc67c\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + h \uc624\ub978\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + l \uc704\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + k \uc544\ub798\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + j \ud130\ubbf8\ub110 \uc774\ub3d9\uc744 Alt + o \ub85c \ub9e4\uc6b0 \ube60\ub974\uac8c \ud560 \uc218 \uc788\uac8c \ub418\uc5c8\uc9c0\ub9cc\uc11c\ub3c4 \ud130\ubbf8\ub110\uc774 \uc5ec\ub7ec\uac1c\ub85c \ub098\ub258\uc5c8\uc744 \ub54c Alt + o \ub85c \ub2e4\uc74c \ud130\ubbf8\ub110\ub85c\ubc16\uc5d0 \uc774\ub3d9\ud560 \uc218 \uc5c6\ub2e4\uba74, \uc815\ud655\ud788 \uc6d0\ud558\ub294 \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub97c \uc704\ud558\uc5ec tmux \ub294 \uc815\ud655\ud788 \uc67c\ucabd, \uc624\ub978\ucabd, \uc704\ucabd, \uc544\ub798\ucabd \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\ub294 \uba85\ub839\uc5b4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uadf8\uac74 \ub108\ubb34 \ubcf5\uc7a1\ud588\uc5c8\uace0 \uadf8\uac8c \ubb50\uc600\ub294\uc9c0 \uc194\uc9c1\ud788 \uae4c\uba39\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8 \ub300\uc2e0 vim \uc5d0\uc11c\uc758 \ucee4\uc11c \uc774\ub3d9\ud0a4\uc600\ub358 h , l , k , j \uc5d0\uc11c \ucc29\uc548\ud558\uc5ec \ud130\ubbf8\ub110 \uc774\ub3d9\uc744 \ub9e4\uc6b0 \uc27d\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud130\ubbf8\ub110\uc744 \uc5ec\ub7ec\uac1c\ub85c \ubd84\ud560\ud558\uace0 Alt \ub97c \ub204\ub978\ucc44\ub85c h , l , k , j \ub97c \ub204\ub974\uba74\uc11c \ud130\ubbf8\ub110\uc744 \uc774\ub3d9\ud574\ubcf4\uc138\uc694. \ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808 \u00b6 \uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc67c\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2190 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc624\ub978\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2192 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc704\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2191 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc544\ub798\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2193 \ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808\uc774\ub77c\uace0 \ud574\ubd10\uc57c \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6b0\uc9c0\ub3c4 \uc54a\uc558\ub294\ub370 \ub77c\uace0 \uc0dd\uac01\ud560 \uc218\ub3c4 \uc788\uaca0\uc9c0\ub9cc, \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808\ud558\ub294 \ubc29\ubc95\uc774 \uc678\uc6b8 \uc218 \uc5c6\uc744 \ub9cc\ud07c \ub108\ubb34 \ubcf5\uc7a1\ud55c \uac83\uc774\uc5b4\uc11c \uc548\uc37c\uc2b5\ub2c8\ub2e4. \uacfc\uac70\uc758 \uc81c\uac00 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \ub108\ubb34\ub108\ubb34 \uc27d\uac8c \uc870\uc808\ud560 \uc218 \uc788\ub3c4\ub85d \uc704\uc640 \uac19\uc774 \uc124\uc815\ud574\ub193\uc558\uc2b5\ub2c8\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud130\ubbf8\ub110 \ub2e8\ucd95\ud0a4 Alt \ub97c \uacc4\uc18d \ub204\ub978 \ucc44\ub85c \u2192 , \u2190 , \u2191 , \u2193 \uc744 \ub20c\ub7ec\uc11c \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \ub108\ubb34\ub098\ub3c4 \uc27d\uac8c \uc870\uc808\ud574\ubcf4\uc138\uc694. tmux \uc0ac\uc6a9 \uc608\uc2dc \u00b6 \ub2e4\uc74c\uc740 tmux \ub97c \ud1b5\ud558\uc5ec nvtop \uacfc gotop \uc73c\ub85c GPU \uc0c1\ud669\uacfc CPU, RAM \uc0c1\ud669\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud558\uba74\uc11c \ub525\ub7ec\ub2dd\uc744 \ub3cc\ub9ac\uace0 \uc788\ub294 \ubaa8\uc2b5\uc785\ub2c8\ub2e4. nvtop \uacfc gotop \uc73c\ub85c \uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1 \ud558\uba74\uc11c \ub525\ub7ec\ub2dd\ud558\ub294 \ubaa8\uc2b5","title":"tmux"},{"location":"dev/cli/tmux/#tmux","text":"\uc9c0\uae08\uae4c\uc9c0 \ud568\uaed8 \uc0b4\ud3b4\ubcf4\uc558\ub358 CLI \ud504\ub85c\uadf8\ub7a8\ub4e4\ub85c Linux \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub3c4 \ud3b8\ud558\uace0 \ube60\ub974\uac8c \uac1c\ubc1c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uac70\uc758 \ubaa8\ub4e0 \uac1c\ubc1c \uc0c1\ud669\uc5d0\uc11c \ud130\ubbf8\ub110 \ucc3d \ud558\ub098\ub294 \ubd80\uc871\ud569\ub2c8\ub2e4. \uc774\ub54c tmux \uac00 \ud544\uc694\ud569\ub2c8\ub2e4. tmux \uc0ac\uc6a9\ubc95\ub3c4 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0 \uc790\uc138\ud788 \uc368\ub193\uc558\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c\ub294 tmux \ub97c \uc0ac\uc6a9\ud558\uba74, \ub610 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\ud558\uba74 \uc5bc\ub9c8\ub098 \uc0dd\uc0b0\uc131\uc774 \ud5a5\uc0c1\ub418\ub294\uc9c0\ub9cc \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","title":"tmux \ub85c \ud130\ubbf8\ub110 \ud3b8\ud558\uac8c \uc0ac\uc6a9\ud558\uae30"},{"location":"dev/cli/tmux/#tmux_1","text":"tmux \uc5c5\uadf8\ub808\uc774\ub4dc\ub294 \uc0ac\uc2e4 \uc2e4\uc81c\uc801\uc778 \uc5c5\uadf8\ub808\uc774\ub4dc\uac00 \uc544\ub2c8\ub77c tmux \uc758 \uc124\uc815\uc744 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\ud560 \uc218 \uc788\ub294 ~/.tmux.conf \ud30c\uc77c\uc5d0 \uc0ac\uc6a9\uc790\uac00 \ub354 \ud3b8\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uc815\uc744 \uc870\uc791\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c\ub294 \uc81c\uac00 \uc124\uc815\ud55c ~/.tmux.conf \ud30c\uc77c\uc744 \uc911\uc2ec\uc73c\ub85c tmux \ub97c \uc0ac\uc6a9\ud558\uae30\uac00 \uc5bc\ub9c8\ub098 \ud3b8\ud574\uc84c\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","title":"\ub354 \ube68\ub77c\uc9c4 tmux!"},{"location":"dev/cli/tmux/#alias","text":"\uba3c\uc800 tmux \ub77c\ub294 \uba85\ub839\uc5b4\ub97c \ub9e4\ubc88 \uce58\ub294 \uac83\uc740 \ub108\ubb34 \ube44\ud6a8\uc728\uc801\uc785\ub2c8\ub2e4. \ubb34\ub824 4 \ubc88\uc774\ub098 \ud0a4\ubcf4\ub4dc\ub97c \uccd0\uc57c\ud558\uae30 \ub54c\ubb38\uc774\uc8e0. \uadf8\ub798\uc11c ~/.zsh_aliases \uc5d0 alias t = tmux \ub97c \ucd94\uac00\ud558\uc5ec t \ub9cc \ub20c\ub7ec\ub3c4 tmux \uac00 \ucf1c\uc9c0\ub3c4\ub85d \ud569\ub2c8\ub2e4. Note bash \uc258 \uc720\uc800\ub294 ~/.bashrc \ud30c\uc77c\uc5d0 \ucd94\uac00\ud558\uba74 \ub429\ub2c8\ub2e4. \uc774\uc81c \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c tmux \ub97c \ucf30\ub2e4\uac00 \ub04c \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example $ t $ q","title":"\ub354 \ube68\ub77c\uc9c4 alias"},{"location":"dev/cli/tmux/#_1","text":"tmux \uc758 \uc624\ub9ac\uc9c0\ub110 \ud14c\ub9c8\ub294 \ub108\ubb34 \uc548\uc774\uc058\ub124\uc694. \uadf8\ub798\uc11c \uc880 \ub354 \uac00\ub3c5\uc131\ub3c4 \ub192\uc544\uc9c0\uace0 \ubcf4\uae30\uc5d0\ub3c4 \uc88b\uace0 \uc2dc\uac04\ub3c4 \uc54c \uc218 \uc788\ub3c4\ub85d \ub2e4\uc74c\uacfc \uac19\uc740 \uc124\uc815\uc73c\ub85c \ud14c\ub9c8\ub97c \uace0\uce69\ub2c8\ub2e4. set -g status-bg default set -g status-fg colour137 set -g status-style dim set -g status-left '#[fg=colour51,bg=colour0,bold] %R ' # set -g status-right '#[fg=colour51,bg=colour0,bold] #(uname -r) ' set -g status-right '#[fg=colour51,bg=colour0,bold] #(osname) ' set -g status-right-length 100 setw -g window-status-current-style bg = colour14,fg = colour00,bold setw -g window-status-current-format ' #I#[fg=colour0] #[fg=colour0]#W#[fg=colour0] ' setw -g window-status-style fg = colour49,none,bg = colour00 setw -g window-status-format '#I #W ' setw -g window-status-bell-style fg = colour255,bold,bg = colour1 set -g message-style fg = colour232,bold,bg = colour16 \uc774 \uc124\uc815\ub4e4\uc744 ~/.tmux.conf \uc5d0 \ub123\uc73c\uba74 \ub429\ub2c8\ub2e4. Example \ub2e4\uc74c\uc740 \ud14c\ub9c8\ub97c \uc124\uc815\ud558\uae30 \uc804\uc758 \uc624\ub9ac\uc9c0\ub110 tmux \uc758 \ud14c\ub9c8\uc785\ub2c8\ub2e4. \uc0c1\ud0dc\ubc14\uac00 \uc544\ub798\ucabd\uc5d0 \uc788\uace0, \uc0c8 \ud654\uba74\uc744 \ub9cc\ub4e4\uc5c8\uc9c0\ub9cc \ud55c \ub208\uc5d0 \ub4e4\uc5b4\uc624\uc9c0\uac00 \uc54a\uc2b5\ub2c8\ub2e4. \uc624\ub978\ucabd\uc5d0 \uc2dc\uac04\ub3c4 \ud45c\uc2dc\ub418\ub294\ub370 \uc5ed\uc2dc \ud55c \ub208\uc5d0 \ub4e4\uc5b4\uc624\uc9c0 \uc54a\ub124\uc694. \ud558\uc9c0\ub9cc \ub2e4\uc74c\uacfc \uac19\uc774 \ud14c\ub9c8\ub97c \ubc14\uafd4\uc11c \uac00\ub3c5\uc131\uc744 \ud655\uc5f0\ud788 \ub192\ud614\uc2b5\ub2c8\ub2e4. \uc0c1\ud0dc\ubc14\uac00 \uc704\ub85c \uc62c\ub77c\uac14\uace0, \uc67c\ucabd\uc5d0\ub294 \uc2dc\uac04\uc774 \uac04\ub7b5\ud558\uc9c0\ub9cc \ub208\uc5d0 \ud655 \ub4e4\uc5b4\uc624\uac8c \ubcf4\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 0 \ubc88\uc9f8 \ud654\uba74\uc5d0\ub294 zsh \uc774 \ucf1c\uc838\uc788\uace0, 1 \ubc88\uc9f8 \ud654\uba74\uc5d0\ub294 vim \uc774 \ucf1c\uc838\uc788\ub294\ub370 \ud604\uc7ac \uc0c1\uc8fc\ud558\uace0 \uc788\ub294 \ud654\uba74\uc5d0 \ud558\uc774\ub77c\uc774\ud305\uc774 \ub418\uc11c \uac00\ub3c5\uc131\uc774 \ub9e4\uc6b0 \ub192\uc544\uc9d1\ub2c8\ub2e4. \uc624\ub978\ucabd\uc5d0\ub294 \uc6b4\uc601\uccb4\uc81c\uc758 \uc774\ub984\ub3c4 \ub098\ud0c0\ub0a9\ub2c8\ub2e4.","title":"\ub354 \uc774\ubed0\uc9c4 \ud14c\ub9c8"},{"location":"dev/cli/tmux/#_2","text":"\uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 Meta \ud0a4 Ctrl + b Ctrl + a tmux \ub294 Meta \ud0a4 \ub97c \uc0ac\uc6a9\ud558\uc5ec \uba85\ub839\uc5b4\ub4e4\uc744 \uc815\uc758\ud558\uae30 \ub54c\ubb38\uc5d0 Ctrl + b \ub97c \uc785\ub825\ud588\uc5b4\uc57c \ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Ctrl \uc640 b \ub294 \uac70\ub9ac\uac00 \ub108\ubb34 \uba40\uc5b4\uc11c \uc190\uc774 \uc544\ud515\ub2c8\ub2e4. \uadf8\ub798\uc11c ~/.tmux.conf \uc5d0 unbind C-b set-option -g prefix C-a bind-key C-a send-prefix \ub97c \ucd94\uac00\ud558\uc5ec \uac70\ub9ac\uac00 \uac00\uae4c\uc6b4 Ctrl + a \ub85c Meta \ud0a4\ub97c \uc7ac\uc124\uc815\ud569\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc758 \ub3c4\ucee4 \ucee8\ud14c\uc774\ub108\uc5d0\ub294 \uc774\ubbf8 \uc124\uc815 \ub418\uc5b4\uc788\uc73c\ub2c8 \uac71\uc815\ud558\uc9c0 \ub9c8\uc138\uc694. Info \uc55e\uc73c\ub85c \uc0b4\ud3b4\ubcfc tmux \uc5c5\uadf8\ub808\uc774\ub4dc\ub4e4\ub3c4 \uc704\uc640 \uac19\uc740 \uc124\uc815 \ud30c\uc77c\uc744 \uc870\uc791\ud558\ub294 \uac83\uc73c\ub85c \uc774\ub8e8\uc5b4\uc84c\uc9c0\ub9cc, \uc77c\uc77c\uc774 \uc5b4\ub5a4 \uc124\uc815\uc73c\ub85c tmux \uac00 \uc5c5\uadf8\ub808\uc774\ub4dc\ub418\uc5c8\ub294\uc9c0 \uc0c1\uc138\ud788 \uc124\uba85\ud558\uc9c0\ub294 \uc54a\uaca0\uc2b5\ub2c8\ub2e4. .tmux.conf \ub97c \ubcf4\uc2dc\ub824\uba74 .tmux.conf \ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694.","title":"\ub354 \ube68\ub77c\uc9c4 \uba54\ud0c0 \ud0a4"},{"location":"dev/cli/tmux/#_3","text":"\uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \ud130\ubbf8\ub110 \uc218\uc9c1 \ubd84\ud560 Meta + % Meta + \u29f5 \ud130\ubbf8\ub110 \uc218\ud3c9 \ubd84\ud560 Meta + \" Meta + - \ub2e4\uc74c \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 Meta + o Alt + o (\uc22b\uc790) \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 Meta + q + (\uc22b\uc790) tmux \uc5d0\uc11c \ud130\ubbf8\ub110\uc744 \uc218\ud3c9\uc73c\ub85c \ubd84\ud560\ud558\ub824\uba74 \uae30\uc874\uc758 \uba85\ub839\uc5b4 Meta + \" \ub97c \uc785\ub825\ud574\uc57c \ud558\ub294\ub370 \uc774\uac74 \uc678\uc6b0\uae30\uac00 \ub108\ubb34 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc678\uc6b0\uae30 \uc27d\ub3c4\ub85d \uc218\ud3c9\uc73c\ub85c \ub098\ub208\ub2e4\ub294 \uc758\ubbf8\uc5d0\uc11c Meta + - \ub85c \uc9c1\uad00\uc801\uc73c\ub85c \ubc14\uafc9\ub2c8\ub2e4. \ub610\ud55c \ud130\ubbf8\ub110\uc744 \uc218\uc9c1\uc73c\ub85c \ubd84\ud560\ud558\ub824\uba74 \uae30\uc874\uc758 \uba85\ub839\uc5b4 Meta + % \ub97c \uc785\ub825\ud574\uc57c \ud558\ub294\ub370 \uc774\uac83 \uc5ed\uc2dc \uc678\uc6b0\uae30\uac00 \ub108\ubb34 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc678\uc6b0\uae30 \uc27d\ub3c4\ub85d \uc218\uc9c1\uc73c\ub85c \ub098\ub208\ub2e4\ub294 \uc758\ubbf8\uc5d0\uc11c \ubc31\uc2ac\ub798\uc26c\ub85c \ubc14\uafd4\uc11c Meta + \u29f5 \ub85c \uc9c1\uad00\uc801\uc778 \ub2e8\ucd95\ud0a4\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub2e4\uc74c \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud558\ub294 \ub2e8\ucd95\ud0a4 Meta + o \ub294 \uc2e4\uc81c\ub85c ( Ctrl + a ) + o \uc778\ub370, \ub2e4\uc74c \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud558\ub294 \uc791\uc5c5\uc740 \ub9e4\uc6b0 \ub9ce\uc774 \uc77c\uc5b4\ub098\ubbc0\ub85c \ud0a4\ub97c 3 \ubc88\uc774\ub098 \ub20c\ub7ec\uc57c \ud558\ub294 \uac83\uc740 \ub108\ubb34 \ube44\ud6a8\uc728\uc801\uc774\uc5b4\uc11c \ucc38\uc744 \uc218\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c Alt + o \ub85c \ubc14\uafc9\ub2c8\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud130\ubbf8\ub110\uc744 \uc218\uc9c1, \uc218\ud3c9\uc73c\ub85c \uc5ec\ub7ec\ubc88 \ubd84\ud560\ud574\ubcf4\uace0 Alt \ub97c \uacc4\uc18d \ub204\ub978 \ucc44\ub85c o \ub97c \ub20c\ub7ec\uc11c \ud130\ubbf8\ub110\uc744 \uc774\ub3d9\ud574\ubcf4\uc138\uc694. \ud130\ubbf8\ub110 \uc774\ub3d9\uc774 \uc815\ub9d0 \ube68\ub77c\uc84c\uc2b5\ub2c8\ub2e4.","title":"\ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \ubd84\ud560"},{"location":"dev/cli/tmux/#_4","text":"\uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ud654\uba74 \uc0dd\uc131 Meta + c Alt + c \ub2e4\uc74c \ud654\uba74\uc73c\ub85c \uc774\ub3d9 Meta + n Alt + n \uc774\uc804 \ud654\uba74\uc73c\ub85c \uc774\ub3d9 Meta + p Alt + p \uc0c8\ub85c\uc6b4 \ud654\uba74\uc744 \uc0dd\uc131\ud558\uace0 \ud654\uba74\uc744 \ub118\uae30\ub294 \uc77c\ub3c4 \ud3b8\ud558\uac8c \ud558\uae30 \uc704\ud558\uc5ec Meta \ud0a4 \ub300\uc2e0 Alt \ub97c \uc0ac\uc6a9\ud569\uc2dc\ub2e4. \uba54\ud0c0\ud0a4\ub97c Alt \ud0a4\ub85c \ubc14\uafb8\ub294 \uac83\ub9cc\uc73c\ub85c \uc5bc\ub9c8\ub098 \uc791\uc5c5\uc774 \ube68\ub77c\uc9c0\ub294\uc9c0 \ubcf4\uc138\uc694. Example \ub2e4\uc74c\uacfc \uac19\uc774 Alt \ub97c \uacc4\uc18d \ub204\ub978\ucc44\ub85c c \ub97c \uc5f0\ud0c0\ud574\uc11c \ud654\uba74\uc744 \ub354\uc6b1 \ube60\ub974\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc5ec\ub7ec \ud654\uba74\uc744 \ub9c8\ucc2c\uac00\uc9c0\ub85c Alt \ub97c \uacc4\uc18d \ub204\ub978\ucc44\ub85c n \ub610\ub294 p \ub97c \ub204\ub974\uba74\uc11c \uc774\ub3d9\ud574\ubcf4\uc138\uc694.","title":"\ub354 \ube68\ub77c\uc9c4 \ud654\uba74 \uc0dd\uc131"},{"location":"dev/cli/tmux/#_5","text":"\uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \uc67c\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + h \uc624\ub978\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + l \uc704\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + k \uc544\ub798\ucabd \ud130\ubbf8\ub110\uc73c\ub85c \uc774\ub3d9 (\uae30\uc5b5\uc774 \uc548\ub0a8..) Alt + j \ud130\ubbf8\ub110 \uc774\ub3d9\uc744 Alt + o \ub85c \ub9e4\uc6b0 \ube60\ub974\uac8c \ud560 \uc218 \uc788\uac8c \ub418\uc5c8\uc9c0\ub9cc\uc11c\ub3c4 \ud130\ubbf8\ub110\uc774 \uc5ec\ub7ec\uac1c\ub85c \ub098\ub258\uc5c8\uc744 \ub54c Alt + o \ub85c \ub2e4\uc74c \ud130\ubbf8\ub110\ub85c\ubc16\uc5d0 \uc774\ub3d9\ud560 \uc218 \uc5c6\ub2e4\uba74, \uc815\ud655\ud788 \uc6d0\ud558\ub294 \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub97c \uc704\ud558\uc5ec tmux \ub294 \uc815\ud655\ud788 \uc67c\ucabd, \uc624\ub978\ucabd, \uc704\ucabd, \uc544\ub798\ucabd \ud130\ubbf8\ub110\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\ub294 \uba85\ub839\uc5b4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uadf8\uac74 \ub108\ubb34 \ubcf5\uc7a1\ud588\uc5c8\uace0 \uadf8\uac8c \ubb50\uc600\ub294\uc9c0 \uc194\uc9c1\ud788 \uae4c\uba39\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8 \ub300\uc2e0 vim \uc5d0\uc11c\uc758 \ucee4\uc11c \uc774\ub3d9\ud0a4\uc600\ub358 h , l , k , j \uc5d0\uc11c \ucc29\uc548\ud558\uc5ec \ud130\ubbf8\ub110 \uc774\ub3d9\uc744 \ub9e4\uc6b0 \uc27d\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud130\ubbf8\ub110\uc744 \uc5ec\ub7ec\uac1c\ub85c \ubd84\ud560\ud558\uace0 Alt \ub97c \ub204\ub978\ucc44\ub85c h , l , k , j \ub97c \ub204\ub974\uba74\uc11c \ud130\ubbf8\ub110\uc744 \uc774\ub3d9\ud574\ubcf4\uc138\uc694.","title":"\ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \uc774\ub3d9"},{"location":"dev/cli/tmux/#_6","text":"\uae30\ub2a5 \uae30\uc874 \ub2e8\ucd95\ud0a4 \uc0c8\ub85c\uc6b4 \ub2e8\ucd95\ud0a4 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc67c\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2190 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc624\ub978\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2192 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc704\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2191 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \uc544\ub798\ucabd\uc73c\ub85c \ubc29\ud5a5\uc73c\ub85c \uc870\uc808 (\ub108\ubb34 \ubcf5\uc7a1\ud568) Alt + \u2193 \ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808\uc774\ub77c\uace0 \ud574\ubd10\uc57c \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6b0\uc9c0\ub3c4 \uc54a\uc558\ub294\ub370 \ub77c\uace0 \uc0dd\uac01\ud560 \uc218\ub3c4 \uc788\uaca0\uc9c0\ub9cc, \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808\ud558\ub294 \ubc29\ubc95\uc774 \uc678\uc6b8 \uc218 \uc5c6\uc744 \ub9cc\ud07c \ub108\ubb34 \ubcf5\uc7a1\ud55c \uac83\uc774\uc5b4\uc11c \uc548\uc37c\uc2b5\ub2c8\ub2e4. \uacfc\uac70\uc758 \uc81c\uac00 \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \ub108\ubb34\ub108\ubb34 \uc27d\uac8c \uc870\uc808\ud560 \uc218 \uc788\ub3c4\ub85d \uc704\uc640 \uac19\uc774 \uc124\uc815\ud574\ub193\uc558\uc2b5\ub2c8\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud130\ubbf8\ub110 \ub2e8\ucd95\ud0a4 Alt \ub97c \uacc4\uc18d \ub204\ub978 \ucc44\ub85c \u2192 , \u2190 , \u2191 , \u2193 \uc744 \ub20c\ub7ec\uc11c \ud130\ubbf8\ub110 \ud06c\uae30\ub97c \ub108\ubb34\ub098\ub3c4 \uc27d\uac8c \uc870\uc808\ud574\ubcf4\uc138\uc694.","title":"\ub354 \ube68\ub77c\uc9c4 \ud130\ubbf8\ub110 \ud06c\uae30 \uc870\uc808"},{"location":"dev/cli/tmux/#tmux_2","text":"\ub2e4\uc74c\uc740 tmux \ub97c \ud1b5\ud558\uc5ec nvtop \uacfc gotop \uc73c\ub85c GPU \uc0c1\ud669\uacfc CPU, RAM \uc0c1\ud669\uc744 \ubaa8\ub2c8\ud130\ub9c1\ud558\uba74\uc11c \ub525\ub7ec\ub2dd\uc744 \ub3cc\ub9ac\uace0 \uc788\ub294 \ubaa8\uc2b5\uc785\ub2c8\ub2e4. nvtop \uacfc gotop \uc73c\ub85c \uc2dc\uc2a4\ud15c \ubaa8\ub2c8\ud130\ub9c1 \ud558\uba74\uc11c \ub525\ub7ec\ub2dd\ud558\ub294 \ubaa8\uc2b5","title":"tmux \uc0ac\uc6a9 \uc608\uc2dc"},{"location":"dev/cli/zsh/","text":"bash \u279c zsh - \ub354 \ube68\ub77c\uc9c4 \uc258 \u00b6 zsh \uc740 \uc218\ub9ce\uc740 \ud50c\ub7ec\uadf8\uc778\uacfc \ud14c\ub9c8\uac00 \uc9c0\uc6d0\ub418\ub294 \uc258\uc785\ub2c8\ub2e4. \uc774\uc81c bash \uc258\uc744 \uadf8\ub9cc \uc4f0\uace0 zsh \uc744 \uc0ac\uc6a9\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. zsh \uc740 oh-my-zsh \uc744 \uc124\uce58\ud574\uc57c\ub9cc \uadf8 \uc9c4\uac00\ub97c \ubc1c\ud718\ud558\ub294\ub370, \uadf8 \uc124\uce58\ubc95\uc740 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0 \uc774\ubbf8 \uc124\uba85\ud588\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c\ub294 zsh \uc744 \uc0ac\uc6a9\ud558\uba74 \uc5bc\ub9c8\ub098 \uc0dd\uc0b0\uc131\uc774 \ud5a5\uc0c1\ub418\ub294\uc9c0\ub9cc \uac00\ubccd\uac8c \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ud14c\ub9c8 \u00b6 zsh \uc740 \uc815\ub9d0 \uc218\ub9ce\uc740 \ud14c\ub9c8\ub97c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. Tip https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes \uc5d0 \ub4e4\uc5b4\uac00\uc11c \ub9c8\uc74c\uc5d0 \ub4dc\ub294 \ud14c\ub9c8\uac00 \uc788\ub294\uc9c0 \ubcfc \uc218 \uc788\uc5b4\uc694. \uc81c\uac00 \ubcf4\uc5ec\ub4dc\ub9b4 zsh \ud14c\ub9c8\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 alien-minimal \uc785\ub2c8\ub2e4. zsh \uae30\ubcf8 \uae30\ub2a5 \u00b6 zsh \ud14c\ub9c8\ub294 \ub2e8\uc21c\ud788 bash \uc258 \ud504\ub86c\ud504\ud2b8\ubcf4\ub2e4 \ub354 \uba4b\uc788\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \uac83\ub3c4 \uc788\uc9c0\ub9cc \uc218\ub9ce\uc740 \uae30\ub2a5\ub4e4\ub3c4 \uc81c\uacf5\ud558\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8 \uc218\ub9ce\uc740 \uae30\ub2a5 \uc911 \ub2e4\uc74c \ub450 \uac00\uc9c0 \uae30\ub2a5\ub9cc \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 git \ube0c\ub79c\uce58\ub97c \ud504\ub86c\ud504\ud2b8\uc5d0 \ubcf4\uc5ec\uc900\ub2e4. \uc704\uc640 \uac19\uc774 \ud504\ub86c\ud504\ud2b8 \uc6b0\uce21\uc5d0 master \uac00 dev \ub85c \ubc14\ub00c\uace0 \ub2e4\uc2dc master \ub85c \ubc14\ub00c\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c git \uc73c\ub85c \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uad00\ub9ac\ud558\ub2e4\uac00 \uc2e4\ud5d8\uc801\uc778 \uae30\ub2a5\uc744 \ud14c\uc2a4\ud2b8\ud574\uc57c \ud574\uc11c \uc0c8\ub85c\uc6b4 branch \uc778 dev \ub97c \ub9cc\ub4e4\uace0 \uc774\uc8fc\ud588\uc744 \ub54c, zsh \uc758 \ud504\ub86c\ud504\ud2b8\uac00 \uc6b0\uce21\uc5d0 \ud604\uc7ac \uc0c1\uc8fc\ud558\uace0 \uc788\ub294 branch \uc815\ubcf4\ub97c \uc54c\ub824\uc90d\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub9e4\ubc88 git branch \ub97c \uc785\ub825\ud558\uc5ec \ud604\uc7ac \uc0c1\uc8fc\ud558\uace0 \uc788\ub294 branch \uac00 \uc5b4\ub5a4 \uac74\uc9c0 \ud655\uc778\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc758 \ub9ac\ud134\uac12\uc774 \uc815\uc0c1\uac12 0 \uc774 \uc544\ub2d0\uacbd\uc6b0 \ud504\ub86c\ud504\ud2b8\uc5d0 \ubcf4\uc5ec\uc900\ub2e4. \uc704\uc640 \uac19\uc774 ls \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uba74 \uc815\uc0c1 \uc885\ub8cc \ucf54\ub4dc 0 \uac00 \ubc18\ud658\ub418\uc9c0\ub9cc \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 lss \uac00 \uc785\ub825\ub418\uba74 \ube44\uc815\uc0c1 \uc885\ub8cc \ucf54\ub4dc 127 \uc774 \ubc18\ud658\ub429\ub2c8\ub2e4. zsh \ud504\ub86c\ud504\ud2b8\ub294 \uadf8\ub7ec\ud55c \ube44\uc815\uc0c1 \uc885\ub8cc \ucf54\ub4dc\ub97c \ubcf4\uc5ec\uc8fc\uace0 \ud504\ub85c\uadf8\ub7a8\uc774 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc885\ub8cc\ub418\uc5c8\uc744 \ub54c \ud504\ub86c\ud504\ud2b8 \uc0c9\uae54\uc744 \ub2e4\ub978 \uc0c9\uae54\ub85c \ubc14\uafd4\uc90d\ub2c8\ub2e4. tab-completion \uae30\ub2a5 \u00b6 \uc774 \uae30\ub2a5\uc740 \uba85\ub839\uc5b4\uc758 \ubd80\ubd84\ub9cc \uc785\ub825\ud558\uace0 Tab \uc744 \ub20c\ub800\uc744 \ub54c zsh \uc774 \uc54c\uc544\uc11c \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud574\uc8fc\ub294 \uae30\ub2a5\uc785\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 cd \ub9cc \ub204\ub974\uace0 Tab \uc744 \ub204\ub974\uba74 \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\uc744 \ud574\uc8fc\uace0, cd \ub97c \uc120\ud0dd\ud558\uace0 \ub2e4\uc2dc Tab \uc744 \ub204\ub974\ub2c8\uae4c \uc774\ub3d9\ud560 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ucd94\ucc9c\ud574\uc90d\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \ud574\uc57c \ud560 \uc77c\uc740 \ub2e8\uc9c0 Enter \ub97c \ub204\ub974\ub294 \uac83 \ubfd0\uc774\uc8e0. \ub2e4\uc74c\uacfc \uac19\uc774 \ud2b9\uc815 \ub514\ub809\ud1a0\ub9ac\ub9cc \uc785\ub825\ud558\uace0 \ub098\uc11c Tab \uc744 \ub204\ub974\uba74 \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\ub97c \ucd94\ucc9c\ud574\uc90d\ub2c8\ub2e4. auto-completion \uae30\ub2a5 \u00b6 \uc774 \uae30\ub2a5\uc740 \uc0ac\uc6a9\uc790\uac00 \uae38\uace0 \ubcf5\uc7a1\ud55c \uacbd\ub85c\ub97c \uc774\ub3d9\ud574\uc57c \ud560\ub54c \uadf8\uac83\uc744 \ud2b9\uc815\ud560 \uc218 \uc788\ub294 \ubb38\uc790\ub9cc \uc785\ub825\ud558\uace0 Tab \uc744 \ub204\ub974\uba74 \uc790\ub3d9\uc73c\ub85c \uc644\uc131\ud574\uc8fc\ub294 zsh \uc758 \uae30\ub2a5\uc785\ub2c8\ub2e4. /usr/lib/gcc/x86_64-linux-gnu/9.3.0 \uc758 \uacbd\ub85c\ub85c \uc774\ub3d9\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\ub77c\uace0 \uac00\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. $ cd /usr/lib/gcc/x86_64-linux-gnu/9.3.0 \ud558\uc9c0\ub9cc \uc774\uac74 \ub108\ubb34 \uae38\uc5b4\uc11c \uc9dc\uc99d\ub098\uc11c \uacac\ub51c \uc218\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub2c8\uae4c \ub2e4\uc74c \uba85\ub839\uc5b4\ub9cc \uc785\ub825\ud558\uace0 Tab \uc744 \ub204\ub985\ub2c8\ub2e4. $ cd /u/l/g/x/9 \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 zsh \uc774 \uacbd\ub85c\ub97c \uc9c0\uac00 \uc54c\uc544\uc11c \uc644\uc131\uc2dc\ucf1c \uc90d\ub2c8\ub2e4. z \uba85\ub839\uc5b4 \u00b6 z \uba85\ub839\uc5b4\ub294 \uc0ac\uc6a9\uc790\uac00 \uc790\uc8fc \uc774\ub3d9\ud558\ub294 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c\uc758 \ud1b5\uacc4\ub97c \ub0b4\uc5b4\uc11c \uc0ac\uc6a9\uc790\uac00 \uc774\ub3d9\ud558\ub294 \uacbd\ub85c\ub97c \ud2b9\uc815\ud560 \uc218 \uc788\ub294 \uc9e7\uc740 \uacbd\ub85c\ub9cc \uc785\ub825\ud574\ub3c4 \uc774\ub3d9\ud560 \uc218 \uc788\uac8c\ub054 \ud574\uc8fc\ub294 \ub108\ubb34\ub108\ubb34 \ud3b8\ub9ac \ud55c zsh \ud50c\ub7ec\uadf8\uc778\uc785\ub2c8\ub2e4. \ub2e8 z \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 \ubc18\ub4dc\uc2dc \ud55c \ubc88 \uc774\uc0c1\uc740 \uadf8 \uacbd\ub85c\ub85c \uc774\ub3d9\ud55c \uc801\uc774 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 z \uc774 \uc0ac\uc6a9\uc790\uac00 \uc774\ub3d9\ud55c \uacbd\ub85c\ub97c \ubd84\uc11d\ud558\uace0 \ud1b5\uacc4\ub97c \ub0bc \uae30\ud68c\ub97c \uc918\uc57c\ud558\uae30 \ub54c\ubb38\uc774\uc8e0. \ubc29\uae08 \uc804\uc5d0 /usr/lib/gcc/x86_64-linux-gnu/9.3.0 \ub77c\ub294 \uacbd\ub85c\ub85c \uc774\ub3d9\ud588\uc5c8\uc73c\ub2c8\uae4c \uc774 \uacbd\ub85c\ub97c \uc544\ub9c8\ub3c4 9 \uc774 \ud2b9\uc815\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc73c\ub2c8\uae4c \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\ubd05\ub2c8\ub2e4. $ z 9 \uc2e4\ud589 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. auto-suggestions \uae30\ub2a5 \u00b6 \uc774 \uae30\ub2a5\uc740 \uac00\uc7a5 \ucd5c\uadfc\uc5d0 \uc2e4\ud589\ud55c \uba85\ub839\uc5b4\ub97c \uae30\uc5b5\ud558\uc5ec \uc0ac\uc6a9\uc790\uac00 \uadf8 \uba85\ub839\uc5b4\uc640 \ube44\uc2b7\ud55c \ud0c0\uc790\ub97c \uce5c\ub2e4\uba74 \uc790\ub3d9\uc73c\ub85c \uc644\uc131\ub41c \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud574\uc8fc\ub294 zsh \ud50c\ub7ec\uadf8\uc778\uc785\ub2c8\ub2e4. \uc774 \uae30\ub2a5\uc740 \uae34 \uba85\ub839\uc5b4\ub97c \ubc18\ubcf5\ud574\uc57c \ud560 \ub54c \ub108\ubb34 \ud3b8\ud569 \ub2c8\ub2e4. \uc0ac\uc6a9\ubc95\ub3c4 \ub9e4\uc6b0 \uac04\ub2e8\ud569\ub2c8\ub2e4. \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\ub2e4 \ubcf4\uba74 auto-suggestions \uc774 \ud76c\ubbf8\ud55c \uae00\uc528\ub85c \uc644\uc131\ub41c \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud558\ub294\ub370 \uadf8\uac83\uc744 \uc2e4\ud589\ud558\uae38 \uc6d0\ud588\ub2e4\uba74 \u2192 \ub97c \ub20c\ub7ec\uc11c \uba85\ub839\uc5b4\ub97c \uc644\uc131\uc2dc\ud0a4\uba74 \ub429\ub2c8\ub2e4. \ub9cc\uc57d auto-suggestions \uc774 \ucd94\ucc9c\ud55c \uba85\ub839\uc5b4 \uc804\ubd80\ub97c \uc6d0\ud558\uc9c0 \uc54a\uace0 \ubd80\ubd84\uc801\uc778 \uac83\ub9cc \uc6d0\ud55c\ub2e4\uba74 Ctrl + \u2192 \ub97c \ub204\ub974\uba74 \ub429\ub2c8\ub2e4. \ub3c4\ucee4 \ucee8\ud14c\uc774\ub108\ub97c \uc5ec\ub7ec\ubc88 \uc885\ub8cc\ud588\ub2e4\uac00 \uc7ac\uc2dc\uc791\ud588\uc5b4\uc57c\ub9cc \ud588\ub2e4\uba74 docker start -ai b \uc640 \uac19\uc740 \uba85\ub839\uc5b4\ub97c \ubc18\ubcf5\uc801\uc73c\ub85c \uc785\ub825\ud588\uc57c \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\uc74c\uacfc \uac19\uc774 auto-suggestions \uc774 \ubc18\ubcf5\ub418\ub294 \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud574\uc8fc\uae30 \ub54c\ubb38\uc5d0 \ub9e4\ubc88 \uc785\ub825\ud560 \ud544\uc694 \uc5c6\uc774 d \ub9cc \ub204\ub974\uace0 \u2192 \ub97c \ub204\ub974\uba74 \ub429\ub2c8\ub2e4. docker start -ai b \uc744 \uc77c\uc77c\uc774 \ub2e4 \uc785\ub825\ud574\uc57c \ud558\ub294 \uac83\uacfc \ube44\uad50\ud574\ubd05\ub2c8\ub2e4.","title":"zsh"},{"location":"dev/cli/zsh/#bash-zsh-","text":"zsh \uc740 \uc218\ub9ce\uc740 \ud50c\ub7ec\uadf8\uc778\uacfc \ud14c\ub9c8\uac00 \uc9c0\uc6d0\ub418\ub294 \uc258\uc785\ub2c8\ub2e4. \uc774\uc81c bash \uc258\uc744 \uadf8\ub9cc \uc4f0\uace0 zsh \uc744 \uc0ac\uc6a9\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. zsh \uc740 oh-my-zsh \uc744 \uc124\uce58\ud574\uc57c\ub9cc \uadf8 \uc9c4\uac00\ub97c \ubc1c\ud718\ud558\ub294\ub370, \uadf8 \uc124\uce58\ubc95\uc740 \ud29c\ud1a0\ub9ac\uc5bc \uc5d0 \uc774\ubbf8 \uc124\uba85\ud588\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c\ub294 zsh \uc744 \uc0ac\uc6a9\ud558\uba74 \uc5bc\ub9c8\ub098 \uc0dd\uc0b0\uc131\uc774 \ud5a5\uc0c1\ub418\ub294\uc9c0\ub9cc \uac00\ubccd\uac8c \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","title":"bash \u279c zsh - \ub354 \ube68\ub77c\uc9c4 \uc258"},{"location":"dev/cli/zsh/#_1","text":"zsh \uc740 \uc815\ub9d0 \uc218\ub9ce\uc740 \ud14c\ub9c8\ub97c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. Tip https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes \uc5d0 \ub4e4\uc5b4\uac00\uc11c \ub9c8\uc74c\uc5d0 \ub4dc\ub294 \ud14c\ub9c8\uac00 \uc788\ub294\uc9c0 \ubcfc \uc218 \uc788\uc5b4\uc694. \uc81c\uac00 \ubcf4\uc5ec\ub4dc\ub9b4 zsh \ud14c\ub9c8\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 alien-minimal \uc785\ub2c8\ub2e4.","title":"\ud14c\ub9c8"},{"location":"dev/cli/zsh/#zsh","text":"zsh \ud14c\ub9c8\ub294 \ub2e8\uc21c\ud788 bash \uc258 \ud504\ub86c\ud504\ud2b8\ubcf4\ub2e4 \ub354 \uba4b\uc788\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \uac83\ub3c4 \uc788\uc9c0\ub9cc \uc218\ub9ce\uc740 \uae30\ub2a5\ub4e4\ub3c4 \uc81c\uacf5\ud558\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8 \uc218\ub9ce\uc740 \uae30\ub2a5 \uc911 \ub2e4\uc74c \ub450 \uac00\uc9c0 \uae30\ub2a5\ub9cc \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 git \ube0c\ub79c\uce58\ub97c \ud504\ub86c\ud504\ud2b8\uc5d0 \ubcf4\uc5ec\uc900\ub2e4. \uc704\uc640 \uac19\uc774 \ud504\ub86c\ud504\ud2b8 \uc6b0\uce21\uc5d0 master \uac00 dev \ub85c \ubc14\ub00c\uace0 \ub2e4\uc2dc master \ub85c \ubc14\ub00c\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c git \uc73c\ub85c \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uad00\ub9ac\ud558\ub2e4\uac00 \uc2e4\ud5d8\uc801\uc778 \uae30\ub2a5\uc744 \ud14c\uc2a4\ud2b8\ud574\uc57c \ud574\uc11c \uc0c8\ub85c\uc6b4 branch \uc778 dev \ub97c \ub9cc\ub4e4\uace0 \uc774\uc8fc\ud588\uc744 \ub54c, zsh \uc758 \ud504\ub86c\ud504\ud2b8\uac00 \uc6b0\uce21\uc5d0 \ud604\uc7ac \uc0c1\uc8fc\ud558\uace0 \uc788\ub294 branch \uc815\ubcf4\ub97c \uc54c\ub824\uc90d\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub9e4\ubc88 git branch \ub97c \uc785\ub825\ud558\uc5ec \ud604\uc7ac \uc0c1\uc8fc\ud558\uace0 \uc788\ub294 branch \uac00 \uc5b4\ub5a4 \uac74\uc9c0 \ud655\uc778\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc758 \ub9ac\ud134\uac12\uc774 \uc815\uc0c1\uac12 0 \uc774 \uc544\ub2d0\uacbd\uc6b0 \ud504\ub86c\ud504\ud2b8\uc5d0 \ubcf4\uc5ec\uc900\ub2e4. \uc704\uc640 \uac19\uc774 ls \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uba74 \uc815\uc0c1 \uc885\ub8cc \ucf54\ub4dc 0 \uac00 \ubc18\ud658\ub418\uc9c0\ub9cc \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4 lss \uac00 \uc785\ub825\ub418\uba74 \ube44\uc815\uc0c1 \uc885\ub8cc \ucf54\ub4dc 127 \uc774 \ubc18\ud658\ub429\ub2c8\ub2e4. zsh \ud504\ub86c\ud504\ud2b8\ub294 \uadf8\ub7ec\ud55c \ube44\uc815\uc0c1 \uc885\ub8cc \ucf54\ub4dc\ub97c \ubcf4\uc5ec\uc8fc\uace0 \ud504\ub85c\uadf8\ub7a8\uc774 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc885\ub8cc\ub418\uc5c8\uc744 \ub54c \ud504\ub86c\ud504\ud2b8 \uc0c9\uae54\uc744 \ub2e4\ub978 \uc0c9\uae54\ub85c \ubc14\uafd4\uc90d\ub2c8\ub2e4.","title":"zsh \uae30\ubcf8 \uae30\ub2a5"},{"location":"dev/cli/zsh/#tab-completion","text":"\uc774 \uae30\ub2a5\uc740 \uba85\ub839\uc5b4\uc758 \ubd80\ubd84\ub9cc \uc785\ub825\ud558\uace0 Tab \uc744 \ub20c\ub800\uc744 \ub54c zsh \uc774 \uc54c\uc544\uc11c \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud574\uc8fc\ub294 \uae30\ub2a5\uc785\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 cd \ub9cc \ub204\ub974\uace0 Tab \uc744 \ub204\ub974\uba74 \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\uc744 \ud574\uc8fc\uace0, cd \ub97c \uc120\ud0dd\ud558\uace0 \ub2e4\uc2dc Tab \uc744 \ub204\ub974\ub2c8\uae4c \uc774\ub3d9\ud560 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \ucd94\ucc9c\ud574\uc90d\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \ud574\uc57c \ud560 \uc77c\uc740 \ub2e8\uc9c0 Enter \ub97c \ub204\ub974\ub294 \uac83 \ubfd0\uc774\uc8e0. \ub2e4\uc74c\uacfc \uac19\uc774 \ud2b9\uc815 \ub514\ub809\ud1a0\ub9ac\ub9cc \uc785\ub825\ud558\uace0 \ub098\uc11c Tab \uc744 \ub204\ub974\uba74 \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\ub97c \ucd94\ucc9c\ud574\uc90d\ub2c8\ub2e4.","title":"tab-completion \uae30\ub2a5"},{"location":"dev/cli/zsh/#auto-completion","text":"\uc774 \uae30\ub2a5\uc740 \uc0ac\uc6a9\uc790\uac00 \uae38\uace0 \ubcf5\uc7a1\ud55c \uacbd\ub85c\ub97c \uc774\ub3d9\ud574\uc57c \ud560\ub54c \uadf8\uac83\uc744 \ud2b9\uc815\ud560 \uc218 \uc788\ub294 \ubb38\uc790\ub9cc \uc785\ub825\ud558\uace0 Tab \uc744 \ub204\ub974\uba74 \uc790\ub3d9\uc73c\ub85c \uc644\uc131\ud574\uc8fc\ub294 zsh \uc758 \uae30\ub2a5\uc785\ub2c8\ub2e4. /usr/lib/gcc/x86_64-linux-gnu/9.3.0 \uc758 \uacbd\ub85c\ub85c \uc774\ub3d9\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\ub77c\uace0 \uac00\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. $ cd /usr/lib/gcc/x86_64-linux-gnu/9.3.0 \ud558\uc9c0\ub9cc \uc774\uac74 \ub108\ubb34 \uae38\uc5b4\uc11c \uc9dc\uc99d\ub098\uc11c \uacac\ub51c \uc218\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub2c8\uae4c \ub2e4\uc74c \uba85\ub839\uc5b4\ub9cc \uc785\ub825\ud558\uace0 Tab \uc744 \ub204\ub985\ub2c8\ub2e4. $ cd /u/l/g/x/9 \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 zsh \uc774 \uacbd\ub85c\ub97c \uc9c0\uac00 \uc54c\uc544\uc11c \uc644\uc131\uc2dc\ucf1c \uc90d\ub2c8\ub2e4.","title":"auto-completion \uae30\ub2a5"},{"location":"dev/cli/zsh/#z","text":"z \uba85\ub839\uc5b4\ub294 \uc0ac\uc6a9\uc790\uac00 \uc790\uc8fc \uc774\ub3d9\ud558\ub294 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c\uc758 \ud1b5\uacc4\ub97c \ub0b4\uc5b4\uc11c \uc0ac\uc6a9\uc790\uac00 \uc774\ub3d9\ud558\ub294 \uacbd\ub85c\ub97c \ud2b9\uc815\ud560 \uc218 \uc788\ub294 \uc9e7\uc740 \uacbd\ub85c\ub9cc \uc785\ub825\ud574\ub3c4 \uc774\ub3d9\ud560 \uc218 \uc788\uac8c\ub054 \ud574\uc8fc\ub294 \ub108\ubb34\ub108\ubb34 \ud3b8\ub9ac \ud55c zsh \ud50c\ub7ec\uadf8\uc778\uc785\ub2c8\ub2e4. \ub2e8 z \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 \ubc18\ub4dc\uc2dc \ud55c \ubc88 \uc774\uc0c1\uc740 \uadf8 \uacbd\ub85c\ub85c \uc774\ub3d9\ud55c \uc801\uc774 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 z \uc774 \uc0ac\uc6a9\uc790\uac00 \uc774\ub3d9\ud55c \uacbd\ub85c\ub97c \ubd84\uc11d\ud558\uace0 \ud1b5\uacc4\ub97c \ub0bc \uae30\ud68c\ub97c \uc918\uc57c\ud558\uae30 \ub54c\ubb38\uc774\uc8e0. \ubc29\uae08 \uc804\uc5d0 /usr/lib/gcc/x86_64-linux-gnu/9.3.0 \ub77c\ub294 \uacbd\ub85c\ub85c \uc774\ub3d9\ud588\uc5c8\uc73c\ub2c8\uae4c \uc774 \uacbd\ub85c\ub97c \uc544\ub9c8\ub3c4 9 \uc774 \ud2b9\uc815\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc73c\ub2c8\uae4c \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\ubd05\ub2c8\ub2e4. $ z 9 \uc2e4\ud589 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.","title":"z \uba85\ub839\uc5b4"},{"location":"dev/cli/zsh/#auto-suggestions","text":"\uc774 \uae30\ub2a5\uc740 \uac00\uc7a5 \ucd5c\uadfc\uc5d0 \uc2e4\ud589\ud55c \uba85\ub839\uc5b4\ub97c \uae30\uc5b5\ud558\uc5ec \uc0ac\uc6a9\uc790\uac00 \uadf8 \uba85\ub839\uc5b4\uc640 \ube44\uc2b7\ud55c \ud0c0\uc790\ub97c \uce5c\ub2e4\uba74 \uc790\ub3d9\uc73c\ub85c \uc644\uc131\ub41c \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud574\uc8fc\ub294 zsh \ud50c\ub7ec\uadf8\uc778\uc785\ub2c8\ub2e4. \uc774 \uae30\ub2a5\uc740 \uae34 \uba85\ub839\uc5b4\ub97c \ubc18\ubcf5\ud574\uc57c \ud560 \ub54c \ub108\ubb34 \ud3b8\ud569 \ub2c8\ub2e4. \uc0ac\uc6a9\ubc95\ub3c4 \ub9e4\uc6b0 \uac04\ub2e8\ud569\ub2c8\ub2e4. \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\ub2e4 \ubcf4\uba74 auto-suggestions \uc774 \ud76c\ubbf8\ud55c \uae00\uc528\ub85c \uc644\uc131\ub41c \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud558\ub294\ub370 \uadf8\uac83\uc744 \uc2e4\ud589\ud558\uae38 \uc6d0\ud588\ub2e4\uba74 \u2192 \ub97c \ub20c\ub7ec\uc11c \uba85\ub839\uc5b4\ub97c \uc644\uc131\uc2dc\ud0a4\uba74 \ub429\ub2c8\ub2e4. \ub9cc\uc57d auto-suggestions \uc774 \ucd94\ucc9c\ud55c \uba85\ub839\uc5b4 \uc804\ubd80\ub97c \uc6d0\ud558\uc9c0 \uc54a\uace0 \ubd80\ubd84\uc801\uc778 \uac83\ub9cc \uc6d0\ud55c\ub2e4\uba74 Ctrl + \u2192 \ub97c \ub204\ub974\uba74 \ub429\ub2c8\ub2e4. \ub3c4\ucee4 \ucee8\ud14c\uc774\ub108\ub97c \uc5ec\ub7ec\ubc88 \uc885\ub8cc\ud588\ub2e4\uac00 \uc7ac\uc2dc\uc791\ud588\uc5b4\uc57c\ub9cc \ud588\ub2e4\uba74 docker start -ai b \uc640 \uac19\uc740 \uba85\ub839\uc5b4\ub97c \ubc18\ubcf5\uc801\uc73c\ub85c \uc785\ub825\ud588\uc57c \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\uc74c\uacfc \uac19\uc774 auto-suggestions \uc774 \ubc18\ubcf5\ub418\ub294 \uba85\ub839\uc5b4\ub97c \ucd94\ucc9c\ud574\uc8fc\uae30 \ub54c\ubb38\uc5d0 \ub9e4\ubc88 \uc785\ub825\ud560 \ud544\uc694 \uc5c6\uc774 d \ub9cc \ub204\ub974\uace0 \u2192 \ub97c \ub204\ub974\uba74 \ub429\ub2c8\ub2e4. docker start -ai b \uc744 \uc77c\uc77c\uc774 \ub2e4 \uc785\ub825\ud574\uc57c \ud558\ub294 \uac83\uacfc \ube44\uad50\ud574\ubd05\ub2c8\ub2e4.","title":"auto-suggestions \uae30\ub2a5"},{"location":"dev/makefile/makefile/","text":"makefile \uc740 \ud504\ub85c\uc81d\ud2b8\ub97c \uc790\ub3d9\uc73c\ub85c \ube4c\ub4dc\ud558\uae30 \uc704\ud55c \uaddc\uce59\ub4e4\uc744 \uba85\uc2dc\ud574\uc8fc\uc5b4 make \uba85\ub839\uc5b4\ub85c \uae34 \ucef4\ud30c\uc77c \uba85\ub839\uc5b4\ub4e4\uc744 \uc790\ub3d9\uc73c\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\uc8fc\ub294 \ud30c\uc77c\uc785\ub2c8\ub2e4. Note \uc544\ub798\uc758 \ub0b4\uc6a9\uc740 \uc800\uc758 \ube14\ub85c\uadf8 \ub0b4\uc6a9 \uc744 \ub2e4\uc2dc \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4. \uc9c0\uae08\ubd80\ud130 \ud559\uc2b5\ud558\uba74\uc11c \uc18c\uac1c\ud574\ub4dc\ub9ac\ub294 \uc608\uc81c \ucf54\ub4dc\ub4e4\uc744 makefile \uc5d0 \uc800\uc7a5\ud558\uace0 make \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\ubcf4\uc138\uc694! \uae30\ubcf8 \uaddc\uce59 \u00b6 Makefile \uc740 \ud504\ub85c\uc81d\ud2b8\ub97c \uc790\ub3d9\uc73c\ub85c \ube4c\ub4dc\ud558\uae30 \uc704\ud55c \uc5ec\ub7ec\uac1c\uc758 \uaddc\uce59\uc73c\ub85c \uad6c\uc131\ub418\ub294\ub370 \uaddc\uce59\uc758 \uc77c\ubc18\uc801 \ubb38\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. targets : prerequisites command command command ... targets : \uaddc\uce59 \uc774\ub984\uc73c\ub85c\uc368 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\ub294 \ud30c\uc77c \uc774\ub984\ub4e4\uc774\ub2e4. \ub9cc\ub4e4\uc5b4\uc9c8 \ud30c\uc77c \uc774\ub984\uc744 \ub73b\ud55c\ub2e4. \ubcf4\ud1b5 \uaddc\uce59 \ub2f9 \ud558\ub098\uc758 \ud30c\uc77c\ub9cc \uc788\ub2e4. commands : targets \uc744 \ub9cc\ub4dc\ub294 \uc77c\ub828\uc758 \uba85\ub839\uc5b4\ub4e4\uc774\ub2e4. \uc774 \ubd80\ubd84\uc740 \uacf5\ubc31\uc774 \uc544\ub2cc \ud0ed\uc73c\ub85c \uc2dc\uc791\ub418\uc5b4\uc57c\ub9cc \ud55c\ub2e4. prerequisites : \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\ub294 \ud30c\uc77c \uc774\ub984\ub4e4\ub85c\uc368 commands \uac00 \uc2e4\ud589\ub418\uae30 \uc704\ud558\uc5ec \ud544\uc694\ud55c \uc758\uc874\uc131 \ud30c\uc77c \ub9ac\uc2a4\ud2b8\ub97c \ub73b\ud55c\ub2e4. Info \ub9cc\uc57d prerequisites \uc5d0\uc11c \uba85\uc2dc\ub41c \ud30c\uc77c\ub4e4 \uc911 \ud558\ub098\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uba3c\uc800 \uadf8 \ud30c\uc77c \uc774\ub984\uc758 \uaddc\uce59\uc744 \ucc3e\uc544\uc11c \uadf8 \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uc5ec \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \uaddc\uce59 \uc2e4\ud589 \uc21c\uc11c \u00b6 make \uba85\ub839\uc744 \uc778\uc790 \uc5c6\uc774 \uc2e4\ud589\ud558\uba74 Makefile \uc758 \uccab\ubc88\uc9f8 \uaddc\uce59\uc774 \uc2e4\ud589\ub41c\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uccab\ubc88\uc9f8 \uaddc\uce59\uc744 all \ub85c \uc815\ud558\ub294 \uad6d\ub8f0\uc774 \uc788\ub2e4. Example blah : blah . o cc blah.o -o blah blah.o : blah . c cc -c blah.c -o blah.o blah.c : echo \"int main() { return 0; }\" > blah.c clean : rm -f blah.o blah.c blah \uc774\ub7ec\ud55c Makefile \uc758 \uacbd\uc6b0 blah \uac00 \uccab\ubc88\uc9f8 \uaddc\uce59\uc774\ubbc0\ub85c \ub514\ud3f4\ud2b8 \uaddc\uce59\uc774 \ub41c\ub2e4. \uad00\ub840 \u00b6 \ud1b5\uc0c1\uc801\uc73c\ub85c CC \uc5d0 \ucef4\ud30c\uc77c\ub7ec\ub97c, CFLAGS \uc5d0 \ucef4\ud30c\uc77c \uc635\uc158\uc744 \uc800\uc7a5\ud558\uc5ec \uaddc\uce59\uc5d0 \uc0bd\uc785\ud55c\ub2e4. \uaddc\uce59\uc758 targets \ud30c\uc77c\uc774 \uc774\ubbf8 \uc874\uc7ac\ud560 \uacbd\uc6b0 \u00b6 make \ub294 \uaddc\uce59\uc758 \ud30c\uc77c\uc774 \uc774\ubbf8 \uc874\uc7ac\ud560 \uacbd\uc6b0 \"up to date\" \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\uace0 \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\ub294\ub2e4. Example some_file : touch some_file \ucc98\uc74c \uc2e4\ud589\ud560 \ub54c\ub294 \uaddc\uce59\uc774 \uc2e4\ud589 \ub418\uc9c0\ub9cc \ud55c\ubc88 \ub354 \uc2e4\ud589\ud558\uba74 \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. \ucd95\uc57d\uaddc\uce59 \u00b6 \uc704 \uc608\uc81c\uc758 Makefile \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ucd95\uc57d\ud560 \uc218 \uc788\ub2e4. some_file : ; touch some_file PHONY \u00b6 .PHONY : targets \uc774 \uc2e4\uc81c \ud30c\uc77c \uc774\ub984\uc774 \uc544\ub2c8\ub77c\ub294 \uac83\uc744 \uba85\uc2dc\ud55c\ub2e4. make \ub294 \ud6a8\uc728\uc131\uc744 \uc704\ud558\uc5ec targets \ud30c\uc77c\uc774 \uc774\ubbf8 \uc874\uc7ac\ud558\uba74 \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\ub294\ub2e4. \uadf8\ub7f0\ub370 clean \uc774\ub098 all \uac19\uc740 \uaddc\uce59\uc740 \uc2e4\uc81c \ud30c\uc77c \uc774\ub984\uc744 \uc9c0\uce6d\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub9cc\uc57d \uc2e4\uc218\ub85c all \ud30c\uc77c\uc774\ub098 clean \ud30c\uc77c\uc744 \uc0dd\uc131\ud558\uc600\uc744 \uacbd\uc6b0 all \uc774\ub098 clean \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\ub2e4. \uc774\uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud558\uc5ec .PHONY \uc5d0 targets \uc744 \uba85\uc2dc\ud558\uba74 make \ub294 \ud30c\uc77c\uc774 \uc874\uc7ac\ud558\ub294\uc9c0 \uac80\uc0ac\ud558\uc9c0 \uc54a\uace0 \uaddc\uce59\uc744 \ubb34\uc870\uac74 \uc2e4\ud589\ud55c\ub2e4. Tip \ub610\ud55c \ud30c\uc77c \uc874\uc7ac \uac80\uc0ac\ub97c \ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 .PHONY \ub97c \uc0ac\uc6a9\ud558\uba74 make \uc758 \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub41c\ub2e4. \ub2e4\uc74c\uc758 \uc608\uc2dc\ub97c \uc0b4\ud3b4\ubcf4\uba74\uc11c .PHONY \ub97c \uc774\ud574\ud574\ubd05\uc2dc\ub2e4. Example one : ; touch one clean : ; rm - f one \uc704 \uc608\uc81c\uc758 clean \uaddc\uce59\uc740 \ud30c\uc77c one \uc744 \uc0ad\uc81c\ud558\uae30\ub85c \ub418\uc5b4\uc788\ub2e4. \uadf8\ub7f0\ub370 \ub9cc\uc57d clean \uc774\ub77c\ub294 \uc774\ub984\uc744 \uac00\uc9c4 \ud30c\uc77c\uc774 \uc874\uc7ac\ud558\uba74 make clean \uc73c\ub85c \uaddc\uce59\uc744 \uc2e4\ud589\ud55c\ub2e4 \ud574\ub3c4 make: 'clean' is up to date. \ub77c\ub294 \uba54\uc138\uc9c0\uac00 \ucd9c\ub825\ub418\uace0 \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. one : ; touch one clean : ; rm - f one .PHONY : clean \ub530\ub77c\uc11c .PHONY \uc5d0 clean \uc744 \uba85\uc2dc\ud558\uc5ec \uc2e4\uc81c \ud30c\uc77c \uc774\ub984\uc774 \uc544\ub2c8\ub77c\ub294 \uac83\uc744 \uba85\uc2dc\ud574\uc900\ub2e4. \uadf8\ub7ec\uba74 clean \ud30c\uc77c\uc774 \uc788\uc5b4\ub3c4 \uaddc\uce59\uc774 \ud56d\uc0c1 \uc2e4\ud589\ub41c\ub2e4. \ubcc0\uc218 \u00b6 \ubb38\uc790\uc5f4\uc744 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uace0 ${} \ub098 $() \ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example files = file1 file2 some_file : $( files ) echo \"Look at this variable: \" $( files ) touch some_file file1 : touch file1 file2 : touch file2 clean : rm -f file1 file2 some_file \ubcc0\uc218 \ud560\ub2f9 var = value : \uc9c0\uc5f0\ub41c \ud560\ub2f9\uc73c\ub85c\uc368 \ubcc0\uc218\uac00 \uc0ac\uc6a9\ub420 \ub54c \uadf8 \uac12\ub4e4\uc774 \uc7ac\uadc0\uc801\uc73c\ub85c \ud560\ub2f9\ub41c\ub2e4. Example foo = $( bar ) bar = $( ugh ) ugh = Huh? all : ; echo $( foo ) \uc774\ub54c foo \uc5d0 \ud560\ub2f9\ub418\ub294 bar \ub294 foo \uac00 \uc120\uc5b8\ub418\ub294 \uc2dc\uc810\uc5d0\uc11c \uc815\uc758\ub418\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \ucef4\ud30c\uc77c \uc5d0\ub7ec\uac00 \ub0a0 \uac83 \uac19\ub2e4. \ud558\uc9c0\ub9cc = \ub294 \uc9c0\uc5f0\ub41c \ud560\ub2f9\uc73c\ub85c\uc11c foo \uac00 \uc2e4\uc9c8\uc801\uc73c\ub85c \uc0ac\uc6a9\ub420 \ub54c \ucc38\uc870\ub41c \ubaa8\ub4e0 \ubcc0\uc218\ub4e4\uc744 \uc7ac\uadc0\uc801\uc73c\ub85c \ucc3e\uc544\uac00\uba70 \ud560\ub2f9\ud55c\ub2e4. var := value : \uc989\uc2dc \ud560\ub2f9\uc73c\ub85c\uc368 \ubcc0\uc218\uac00 \uc120\uc5b8\ub420 \ub54c \uadf8 \uac12\ub4e4\uc774 \uc7ac\uadc0\uc801\uc73c\ub85c \ud560\ub2f9\ub41c\ub2e4. Example foo := $( bar ) bar := $( ugh ) ugh := Huh? all : ; echo $( foo ) \uc774\uc804 \uc608\uc81c\uc640\ub294 \ub2ec\ub9ac \uc774 \ucf54\ub4dc\ub294 \uc544\ubb34\uac83\ub3c4 \ucd9c\ub825\ud558\uc9c0 \uc54a\ub294\ub2e4. foo \uac00 \uc120\uc5b8\ub418\ub294 \uc2dc\uc810\uc5d0\uc11c bar \ub294 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc774\ub2e4. ugh := Huh? bar := $( ugh ) foo := $( bar ) all : ; echo $( foo ) \uc989\uc2dc \ud560\ub2f9\ub41c \ubcc0\uc218\ub97c \uc81c\ub300\ub85c \ucd9c\ub825\ub418\uac8c \ud558\uae30 \uc704\ud574\uc11c\ub294 \uc704\uc640 \uac19\uc774 \uc120\uc5b8 \uc21c\uc11c\ub97c \ubc14\uafb8\uc5b4 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. \uc989\uc2dc \ud560\ub2f9\uacfc \uc9c0\uc5f0 \ud560\ub2f9\uc744 \uc11e\uc5b4\uc11c \uc4f0\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc21c\uc11c\ub97c \ubc30\uce58\ud558\ub294 \uac83 \ub610\ud55c \uac00\ub2a5\ud558\ub2e4. bar = $( ugh ) ugh := Huh? foo := $( bar ) all : ; echo $( foo ) \uc774\ub807\uac8c \ud574\ub3c4 \ub41c\ub2e4. foo = $( bar ) ugh := Huh? bar := $( ugh ) all : ; echo $( foo ) \ub2e4\uc74c \uc608\uc2dc\ub85c \uc9c0\uc5f0 \ud560\ub2f9\uacfc \uc989\uc2dc \ud560\ub2f9\uc744 \ube44\uad50\ud574\ubcf4\uc138\uc694. Example one = one ${ later_variable } two := two ${ later_variable } later_variable = later .PHONY : all all : echo $( one ) echo $( two ) \uc704 \uc608\uc2dc\uc5d0\uc11c one \uc5d0\ub294 later_variable \uc774 \ud560\ub2f9\ub418\uc9c0\ub9cc two \ub294 := \uc73c\ub85c \uc989\uc2dc\ud560\ub2f9\uc744 \uc0ac\uc6a9\ud588\uae30 \ub54c\ubb38\uc5d0 later_variable \uc774 \ud560\ub2f9\ub418\uc9c0 \uc54a\ub294\ub2e4. var ?= value : \ub9cc\uc57d var \uc774 \ud560\ub2f9\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc73c\uba74 value \ub85c \ud560\ub2f9\ud55c\ub2e4. Example one = hello one ?= will not be set two ?= will be set .PHONY : all all : echo $( one ) echo $( two ) \uc704 \uc608\uc2dc\uc5d0\uc11c ?= \ub85c one \uacfc two \ub97c \ud560\ub2f9\ud558\ub294\ub370 two \ub9cc \ud560\ub2f9\ub41c\ub2e4. \ubcc0\uc218 \ud655\uc7a5 : \ub2e8\uc21c\ud788 \ubcc0\uc218\ub97c \uc774\uc5b4\ubd99\ud788\ub294 \uac83\uc73c\ub85c \ubcc0\uc218 \ud655\uc7a5\uc744 \ud560 \uc218 \uc788\ub2e4. Example one = hello one := ${ one } there all : echo $( one ) \uc704 \uc608\uc2dc\uc5d0\uc11c \uc989\uc2dc\ud560\ub2f9 := \ub97c \uc9c0\uc5f0\ud560\ub2f9 = \uc73c\ub85c \ubc14\uafbc\ub2e4\uba74 \ubb34\ud55c\ub8e8\ud504 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c\ub2e4. += \ubcc0\uc218 \ud655\uc7a5 : += \uc5f0\uc0b0\uc790\ub85c\ub3c4 \ubcc0\uc218 \ud655\uc7a5\uc744 \ud560 \uc218 \uc788\ub2e4. Example one = hello one += there all : echo $( one ) \uc704 \uc608\uc2dc\ub294 hello there \ub97c \ucd9c\ub825\ud55c\ub2e4. \ud560\ub2f9\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218 : \ud560\ub2f9\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\ub97c \ub2e4\ub978 \ubcc0\uc218\uc5d0 \ud560\ub2f9\ud558\uba74 \uc2a4\ud398\uc774\uc2a4 \ud558\ub098\uac00 \ud560\ub2f9\ub41c\ub2e4. Example with_spaces = hello # with_spaces has many spaces after \"hello\" after = $( with_spaces ) there nullstring = space = $( nullstring ) # Make a variable with a single space. .PHONY : all all : @echo \" $( after ) \" @echo start \" $( nullstring ) \" end @echo start \" $( space ) \" end \uc704 \uc608\uc2dc\uc758 \ucd9c\ub825\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ make hello there startend start end \ubcc0\uc218 \uce58\ud658 : $(var:a=b) \ub85c \ubcc0\uc218 var \uc758 a \uac00 b \ub85c \uce58\ud658\ub41c\ub2e4. Example foo := a.o b.o c.o bar := $( foo:.o = .c ) all : ; echo $( bar ) \uc704 \uc608\uc2dc\ub294 a.c b.c c.c \ub97c \ucd9c\ub825\ud55c\ub2e4. \ud328\ud134 \ubcc0\uc218 \uce58\ud658 : % \ub97c \uc0ac\uc6a9\ud55c \ud328\ud134\uc744 \ud3ec\ud568\ud558\uc5ec \ubcc0\uc218 \uce58\ud658\uc744 \ud560 \uc218\ub3c4 \uc788\ub2e4. Example foo := a.o b.o c.c bar := $( foo:%.o = % ) all : ; echo $( bar ) \uc704 \uc608\uc2dc\ub294 a b c.c \ub97c \ucd9c\ub825\ud55c\ub2e4. \ud568\ucd95 \uaddc\uce59 \u00b6 Makefile \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud568\ucd95 \uaddc\uce59\uc744 \uc9c0\uc6d0\ud55c\ub2e4. # blah.o \uaddc\uce59 \uc548\uc5d0 \uc8fc\uc11d\uc744 \ub2ec\uba74 \ud568\ucd95 \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. # Implicit command of: \"cc blah.o -o blah\" blah : # Implicit command of: \"cc -c blah.c -o blah.o\" blah.o : blah.c : echo \"int main() { return 0; }\" > blah.c clean : rm -f blah.o blah blah.c \ud2b9\uc218 \ubb38\uc790 \u00b6 \uc640\uc77c\ub4dc\uce74\ub4dc * : \uc640\uc77c\ub4dc\uce74\ub4dc * \ub294 targets , prerequisites , commands \uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\ud558\ub2e4. Example some_file : *. c # create the binary *.c : touch f1.c touch f2.c clean : rm -f *.c \uc774 Makefile \uc740 .c \ud30c\uc77c\uc774 \ub2e8 \ud558\ub098\ub77c\ub3c4 \uc788\uc73c\uba74 *.c \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. \uc640\uc77c\ub4dc\uce74\ub4dc * \ub294 \uc5b4\ub5a4 \ubb38\uc790\uc5f4\uc774\ub77c\ub3c4 \ud574\ub2f9\ub418\uae30\uc5d0 make \uac00 *.c \ub77c\ub294 \uc758\uc874\uc131\uc774 \ud574\uacb0 \ub41c \uac83\uc73c\ub85c \ud310\ub2e8\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc640\uc77c\ub4dc\uce74\ub4dc * \ud568\uc218 : \uc640\uc77c\ub4dc\uce74\ub4dc * \ub97c targets , prerequisites , commands \uc5d0\uc11c\ubc16\uc5d0 \uc0ac\uc6a9\ud558\uc9c0 \ubabb\ud558\uae30 \ub54c\ubb38\uc5d0 \ubcc0\uc218\ud560\ub2f9\uc774\ub098 \ud568\uc218\uc778\uc790 \uc804\ub2ec \uc2dc\uc5d0\ub294 \uc640\uc77c\ub4dc\uce74\ub4dc \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Example wrong = *.o # Wrong objects := $( wildcard *.c ) # Right some_binary : touch f1.c touch f2.c echo $( wrong ) echo $( objects ) clean : rm -f *.c % \ub294 \ubaa8\ub4e0 \ud30c\uc77c \uc774\ub984\uc744 \ub73b\ud55c\ub2e4. Example %.c \ub77c\uace0 \ud558\uba74 \ubaa8\ub4e0 .c \ud30c\uc77c\uc744 \ub73b\ud55c\ub2e4. $@ \ub294 \uaddc\uce59\uc758 : \uc67c\ucabd \ubd80\ubd84\uc774\ub2e4. $< \ub294 \uaddc\uce59\uc758 : \uc624\ub978\ucabd \ubd80\ubd84\uc758 \uccab\ubc88\uc9f8 \uc544\uc774\ud15c\uc774\ub2e4. $^ \ub294 \uaddc\uce59\uc758 : \uc624\ub978\ucabd \ubd80\ubd84\uc774\ub2e4. \ub2e4\uc911 \ud0c0\uac9f \u00b6 targets \uc5d0 \uc5ec\ub7ec \ud30c\uc77c\uc774 \uc120\uc5b8\ub418\uc5b4 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. Example all : f 1. o f 2. o f1.o f2.o : echo $@ \uc704 \uc608\uc2dc\uc5d0\uc11c \uaddc\uce59 all \uc5d0\uc11c f1.o \uc640 f2.o \ub97c \uc9c0\uc815\ud558\uc600\ub294\ub370 \uac01\uac01 f1.o f2.o \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uac8c \ub41c\ub2e4. \uc774\ub54c \uc2e4\ud589 \uba85\ub839 echo $@ \uc758 $@ \uc5d0\ub294 \uac01\uac01 \ub9e5\ub77d\uc5d0 \ub530\ub77c f1.o \uc640 f2.o \uac00 \ub300\uc785\ub41c\ub2e4. targets \uc5d0 \uc640\uc77c\ub4dc\uce74\ub4dc % \ub85c \uc77c\ubc18\uc801\uc778 \ud30c\uc77c\uc744 \uc120\uc5b8\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example all : f 1. o f 2. o %.o : echo $@ \uc774 \uacbd\uc6b0 %.o \uaddc\uce59\uc73c\ub85c \uc778\ud574 .o \ud655\uc7a5\uc790\ub97c \uac00\uc9c4 \ubaa8\ub4e0 \ud30c\uc77c\uc774 \uc774 \uaddc\uce59\uc73c\ub85c \uc0dd\uc131\ub41c\ub2e4. all : f 1. o f 2. o %.o : echo $@ f1.o : echo TEST \ud558\uc9c0\ub9cc \uc704\uc640 \uac19\uc774 f1.o \uc758 \uaddc\uce59\uc744 \ub530\ub85c \uc9c0\uc815\ud574\uc904 \uacbd\uc6b0 f1.o \ub97c \uc0dd\uc131\ud560 \ub54c make \ub294 %.o \uaddc\uce59\uc774 \uc544\ub2c8\ub77c f1.o \uaddc\uce59\uc744 \uc2e4\ud589\ud55c\ub2e4. References : https://makefiletutorial.com/ http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/","title":"Makefile \uae30\ubcf8"},{"location":"dev/makefile/makefile/#_1","text":"Makefile \uc740 \ud504\ub85c\uc81d\ud2b8\ub97c \uc790\ub3d9\uc73c\ub85c \ube4c\ub4dc\ud558\uae30 \uc704\ud55c \uc5ec\ub7ec\uac1c\uc758 \uaddc\uce59\uc73c\ub85c \uad6c\uc131\ub418\ub294\ub370 \uaddc\uce59\uc758 \uc77c\ubc18\uc801 \ubb38\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. targets : prerequisites command command command ... targets : \uaddc\uce59 \uc774\ub984\uc73c\ub85c\uc368 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\ub294 \ud30c\uc77c \uc774\ub984\ub4e4\uc774\ub2e4. \ub9cc\ub4e4\uc5b4\uc9c8 \ud30c\uc77c \uc774\ub984\uc744 \ub73b\ud55c\ub2e4. \ubcf4\ud1b5 \uaddc\uce59 \ub2f9 \ud558\ub098\uc758 \ud30c\uc77c\ub9cc \uc788\ub2e4. commands : targets \uc744 \ub9cc\ub4dc\ub294 \uc77c\ub828\uc758 \uba85\ub839\uc5b4\ub4e4\uc774\ub2e4. \uc774 \ubd80\ubd84\uc740 \uacf5\ubc31\uc774 \uc544\ub2cc \ud0ed\uc73c\ub85c \uc2dc\uc791\ub418\uc5b4\uc57c\ub9cc \ud55c\ub2e4. prerequisites : \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\ub294 \ud30c\uc77c \uc774\ub984\ub4e4\ub85c\uc368 commands \uac00 \uc2e4\ud589\ub418\uae30 \uc704\ud558\uc5ec \ud544\uc694\ud55c \uc758\uc874\uc131 \ud30c\uc77c \ub9ac\uc2a4\ud2b8\ub97c \ub73b\ud55c\ub2e4. Info \ub9cc\uc57d prerequisites \uc5d0\uc11c \uba85\uc2dc\ub41c \ud30c\uc77c\ub4e4 \uc911 \ud558\ub098\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uba3c\uc800 \uadf8 \ud30c\uc77c \uc774\ub984\uc758 \uaddc\uce59\uc744 \ucc3e\uc544\uc11c \uadf8 \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uc5ec \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.","title":"\uae30\ubcf8 \uaddc\uce59"},{"location":"dev/makefile/makefile/#_2","text":"make \uba85\ub839\uc744 \uc778\uc790 \uc5c6\uc774 \uc2e4\ud589\ud558\uba74 Makefile \uc758 \uccab\ubc88\uc9f8 \uaddc\uce59\uc774 \uc2e4\ud589\ub41c\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uccab\ubc88\uc9f8 \uaddc\uce59\uc744 all \ub85c \uc815\ud558\ub294 \uad6d\ub8f0\uc774 \uc788\ub2e4. Example blah : blah . o cc blah.o -o blah blah.o : blah . c cc -c blah.c -o blah.o blah.c : echo \"int main() { return 0; }\" > blah.c clean : rm -f blah.o blah.c blah \uc774\ub7ec\ud55c Makefile \uc758 \uacbd\uc6b0 blah \uac00 \uccab\ubc88\uc9f8 \uaddc\uce59\uc774\ubbc0\ub85c \ub514\ud3f4\ud2b8 \uaddc\uce59\uc774 \ub41c\ub2e4.","title":"\uaddc\uce59 \uc2e4\ud589 \uc21c\uc11c"},{"location":"dev/makefile/makefile/#_3","text":"\ud1b5\uc0c1\uc801\uc73c\ub85c CC \uc5d0 \ucef4\ud30c\uc77c\ub7ec\ub97c, CFLAGS \uc5d0 \ucef4\ud30c\uc77c \uc635\uc158\uc744 \uc800\uc7a5\ud558\uc5ec \uaddc\uce59\uc5d0 \uc0bd\uc785\ud55c\ub2e4.","title":"\uad00\ub840"},{"location":"dev/makefile/makefile/#targets","text":"make \ub294 \uaddc\uce59\uc758 \ud30c\uc77c\uc774 \uc774\ubbf8 \uc874\uc7ac\ud560 \uacbd\uc6b0 \"up to date\" \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\uace0 \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\ub294\ub2e4. Example some_file : touch some_file \ucc98\uc74c \uc2e4\ud589\ud560 \ub54c\ub294 \uaddc\uce59\uc774 \uc2e4\ud589 \ub418\uc9c0\ub9cc \ud55c\ubc88 \ub354 \uc2e4\ud589\ud558\uba74 \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4.","title":"\uaddc\uce59\uc758 targets \ud30c\uc77c\uc774 \uc774\ubbf8 \uc874\uc7ac\ud560 \uacbd\uc6b0"},{"location":"dev/makefile/makefile/#_4","text":"\uc704 \uc608\uc81c\uc758 Makefile \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ucd95\uc57d\ud560 \uc218 \uc788\ub2e4. some_file : ; touch some_file","title":"\ucd95\uc57d\uaddc\uce59"},{"location":"dev/makefile/makefile/#phony","text":".PHONY : targets \uc774 \uc2e4\uc81c \ud30c\uc77c \uc774\ub984\uc774 \uc544\ub2c8\ub77c\ub294 \uac83\uc744 \uba85\uc2dc\ud55c\ub2e4. make \ub294 \ud6a8\uc728\uc131\uc744 \uc704\ud558\uc5ec targets \ud30c\uc77c\uc774 \uc774\ubbf8 \uc874\uc7ac\ud558\uba74 \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\ub294\ub2e4. \uadf8\ub7f0\ub370 clean \uc774\ub098 all \uac19\uc740 \uaddc\uce59\uc740 \uc2e4\uc81c \ud30c\uc77c \uc774\ub984\uc744 \uc9c0\uce6d\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub9cc\uc57d \uc2e4\uc218\ub85c all \ud30c\uc77c\uc774\ub098 clean \ud30c\uc77c\uc744 \uc0dd\uc131\ud558\uc600\uc744 \uacbd\uc6b0 all \uc774\ub098 clean \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\ub2e4. \uc774\uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud558\uc5ec .PHONY \uc5d0 targets \uc744 \uba85\uc2dc\ud558\uba74 make \ub294 \ud30c\uc77c\uc774 \uc874\uc7ac\ud558\ub294\uc9c0 \uac80\uc0ac\ud558\uc9c0 \uc54a\uace0 \uaddc\uce59\uc744 \ubb34\uc870\uac74 \uc2e4\ud589\ud55c\ub2e4. Tip \ub610\ud55c \ud30c\uc77c \uc874\uc7ac \uac80\uc0ac\ub97c \ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 .PHONY \ub97c \uc0ac\uc6a9\ud558\uba74 make \uc758 \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub41c\ub2e4. \ub2e4\uc74c\uc758 \uc608\uc2dc\ub97c \uc0b4\ud3b4\ubcf4\uba74\uc11c .PHONY \ub97c \uc774\ud574\ud574\ubd05\uc2dc\ub2e4. Example one : ; touch one clean : ; rm - f one \uc704 \uc608\uc81c\uc758 clean \uaddc\uce59\uc740 \ud30c\uc77c one \uc744 \uc0ad\uc81c\ud558\uae30\ub85c \ub418\uc5b4\uc788\ub2e4. \uadf8\ub7f0\ub370 \ub9cc\uc57d clean \uc774\ub77c\ub294 \uc774\ub984\uc744 \uac00\uc9c4 \ud30c\uc77c\uc774 \uc874\uc7ac\ud558\uba74 make clean \uc73c\ub85c \uaddc\uce59\uc744 \uc2e4\ud589\ud55c\ub2e4 \ud574\ub3c4 make: 'clean' is up to date. \ub77c\ub294 \uba54\uc138\uc9c0\uac00 \ucd9c\ub825\ub418\uace0 \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. one : ; touch one clean : ; rm - f one .PHONY : clean \ub530\ub77c\uc11c .PHONY \uc5d0 clean \uc744 \uba85\uc2dc\ud558\uc5ec \uc2e4\uc81c \ud30c\uc77c \uc774\ub984\uc774 \uc544\ub2c8\ub77c\ub294 \uac83\uc744 \uba85\uc2dc\ud574\uc900\ub2e4. \uadf8\ub7ec\uba74 clean \ud30c\uc77c\uc774 \uc788\uc5b4\ub3c4 \uaddc\uce59\uc774 \ud56d\uc0c1 \uc2e4\ud589\ub41c\ub2e4.","title":"PHONY"},{"location":"dev/makefile/makefile/#_5","text":"\ubb38\uc790\uc5f4\uc744 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uace0 ${} \ub098 $() \ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example files = file1 file2 some_file : $( files ) echo \"Look at this variable: \" $( files ) touch some_file file1 : touch file1 file2 : touch file2 clean : rm -f file1 file2 some_file","title":"\ubcc0\uc218"},{"location":"dev/makefile/makefile/#_6","text":"Makefile \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud568\ucd95 \uaddc\uce59\uc744 \uc9c0\uc6d0\ud55c\ub2e4. # blah.o \uaddc\uce59 \uc548\uc5d0 \uc8fc\uc11d\uc744 \ub2ec\uba74 \ud568\ucd95 \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. # Implicit command of: \"cc blah.o -o blah\" blah : # Implicit command of: \"cc -c blah.c -o blah.o\" blah.o : blah.c : echo \"int main() { return 0; }\" > blah.c clean : rm -f blah.o blah blah.c","title":"\ud568\ucd95 \uaddc\uce59"},{"location":"dev/makefile/makefile/#_7","text":"\uc640\uc77c\ub4dc\uce74\ub4dc * : \uc640\uc77c\ub4dc\uce74\ub4dc * \ub294 targets , prerequisites , commands \uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\ud558\ub2e4. Example some_file : *. c # create the binary *.c : touch f1.c touch f2.c clean : rm -f *.c \uc774 Makefile \uc740 .c \ud30c\uc77c\uc774 \ub2e8 \ud558\ub098\ub77c\ub3c4 \uc788\uc73c\uba74 *.c \uaddc\uce59\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4. \uc640\uc77c\ub4dc\uce74\ub4dc * \ub294 \uc5b4\ub5a4 \ubb38\uc790\uc5f4\uc774\ub77c\ub3c4 \ud574\ub2f9\ub418\uae30\uc5d0 make \uac00 *.c \ub77c\ub294 \uc758\uc874\uc131\uc774 \ud574\uacb0 \ub41c \uac83\uc73c\ub85c \ud310\ub2e8\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc640\uc77c\ub4dc\uce74\ub4dc * \ud568\uc218 : \uc640\uc77c\ub4dc\uce74\ub4dc * \ub97c targets , prerequisites , commands \uc5d0\uc11c\ubc16\uc5d0 \uc0ac\uc6a9\ud558\uc9c0 \ubabb\ud558\uae30 \ub54c\ubb38\uc5d0 \ubcc0\uc218\ud560\ub2f9\uc774\ub098 \ud568\uc218\uc778\uc790 \uc804\ub2ec \uc2dc\uc5d0\ub294 \uc640\uc77c\ub4dc\uce74\ub4dc \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Example wrong = *.o # Wrong objects := $( wildcard *.c ) # Right some_binary : touch f1.c touch f2.c echo $( wrong ) echo $( objects ) clean : rm -f *.c % \ub294 \ubaa8\ub4e0 \ud30c\uc77c \uc774\ub984\uc744 \ub73b\ud55c\ub2e4. Example %.c \ub77c\uace0 \ud558\uba74 \ubaa8\ub4e0 .c \ud30c\uc77c\uc744 \ub73b\ud55c\ub2e4. $@ \ub294 \uaddc\uce59\uc758 : \uc67c\ucabd \ubd80\ubd84\uc774\ub2e4. $< \ub294 \uaddc\uce59\uc758 : \uc624\ub978\ucabd \ubd80\ubd84\uc758 \uccab\ubc88\uc9f8 \uc544\uc774\ud15c\uc774\ub2e4. $^ \ub294 \uaddc\uce59\uc758 : \uc624\ub978\ucabd \ubd80\ubd84\uc774\ub2e4.","title":"\ud2b9\uc218 \ubb38\uc790"},{"location":"dev/makefile/makefile/#_8","text":"targets \uc5d0 \uc5ec\ub7ec \ud30c\uc77c\uc774 \uc120\uc5b8\ub418\uc5b4 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. Example all : f 1. o f 2. o f1.o f2.o : echo $@ \uc704 \uc608\uc2dc\uc5d0\uc11c \uaddc\uce59 all \uc5d0\uc11c f1.o \uc640 f2.o \ub97c \uc9c0\uc815\ud558\uc600\ub294\ub370 \uac01\uac01 f1.o f2.o \uaddc\uce59\uc744 \uc2e4\ud589\ud558\uac8c \ub41c\ub2e4. \uc774\ub54c \uc2e4\ud589 \uba85\ub839 echo $@ \uc758 $@ \uc5d0\ub294 \uac01\uac01 \ub9e5\ub77d\uc5d0 \ub530\ub77c f1.o \uc640 f2.o \uac00 \ub300\uc785\ub41c\ub2e4. targets \uc5d0 \uc640\uc77c\ub4dc\uce74\ub4dc % \ub85c \uc77c\ubc18\uc801\uc778 \ud30c\uc77c\uc744 \uc120\uc5b8\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example all : f 1. o f 2. o %.o : echo $@ \uc774 \uacbd\uc6b0 %.o \uaddc\uce59\uc73c\ub85c \uc778\ud574 .o \ud655\uc7a5\uc790\ub97c \uac00\uc9c4 \ubaa8\ub4e0 \ud30c\uc77c\uc774 \uc774 \uaddc\uce59\uc73c\ub85c \uc0dd\uc131\ub41c\ub2e4. all : f 1. o f 2. o %.o : echo $@ f1.o : echo TEST \ud558\uc9c0\ub9cc \uc704\uc640 \uac19\uc774 f1.o \uc758 \uaddc\uce59\uc744 \ub530\ub85c \uc9c0\uc815\ud574\uc904 \uacbd\uc6b0 f1.o \ub97c \uc0dd\uc131\ud560 \ub54c make \ub294 %.o \uaddc\uce59\uc774 \uc544\ub2c8\ub77c f1.o \uaddc\uce59\uc744 \uc2e4\ud589\ud55c\ub2e4. References : https://makefiletutorial.com/ http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/","title":"\ub2e4\uc911 \ud0c0\uac9f"},{"location":"dev/makefile/makefile2/","text":"Note \uc544\ub798\uc758 \ub0b4\uc6a9\uc740 \uc800\uc758 \ube14\ub85c\uadf8 \ub0b4\uc6a9 \uc744 \ub2e4\uc2dc \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4. vpath \u00b6 vpath : prerequisites \ub97c \ucc3e\ub294 \uacbd\ub85c\ub97c \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc640 \ub354\ubd88\uc5b4\uc11c \ucd94\uac00\ud55c\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c make \ub294 prerequisites \ub97c \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c \ucc3e\ub294\ub2e4. \uadf8\ub7f0\ub370 vpath \ub85c \ud2b9\uc815 prerequisites \uc758 \ud0d0\uc0c9\uacbd\ub85c\ub97c \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub354\ubd88\uc5b4\uc11c \ucd94\uac00\ud560 \uc218 \uc788\ub2e4. \ud615\uc2dd : vpath <pattern> <directories, space/colon seperated> <pattern> \uc5d0\uc11c \ud2b9\uc218\ubb38\uc790 % \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. VPATH \ud658\uacbd\ubcc0\uc218\uc5d0\ub3c4 \uacbd\ub85c\ub97c \ucd94\uac00\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example vpath %.h ../headers ../other-directory some_binary : ../ headers blah . h touch some_binary ../headers : mkdir ../headers blah.h : touch ../headers/blah.h \uc704 \uc608\uc2dc\uc758 vpath \ub54c\ubb38\uc5d0 .h \ud655\uc7a5\uc790\ub97c \uac00\uc9c4 \ud30c\uc77c\uc744 \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac \ubfd0\ub9cc \uc544\ub2c8\ub77c ../headers \ub514\ub809\ud1a0\ub9ac\uc640 ../other-directory \uc5d0\uc11c\ub3c4 \ucc3e\ub294\ub2e4. \uc774\uc5d0 \ub530\ub77c \ub9cc\uc57d vpath \uac00 \ud3ec\ud568\ub41c \ub77c\uc778\uc744 \uc9c0\uc6b0\uace0 make \ub97c \uc2e4\ud589\ud574\ubcf4\uba74 \ud30c\uc77c blah.h \ub97c \ucc3e\uc9c0 \ubabb\ud558\uc5ec \uaddc\uce59 blah.h: \ub97c \ud56d\uc0c1 \uc2e4\ud589\ud558\uac8c \ub41c\ub2e4. Static Pattern Rules \u00b6 static pattern : \ud328\ud134\uc5d0 \ub9de\ub294 targets \uc744 \uc790\ub3d9\uc73c\ub85c prerequisites \uc73c\ub85c \ubcc0\ud658\ud574\uc8fc\ub294 \uaddc\uce59\uc774\ub2e4. targets ...: target-pattern: prereq-patterns ... \uc758 \ud615\uc2dd\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4. target-pattern \uc5d0 \ub9e4\uce6d\ub41c target \uc744 prereq-pattern \uc73c\ub85c \ubcc0\ud658\ud574\uc900\ub2e4. Example objects = foo.o bar.o $(objects) : %. o : %. c echo \"Call gcc to generate $@ from $ <\" \uc704 \uaddc\uce59\uc740 \ub2e4\uc74c\uc758 \uaddc\uce59\uacfc \ub3d9\uc77c\ud558\ub2e4. foo.o : foo . c echo \"Call gcc to generate $@ from $ <\" bar.o : bar . c echo \"Call gcc to generate bar.o from bar.c\" Static Pattern Rules and Filter \u00b6 static pattern with Filter : static pattern \uc758 targets \uc744 \ud328\ud134\uc73c\ub85c \ud544\ud130\ub9c1\ud574\uc11c \ub9e4\uce6d\ub418\uc9c0 \uc54a\ub294 target \uc740 \uaddc\uce59\uc5d0 \uc801\uc6a9\uc2dc\ud0a4\uc9c0 \uc54a\ub294 \uaddc\uce59\uc774\ub2e4. Example objects = foo.o bar.o f1.c $(objects) : %. o : %. c echo \"Call gcc to generate $@ from $ <\" \uc704 \uaddc\uce59\uc5d0\uc11c f1.c \ub294 \ubd84\uba85 static pattern \uc5d0 \ud574\ub2f9\ub418\uc9c0 \uc54a\ub294 \uc608\uc678\uc774\ub2e4. \uc774 \uaddc\uce59\uc740 \ub2e4\uc74c\uc758 \uaddc\uce59\uacfc \ub3d9\uc77c\ud55c \uae30\ub2a5\uc744 \ud558\uac8c \ub41c\ub2e4. foo.o : foo . c echo \"Call gcc to generate $@ from $ <\" bar.o : bar . c echo \"Call gcc to generate bar.o from bar.c\" f1.c : echo \"Call gcc to generate f1.c from\" \ub530\ub77c\uc11c \uc774\ub7ec\ud55c \uc608\uc678\ub294 \uaddc\uce59\uc5d0 \uc801\uc6a9\uc2dc\ud0a4\uc9c0 \uc54a\uae30 \uc704\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \ud544\ud130\ub9c1\uc744 \uac78 \uc218 \uc788\ub2e4. objects = foo.o bar.o f1.c $(filter %.o $(objects)) : %. o : %. c echo \"Call gcc to generate $@ from $ <\" \uc704 \uaddc\uce59\uc740 objects \uc5d0\uc11c .o \ub85c \ub05d\ub098\ub294 \ud30c\uc77c\ub9cc \uaddc\uce59\uc5d0 \uc801\uc6a9\uc2dc\ud0a8\ub2e4. Double-Colon \u00b6 Double-Colon : Double-Colon \uc73c\ub85c \uc2dc\uc791\ub418\ub294 \uaddc\uce59\uc774 \uc5ec\ub7ec\ubc88 \uc815\uc758\ub418\uc5b4\ub3c4 \uadf8\uac83\ub4e4\uc744 \ubaa8\ub450 \uc2e4\ud589\ud558\uac8c \ud574\uc900\ub2e4. \uc774 \uaddc\uce59\uc740 \ud754\ud788 \uc4f0\uc774\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\ub3c4 \ub2e4\uc74c \uc608\uc2dc\ub97c \ud55c \ubc88 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Example all : blah blah :: echo \"hello\" blah :: echo \"hello again\" \uc704 \uaddc\uce59\uc5d0\uc11c blah \uac00 Double-Colon \uc73c\ub85c \uc2dc\uc791\ub418\ub294\ub370 Single-Colon \uc73c\ub85c \ubc14\uafb8\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uba74\uc11c \ub9c8\uc9c0\ub9c9 \uaddc\uce59\ub9cc \uc2e4\ud589\ub41c\ub2e4. \uba85\ub839 \uc2e4\ud589 \uad00\ub828 \uaddc\uce59 \u00b6 Command Echoing/Silencing \u00b6 Command Echoing/Silencing : \uba85\ub839\uc5b4 \uc55e\uc5d0 @ \ub97c \ubd99\ud788\uba74 \uba85\ub839\uc5b4\uac00 \ucd9c\ub825\ub418\uc9c0 \uc54a\ub294\ub2e4. Example all : @echo \"hello\" echo \"hello again\" \uc704 \uc608\uc2dc\uc758 \ucd9c\ub825\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ make hello echo \"hello again\" hello again Tip make -s \ub85c \uc2e4\ud589\ud558\uba74 \ubaa8\ub4e0 \uba85\ub839\uc5b4\uc5d0 @ \ub97c \ubd99\ud600\uc11c \uc2e4\ud589\ud55c \ud6a8\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4. Command Execution \u00b6 Command Execution : \uac01\uac01\uc758 \uba85\ub839\uc5b4\ub294 \ud56d\uc0c1 \uc0c8\ub85c\uc6b4 \uc258\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \uac83\uacfc \uac19\ub2e4. \ub530\ub77c\uc11c make \uc5d0\uc11c \uba85\ub839\uc5b4\ub4e4\uc744 \uc2e4\ud589\ud558\uae30 \uc704\ud558\uc5ec \ubcf4\ud1b5 ; \\ \ub85c \uba85\ub839\uc5b4\ub97c \uc774\uc5b4\uc900\ub2e4. Example all : cd .. echo ` pwd ` cd .. ; echo ` pwd ` cd .. ; \\ echo ` pwd ` \uc704 \uc608\uc2dc\uc758 \ucd9c\ub825\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ make cd .. echo ` pwd ` /home/ccsss/repo/csrepo/ccss17.github.io/maketest cd .. ; echo ` pwd ` /home/ccsss/repo/csrepo/ccss17.github.io cd .. ; \\ echo ` pwd ` /home/ccsss/repo/csrepo/ccss17.github.io Default Shell \u00b6 Default Shell : make \uac00 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud558\ub294 \uae30\ubcf8 \uc258\uc740 /bin/sh \uc778\ub370 SHELL \ubcc0\uc218\ub97c \ubc14\uafc8\uc73c\ub85c\uc368 \uae30\ubcf8 \uc258\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. Example all : echo \"current shell: $$ 0\" \uc704 \uc608\uc2dc\uac00 /bin/sh \uc744 \ucd9c\ub825\ud558\ub294\ub370 \ube44\ud574 \ub2e4\uc74c \uc608\uc2dc\ub294 /bin/bash \ub97c \ucd9c\ub825\ud55c\ub2e4. SHELL = /bin/bash all : echo \"current shell: $$ 0\" DELETE_ON_ERROR \u00b6 DELETE_ON_ERROR : make \ub294 \uaddc\uce59\uc774 nonzero \uc885\ub8cc \ucf54\ub4dc\ub97c \ubc18\ud658\ud558\uba74 \uc804\uccb4 \uc2e4\ud589\uc744 \uc911\ub2e8\ud558\ub294\ub370, .DELETE_ON_ERROR \uac00 \uc124\uc815\ub418\uba74 \uc774\ub54c nonzero \ubc18\ud658\uac12\uc744 \ubc18\ud658\ud55c \uaddc\uce59\uc758 target \ud30c\uc77c\uc744 \uc0ad\uc81c\ud55c\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 .DELETE_ON_ERROR \ub97c \uc124\uc815\ud558\ub294 \uac83\uc774 \uc88b\ub2e4. Example all : one one : touch one false \uc704 \uc608\uc2dc\ub294 false \uac00 nonzero \uc885\ub8cc\ucf54\ub4dc\ub97c \ubc18\ud658\ud558\uae30\uc5d0 \uc804\uccb4\uc2e4\ud589\uc774 \uc911\ub2e8\ub418\uc9c0\ub9cc \ud30c\uc77c one \uc774 \uc0ac\ub77c\uc9c0\uc9c0 \uc54a\ub294\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\uc74c \uc608\uc2dc\ub294 \ud30c\uc77c one \uc774 \uc790\ub3d9\uc73c\ub85c \uc0ad\uc81c\ub41c\ub2e4. .DELETE_ON_ERROR all : one one : touch one false \uc5d0\ub7ec \ucc98\ub9ac \u00b6 -k \uc635\uc158 : make \ub97c \uc774 \uc635\uc158\uc73c\ub85c \uc2e4\ud589\ud558\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud574\ub3c4 \uc2e4\ud589\uc744 \uc911\ub2e8\ud558\uc9c0 \uc54a\uace0 \ub05d\uae4c\uc9c0 \uc2e4\ud589\ud55c\ub2e4. \ubaa8\ub4e0 \uc5d0\ub7ec\ub97c \ud55c\ubc88\uc5d0 \ud655\uc778\ud558\uace0 \uc2f6\uc744 \ub54c \uc720\uc6a9\ud558\ub2e4. -i \uc635\uc158 : make \ub97c \uc774 \uc635\uc158\uc73c\ub85c \uc2e4\ud589\ud558\uba74 \ubaa8\ub4e0 \uc5d0\ub7ec\ub97c \ubb34\uc2dc\ud55c\ub2e4. Example .DELETE_ON_ERROR : all : one one : touch one false touch one-post \uc704 \uc608\uc2dc\ub97c make -k \ub85c \uc2e4\ud589\ud558\uba74 \ud30c\uc77c one \uc0dd\uc131\ub418\uc5c8\ub2e4\uac00 false \uc5d0\uc11c \uc804\uccb4 \uc2e4\ud589\uc774 \uc911\ub2e8\ub418\uace0 one \uc774 \uc0ad\uc81c\ub41c\ub2e4. \ubc18\uba74 make -i \ub85c \uc2e4\ud589\ud558\uba74 false \uac00 \ubc18\ud658\ud558\ub294 nonzero \ub9ac\ud134\uac12\uc744 \ubb34\uc2dc\ud558\uace0 \ud30c\uc77c one \uacfc \ud30c\uc77c one-post \uac00 \uc0dd\uc131\ub41c\ub2e4. - : \uba85\ub839\uc5b4 \uc55e\uc5d0 - \ub97c \ubd99\ud788\uba74 nonzero \uc885\ub8cc\ucf54\ub4dc\uac00 \ubc18\ud658\ub418\uc5b4\ub3c4 \uc804\uccb4 \uc2e4\ud589\uc774 \uc911\ub2e8\ub418\uc9c0 \uc54a\uace0 \ubb34\uc2dc\ub41c\ub2e4. Example one : -false touch one \uc704 \uc608\uc2dc\uc5d0\uc11c \uc5d0\ub7ec\uac00 \ubb34\uc2dc\ub418\uace0 \ud30c\uc77c one \uc774 \uc798 \uc2e4\ud589\ub41c\ub2e4. Recursive make \u00b6 make -C <directory> : <directory> \ub97c make \ud55c\ub2e4. Example new_contents = \"hello:;touch inside_file\" all : mkdir -p subdir echo $( new_contents ) > subdir/makefile make -C subdir \uc704 \uc608\uc2dc\ub294 subdir \ub514\ub809\ud1a0\ub9ac\ub97c \ub9cc\ub4e4\uace0 subdir/makefile \uc744 make \ud55c\ub2e4. export <variable> : \uc7ac\uadc0\uc801\uc73c\ub85c \ud638\ucd9c\ub41c \ud558\uc704 make \uc5d0\uc11c \uc0c1\uc704 make \uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ud55c\ub2e4. Example new_contents = \"hello:;echo \\$ $( cooly ) \" all : mkdir -p subdir echo $( new_contents ) | sed -e 's/^ //' > subdir/makefile make -C subdir cooly = \"The subdirectory can see me!\" export cooly \uc704 \uc608\uc2dc\uc758 export cooly \ub85c \uc0dd\uc131\ub41c subdir/makefile \uc5d0\uc11c cooly \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4. EXPORT_ALL_VARIABLES : .EXPORT_ALL_VARIABLES: \ub97c \uc120\uc5b8\ud558\uba74 \ubaa8\ub4e0 \ubcc0\uc218\uac00 export \ub41c\ub2e4. Example .EXPORT_ALL_VARIABLES : new_contents = \"hello:\\n\\techo \\$ $( cooly ) \" cooly = \"The subdirectory can see me!\" # This would nullify the line above: unexport cooly all : mkdir -p subdir echo $( new_contents ) | sed -e 's/^ //' > subdir/makefile @echo \"---MAKEFILE CONTENTS---\" @cd subdir && cat makefile @echo \"---END MAKEFILE CONTENTS---\" cd subdir && $( MAKE ) References : https://makefiletutorial.com/ http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/","title":"Makefile \uace0\uae09"},{"location":"dev/makefile/makefile2/#vpath","text":"vpath : prerequisites \ub97c \ucc3e\ub294 \uacbd\ub85c\ub97c \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc640 \ub354\ubd88\uc5b4\uc11c \ucd94\uac00\ud55c\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c make \ub294 prerequisites \ub97c \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c \ucc3e\ub294\ub2e4. \uadf8\ub7f0\ub370 vpath \ub85c \ud2b9\uc815 prerequisites \uc758 \ud0d0\uc0c9\uacbd\ub85c\ub97c \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub354\ubd88\uc5b4\uc11c \ucd94\uac00\ud560 \uc218 \uc788\ub2e4. \ud615\uc2dd : vpath <pattern> <directories, space/colon seperated> <pattern> \uc5d0\uc11c \ud2b9\uc218\ubb38\uc790 % \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. VPATH \ud658\uacbd\ubcc0\uc218\uc5d0\ub3c4 \uacbd\ub85c\ub97c \ucd94\uac00\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example vpath %.h ../headers ../other-directory some_binary : ../ headers blah . h touch some_binary ../headers : mkdir ../headers blah.h : touch ../headers/blah.h \uc704 \uc608\uc2dc\uc758 vpath \ub54c\ubb38\uc5d0 .h \ud655\uc7a5\uc790\ub97c \uac00\uc9c4 \ud30c\uc77c\uc744 \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac \ubfd0\ub9cc \uc544\ub2c8\ub77c ../headers \ub514\ub809\ud1a0\ub9ac\uc640 ../other-directory \uc5d0\uc11c\ub3c4 \ucc3e\ub294\ub2e4. \uc774\uc5d0 \ub530\ub77c \ub9cc\uc57d vpath \uac00 \ud3ec\ud568\ub41c \ub77c\uc778\uc744 \uc9c0\uc6b0\uace0 make \ub97c \uc2e4\ud589\ud574\ubcf4\uba74 \ud30c\uc77c blah.h \ub97c \ucc3e\uc9c0 \ubabb\ud558\uc5ec \uaddc\uce59 blah.h: \ub97c \ud56d\uc0c1 \uc2e4\ud589\ud558\uac8c \ub41c\ub2e4.","title":"vpath"},{"location":"dev/makefile/makefile2/#static-pattern-rules","text":"static pattern : \ud328\ud134\uc5d0 \ub9de\ub294 targets \uc744 \uc790\ub3d9\uc73c\ub85c prerequisites \uc73c\ub85c \ubcc0\ud658\ud574\uc8fc\ub294 \uaddc\uce59\uc774\ub2e4. targets ...: target-pattern: prereq-patterns ... \uc758 \ud615\uc2dd\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4. target-pattern \uc5d0 \ub9e4\uce6d\ub41c target \uc744 prereq-pattern \uc73c\ub85c \ubcc0\ud658\ud574\uc900\ub2e4. Example objects = foo.o bar.o $(objects) : %. o : %. c echo \"Call gcc to generate $@ from $ <\" \uc704 \uaddc\uce59\uc740 \ub2e4\uc74c\uc758 \uaddc\uce59\uacfc \ub3d9\uc77c\ud558\ub2e4. foo.o : foo . c echo \"Call gcc to generate $@ from $ <\" bar.o : bar . c echo \"Call gcc to generate bar.o from bar.c\"","title":"Static Pattern Rules"},{"location":"dev/makefile/makefile2/#static-pattern-rules-and-filter","text":"static pattern with Filter : static pattern \uc758 targets \uc744 \ud328\ud134\uc73c\ub85c \ud544\ud130\ub9c1\ud574\uc11c \ub9e4\uce6d\ub418\uc9c0 \uc54a\ub294 target \uc740 \uaddc\uce59\uc5d0 \uc801\uc6a9\uc2dc\ud0a4\uc9c0 \uc54a\ub294 \uaddc\uce59\uc774\ub2e4. Example objects = foo.o bar.o f1.c $(objects) : %. o : %. c echo \"Call gcc to generate $@ from $ <\" \uc704 \uaddc\uce59\uc5d0\uc11c f1.c \ub294 \ubd84\uba85 static pattern \uc5d0 \ud574\ub2f9\ub418\uc9c0 \uc54a\ub294 \uc608\uc678\uc774\ub2e4. \uc774 \uaddc\uce59\uc740 \ub2e4\uc74c\uc758 \uaddc\uce59\uacfc \ub3d9\uc77c\ud55c \uae30\ub2a5\uc744 \ud558\uac8c \ub41c\ub2e4. foo.o : foo . c echo \"Call gcc to generate $@ from $ <\" bar.o : bar . c echo \"Call gcc to generate bar.o from bar.c\" f1.c : echo \"Call gcc to generate f1.c from\" \ub530\ub77c\uc11c \uc774\ub7ec\ud55c \uc608\uc678\ub294 \uaddc\uce59\uc5d0 \uc801\uc6a9\uc2dc\ud0a4\uc9c0 \uc54a\uae30 \uc704\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \ud544\ud130\ub9c1\uc744 \uac78 \uc218 \uc788\ub2e4. objects = foo.o bar.o f1.c $(filter %.o $(objects)) : %. o : %. c echo \"Call gcc to generate $@ from $ <\" \uc704 \uaddc\uce59\uc740 objects \uc5d0\uc11c .o \ub85c \ub05d\ub098\ub294 \ud30c\uc77c\ub9cc \uaddc\uce59\uc5d0 \uc801\uc6a9\uc2dc\ud0a8\ub2e4.","title":"Static Pattern Rules and Filter"},{"location":"dev/makefile/makefile2/#double-colon","text":"Double-Colon : Double-Colon \uc73c\ub85c \uc2dc\uc791\ub418\ub294 \uaddc\uce59\uc774 \uc5ec\ub7ec\ubc88 \uc815\uc758\ub418\uc5b4\ub3c4 \uadf8\uac83\ub4e4\uc744 \ubaa8\ub450 \uc2e4\ud589\ud558\uac8c \ud574\uc900\ub2e4. \uc774 \uaddc\uce59\uc740 \ud754\ud788 \uc4f0\uc774\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\ub3c4 \ub2e4\uc74c \uc608\uc2dc\ub97c \ud55c \ubc88 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Example all : blah blah :: echo \"hello\" blah :: echo \"hello again\" \uc704 \uaddc\uce59\uc5d0\uc11c blah \uac00 Double-Colon \uc73c\ub85c \uc2dc\uc791\ub418\ub294\ub370 Single-Colon \uc73c\ub85c \ubc14\uafb8\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uba74\uc11c \ub9c8\uc9c0\ub9c9 \uaddc\uce59\ub9cc \uc2e4\ud589\ub41c\ub2e4.","title":"Double-Colon"},{"location":"dev/makefile/makefile2/#_1","text":"","title":"\uba85\ub839 \uc2e4\ud589 \uad00\ub828 \uaddc\uce59"},{"location":"dev/makefile/makefile2/#command-echoingsilencing","text":"Command Echoing/Silencing : \uba85\ub839\uc5b4 \uc55e\uc5d0 @ \ub97c \ubd99\ud788\uba74 \uba85\ub839\uc5b4\uac00 \ucd9c\ub825\ub418\uc9c0 \uc54a\ub294\ub2e4. Example all : @echo \"hello\" echo \"hello again\" \uc704 \uc608\uc2dc\uc758 \ucd9c\ub825\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ make hello echo \"hello again\" hello again Tip make -s \ub85c \uc2e4\ud589\ud558\uba74 \ubaa8\ub4e0 \uba85\ub839\uc5b4\uc5d0 @ \ub97c \ubd99\ud600\uc11c \uc2e4\ud589\ud55c \ud6a8\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4.","title":"Command Echoing/Silencing"},{"location":"dev/makefile/makefile2/#command-execution","text":"Command Execution : \uac01\uac01\uc758 \uba85\ub839\uc5b4\ub294 \ud56d\uc0c1 \uc0c8\ub85c\uc6b4 \uc258\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \uac83\uacfc \uac19\ub2e4. \ub530\ub77c\uc11c make \uc5d0\uc11c \uba85\ub839\uc5b4\ub4e4\uc744 \uc2e4\ud589\ud558\uae30 \uc704\ud558\uc5ec \ubcf4\ud1b5 ; \\ \ub85c \uba85\ub839\uc5b4\ub97c \uc774\uc5b4\uc900\ub2e4. Example all : cd .. echo ` pwd ` cd .. ; echo ` pwd ` cd .. ; \\ echo ` pwd ` \uc704 \uc608\uc2dc\uc758 \ucd9c\ub825\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ make cd .. echo ` pwd ` /home/ccsss/repo/csrepo/ccss17.github.io/maketest cd .. ; echo ` pwd ` /home/ccsss/repo/csrepo/ccss17.github.io cd .. ; \\ echo ` pwd ` /home/ccsss/repo/csrepo/ccss17.github.io","title":"Command Execution"},{"location":"dev/makefile/makefile2/#default-shell","text":"Default Shell : make \uac00 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud558\ub294 \uae30\ubcf8 \uc258\uc740 /bin/sh \uc778\ub370 SHELL \ubcc0\uc218\ub97c \ubc14\uafc8\uc73c\ub85c\uc368 \uae30\ubcf8 \uc258\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. Example all : echo \"current shell: $$ 0\" \uc704 \uc608\uc2dc\uac00 /bin/sh \uc744 \ucd9c\ub825\ud558\ub294\ub370 \ube44\ud574 \ub2e4\uc74c \uc608\uc2dc\ub294 /bin/bash \ub97c \ucd9c\ub825\ud55c\ub2e4. SHELL = /bin/bash all : echo \"current shell: $$ 0\"","title":"Default Shell"},{"location":"dev/makefile/makefile2/#delete_on_error","text":"DELETE_ON_ERROR : make \ub294 \uaddc\uce59\uc774 nonzero \uc885\ub8cc \ucf54\ub4dc\ub97c \ubc18\ud658\ud558\uba74 \uc804\uccb4 \uc2e4\ud589\uc744 \uc911\ub2e8\ud558\ub294\ub370, .DELETE_ON_ERROR \uac00 \uc124\uc815\ub418\uba74 \uc774\ub54c nonzero \ubc18\ud658\uac12\uc744 \ubc18\ud658\ud55c \uaddc\uce59\uc758 target \ud30c\uc77c\uc744 \uc0ad\uc81c\ud55c\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 .DELETE_ON_ERROR \ub97c \uc124\uc815\ud558\ub294 \uac83\uc774 \uc88b\ub2e4. Example all : one one : touch one false \uc704 \uc608\uc2dc\ub294 false \uac00 nonzero \uc885\ub8cc\ucf54\ub4dc\ub97c \ubc18\ud658\ud558\uae30\uc5d0 \uc804\uccb4\uc2e4\ud589\uc774 \uc911\ub2e8\ub418\uc9c0\ub9cc \ud30c\uc77c one \uc774 \uc0ac\ub77c\uc9c0\uc9c0 \uc54a\ub294\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\uc74c \uc608\uc2dc\ub294 \ud30c\uc77c one \uc774 \uc790\ub3d9\uc73c\ub85c \uc0ad\uc81c\ub41c\ub2e4. .DELETE_ON_ERROR all : one one : touch one false","title":"DELETE_ON_ERROR"},{"location":"dev/makefile/makefile2/#_2","text":"-k \uc635\uc158 : make \ub97c \uc774 \uc635\uc158\uc73c\ub85c \uc2e4\ud589\ud558\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud574\ub3c4 \uc2e4\ud589\uc744 \uc911\ub2e8\ud558\uc9c0 \uc54a\uace0 \ub05d\uae4c\uc9c0 \uc2e4\ud589\ud55c\ub2e4. \ubaa8\ub4e0 \uc5d0\ub7ec\ub97c \ud55c\ubc88\uc5d0 \ud655\uc778\ud558\uace0 \uc2f6\uc744 \ub54c \uc720\uc6a9\ud558\ub2e4. -i \uc635\uc158 : make \ub97c \uc774 \uc635\uc158\uc73c\ub85c \uc2e4\ud589\ud558\uba74 \ubaa8\ub4e0 \uc5d0\ub7ec\ub97c \ubb34\uc2dc\ud55c\ub2e4. Example .DELETE_ON_ERROR : all : one one : touch one false touch one-post \uc704 \uc608\uc2dc\ub97c make -k \ub85c \uc2e4\ud589\ud558\uba74 \ud30c\uc77c one \uc0dd\uc131\ub418\uc5c8\ub2e4\uac00 false \uc5d0\uc11c \uc804\uccb4 \uc2e4\ud589\uc774 \uc911\ub2e8\ub418\uace0 one \uc774 \uc0ad\uc81c\ub41c\ub2e4. \ubc18\uba74 make -i \ub85c \uc2e4\ud589\ud558\uba74 false \uac00 \ubc18\ud658\ud558\ub294 nonzero \ub9ac\ud134\uac12\uc744 \ubb34\uc2dc\ud558\uace0 \ud30c\uc77c one \uacfc \ud30c\uc77c one-post \uac00 \uc0dd\uc131\ub41c\ub2e4. - : \uba85\ub839\uc5b4 \uc55e\uc5d0 - \ub97c \ubd99\ud788\uba74 nonzero \uc885\ub8cc\ucf54\ub4dc\uac00 \ubc18\ud658\ub418\uc5b4\ub3c4 \uc804\uccb4 \uc2e4\ud589\uc774 \uc911\ub2e8\ub418\uc9c0 \uc54a\uace0 \ubb34\uc2dc\ub41c\ub2e4. Example one : -false touch one \uc704 \uc608\uc2dc\uc5d0\uc11c \uc5d0\ub7ec\uac00 \ubb34\uc2dc\ub418\uace0 \ud30c\uc77c one \uc774 \uc798 \uc2e4\ud589\ub41c\ub2e4.","title":"\uc5d0\ub7ec \ucc98\ub9ac"},{"location":"dev/makefile/makefile2/#recursive-make","text":"make -C <directory> : <directory> \ub97c make \ud55c\ub2e4. Example new_contents = \"hello:;touch inside_file\" all : mkdir -p subdir echo $( new_contents ) > subdir/makefile make -C subdir \uc704 \uc608\uc2dc\ub294 subdir \ub514\ub809\ud1a0\ub9ac\ub97c \ub9cc\ub4e4\uace0 subdir/makefile \uc744 make \ud55c\ub2e4. export <variable> : \uc7ac\uadc0\uc801\uc73c\ub85c \ud638\ucd9c\ub41c \ud558\uc704 make \uc5d0\uc11c \uc0c1\uc704 make \uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ud55c\ub2e4. Example new_contents = \"hello:;echo \\$ $( cooly ) \" all : mkdir -p subdir echo $( new_contents ) | sed -e 's/^ //' > subdir/makefile make -C subdir cooly = \"The subdirectory can see me!\" export cooly \uc704 \uc608\uc2dc\uc758 export cooly \ub85c \uc0dd\uc131\ub41c subdir/makefile \uc5d0\uc11c cooly \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4. EXPORT_ALL_VARIABLES : .EXPORT_ALL_VARIABLES: \ub97c \uc120\uc5b8\ud558\uba74 \ubaa8\ub4e0 \ubcc0\uc218\uac00 export \ub41c\ub2e4. Example .EXPORT_ALL_VARIABLES : new_contents = \"hello:\\n\\techo \\$ $( cooly ) \" cooly = \"The subdirectory can see me!\" # This would nullify the line above: unexport cooly all : mkdir -p subdir echo $( new_contents ) | sed -e 's/^ //' > subdir/makefile @echo \"---MAKEFILE CONTENTS---\" @cd subdir && cat makefile @echo \"---END MAKEFILE CONTENTS---\" cd subdir && $( MAKE ) References : https://makefiletutorial.com/ http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/","title":"Recursive make"},{"location":"dev/wicwiu/about/","text":"\uc124\uacc4 \ubaa9\ud45c \u00b6 WICWIU \ub294 \uad6d\ub0b4 \ub525\ub7ec\ub2dd \uc0ac\uc6a9\uc790\ub4e4\uc774 \uc27d\uac8c \uc774\ud574\ud558\uace0 \uc218\uc815 \ubc0f \ud655\uc7a5\uc774 \uc6a9\uc774\ud55c \ud504\ub808\uc784\uc6cc\ud06c\ub97c \ubaa9\ud45c\ub85c \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud55c WICWIU \uc758 \ud2b9\uc9d5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uad6d\ub0b4 \uac1c\ubc1c\uc790\ub4e4\uc5d0\uac8c \uce5c\uc219\ud55c C++\uc744 \uc911\uc2ec\uc73c\ub85c \uac1c\ubc1c\ub418\uc5c8\ub2e4. C++ \ud658\uacbd\uc740 \uba54\ubaa8\ub9ac \ubc0f \uc131\ub2a5 \ucd5c\uc801\ud654\uc5d0 \uc6a9\uc774\ud558\uba70 \ub2e4\uc591\ud55c \ud658\uacbd\uc5d0 \uc774\uc2dd\ud558\uae30\ub3c4 \uc6a9\uc774\ud558\ub2e4. \ud655\uc7a5\uc131\uc774 \ub192\uc544 \uc0ac\uc6a9\uc790\uac00 \uc0c8\ub85c\uc6b4 \uc2e0\uacbd\ub9dd \uad6c\uc870\ub098 \uc54c\uace0\ub9ac\uc998\uc744 \uad6c\ud604\ud558\uae30 \uc6a9\uc774\ud558\ub2e4. \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\ub97c \uad6c\uc131\ud558\ub294 \uc5f0\uc0b0\uc790, \ucd5c\uc801\ud654 \ud568\uc218, \uc190\uc2e4 \ud568\uc218\ub294 \ubaa8\ub450 \ud074\ub798\uc2a4 \uad6c\uc870\ub85c \uc124\uacc4\ud558\uc5ec \uc0ac\uc6a9\uc790\uac00 \ub525\ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\uc758 \ud655\uc7a5/\uc218\uc815\uc744 \uc6a9\uc774\ud558\uac8c \ud558\uc600\ub2e4. \ubcf8 \ud504\ub808\uc784\uc6cc\ud06c\uc758 \ucf54\ub4dc\ub294 \ubb38\uc11c\uc640 \uc8fc\uc11d \ub4f1\uc744 \ud55c\uae00\ub85c \uc81c\uacf5\ud558\uc5ec \uad6d\ub0b4 \uac1c\ubc1c\uc790\uac00 \uc774\ud574\ud558\uae30 \uc27d\ub2e4. GPU\ub97c \uc774\uc6a9\ud55c \ub300\uaddc\ubaa8 \ubcd1\ub82c \uacc4\uc0b0\uc744 \ud1b5\ud574 \uc2e0\uacbd\ub9dd\uc744 \ube60\ub978 \uc18d\ub3c4\ub85c \ud559\uc2b5\ud560 \uc218 \uc788\ub2e4. GPU \uc5f0\uc0b0\uc740 cuDNN\uacfc cuda\ub97c \uc774\uc6a9\ud574 \uad6c\ud604\ud558\uc600\ub2e4. \ub610\ud55c, \ud638\uc2a4\ud2b8 \uba54\ubaa8\ub9ac\uc640 GPU \uba54\ubaa8\ub9ac \uac04 \ub3d9\uae30\ud654\ub97c \uc790\ub3d9\uc73c\ub85c \uc218\ud589\ud574 \uac1c\ubc1c\uc790 \ud3b8\uc758\uc131\uc774 \uc6b0\uc218\ud558\ub2e4. WICWIU \uc758 \ud2b9\uc9d5 \u00b6 \ub124\ud2b8\uc6cc\ud06c \uc790\ub3d9 \ubbf8\ubd84 \ub525\ub7ec\ub2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub124\ud2b8\uc6cc\ud06c\ub97c \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc704\ud574\uc11c\ub294 \uc190\uc2e4\uc5d0 \ub300\ud55c \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uad6c\ud558\uc5ec\uc57c \ud558\uba70, \uacbd\uc0ac\ud558\uac15\ubc95\uc744 \uc0ac\uc6a9\ud558\uc5ec\uc11c \ub124\ud2b8\uc6cc\ud06c\ub97c \ucd5c\uc801\ud654 \ud558\ub294 \uacfc\uc815\uc744 \uac70\uccd0\uc57c \ud569\ub2c8\ub2e4. WICWIU \ub294 \uc0ac\uc6a9\uc790\uac00 \uad6c\uc131\ud55c \ub124\ud2b8\uc6cc\ud06c\uc5d0 \ub300\ud574\uc11c \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uc190\uc27d\uac8c \uad6c\ud560 \uc218 \uc788\ub3c4\ub85d, \uac01 \ub178\ub4dc\ub9c8\ub2e4 BackPropagation \uba54\uc18c\ub4dc\ub97c \uc81c\uacf5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uc774 \uba54\uc18c\ub4dc\ub294 \uc2e0\uacbd\ub9dd \ucd9c\ub825\ubd80\uc5d0\uc11c \uc5ed\uc804\ud30c\ub418\ub294 \ubbf8\ubd84\uc744 \uc0ac\uc6a9\ud55c \uc5f0\uc1c4\ubc95\uce59\uc73c\ub85c \uc804\uccb4 \ubbf8\ubd84 \uac12\uc744 \uad6c\ud574\uc90d\ub2c8\ub2e4. \uc2e0\uacbd\ub9dd \ubaa8\ub378 \ub514\uc790\uc778 \ud234 WICWIU \ub294 \uc0ac\uc6a9\uc790\uac00 \ub525\ub7ec\ub2dd\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uad6c\uc131 \uc694\uc18c( Operator , Layer , Loss Function , Optimizer \ub4f1)\ub97c \uc870\ud569\ud558\uc5ec \uc2e0\uacbd\ub9dd(Computational NeuralNetwork) \uc744 \uad6c\uc131\ud560 \uc218 \uc788\ub3c4\ub85d \uc2e0\uacbd\ub9dd \ubaa8\ub378 \ub514\uc790\uc778 \ud234\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc778\ud130\ud398\uc774\uc2a4\uc758 \uae30\ub2a5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ube14\ub85d \uc0ac\uc774\uc758 \ub9c1\ud06c \uc5f0\uacb0 \ubc0f \ub9c1\ud06c \ucd94\uac00, \ub9c1\ud06c \uc81c\uac70 \ube14\ub85d \ud234\ubc14\uc5d0\uc11c \ub9c8\uc6b0\uc2a4 \ub4dc\ub798\uadf8\ub97c \ud1b5\ud55c \ube14\ub85d \uc0dd\uc131 \ube14\ub85d \uc120\ud0dd \uc2dc \ube14\ub85d\uc5d0 \ub300\ud55c \uc815\ubcf4 \ucd9c\ub825 \ube14\ub85d \uc5f0\uacb0 \uc0c1\ud0dc \ubd84\uc11d (BFS \uc54c\uace0\ub9ac\uc998 \uc0ac\uc6a9) \ube14\ub85d \uc5f0\uacb0 \uc0c1\ud0dc \ubc0f \ube14\ub85d \uc885\ub958\uc5d0 \ub530\ub77c \ucf54\ub4dc \uc0dd\uc131 Project layout \u00b6 WICWIU \ub294 \ud06c\uac8c lib/ , tutorials/ , src/ \ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc138\ubd80 \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. lib/ # \ucef4\ud30c\uc77c \ud6c4 \uc815\uc801 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc0dd\uc131\ub418\ub294 \ub514\ub809\ud1a0\ub9ac. tutorials/ # WICWIU \ub85c \uc81c\uc791\ub41c \uc5ec\ub7ec \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud574\ubcfc \uc218 \uc788\ub294 \ucf54\ub4dc\ub4e4. # net/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \uc788\uc2b5\ub2c8\ub2e4. # data/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \ud559\uc2b5\ud560 \ub370\uc774\ud130\uc14b\uc774 \uc788\uc2b5\ub2c8\ub2e4. CIFAR10/ CIFAR100Reader/ ImageNet/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. MNIST/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. GAN/ # \ud558\uc704 \ub514\ub809\ud1a0\ub9ac \ub0b4 \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 # \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. VanillaGAN/ DCGAN/ WGAN/ BEGAN/ src/ # LossFunction, Operator, Optimizer, \uadf8\ub9ac\uace0 Module # \uc744 \ube44\ub86f\ud55c \uc18c\uc2a4\ud30c\uc77c\uc774 \uc788\ub294 \ub514\ub809\ud1a0\ub9ac. LossFunction/ Operator/ Optimizer/ Module/ \uc2dc\uc2a4\ud15c \uc694\uad6c\uc0ac\ud56d \u00b6 \uc9c0\uc6d0 \ud50c\ub7ab\ud3fc \ubc0f \uc6b4\uc601\uccb4\uc81c WICWIU \ub294 Ubuntu 16.04 \ud658\uacbd\uc5d0\uc11c \uc124\uacc4\ub418\uc5c8\uace0 \uadf8 \uc774\uc0c1 \ubc84\uc804\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4. Hardware \uc694\uad6c\uc0ac\ud56d Intel i5 \uc774\uc0c1\uc758 CPU \ub97c \uc0ac\uc6a9\ud558\ub294 \ud658\uacbd\uc5d0\uc11c \uc0ac\uc6a9\ud558\uae30\ub97c \uad8c\uc7a5\ud569\ub2c8\ub2e4. CUDA 9.0, cudnn 7.0.5 \uc744 \uc9c0\uc6d0\ud558\ub294 NVidia GPU \uc0ac\uc6a9\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4. Software \uc694\uad6c\uc0ac\ud56d C++11 \uc774\uc0c1, gcc 5.4.0 \uc774\uc0c1\uc744 \uad8c\uc7a5\ud569\ub2c8\ub2e4. NVIDIA GPU \uc0ac\uc6a9 \uc2dc \uc124\uce58\ub97c \uc694\uad6c\ud569\ub2c8\ub2e4. NVIDIA Grahpic Driver CUDA (tested on v9.0 / 10.0) cudnn (tested on v7.0.5 / 7.4.1)","title":"1. About WICWIU"},{"location":"dev/wicwiu/about/#_1","text":"WICWIU \ub294 \uad6d\ub0b4 \ub525\ub7ec\ub2dd \uc0ac\uc6a9\uc790\ub4e4\uc774 \uc27d\uac8c \uc774\ud574\ud558\uace0 \uc218\uc815 \ubc0f \ud655\uc7a5\uc774 \uc6a9\uc774\ud55c \ud504\ub808\uc784\uc6cc\ud06c\ub97c \ubaa9\ud45c\ub85c \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud55c WICWIU \uc758 \ud2b9\uc9d5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uad6d\ub0b4 \uac1c\ubc1c\uc790\ub4e4\uc5d0\uac8c \uce5c\uc219\ud55c C++\uc744 \uc911\uc2ec\uc73c\ub85c \uac1c\ubc1c\ub418\uc5c8\ub2e4. C++ \ud658\uacbd\uc740 \uba54\ubaa8\ub9ac \ubc0f \uc131\ub2a5 \ucd5c\uc801\ud654\uc5d0 \uc6a9\uc774\ud558\uba70 \ub2e4\uc591\ud55c \ud658\uacbd\uc5d0 \uc774\uc2dd\ud558\uae30\ub3c4 \uc6a9\uc774\ud558\ub2e4. \ud655\uc7a5\uc131\uc774 \ub192\uc544 \uc0ac\uc6a9\uc790\uac00 \uc0c8\ub85c\uc6b4 \uc2e0\uacbd\ub9dd \uad6c\uc870\ub098 \uc54c\uace0\ub9ac\uc998\uc744 \uad6c\ud604\ud558\uae30 \uc6a9\uc774\ud558\ub2e4. \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c\ub97c \uad6c\uc131\ud558\ub294 \uc5f0\uc0b0\uc790, \ucd5c\uc801\ud654 \ud568\uc218, \uc190\uc2e4 \ud568\uc218\ub294 \ubaa8\ub450 \ud074\ub798\uc2a4 \uad6c\uc870\ub85c \uc124\uacc4\ud558\uc5ec \uc0ac\uc6a9\uc790\uac00 \ub525\ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\uc758 \ud655\uc7a5/\uc218\uc815\uc744 \uc6a9\uc774\ud558\uac8c \ud558\uc600\ub2e4. \ubcf8 \ud504\ub808\uc784\uc6cc\ud06c\uc758 \ucf54\ub4dc\ub294 \ubb38\uc11c\uc640 \uc8fc\uc11d \ub4f1\uc744 \ud55c\uae00\ub85c \uc81c\uacf5\ud558\uc5ec \uad6d\ub0b4 \uac1c\ubc1c\uc790\uac00 \uc774\ud574\ud558\uae30 \uc27d\ub2e4. GPU\ub97c \uc774\uc6a9\ud55c \ub300\uaddc\ubaa8 \ubcd1\ub82c \uacc4\uc0b0\uc744 \ud1b5\ud574 \uc2e0\uacbd\ub9dd\uc744 \ube60\ub978 \uc18d\ub3c4\ub85c \ud559\uc2b5\ud560 \uc218 \uc788\ub2e4. GPU \uc5f0\uc0b0\uc740 cuDNN\uacfc cuda\ub97c \uc774\uc6a9\ud574 \uad6c\ud604\ud558\uc600\ub2e4. \ub610\ud55c, \ud638\uc2a4\ud2b8 \uba54\ubaa8\ub9ac\uc640 GPU \uba54\ubaa8\ub9ac \uac04 \ub3d9\uae30\ud654\ub97c \uc790\ub3d9\uc73c\ub85c \uc218\ud589\ud574 \uac1c\ubc1c\uc790 \ud3b8\uc758\uc131\uc774 \uc6b0\uc218\ud558\ub2e4.","title":"\uc124\uacc4 \ubaa9\ud45c"},{"location":"dev/wicwiu/about/#wicwiu","text":"","title":"WICWIU \uc758 \ud2b9\uc9d5"},{"location":"dev/wicwiu/about/#project-layout","text":"WICWIU \ub294 \ud06c\uac8c lib/ , tutorials/ , src/ \ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc138\ubd80 \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. lib/ # \ucef4\ud30c\uc77c \ud6c4 \uc815\uc801 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc0dd\uc131\ub418\ub294 \ub514\ub809\ud1a0\ub9ac. tutorials/ # WICWIU \ub85c \uc81c\uc791\ub41c \uc5ec\ub7ec \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud574\ubcfc \uc218 \uc788\ub294 \ucf54\ub4dc\ub4e4. # net/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \uc788\uc2b5\ub2c8\ub2e4. # data/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \ud559\uc2b5\ud560 \ub370\uc774\ud130\uc14b\uc774 \uc788\uc2b5\ub2c8\ub2e4. CIFAR10/ CIFAR100Reader/ ImageNet/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. MNIST/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. GAN/ # \ud558\uc704 \ub514\ub809\ud1a0\ub9ac \ub0b4 \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 # \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. VanillaGAN/ DCGAN/ WGAN/ BEGAN/ src/ # LossFunction, Operator, Optimizer, \uadf8\ub9ac\uace0 Module # \uc744 \ube44\ub86f\ud55c \uc18c\uc2a4\ud30c\uc77c\uc774 \uc788\ub294 \ub514\ub809\ud1a0\ub9ac. LossFunction/ Operator/ Optimizer/ Module/","title":"Project layout"},{"location":"dev/wicwiu/about/#_2","text":"","title":"\uc2dc\uc2a4\ud15c \uc694\uad6c\uc0ac\ud56d"},{"location":"dev/wicwiu/code/","text":"\uc774\uacf3\uc5d0\uc11c\ub294 \uc774\uc804\uc5d0 \uc124\uba85\ud55c WICWIU \ub85c \uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\uace0, WICWIU \ub85c \ub525\ub7ec\ub2dd\uc744 \ud558\ub294 \uac83\uc744 \ucf54\ub4dc\ub85c \ud568\uaed8 \ubcf4\uba74\uc11c \uc774\ud574\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uba3c\uc800 WICWIU \uc758 \ub808\uc774\uc544\uc6c3\uc744 \ub2e4\uc2dc \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Project layout \u00b6 WICWIU \ub294 \ud06c\uac8c lib/ , tutorials/ , src/ \ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc138\ubd80 \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. lib/ # \ucef4\ud30c\uc77c \ud6c4 \uc815\uc801 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc0dd\uc131\ub418\ub294 \ub514\ub809\ud1a0\ub9ac. tutorials/ # WICWIU \ub85c \uc81c\uc791\ub41c \uc5ec\ub7ec \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud574\ubcfc \uc218 \uc788\ub294 \ucf54\ub4dc\ub4e4. # net/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \uc788\uc2b5\ub2c8\ub2e4. # data/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \ud559\uc2b5\ud560 \ub370\uc774\ud130\uc14b\uc774 \uc788\uc2b5\ub2c8\ub2e4. CIFAR10/ CIFAR100Reader/ ImageNet/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. MNIST/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. GAN/ # \ud558\uc704 \ub514\ub809\ud1a0\ub9ac \ub0b4 \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 # \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. VanillaGAN/ DCGAN/ WGAN/ BEGAN/ src/ # LossFunction, Operator, Optimizer, \uadf8\ub9ac\uace0 Module # \uc744 \ube44\ub86f\ud55c \uc18c\uc2a4\ud30c\uc77c\uc774 \uc788\ub294 \ub514\ub809\ud1a0\ub9ac. LossFunction/ Operator/ Optimizer/ Module/ WICWIU \ucf54\ub4dc \uc0b4\ud3b4\ubcf4\uae30 \u00b6 Tip makefile \uc758 \ubb38\ubc95\uc5d0 \ub300\ud55c \uae30\ucd08\uac00 \ubd80\uc871\ud558\ub2e4\uba74 Makefile \uae30\ucd08 \ubb38\ubc95 \ub97c \ucc38\uace0\ud558\uc138\uc694! Compile src/ \u00b6 src/ \ub294 WICWIU \ub77c\uc774\ube0c\ub7ec\ub9ac \ub514\ub809\ud1a0\ub9ac\uc785\ub2c8\ub2e4. \uc774\uac83\uc744 \ucef4\ud30c\uc77c\ud558\ub294 makefile \ub97c \uac19\uc774 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Info WICWIU \ub294 \uacc4\uc18d \uc5c5\ub370\uc774\ud2b8 \ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc640 \ub2e4\ub97c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Source 1 2 3 4 5 6 7 .SUFFIXES = .cpp .o FRAMEWORK_LIB = lib/library.a CFLAGS = -O2 -std = c++11 ENABLE_CUDNN = -D__CUDNN__ DFLAGS = -g -D__DEBUG__ 1 : Suffix , CPP \ud30c\uc77c\uc744 Object \ud30c\uc77c\ub85c \ubcc0\ud658\uc2dc\ucf1c\uc8fc\ub294 \ub0b4\uc7a5 \uaddc\uce59\uc785\ub2c8\ub2e4. 3 : WICWIU \uc758 \uc815\uc801 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. 4 : \ucef4\ud30c\uc77c \uc635\uc158\uc785\ub2c8\ub2e4. 6 : cuDNN \uc0ac\uc6a9 \uc5ec\ubd80 \ud50c\ub798\uadf8\uc785\ub2c8\ub2e4. Warning cuDNN \ubbf8 \uc124\uce58 \ubc0f \ubbf8 \uc0ac\uc6a9 \uc2dc \uc8fc\uc11d\ucc98\ub9ac\ub97c \ud574\uc57c\ud569\ub2c8\ub2e4. 7 : \ub514\ubc84\uadf8 \ucf54\ub4dc \uc0ac\uc6a9 \uc5ec\ubd80 \ud50c\ub798\uadf8\uc785\ub2c8\ub2e4. Warning \ubbf8 \uc0ac\uc6a9 \uc2dc \uc8fc\uc11d\ucc98\ub9ac\ub97c \ud574\uc57c\ud569\ub2c8\ub2e4. 9 10 11 12 13 14 15 16 17 18 19 20 21 INCLUDE_PATH = -I/usr/local/cuda/include LIB_PATH = -L. -L/usr/local/cuda/lib64 CC = g++ NVCC = nvcc ifdef ENABLE_CUDNN LINKER = nvcc LFLAGS = -lcudart -lcudnn -lpthread else LINKER = g++ LFLAGS = -lpthread endif 9 : \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0\uc11c CUDA \ud5e4\ub354 \ud30c\uc77c\uc744 \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 10 : CUDA \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 12 : \ucef4\ud30c\uc77c\ub7ec\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 13 : CUDA \ud30c\uc77c \uc6a9 \ucef4\ud30c\uc77c\ub7ec\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 15~21 : cuDNN \uc0ac\uc6a9 \uc2dc, NVCC \ub9c1\ucee4 \uc0ac\uc6a9 \ubc0f cudart , cudnn , pthread \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. cuDNN \ubbf8 \uc0ac\uc6a9 \uc2dc, g++ \ub9c1\ucee4 \uc0ac\uc6a9 \ubc0f pthread \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 AR = ar SRCS = \\ src/Utils.cpp \\ src/Shape.cpp \\ OBJS = ${ SRCS :.cpp=.o } ifdef ENABLE_CUDNN CUDA_SRCS = \\ src/Utils_CUDA.cu \\ src/Optimizer/AdamOptimizer_CUDA.cu \\ src/Operator/Concatenate_CUDA.cu CUDA_OBJS = ${ CUDA_SRCS :.cu=.o } endif all : $( FRAMEWORK_LIB ) 25~27 : .cpp \uc18c\uc2a4 \ucf54\ub4dc \ud30c\uc77c\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. 29 : SRCS \uc758 .cpp \ud30c\uc77c\uc744 \uac01\uac01 \ucef4\ud30c\uc77c\ud574 .o \ud30c\uc77c(\uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c)\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 31~38 : cuDNN \uc0ac\uc6a9 \uc2dc, CUDA_SRC/ \uc758 .cu \ud30c\uc77c\uc744 \uac01\uac01 \ucef4\ud30c\uc77c\ud574 .o \ud30c\uc77c\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 40 : \ucef4\ud30c\uc77c \uc2dc\uc791 \ud0c0\uac9f\uc785\ub2c8\ub2e4. FRAMEWORK_LIB \uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 .cpp.o : $( CC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) $( LIB_PATH ) -c $< -o $@ src/Utils_CUDA.o : src / Utils_CUDA . cu $( NVCC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) -c $< -o $@ src/Optimizer/AdamOptimizer_CUDA.o : src / Optimizer / AdamOptimizer_CUDA . cu $( NVCC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) -c $< -o $@ src/Operator/Concatenate_CUDA.o : src / Operator / Concatenate_CUDA . cu $( NVCC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) -c $< -o $@ $(FRAMEWORK_LIB) : $( OBJS ) $( CUDA_OBJS ) $( AR ) rcs $@ $( OBJS ) $( CUDA_OBJS ) clean : rm -rf *.o $( OBJS ) $( CUDA_OBJS ) $( FRAMEWORK_LIB ) 42~43 : \uc8fc\uc5b4\uc9c4 \ud30c\uc77c\uc744 \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 \ucef4\ud30c\uc77c\ud558\uc5ec \uac19\uc740 \uc774\ub984\uc758 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 45~49 : \ud574\ub2f9 .cu \ud30c\uc77c\uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud558\uace0 \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 \ucef4\ud30c\uc77c\ud558\uc5ec \uac19\uc740 \uc774\ub984\uc758 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 52~53 : OBJS , CUDA_OBJS \uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud558\uace0, FRAMEWORK_LIB , OBJS , CUDA_OBJS \uc758 .o \ud30c\uc77c\ub4e4\uc744 \uac00\uc9c0\uace0 \uc544\uce74\uc774\ube0c \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. Compile tutorials/ImageNet/ \u00b6 tutorials/ImageNet/ \uc740 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. \uc774\uac83\uc744 \ucef4\ud30c\uc77c\ud558\ub294 makefile \ub97c \uac19\uc774 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Info WICWIU \ub294 \uacc4\uc18d \uc5c5\ub370\uc774\ud2b8 \ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc640 \ub2e4\ub97c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 .SUFFIXES = .cpp .o CFLAGS = -O2 -std = c++11 -g ENABLE_CUDNN = -D__CUDNN__ DFLAGS = -g -D__DEBUG__ LFLAGS = -lcudart -lcudnn -lpthread -ljpeg -lturbojpeg INCLUDE_PATH = -I/usr/local/cuda/include -I/opt/libjpeg-turbo/include -I/opt/libjpeg-turbo/lib64 LIB_PATH = -L. -L/usr/local/cuda/lib64 -L/opt/libjpeg-turbo/lib64 CC = g++ NVCC = nvcc FRAMEWORK_LIB = ../../lib/library.a 6 : \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9 \ud50c\ub798\uadf8, cudart , cudnn , pthread , jpeg , turbojpeg \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. 8 : \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0\uc11c CUDA \ud5e4\ub354 \ud30c\uc77c\uc744 \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 9 : CUDA \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 14 : \ud504\ub808\uc784\uc6cc\ud06c \ub77c\uc774\ube0c\ub7ec\ub9ac \uc544\uce74\uc774\ube0c \ud30c\uc77c\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 SRCS = \\ ../../src/Shape.cpp \\ ../../src/LongArray.cpp \\ ../../src/Tensor.cpp \\ ../../src/Operator.cpp \\ ../../src/LossFunction.cpp \\ ../../src/Optimizer.cpp \\ ../../src/Module.cpp \\ ../../src/NeuralNetwork.cpp all : main .cpp.o : $( CC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) $( LIB_PATH ) -c $< -o $@ main : main . o $( FRAMEWORK_LIB ) $( NVCC ) $( CFLAGS ) $( ENABLE_CUDNN ) $( DFLAGS ) $( LFLAGS ) $( INCLUDE_PATH ) $( LIB_PATH ) -o $@ $( FRAMEWORK_LIB ) main.o $(FRAMEWORK_LIB) : $( SRC ) make -C ../.. clean : rm -rf *.o main clean_all : rm -rf *.o main make clean -C ../.. 17~25 : .cpp \uc18c\uc2a4 \ucf54\ub4dc \ud30c\uc77c, \uc544\uce74\uc774\ube0c \ud30c\uc77c\uc758 \uc758\uc874\uc131 \ud655\uc778\uc744 \uc704\ud574 \uc815\uc758\ud558\ub294 \ubcc0\uc218\uc785\ub2c8\ub2e4. 27 : \uc2dc\uc791 \ud0c0\uac9f, main \ud30c\uc77c\uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. 29~30 : \uc8fc\uc5b4\uc9c4 \ud30c\uc77c\uc744 \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 \ucef4\ud30c\uc77c\ud558\uc5ec \uac19\uc740 \uc774\ub984\uc758 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 32~33 : main.o \ud30c\uc77c\uacfc FRAMEWORK_LIB \uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud558\uace0, \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 FRAMEWORK_LIB \uacfc main.o \ud30c\uc77c\uc744 main \ud30c\uc77c\ub85c \ub9c1\ud06c\ud55c\ub2e4. 35~36 : \uc9c0\uc815\ub41c \uacbd\ub85c\uc5d0\uc11c make \uc2e4\ud589 Tutorials tutorials/MNIST \u00b6 tutorials/MNIST \ub294 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. tutorials/MNIST/net/my_CNN.hpp \u00b6 tutorials/MNIST/net/my_CNN.hpp \ub294 WICWIU \uc5d0\uc11c CNN \uc73c\ub85c MNIST \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uae30 \uc704\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. MNIST \ud29c\ud1a0\ub9ac\uc5bc\uc758 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Info WICWIU \ub294 \uacc4\uc18d \uc5c5\ub370\uc774\ud2b8 \ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc640 \ub2e4\ub97c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class my_CNN : public NeuralNetwork < float > { private : public : my_CNN ( Tensorholder < float > * x , Tensorholder < float > * label ) { SetInput ( 2 , x , label ); Operator < float > * out = NULL ; out = new ReShape < float > ( x , 28 , 28 , \"Flat2Image\" ); // ======================= layer 1======================= out = new ConvolutionLayer2D < float > ( out , 1 , 32 , 3 , 3 , 1 , 1 , 0 , TRUE , \"Conv_1\" ); out = new BatchNormalizeLayer < float > ( out , TRUE , \"BN_1\" ); out = new Relu < float > ( out , \"Relu_1\" ); out = new Maxpooling2D < float > ( out , 2 , 2 , 2 , 2 , \"MaxPool_1\" ); // ======================= layer 2======================= out = new ConvolutionLayer2D < float > ( out , 32 , 64 , 3 , 3 , 1 , 1 , 0 , TRUE , \"Conv_2\" ); out = new BatchNormalizeLayer < float > ( out , TRUE , \"BN_2\" ); out = new Relu < float > ( out , \"Relu_2\" ); out = new Maxpooling2D < float > ( out , 2 , 2 , 2 , 2 , \"MaxPool_2\" ); // ======================= layer 3======================= out = new ReShape < float > ( out , 1 , 1 , 5 * 5 * 64 , \"Image2Flat\" ); // ======================= layer 3======================= out = new Linear < float > ( out , 5 * 5 * 64 , 1024 , TRUE , \"Fully-Connected_1\" ); out = new Relu < float > ( out , \"Relu_3\" ); //// ======================= layer 4======================= out = new Linear < float > ( out , 1024 , 10 , TRUE , \"Fully-connected_2\" ); AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , label , \"SCE\" )); // ======================= Select Optimizer =================== SetOptimizer ( new RMSPropOptimizer < float > ( GetParameter (), 0.01 , 0.9 , 1e-08 , FALSE , MINIMIZE )); } virtual ~ my_CNN () {} }; 5 : SetInput \ud568\uc218\ub97c \ud1b5\ud574 \\(2\\) \uac00\uc9c0 \uc785\ub825( data , label ) \uc774 \ubaa8\ub378\uc758 \ud559\uc2b5\uc5d0 \ub4e4\uc5b4\uac04\ub2e4\ub294 \uac83\uc744 \uba85\uc2dc\ud569\ub2c8\ub2e4. 9 : ReShape \ud568\uc218\ub85c MNIST \uc190\uae00\uc528 \uc774\ubbf8\uc9c0 x \ub97c Tensor \ud615\ud0dc\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. 12~30 : ConvolutionLayer2D , BatchNormalizeLayer , Relu , Maxpooling \ub4f1\uc758 Operator \ub4e4\ub85c \uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud569\ub2c8\ub2e4. 35 : SetLossFunction \ud568\uc218\ub85c \uc190\uc2e4\ud568\uc218\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 39 : SetOptimizer \ud568\uc218\ub85c Optimizer \ub97c \uc815\uc758\ud569\ub2c8\ub2e4. tutorials/MNIST/main.cpp \u00b6 tutorials/MNIST/main.cpp \ub294 tutorials/MNIST/net/my_CNN.hpp \uc5d0\uc11c \uc815\uc758\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uc0ac\uc6a9\ud558\uc5ec MNIST \uc190\uae00\uc528 \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4. Source 19 20 21 22 23 24 25 26 27 28 29 30 // create input, label data placeholder -> Tensorholder Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 10 , \"label\" ); // ======================= Select net =================== NeuralNetwork < float > * net = new my_CNN ( x , label ); // ======================= Prepare Data =================== MNISTDataSet < float > * train_dataset = new MNISTDataSet < float > ( \"data/train-images-idx3-ubyte\" , \"data/train-labels-idx1-ubyte\" , TRAINING ); DataLoader < float > * train_dataloader = new DataLoader < float > ( train_dataset , BATCH , TRUE , 20 , FALSE ); MNISTDataSet < float > * test_dataset = new MNISTDataSet < float > ( \"data/t10k-images-idx3-ubyte\" , \"data/t10k-labels-idx1-ubyte\" , TESTING ); DataLoader < float > * test_dataloader = new DataLoader < float > ( test_dataset , BATCH , FALSE , 20 , FALSE ); 20~21 : Tensorholder (placeholder) \ud074\ub798\uc2a4\ub85c \uc190\uae00\uc528 \uc774\ubbf8\uc9c0\uc640 \uc815\ub2f5\ub808\uc774\ube14\uc744 \uc800\uc7a5 \ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. 24 : \uc0ac\uc804\uc5d0 \uc815\uc758\ud55c CNN \uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 26~30 : MNIST \ub370\uc774\ud130\uc14b\uacfc \ub370\uc774\ud130\ub85c\ub354\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 // ======================= Train ======================= float train_accuracy = 0.f ; float train_avg_loss = 0.f ; net -> SetModeTrain (); startTime = clock (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { //dataset->CreateTrainDataPair(BATCH); std :: vector < Tensor < float > *> * temp = train_dataloader -> GetDataFromGlobalBuffer (); // printf(\"%d\\r\\n\", temp->size()); Tensor < float > * x_t = ( * temp )[ 0 ]; Tensor < float > * l_t = ( * temp )[ 1 ]; delete temp ; #ifdef __CUDNN__ x_t -> SetDeviceGPU ( GPUID ); l_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ // std::cin >> temp; net -> FeedInputTensor ( 2 , x_t , l_t ); net -> ResetParameterGradient (); net -> Train (); // std::cin >> temp; train_accuracy += net -> GetAccuracy (); train_avg_loss += net -> GetLoss (); printf ( \" \\r Train complete percentage is %d / %d -> loss : %f, acc : %f\" /*(ExcuteTime : %f)*/ , j + 1 , LOOP_FOR_TRAIN , train_avg_loss / ( j + 1 ), train_accuracy / ( j + 1 ) /*nProcessExcuteTime*/ ); fflush ( stdout ); } endTime = clock (); nProcessExcuteTime = (( double )( endTime - startTime )) / CLOCKS_PER_SEC ; printf ( \" \\n (excution time per epoch : %f) \\n\\n \" , nProcessExcuteTime ); 72~77 : MNIST \ub370\uc774\ud130\uc14b\uc73c\ub85c\ubd80\ud130 \uc774\ubbf8\uc9c0\uc640 \uc815\ub2f5\ub808\uc774\ube14\uc744 \ubc1b\uc544 \uc800\uc7a5\ud569\ub2c8\ub2e4. 79~82 : cuDNN \uc744 \uc0ac\uc6a9 \ud560 \uacbd\uc6b0, placeholder \uc758 device \ub97c GPU \ub85c \uc124\uc815\ud55c\ub2e4. 84~86 : \uc2e0\uacbd\ub9dd\uc5d0 \ub370\uc774\ud130\uc14b(\uc190\uae00\uc528 \uc774\ubbf8\uc9c0, \uc815\ub2f5\ub808\uc774\ube14)\ub97c \ub9cc\ub4e4\uc5b4 \ub123\uace0 \uc2e0\uacbd\ub9dd\uc758 Gradient \uac12\uc744 \ucd08\uae30\ud654 \ud558\uace0 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud55c\ub2e4. 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 // ======================= Test ====================== float test_accuracy = 0.f ; float test_avg_loss = 0.f ; net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_TEST ; j ++ ) { //dataset->CreateTestDataPair(BATCH); std :: vector < Tensor < float > *> * temp = test_dataloader -> GetDataFromGlobalBuffer (); // printf(\"%d\\r\\n\", temp->size()); Tensor < float > * x_t = ( * temp )[ 0 ]; Tensor < float > * l_t = ( * temp )[ 1 ]; delete temp ; #ifdef __CUDNN__ x_t -> SetDeviceGPU ( GPUID ); l_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , x_t , l_t ); net -> Test (); test_accuracy += net -> GetAccuracy (); test_avg_loss += net -> GetLoss (); printf ( \" \\r Test complete percentage is %d / %d -> loss : %f, acc : %f\" , j + 1 , LOOP_FOR_TEST , test_avg_loss / ( j + 1 ), test_accuracy / ( j + 1 )); fflush ( stdout ); } 106 : \uc2e0\uacbd\ub9dd\uc744 \ud14c\uc2a4\ud2b8 \ubaa8\ub4dc(gradient \ub97c \uacc4\uc0b0\ud558\uc9c0 \uc54a\uc74c)\ub85c \uc804\ud658\ud569\ub2c8\ub2e4. 110~115 : MNIST \ub370\uc774\ud130\uc14b\uc73c\ub85c\ubd80\ud130 \uc774\ubbf8\uc9c0\uc640 \uc815\ub2f5\ub808\uc774\ube14\uc744 \ubc1b\uc544 \uc800\uc7a5\ud569\ub2c8\ub2e4. 122~123 : \uc2e0\uacbd\ub9dd\uc5d0 \ub370\uc774\ud130(image, label)\ub97c \uc785\ub825\ud558\uace0 \ud14c\uc2a4\ud2b8\ub97c \uc9c4\ud589\ud569\ub2c8\ub2e4. 125~126 : \uc815\ud655\ub3c4\uc640 \uc190\uc2e4\uc744 \uce21\uc815\ud55c\ub2e4. Tutorials tutorials/ImageNet (ResNet) \u00b6 tutorials/ImageNet \ub294 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. tutorials/ImageNet/net/my_Resnet.hpp \u00b6 tutorials/ImageNet/net/my_Resnet.hpp \ub294 WICWIU \uc5d0\uc11c ResNet \uc73c\ub85c ImageNet \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uae30 \uc704\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. ImageNet \ud29c\ud1a0\ub9ac\uc5bc\uc758 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. ResNet \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc5ec\ub7ec \uac1c\uc758 BasicBlock(residual block) \uc744 \uc801\uce35\uc2dc\ucf1c \uad6c\uc131\ub429\ub2c8\ub2e4. Source 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 template < typename DTYPE > class BasicBlock : public Module < DTYPE > { private : public : BasicBlock ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pStride = 1 , std :: string pName = NULL ) { Alloc ( pInput , pNumInputChannel , pNumOutputChannel , pStride , pName ); } virtual ~ BasicBlock () {} int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pStride , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * remember = pInput ; Operator < DTYPE > * out = pInput ; // 1 out = new ConvolutionLayer2D < DTYPE > ( out , pNumInputChannel , pNumOutputChannel , 3 , 3 , pStride , pStride , 1 , FALSE , \"BasicBlock_Conv1\" + pName ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BasicBlock_BN1\" + pName ); out = new Relu < DTYPE > ( out , \"BasicBlock_Relu1\" + pName ); // 2 out = new ConvolutionLayer2D < DTYPE > ( out , pNumOutputChannel , pNumOutputChannel , 3 , 3 , 1 , 1 , 1 , FALSE , \"BasicBlock_Conv2\" + pName ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BasicBlock_BN2\" + pName ); // out = new Relu<DTYPE>(out, \"BasicBlock_Relu2\" + pName); // ShortCut if (( pStride != 1 ) || ( pNumInputChannel != pNumOutputChannel )) { remember = new ConvolutionLayer2D < DTYPE > ( remember , pNumInputChannel , pNumOutputChannel , 1 , 1 , pStride , pStride , 0 , FALSE , \"BasicBlock_Conv3_Shortcut\" + pName ); remember = new BatchNormalizeLayer < DTYPE > ( remember , TRUE , \"BasicBlock_BN3_Shortcut\" + pName ); // remember = new Relu<DTYPE>(remember, \"BasicBlock_Relu3_Shortcut\" + pName); } // Add (for skip Connection) out = new Addall < DTYPE > ( remember , out , \"ResNet_Skip_Add\" + pName ); // out = new Addall<DTYPE>(remember, out, \"ResNet_Skip_Add\"); // Last Relu out = new Relu < DTYPE > ( out , \"BasicBlock_Relu3\" + pName ); this -> AnalyzeGraph ( out ); return TRUE ; } }; 20~32 : BasicBlock \uc740 Convolution layer , BatchNormailze layer , Relu \ub85c \uc774\ub8e8\uc5b4\uc9c4 2\uac1c\uc758 layer\uc640 skip connection(Short cut) \uc73c\ub85c \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. 37 : skip connection \uc740 Addall Operator \ub85c \uad6c\ud604\ub429\ub2c8\ub2e4. 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 template < typename DTYPE > class ResNet : public NeuralNetwork < DTYPE > { private : int m_numInputChannel ; public : ResNet ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pNumOfClass ) { Alloc ( pInput , pLabel , pBlockType , pNumOfBlock1 , pNumOfBlock2 , pNumOfBlock3 , pNumOfBlock4 , pNumOfClass ); } virtual ~ ResNet () {} int Alloc ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pNumOfClass ) { this -> SetInput ( 2 , pInput , pLabel ); m_numInputChannel = 64 ; Operator < DTYPE > * out = pInput ; // ReShape out = new ReShape < DTYPE > ( out , 3 , 224 , 224 , \"ReShape\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN0\"); // 1 out = new ConvolutionLayer2D < DTYPE > ( out , 3 , m_numInputChannel , 7 , 7 , 2 , 2 , 3 , FALSE , \"Conv\" ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BN0\" ); out = new Relu < DTYPE > ( out , \"Relu0\" ); out = new Maxpooling2D < float > ( out , 3 , 3 , 2 , 2 , 1 , \"MaxPool_2\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN1\"); out = this -> MakeLayer ( out , m_numInputChannel , pBlockType , pNumOfBlock1 , 1 , \"Block1\" ); out = this -> MakeLayer ( out , 128 , pBlockType , pNumOfBlock2 , 2 , \"Block2\" ); out = this -> MakeLayer ( out , 256 , pBlockType , pNumOfBlock3 , 2 , \"Block3\" ); out = this -> MakeLayer ( out , 512 , pBlockType , pNumOfBlock3 , 2 , \"Block4\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN1\"); // out = new Relu<DTYPE>(out, \"Relu1\"); out = new GlobalAvaragePooling2D < DTYPE > ( out , \"Avg Pooling\" ); out = new ReShape < DTYPE > ( out , 1 , 1 , 512 , \"ReShape\" ); out = new Linear < DTYPE > ( out , 512 , pNumOfClass , FALSE , \"Classification\" ); // out = new BatchNormalizeLayer < DTYPE > (out, FALSE, \"BN0\"); this -> AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== this -> SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , pLabel , \"SCE\" )); // SetLossFunction(new MSE<float>(out, label, \"MSE\")); // ======================= Select Optimizer =================== // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.1, 0.9, 5e-4, MINIMIZE)); // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.001, MINIMIZE)); this -> SetOptimizer ( new AdamOptimizer < float > ( this -> GetParameter (), 0.001 , 0.9 , 0.999 , 1e-08 , 5e-4 , MINIMIZE )); return TRUE ; } Operator < DTYPE >* MakeLayer ( Operator < DTYPE > * pInput , int pNumOfChannel , std :: string pBlockType , int pNumOfBlock , int pStride , std :: string pName = NULL ) { if ( pNumOfBlock == 0 ) { return pInput ; } else if (( pBlockType == \"BasicBlock\" ) && ( pNumOfBlock > 0 )) { Operator < DTYPE > * out = pInput ; out = new BasicBlock < DTYPE > ( out , m_numInputChannel , pNumOfChannel , pStride , pName ); int pNumOutputChannel = pNumOfChannel ; for ( int i = 1 ; i < pNumOfBlock ; i ++ ) { out = new BasicBlock < DTYPE > ( out , pNumOutputChannel , pNumOutputChannel , 1 , pName ); } m_numInputChannel = pNumOutputChannel ; return out ; } else if (( pBlockType == \"Bottleneck\" ) && ( pNumOfBlock > 0 )) { return NULL ; } else return NULL ; } }; 73~83 : WICWIU \uc758 ResNet \ud29c\ud1a0\ub9ac\uc5bc\uc758 \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc740 Conv , BatchNorm \ub4f1\uc758 Operator \ub4e4\uacfc \uc0ac\uc804\uc5d0 \uc815\uc758\ud55c 4\uac1c\uc758 BasicBlock \uc73c\ub85c \ubaa8\ub378\uc744 \uad6c\uc131\ud569\ub2c8\ub2e4. 98~104 : SetLossFunction \uacfc SetOptimizer \ub97c \uc774\uc6a9\ud574 \uc190\uc2e4\ud568\uc218\uc640 Optimizer \ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 131 132 133 134 135 136 137 template < typename DTYPE > NeuralNetwork < DTYPE >* Resnet18 ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new ResNet < DTYPE > ( pInput , pLabel , \"BasicBlock\" , 2 , 2 , 2 , 2 , pNumOfClass ); } template < typename DTYPE > NeuralNetwork < DTYPE >* Resnet34 ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new ResNet < DTYPE > ( pInput , pLabel , \"BasicBlock\" , 3 , 4 , 6 , 3 , pNumOfClass ); } 131~137 ResNet \uc758 \uc885\ub958\ub294 BasicBlock \ub0b4\ubd80\uc758 \ucc44\ub110 \uc218\ub97c \ub2e4\ub974\uac8c \ud568\uc73c\ub85c\uc368 \ub098\ub204\uc5b4\uc9d1\ub2c8\ub2e4. tutorials/ImageNet/main.cpp \u00b6 tutorials/ImageNet/main.cpp \uc740 Source 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 int main ( int argc , char const * argv []) { ... // create input, label data placeholder -> Tensorholder Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 150528 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 1000 , \"label\" ); // ======================= Select net =================== NeuralNetwork < float > * net = Resnet18 < float > ( x , label , NUMBER_OF_CLASS ); // NeuralNetwork<float> *net = Resnet34<float>(x, label, NUMBER_OF_CLASS); // NeuralNetwork<float> *net = DenseNetLite<float>(x, label, NUMBER_OF_CLASS); net -> PrintGraphInformation (); // ======================= Prepare Data =================== ImageNetDataReader < float > * train_data_reader = new ImageNetDataReader < float > ( BATCH , 25 , TRUE ); train_data_reader -> UseNormalization ( TRUE , mean , stddev ); train_data_reader -> UseRandomHorizontalFlip (); // train_data_reader->UseRandomVerticalFlip(); ImageNetDataReader < float > * test_data_reader = new ImageNetDataReader < float > ( BATCH , 25 , FALSE ); test_data_reader -> UseNormalization ( TRUE , mean , stddev ); train_data_reader -> StartProduce (); test_data_reader -> StartProduce (); 21~23 : \ub370\uc774\ud130 placeholder \ub97c \ub9cc\ub4e0\ub2e4. 26 : \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud55c\ub2e4. 32~34 : ImageNet \ub370\uc774\ud130\ub294 random crop , normalization , random Filp \uacfc\uc815\uc744 \uac70\uccd0 \uc804\ucc98\ub9ac \ub41c\ub2e4. 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 // ======================= Train ======================= ... net -> SetModeTrain (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { data = train_data_reader -> GetDataFromBuffer (); #ifdef __CUDNN__ data [ 0 ] -> SetDeviceGPU ( GPUID ); data [ 1 ] -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , data [ 0 ], data [ 1 ]); delete data ; data = NULL ; net -> ResetParameterGradient (); net -> Train (); 111~117 : \uc804\ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub97c \ubc84\ud37c\ub85c\ubd80\ud130 \uac00\uc838\uc640 \uc2e0\uacbd\ub9dd\uc5d0 \ub123\ub294\ub2e4. 120~121 : Gradient\ub97c \ucd08\uae30\ud654 \ud55c \ub4a4 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud55c\ub2e4. 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 // ======================= Test ====================== ... net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_TEST ; j ++ ) { data = test_data_reader -> GetDataFromBuffer (); #ifdef __CUDNN__ data [ 0 ] -> SetDeviceGPU ( GPUID ); // \u7570\ubdc0\uc351 ?\uba2e\ub8de???\uafa9\uc282 data [ 1 ] -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , data [ 0 ], data [ 1 ]); delete data ; data = NULL ; net -> Test (); test_avg_accuracy += net -> GetAccuracy ( NUMBER_OF_CLASS ); test_avg_top5_accuracy += net -> GetTop5Accuracy ( NUMBER_OF_CLASS ); test_avg_loss += net -> GetLoss (); printf ( \" \\r %d / %d -> avg_loss : %0.4f, avg_acc : %0.4f, avg_top5_acc : %0.4f\" /*(ExcuteTime : %f)*/ , j + 1 , LOOP_FOR_TEST , test_avg_loss / ( j + 1 ), test_avg_accuracy / ( j + 1 ), test_avg_top5_accuracy / ( j + 1 )); fflush ( stdout ); } 157 : \uc2e0\uacbd\ub9dd\uc744 inference \ubaa8\ub4dc\ub85c \uc804\ud658 \ud55c\ub2e4. 160~170 : \uc804\ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub97c \ubc84\ud37c\ub85c\ubd80\ud130 \uac00\uc838\uc640 \uc2e0\uacbd\ub9dd\uc5d0 \ub123\uc5b4 \uc815\ud655\ub3c4\uc640 \uc190\uc2e4\uc744 \uce21\uc815\ud55c\ub2e4. 172~181 : \uc815\ud655\ub3c4\uc640 \uc190\uc2e4\uc744 \ucd9c\ub825\ud55c\ub2e4. Tutorials tutorials/ImageNet (DenseNet) \u00b6 tutorials/ImageNet \ub294 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. tutorials/ImageNet/net/my_Densenet.hpp \u00b6 tutorials/ImageNet/net/my_Densenet.hpp \ub294 WICWIU \uc5d0\uc11c DenseNet \uc73c\ub85c ImageNet \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uae30 \uc704\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. DenseNet \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc5ec\ub7ec \uac1c\uc758 DenseNetBlock \uc744 \uc801\uce35\uc2dc\ucf1c \uad6c\uc131\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 template < typename DTYPE > class DenseNetBlock : public Module < DTYPE > { private : public : DenseNetBlock ( Operator < DTYPE > * pInput , int pNumInputChannel , int pGrowthRate , std :: string pName = NULL ) : Module < DTYPE > ( pName ) { Alloc ( pInput , pNumInputChannel , pGrowthRate , pName ); } virtual ~ DenseNetBlock () {} int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pGrowthRate , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * remember = pInput ; Operator < DTYPE > * out = pInput ; // 1 out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"DenseNetBlock_BN1\" + pName ); out = new Relu < DTYPE > ( out , \"DenseNetBlock_Relu1\" + pName ); out = new ConvolutionLayer2D < DTYPE > ( out , pNumInputChannel , 4 * pGrowthRate , 1 , 1 , 1 , 1 , 0 , FALSE , \"DenseNetBlock_Conv1\" + pName ); // 2 out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"DenseNetBlock_BN2\" + pName ); out = new Relu < DTYPE > ( out , \"DenseNetBlock_Relu2\" + pName ); out = new ConvolutionLayer2D < DTYPE > ( out , 4 * pGrowthRate , pGrowthRate , 3 , 3 , 1 , 1 , 1 , FALSE , \"DenseNetBlock_Conv2\" + pName ); // Concat out = new ConcatenateChannelWise < float > ( remember , out , \"DenseNetBlock_ConCat\" ); this -> AnalyzeGraph ( out ); return TRUE ; } }; 20~41 : DenseNet \uc740 \uc774\uc640 \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 template < typename DTYPE > class Transition : public Module < DTYPE > { private : public : Transition ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , std :: string pName = NULL ) : Module < DTYPE > ( pName ) { Alloc ( pInput , pNumInputChannel , pNumOutputChannel , pName ); } virtual ~ Transition () {} int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * out = pInput ; // 1 out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"Transition_BN\" + pName ); out = new Relu < DTYPE > ( out , \"Transition_Relu\" + pName ); out = new ConvolutionLayer2D < DTYPE > ( out , pNumInputChannel , pNumOutputChannel , 1 , 1 , 1 , 1 , 0 , FALSE , \"Transition_Conv\" + pName ); // Avg Pooling out = new AvaragePooling2D < float > ( out , 2 , 2 , 2 , 2 , 0 , \"AVG\" ); this -> AnalyzeGraph ( out ); return TRUE ; } }; 40~66 : DenseNetBlock \uc744 \uc5f0\uacb0\ud558\ub294 Transition \uc740 \uc704\uc640 \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 template < typename DTYPE > class DenseNet : public NeuralNetwork < DTYPE > { private : int m_numInputChannel ; int m_numOutputChannel ; int m_growthRate ; float m_reduction ; public : DenseNet ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pGrowthRate = 12 , float pReduction = 0.5 , int pNumOfClass = 1000 ) { Alloc ( pInput , pLabel , pBlockType , pNumOfBlock1 , pNumOfBlock2 , pNumOfBlock3 , pNumOfBlock4 , pGrowthRate , pReduction , pNumOfClass ); } virtual ~ DenseNet () {} int Alloc ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pGrowthRate , float pReduction , int pNumOfClass ) { this -> SetInput ( 2 , pInput , pLabel ); m_numInputChannel = 2 * pGrowthRate ; m_growthRate = pGrowthRate ; m_reduction = pReduction ; Operator < DTYPE > * out = pInput ; // ReShape out = new ReShape < DTYPE > ( out , 3 , 224 , 224 , \"ReShape\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN0\"); // 1 out = new ConvolutionLayer2D < DTYPE > ( out , 3 , m_numInputChannel , 7 , 7 , 2 , 2 , 3 , FALSE , \"Conv\" ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BN0\" ); out = new Relu < DTYPE > ( out , \"Relu0\" ); out = this -> MakeLayer ( out , m_numInputChannel , pBlockType , pNumOfBlock1 , 1 , \"Block1\" ); m_numInputChannel += pNumOfBlock1 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans1\" ); m_numInputChannel = m_numOutputChannel ; out = this -> MakeLayer ( out , m_numOutputChannel , pBlockType , pNumOfBlock2 , 1 , \"Block2\" ); m_numInputChannel += pNumOfBlock2 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans2\" ); m_numInputChannel = m_numOutputChannel ; out = this -> MakeLayer ( out , m_numOutputChannel , pBlockType , pNumOfBlock3 , 1 , \"Block3\" ); m_numInputChannel += pNumOfBlock3 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans3\" ); m_numInputChannel = m_numOutputChannel ; out = this -> MakeLayer ( out , m_numOutputChannel , pBlockType , pNumOfBlock4 , 1 , \"Block4\" ); m_numInputChannel += pNumOfBlock4 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans4\" ); m_numInputChannel = m_numOutputChannel ; out = new GlobalAvaragePooling2D < DTYPE > ( out , \"Avg Pooling\" ); out = new ReShape < DTYPE > ( out , 1 , 1 , m_numInputChannel , \"ReShape\" ); out = new Linear < DTYPE > ( out , m_numInputChannel , pNumOfClass , TRUE , \"Classification\" ); this -> AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== this -> SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , pLabel , \"SCE\" )); // SetLossFunction(new MSE<float>(out, label, \"MSE\")); // ======================= Select Optimizer =================== // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.000001, 0.9, 5e-4, MINIMIZE)); // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.001, MINIMIZE)); this -> SetOptimizer ( new AdamOptimizer < float > ( this -> GetParameter (), 0.001 , 0.9 , 0.999 , 1e-08 , 5e-4 , MINIMIZE )); return TRUE ; } Operator < DTYPE >* MakeLayer ( Operator < DTYPE > * pInput , int pNumOfChannel , std :: string pBlockType , int pNumOfBlock , int pStride , std :: string pName = NULL ) { if ( pNumOfBlock == 0 ) { return pInput ; } else if (( pBlockType == \"DenseNetBlock\" ) && ( pNumOfBlock > 0 )) { Operator < DTYPE > * out = pInput ; for ( int i = 0 ; i < pNumOfBlock ; i ++ ) { out = new DenseNetBlock < DTYPE > ( out , pNumOfChannel , m_growthRate , pName ); pNumOfChannel += m_growthRate ; } return out ; } else if (( pBlockType == \"Bottleneck\" ) && ( pNumOfBlock > 0 )) { return NULL ; } else return NULL ; } }; template < typename DTYPE > NeuralNetwork < DTYPE >* DenseNet121 ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new DenseNet < DTYPE > ( pInput , pLabel , \"DenseNetBlock\" , 6 , 12 , 24 , 16 , 12 , 0.5 , pNumOfClass ); } template < typename DTYPE > NeuralNetwork < DTYPE >* DenseNetLite ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new DenseNet < DTYPE > ( pInput , pLabel , \"DenseNetBlock\" , 2 , 3 , 6 , 4 , 32 , 0.5 , pNumOfClass ); } 92~121 : WICWIU \ud29c\ud1a0\ub9ac\uc5bc\uc758 DenseNet \uc740 \\(4\\) \uac1c\uc758 DenseNetBlock \uacfc \uac01\uac01\uc758 DenseNetBlock \uc0ac\uc774\ub97c \uc787\ub294 4\uac1c\uc758 Transition \uc73c\ub85c \uc815\uc758\ub429\ub2c8\ub2e4. Tutorials tutorials/GAN/VanillaGAN \u00b6 tutorials/GAN/VanillaGAN \uc740 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. WICWIU \uc758 GAN \uc740 Generator \uc640 Discriminator \ub97c \uac01\uac01 \uad6c\uc131\ud55c\ub2e4. tutorials/GAN/VanillaGAN/net/my_Generator.hpp \u00b6 WICWIU \uc758 GAN \ud29c\ud1a0\ub9ac\uc5bc\uc758 Generator \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 template < typename DTYPE > class my_Generator : public NeuralNetwork < DTYPE > { public : my_Generator ( Operator < float > * z ){ Alloc ( z ); } virtual ~ my_Generator () { } int Alloc ( Operator < float > * z ){ this -> SetInput ( z ); Operator < float > * out = z ; // ======================= layer 1 ====================== out = new Linear < float > ( out , 100 , 128 , TRUE , \"G_L1\" ); // ======================= layer 2 ====================== out = new Linear < float > ( out , 128 , 256 , TRUE , \"G_L2\" ); out = new BatchNormalizeLayer < DTYPE > ( out , FALSE , \"G_BN1\" ); out = new LRelu < float > ( out , 0.2 , \"G_LRelu1\" ); // out = new Relu<float>(out, \"G_Relu1\"); // ======================= layer 3 ====================== out = new Linear < float > ( out , 256 , 512 , TRUE , \"G_L3\" ); out = new BatchNormalizeLayer < DTYPE > ( out , FALSE , \"G_BN2\" ); out = new LRelu < float > ( out , 0.2 , \"G_LRelu2\" ); // out = new Relu<float>(out, \"G_Relu2\"); // ======================= layer 4 ====================== out = new Linear < float > ( out , 512 , 1024 , TRUE , \"G_L4\" ); out = new BatchNormalizeLayer < DTYPE > ( out , FALSE , \"G_BN3\" ); out = new LRelu < float > ( out , 0.2 , \"G_LRelu3\" ); // out = new Relu<float>(out, \"G_Relu3\"); // ======================= layer 5 ==================== out = new Linear < float > ( out , 1024 , 784 , TRUE , \"G_L5\" ); out = new Tanh < float > ( out , \"Tanh\" ); this -> AnalyzeGraph ( out ); } }; tutorials/GAN/VanillaGAN/net/my_Discriminator.hpp \u00b6 WICWIU \uc758 GAN \ud29c\ud1a0\ub9ac\uc5bc\uc758 Discriminator \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 template < typename DTYPE > class my_Discriminator : public NeuralNetwork < DTYPE > { public : my_Discriminator ( Operator < float > * x ){ Alloc ( x ); } virtual ~ my_Discriminator () { } int Alloc ( Operator < float > * x ){ this -> SetInput ( x ); Operator < float > * out = x ; // ======================= layer 1 ====================== out = new Linear < float > ( out , 784 , 512 , TRUE , \"D_L1\" ); out = new LRelu < float > ( out , 0.2 , \"D_LRelu1\" ); // out = new Relu<float>(out, \"D_Relu1\"); // ======================= layer 2 ====================== out = new Linear < float > ( out , 512 , 256 , TRUE , \"D_L2\" ); out = new LRelu < float > ( out , 0.2 , \"D_LRelu2\" ); // out = new Relu<float>(out, \"D_Relu2\"); // ======================= layer 3 ====================== out = new Linear < float > ( out , 256 , 1 , TRUE , \"D_L3\" ); out = new Sigmoid < float > ( out , \"D_Sigmoid\" ); this -> AnalyzeGraph ( out ); } }; tutorials/GAN/VanillaGAN/net/my_GAN.hpp \u00b6 WICWIU \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c Generator \uc640 Discriminator \uc758 \ud559\uc2b5\uc744 \uc81c\uc5b4\ud558\ub294 GAN \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 template < typename DTYPE > class my_GAN : public GAN < DTYPE > { public : my_GAN ( Tensorholder < float > * z , Tensorholder < float > * x , Tensorholder < float > * label ){ Alloc ( z , x , label ); } virtual ~ my_GAN () { } int Alloc ( Tensorholder < float > * z , Tensorholder < float > * x , Tensorholder < float > * label ){ this -> SetInput ( 3 , z , x , label ); this -> SetGenerator ( new my_Generator < float > ( z )); this -> SetSwitch ( new Switch < float > ( this -> GetGenerator (), x )); this -> SetDiscriminator ( new my_Discriminator < float > ( this -> GetSwitch ())); this -> AnalyzeGraph ( this -> GetDiscriminator ()); this -> SetLabel ( label ); // ======================= Select LossFunction =================== this -> SetGANLossFunctions ( new VanillaGANGeneratorLoss < float > ( this -> GetDiscriminator (), this -> GetLabel (), \"VanillaGANGeneratorLoss\" ), new VanillaGANDiscriminatorLoss < float > ( this -> GetDiscriminator (), this -> GetLabel (), \"VanillaGANDiscriminatorLoss\" )); // ======================= Select Optimizer =================== // this->SetGANOptimizers(new GradientDescentOptimizer<float>(this->GetGenerator()->GetParameter(), 0.000001, MINIMIZE), new GradientDescentOptimizer<float>(this->GetDiscriminator()->GetParameter(), 0.000001, MAXIMIZE)); // this->SetGANOptimizers(new RMSPropOptimizer<float>(this->GetGenerator()->GetParameter(), 0.0001, 0.9, 1e-08, FALSE, MINIMIZE), new RMSPropOptimizer<float>(this->GetDiscriminator()->GetParameter(), 0.0001, 0.9, 1e-08, FALSE, MAXIMIZE)); this -> SetGANOptimizers ( new AdamOptimizer < float > ( this -> GetGenerator () -> GetParameter (), 0.0002 , 0.5 , 0.999 , 1e-08 , MINIMIZE ), new AdamOptimizer < float > ( this -> GetDiscriminator () -> GetParameter (), 0.0002 , 0.5 , 0.999 , 1e-08 , MINIMIZE )); } }; tutorials/GAN/VanillaGAN/main.cpp \u00b6 WICWIU \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c GAN \uc744 \uc0ac\uc6a9\ud558\ub294 main \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 int main ( int argc , char const * argv []) { ... // create input, label data placeholder -> Tensorholder Tensorholder < float > * z = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 100 , \"z\" ); Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 1 , \"label\" ); // create NoiseGenrator GaussianNoiseGenerator < float > * Gnoise = new GaussianNoiseGenerator < float > ( 1 , BATCH , 1 , 1 , 100 , 0 , 1 ); // ======================= Select net =================== // GAN<float> *net = new my_BEGAN<float>(z, x, label); GAN < float > * net = new my_GAN < float > ( z , x , label ); //net->Load(filename); // ======================= Prepare Data =================== MNISTDataSet < float > * dataset = CreateMNISTDataSet < float > (); 16 : Generator \uc758 \uc785\ub825\uc73c\ub85c \uc0ac\uc6a9\ud560 latent variable\uc744 \uc800\uc7a5 \ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4. 25 : \uc0ac\uc804\uc5d0 \uc815\uc758\ud55c GAN \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud55c\ub2e4. 29 : MNIST \ub370\uc774\ud130\uc14b\uc744 \uc800\uc7a5 \ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4. 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 //Start make Noise Gnoise -> StartProduce (); for ( int i = epoch + 1 ; i < EPOCH ; i ++ ) { std :: cout << \"EPOCH : \" << i << '\\n' ; // ======================= Train ======================= float genLoss = 0.f ; float discLoss = 0.f ; net -> SetModeTrain (); startTime = clock (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { dataset -> CreateTrainDataPair ( BATCH ); Tensor < float > * x_t = dataset -> GetTrainFeedImage (); Tensor < float > * l_t = dataset -> GetTrainFeedLabel (); delete l_t ; Tensor < float > * z_t = Gnoise -> GetNoiseFromBuffer (); #ifdef __CUDNN__ x_t -> SetDeviceGPU ( GPUID ); z_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , z_t , x_t ); net -> ResetParameterGradient (); net -> TrainDiscriminator (); z_t = Gnoise -> GetNoiseFromBuffer (); #ifdef __CUDNN__ z_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 1 , z_t ); net -> ResetParameterGradient (); net -> TrainGenerator (); if (( j + 1 ) % 50 == 0 ){ genLoss = ( * net -> GetGeneratorLossFunction () -> GetResult ())[ Index5D ( net -> GetGeneratorLossFunction () -> GetResult () -> GetShape (), 0 , 0 , 0 , 0 , 0 )]; discLoss = ( * net -> GetDiscriminatorLossFunction () -> GetResult ())[ Index5D ( net -> GetDiscriminatorLossFunction () -> GetResult () -> GetShape (), 0 , 0 , 0 , 0 , 0 )]; printf ( \" \\r Train complete percentage is %d / %d -> Generator Loss : %f, Discriminator Loss : %f\" , j + 1 , LOOP_FOR_TRAIN , genLoss , discLoss ); fflush ( stdout ); string filePath = \"trained/epoch\" + std :: to_string ( i ) + \"_\" + std :: to_string ( j + 1 ) + \".jpg\" ; const char * cstr = filePath . c_str (); Tensor2Image < float > ( net -> GetGenerator () -> GetResult (), cstr , 3 , 20 , 28 , 28 ); } } endTime = clock (); nProcessExcuteTime = (( double )( endTime - startTime )) / CLOCKS_PER_SEC ; printf ( \" \\n (excution time per epoch : %f) \\n\\n \" , nProcessExcuteTime ); 60 : \uc804\ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. 63 : latent \ubcc0\uc218\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. 70~71 : Gradient \ub97c \ucd08\uae30\ud654\ud558\uace0 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud569\ub2c8\ub2e4. 95 \ud589: Generator \uc5d0\uc11c \uc0dd\uc131\ud55c \uc774\ubbf8\uc9c0\ub97c \uc77c\uc815 step\ub9c8\ub2e4 \uc800\uc7a5\ud55c\ub2e4. 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 // =======================Test Generate(Save Generated Image)====================== net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_GENERATE ; j ++ ) { Tensor < float > * z_t = Gnoise -> GetNoiseFromBuffer (); #ifdef __CUDNN__ z_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 1 , z_t ); net -> Generate (); string filePath = \"generated/epoch\" + std :: to_string ( i ) + \"_\" + std :: to_string ( j + 1 ) + \".jpg\" ; const char * cstr = filePath . c_str (); Tensor2Image < float > ( net -> GetGenerator () -> GetResult (), cstr , 3 , 20 , 28 , 28 ); printf ( \" \\r Generate complete percentage is %d / %d\" , j + 1 , LOOP_FOR_GENERATE ); fflush ( stdout ); } std :: cout << \" \\n\\n \" ; net -> Save ( filename ); 106~127 : GAN \uc5d0\uc11c\ub294 \uc815\ud655\ub3c4\uac00 \uc758\ubbf8\uc788\ub294 \uac83\uc774 \uc544\ub2c8\ubbc0\ub85c \ud14c\uc2a4\ud2b8\uc5d0\uc11c\ub294 Generator \uc5d0\uc11c \uc774\ubbf8\uc9c0\ub97c \uc0dd\uc131\uc2dc\ud0a8 \ub4a4 \uc800\uc7a5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud55c\ub2e4.","title":"4. WICWIU \ucf54\ub4dc \uac19\uc774\ubcf4\uae30"},{"location":"dev/wicwiu/code/#project-layout","text":"WICWIU \ub294 \ud06c\uac8c lib/ , tutorials/ , src/ \ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc138\ubd80 \ub514\ub809\ud1a0\ub9ac\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. lib/ # \ucef4\ud30c\uc77c \ud6c4 \uc815\uc801 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc0dd\uc131\ub418\ub294 \ub514\ub809\ud1a0\ub9ac. tutorials/ # WICWIU \ub85c \uc81c\uc791\ub41c \uc5ec\ub7ec \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud574\ubcfc \uc218 \uc788\ub294 \ucf54\ub4dc\ub4e4. # net/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \uc788\uc2b5\ub2c8\ub2e4. # data/ \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc774 \ud559\uc2b5\ud560 \ub370\uc774\ud130\uc14b\uc774 \uc788\uc2b5\ub2c8\ub2e4. CIFAR10/ CIFAR100Reader/ ImageNet/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. MNIST/ # \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5 \uac00\ub2a5. GAN/ # \ud558\uc704 \ub514\ub809\ud1a0\ub9ac \ub0b4 \ud3ec\ud568\ub41c \ud30c\uc77c\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uc804\uc5d0 # \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. VanillaGAN/ DCGAN/ WGAN/ BEGAN/ src/ # LossFunction, Operator, Optimizer, \uadf8\ub9ac\uace0 Module # \uc744 \ube44\ub86f\ud55c \uc18c\uc2a4\ud30c\uc77c\uc774 \uc788\ub294 \ub514\ub809\ud1a0\ub9ac. LossFunction/ Operator/ Optimizer/ Module/","title":"Project layout"},{"location":"dev/wicwiu/code/#wicwiu","text":"Tip makefile \uc758 \ubb38\ubc95\uc5d0 \ub300\ud55c \uae30\ucd08\uac00 \ubd80\uc871\ud558\ub2e4\uba74 Makefile \uae30\ucd08 \ubb38\ubc95 \ub97c \ucc38\uace0\ud558\uc138\uc694!","title":"WICWIU \ucf54\ub4dc \uc0b4\ud3b4\ubcf4\uae30"},{"location":"dev/wicwiu/code/#compile-src","text":"src/ \ub294 WICWIU \ub77c\uc774\ube0c\ub7ec\ub9ac \ub514\ub809\ud1a0\ub9ac\uc785\ub2c8\ub2e4. \uc774\uac83\uc744 \ucef4\ud30c\uc77c\ud558\ub294 makefile \ub97c \uac19\uc774 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Info WICWIU \ub294 \uacc4\uc18d \uc5c5\ub370\uc774\ud2b8 \ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc640 \ub2e4\ub97c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Source 1 2 3 4 5 6 7 .SUFFIXES = .cpp .o FRAMEWORK_LIB = lib/library.a CFLAGS = -O2 -std = c++11 ENABLE_CUDNN = -D__CUDNN__ DFLAGS = -g -D__DEBUG__ 1 : Suffix , CPP \ud30c\uc77c\uc744 Object \ud30c\uc77c\ub85c \ubcc0\ud658\uc2dc\ucf1c\uc8fc\ub294 \ub0b4\uc7a5 \uaddc\uce59\uc785\ub2c8\ub2e4. 3 : WICWIU \uc758 \uc815\uc801 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. 4 : \ucef4\ud30c\uc77c \uc635\uc158\uc785\ub2c8\ub2e4. 6 : cuDNN \uc0ac\uc6a9 \uc5ec\ubd80 \ud50c\ub798\uadf8\uc785\ub2c8\ub2e4. Warning cuDNN \ubbf8 \uc124\uce58 \ubc0f \ubbf8 \uc0ac\uc6a9 \uc2dc \uc8fc\uc11d\ucc98\ub9ac\ub97c \ud574\uc57c\ud569\ub2c8\ub2e4. 7 : \ub514\ubc84\uadf8 \ucf54\ub4dc \uc0ac\uc6a9 \uc5ec\ubd80 \ud50c\ub798\uadf8\uc785\ub2c8\ub2e4. Warning \ubbf8 \uc0ac\uc6a9 \uc2dc \uc8fc\uc11d\ucc98\ub9ac\ub97c \ud574\uc57c\ud569\ub2c8\ub2e4. 9 10 11 12 13 14 15 16 17 18 19 20 21 INCLUDE_PATH = -I/usr/local/cuda/include LIB_PATH = -L. -L/usr/local/cuda/lib64 CC = g++ NVCC = nvcc ifdef ENABLE_CUDNN LINKER = nvcc LFLAGS = -lcudart -lcudnn -lpthread else LINKER = g++ LFLAGS = -lpthread endif 9 : \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0\uc11c CUDA \ud5e4\ub354 \ud30c\uc77c\uc744 \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 10 : CUDA \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 12 : \ucef4\ud30c\uc77c\ub7ec\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 13 : CUDA \ud30c\uc77c \uc6a9 \ucef4\ud30c\uc77c\ub7ec\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 15~21 : cuDNN \uc0ac\uc6a9 \uc2dc, NVCC \ub9c1\ucee4 \uc0ac\uc6a9 \ubc0f cudart , cudnn , pthread \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. cuDNN \ubbf8 \uc0ac\uc6a9 \uc2dc, g++ \ub9c1\ucee4 \uc0ac\uc6a9 \ubc0f pthread \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 AR = ar SRCS = \\ src/Utils.cpp \\ src/Shape.cpp \\ OBJS = ${ SRCS :.cpp=.o } ifdef ENABLE_CUDNN CUDA_SRCS = \\ src/Utils_CUDA.cu \\ src/Optimizer/AdamOptimizer_CUDA.cu \\ src/Operator/Concatenate_CUDA.cu CUDA_OBJS = ${ CUDA_SRCS :.cu=.o } endif all : $( FRAMEWORK_LIB ) 25~27 : .cpp \uc18c\uc2a4 \ucf54\ub4dc \ud30c\uc77c\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. 29 : SRCS \uc758 .cpp \ud30c\uc77c\uc744 \uac01\uac01 \ucef4\ud30c\uc77c\ud574 .o \ud30c\uc77c(\uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c)\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 31~38 : cuDNN \uc0ac\uc6a9 \uc2dc, CUDA_SRC/ \uc758 .cu \ud30c\uc77c\uc744 \uac01\uac01 \ucef4\ud30c\uc77c\ud574 .o \ud30c\uc77c\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 40 : \ucef4\ud30c\uc77c \uc2dc\uc791 \ud0c0\uac9f\uc785\ub2c8\ub2e4. FRAMEWORK_LIB \uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 .cpp.o : $( CC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) $( LIB_PATH ) -c $< -o $@ src/Utils_CUDA.o : src / Utils_CUDA . cu $( NVCC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) -c $< -o $@ src/Optimizer/AdamOptimizer_CUDA.o : src / Optimizer / AdamOptimizer_CUDA . cu $( NVCC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) -c $< -o $@ src/Operator/Concatenate_CUDA.o : src / Operator / Concatenate_CUDA . cu $( NVCC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) -c $< -o $@ $(FRAMEWORK_LIB) : $( OBJS ) $( CUDA_OBJS ) $( AR ) rcs $@ $( OBJS ) $( CUDA_OBJS ) clean : rm -rf *.o $( OBJS ) $( CUDA_OBJS ) $( FRAMEWORK_LIB ) 42~43 : \uc8fc\uc5b4\uc9c4 \ud30c\uc77c\uc744 \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 \ucef4\ud30c\uc77c\ud558\uc5ec \uac19\uc740 \uc774\ub984\uc758 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 45~49 : \ud574\ub2f9 .cu \ud30c\uc77c\uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud558\uace0 \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 \ucef4\ud30c\uc77c\ud558\uc5ec \uac19\uc740 \uc774\ub984\uc758 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 52~53 : OBJS , CUDA_OBJS \uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud558\uace0, FRAMEWORK_LIB , OBJS , CUDA_OBJS \uc758 .o \ud30c\uc77c\ub4e4\uc744 \uac00\uc9c0\uace0 \uc544\uce74\uc774\ube0c \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.","title":"Compile src/"},{"location":"dev/wicwiu/code/#compile-tutorialsimagenet","text":"tutorials/ImageNet/ \uc740 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. \uc774\uac83\uc744 \ucef4\ud30c\uc77c\ud558\ub294 makefile \ub97c \uac19\uc774 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Info WICWIU \ub294 \uacc4\uc18d \uc5c5\ub370\uc774\ud2b8 \ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc640 \ub2e4\ub97c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 .SUFFIXES = .cpp .o CFLAGS = -O2 -std = c++11 -g ENABLE_CUDNN = -D__CUDNN__ DFLAGS = -g -D__DEBUG__ LFLAGS = -lcudart -lcudnn -lpthread -ljpeg -lturbojpeg INCLUDE_PATH = -I/usr/local/cuda/include -I/opt/libjpeg-turbo/include -I/opt/libjpeg-turbo/lib64 LIB_PATH = -L. -L/usr/local/cuda/lib64 -L/opt/libjpeg-turbo/lib64 CC = g++ NVCC = nvcc FRAMEWORK_LIB = ../../lib/library.a 6 : \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9 \ud50c\ub798\uadf8, cudart , cudnn , pthread , jpeg , turbojpeg \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. 8 : \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0\uc11c CUDA \ud5e4\ub354 \ud30c\uc77c\uc744 \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 9 : CUDA \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud0d0\uc0c9\ud560 \ub514\ub809\ud1a0\ub9ac\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. 14 : \ud504\ub808\uc784\uc6cc\ud06c \ub77c\uc774\ube0c\ub7ec\ub9ac \uc544\uce74\uc774\ube0c \ud30c\uc77c\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 SRCS = \\ ../../src/Shape.cpp \\ ../../src/LongArray.cpp \\ ../../src/Tensor.cpp \\ ../../src/Operator.cpp \\ ../../src/LossFunction.cpp \\ ../../src/Optimizer.cpp \\ ../../src/Module.cpp \\ ../../src/NeuralNetwork.cpp all : main .cpp.o : $( CC ) $( CFLAGS ) $( DFLAGS ) $( ENABLE_CUDNN ) $( INCLUDE_PATH ) $( LIB_PATH ) -c $< -o $@ main : main . o $( FRAMEWORK_LIB ) $( NVCC ) $( CFLAGS ) $( ENABLE_CUDNN ) $( DFLAGS ) $( LFLAGS ) $( INCLUDE_PATH ) $( LIB_PATH ) -o $@ $( FRAMEWORK_LIB ) main.o $(FRAMEWORK_LIB) : $( SRC ) make -C ../.. clean : rm -rf *.o main clean_all : rm -rf *.o main make clean -C ../.. 17~25 : .cpp \uc18c\uc2a4 \ucf54\ub4dc \ud30c\uc77c, \uc544\uce74\uc774\ube0c \ud30c\uc77c\uc758 \uc758\uc874\uc131 \ud655\uc778\uc744 \uc704\ud574 \uc815\uc758\ud558\ub294 \ubcc0\uc218\uc785\ub2c8\ub2e4. 27 : \uc2dc\uc791 \ud0c0\uac9f, main \ud30c\uc77c\uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud569\ub2c8\ub2e4. 29~30 : \uc8fc\uc5b4\uc9c4 \ud30c\uc77c\uc744 \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 \ucef4\ud30c\uc77c\ud558\uc5ec \uac19\uc740 \uc774\ub984\uc758 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 32~33 : main.o \ud30c\uc77c\uacfc FRAMEWORK_LIB \uc758 \uc758\uc874\uc131\uc744 \ud655\uc778\ud558\uace0, \uc635\uc158\ub4e4\uc744 \uc774\uc6a9\ud574 FRAMEWORK_LIB \uacfc main.o \ud30c\uc77c\uc744 main \ud30c\uc77c\ub85c \ub9c1\ud06c\ud55c\ub2e4. 35~36 : \uc9c0\uc815\ub41c \uacbd\ub85c\uc5d0\uc11c make \uc2e4\ud589","title":"Compile tutorials/ImageNet/"},{"location":"dev/wicwiu/code/#tutorials-tutorialsmnist","text":"tutorials/MNIST \ub294 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4.","title":"Tutorials tutorials/MNIST"},{"location":"dev/wicwiu/code/#tutorialsmnistnetmy_cnnhpp","text":"tutorials/MNIST/net/my_CNN.hpp \ub294 WICWIU \uc5d0\uc11c CNN \uc73c\ub85c MNIST \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uae30 \uc704\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. MNIST \ud29c\ud1a0\ub9ac\uc5bc\uc758 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Info WICWIU \ub294 \uacc4\uc18d \uc5c5\ub370\uc774\ud2b8 \ub418\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc640 \ub2e4\ub97c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class my_CNN : public NeuralNetwork < float > { private : public : my_CNN ( Tensorholder < float > * x , Tensorholder < float > * label ) { SetInput ( 2 , x , label ); Operator < float > * out = NULL ; out = new ReShape < float > ( x , 28 , 28 , \"Flat2Image\" ); // ======================= layer 1======================= out = new ConvolutionLayer2D < float > ( out , 1 , 32 , 3 , 3 , 1 , 1 , 0 , TRUE , \"Conv_1\" ); out = new BatchNormalizeLayer < float > ( out , TRUE , \"BN_1\" ); out = new Relu < float > ( out , \"Relu_1\" ); out = new Maxpooling2D < float > ( out , 2 , 2 , 2 , 2 , \"MaxPool_1\" ); // ======================= layer 2======================= out = new ConvolutionLayer2D < float > ( out , 32 , 64 , 3 , 3 , 1 , 1 , 0 , TRUE , \"Conv_2\" ); out = new BatchNormalizeLayer < float > ( out , TRUE , \"BN_2\" ); out = new Relu < float > ( out , \"Relu_2\" ); out = new Maxpooling2D < float > ( out , 2 , 2 , 2 , 2 , \"MaxPool_2\" ); // ======================= layer 3======================= out = new ReShape < float > ( out , 1 , 1 , 5 * 5 * 64 , \"Image2Flat\" ); // ======================= layer 3======================= out = new Linear < float > ( out , 5 * 5 * 64 , 1024 , TRUE , \"Fully-Connected_1\" ); out = new Relu < float > ( out , \"Relu_3\" ); //// ======================= layer 4======================= out = new Linear < float > ( out , 1024 , 10 , TRUE , \"Fully-connected_2\" ); AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , label , \"SCE\" )); // ======================= Select Optimizer =================== SetOptimizer ( new RMSPropOptimizer < float > ( GetParameter (), 0.01 , 0.9 , 1e-08 , FALSE , MINIMIZE )); } virtual ~ my_CNN () {} }; 5 : SetInput \ud568\uc218\ub97c \ud1b5\ud574 \\(2\\) \uac00\uc9c0 \uc785\ub825( data , label ) \uc774 \ubaa8\ub378\uc758 \ud559\uc2b5\uc5d0 \ub4e4\uc5b4\uac04\ub2e4\ub294 \uac83\uc744 \uba85\uc2dc\ud569\ub2c8\ub2e4. 9 : ReShape \ud568\uc218\ub85c MNIST \uc190\uae00\uc528 \uc774\ubbf8\uc9c0 x \ub97c Tensor \ud615\ud0dc\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. 12~30 : ConvolutionLayer2D , BatchNormalizeLayer , Relu , Maxpooling \ub4f1\uc758 Operator \ub4e4\ub85c \uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud569\ub2c8\ub2e4. 35 : SetLossFunction \ud568\uc218\ub85c \uc190\uc2e4\ud568\uc218\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 39 : SetOptimizer \ud568\uc218\ub85c Optimizer \ub97c \uc815\uc758\ud569\ub2c8\ub2e4.","title":"tutorials/MNIST/net/my_CNN.hpp"},{"location":"dev/wicwiu/code/#tutorialsmnistmaincpp","text":"tutorials/MNIST/main.cpp \ub294 tutorials/MNIST/net/my_CNN.hpp \uc5d0\uc11c \uc815\uc758\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uc0ac\uc6a9\ud558\uc5ec MNIST \uc190\uae00\uc528 \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4. Source 19 20 21 22 23 24 25 26 27 28 29 30 // create input, label data placeholder -> Tensorholder Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 10 , \"label\" ); // ======================= Select net =================== NeuralNetwork < float > * net = new my_CNN ( x , label ); // ======================= Prepare Data =================== MNISTDataSet < float > * train_dataset = new MNISTDataSet < float > ( \"data/train-images-idx3-ubyte\" , \"data/train-labels-idx1-ubyte\" , TRAINING ); DataLoader < float > * train_dataloader = new DataLoader < float > ( train_dataset , BATCH , TRUE , 20 , FALSE ); MNISTDataSet < float > * test_dataset = new MNISTDataSet < float > ( \"data/t10k-images-idx3-ubyte\" , \"data/t10k-labels-idx1-ubyte\" , TESTING ); DataLoader < float > * test_dataloader = new DataLoader < float > ( test_dataset , BATCH , FALSE , 20 , FALSE ); 20~21 : Tensorholder (placeholder) \ud074\ub798\uc2a4\ub85c \uc190\uae00\uc528 \uc774\ubbf8\uc9c0\uc640 \uc815\ub2f5\ub808\uc774\ube14\uc744 \uc800\uc7a5 \ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. 24 : \uc0ac\uc804\uc5d0 \uc815\uc758\ud55c CNN \uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. 26~30 : MNIST \ub370\uc774\ud130\uc14b\uacfc \ub370\uc774\ud130\ub85c\ub354\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 // ======================= Train ======================= float train_accuracy = 0.f ; float train_avg_loss = 0.f ; net -> SetModeTrain (); startTime = clock (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { //dataset->CreateTrainDataPair(BATCH); std :: vector < Tensor < float > *> * temp = train_dataloader -> GetDataFromGlobalBuffer (); // printf(\"%d\\r\\n\", temp->size()); Tensor < float > * x_t = ( * temp )[ 0 ]; Tensor < float > * l_t = ( * temp )[ 1 ]; delete temp ; #ifdef __CUDNN__ x_t -> SetDeviceGPU ( GPUID ); l_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ // std::cin >> temp; net -> FeedInputTensor ( 2 , x_t , l_t ); net -> ResetParameterGradient (); net -> Train (); // std::cin >> temp; train_accuracy += net -> GetAccuracy (); train_avg_loss += net -> GetLoss (); printf ( \" \\r Train complete percentage is %d / %d -> loss : %f, acc : %f\" /*(ExcuteTime : %f)*/ , j + 1 , LOOP_FOR_TRAIN , train_avg_loss / ( j + 1 ), train_accuracy / ( j + 1 ) /*nProcessExcuteTime*/ ); fflush ( stdout ); } endTime = clock (); nProcessExcuteTime = (( double )( endTime - startTime )) / CLOCKS_PER_SEC ; printf ( \" \\n (excution time per epoch : %f) \\n\\n \" , nProcessExcuteTime ); 72~77 : MNIST \ub370\uc774\ud130\uc14b\uc73c\ub85c\ubd80\ud130 \uc774\ubbf8\uc9c0\uc640 \uc815\ub2f5\ub808\uc774\ube14\uc744 \ubc1b\uc544 \uc800\uc7a5\ud569\ub2c8\ub2e4. 79~82 : cuDNN \uc744 \uc0ac\uc6a9 \ud560 \uacbd\uc6b0, placeholder \uc758 device \ub97c GPU \ub85c \uc124\uc815\ud55c\ub2e4. 84~86 : \uc2e0\uacbd\ub9dd\uc5d0 \ub370\uc774\ud130\uc14b(\uc190\uae00\uc528 \uc774\ubbf8\uc9c0, \uc815\ub2f5\ub808\uc774\ube14)\ub97c \ub9cc\ub4e4\uc5b4 \ub123\uace0 \uc2e0\uacbd\ub9dd\uc758 Gradient \uac12\uc744 \ucd08\uae30\ud654 \ud558\uace0 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud55c\ub2e4. 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 // ======================= Test ====================== float test_accuracy = 0.f ; float test_avg_loss = 0.f ; net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_TEST ; j ++ ) { //dataset->CreateTestDataPair(BATCH); std :: vector < Tensor < float > *> * temp = test_dataloader -> GetDataFromGlobalBuffer (); // printf(\"%d\\r\\n\", temp->size()); Tensor < float > * x_t = ( * temp )[ 0 ]; Tensor < float > * l_t = ( * temp )[ 1 ]; delete temp ; #ifdef __CUDNN__ x_t -> SetDeviceGPU ( GPUID ); l_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , x_t , l_t ); net -> Test (); test_accuracy += net -> GetAccuracy (); test_avg_loss += net -> GetLoss (); printf ( \" \\r Test complete percentage is %d / %d -> loss : %f, acc : %f\" , j + 1 , LOOP_FOR_TEST , test_avg_loss / ( j + 1 ), test_accuracy / ( j + 1 )); fflush ( stdout ); } 106 : \uc2e0\uacbd\ub9dd\uc744 \ud14c\uc2a4\ud2b8 \ubaa8\ub4dc(gradient \ub97c \uacc4\uc0b0\ud558\uc9c0 \uc54a\uc74c)\ub85c \uc804\ud658\ud569\ub2c8\ub2e4. 110~115 : MNIST \ub370\uc774\ud130\uc14b\uc73c\ub85c\ubd80\ud130 \uc774\ubbf8\uc9c0\uc640 \uc815\ub2f5\ub808\uc774\ube14\uc744 \ubc1b\uc544 \uc800\uc7a5\ud569\ub2c8\ub2e4. 122~123 : \uc2e0\uacbd\ub9dd\uc5d0 \ub370\uc774\ud130(image, label)\ub97c \uc785\ub825\ud558\uace0 \ud14c\uc2a4\ud2b8\ub97c \uc9c4\ud589\ud569\ub2c8\ub2e4. 125~126 : \uc815\ud655\ub3c4\uc640 \uc190\uc2e4\uc744 \uce21\uc815\ud55c\ub2e4.","title":"tutorials/MNIST/main.cpp"},{"location":"dev/wicwiu/code/#tutorials-tutorialsimagenet-resnet","text":"tutorials/ImageNet \ub294 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4.","title":"Tutorials tutorials/ImageNet (ResNet)"},{"location":"dev/wicwiu/code/#tutorialsimagenetnetmy_resnethpp","text":"tutorials/ImageNet/net/my_Resnet.hpp \ub294 WICWIU \uc5d0\uc11c ResNet \uc73c\ub85c ImageNet \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uae30 \uc704\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. ImageNet \ud29c\ud1a0\ub9ac\uc5bc\uc758 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. ResNet \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc5ec\ub7ec \uac1c\uc758 BasicBlock(residual block) \uc744 \uc801\uce35\uc2dc\ucf1c \uad6c\uc131\ub429\ub2c8\ub2e4. Source 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 template < typename DTYPE > class BasicBlock : public Module < DTYPE > { private : public : BasicBlock ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pStride = 1 , std :: string pName = NULL ) { Alloc ( pInput , pNumInputChannel , pNumOutputChannel , pStride , pName ); } virtual ~ BasicBlock () {} int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pStride , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * remember = pInput ; Operator < DTYPE > * out = pInput ; // 1 out = new ConvolutionLayer2D < DTYPE > ( out , pNumInputChannel , pNumOutputChannel , 3 , 3 , pStride , pStride , 1 , FALSE , \"BasicBlock_Conv1\" + pName ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BasicBlock_BN1\" + pName ); out = new Relu < DTYPE > ( out , \"BasicBlock_Relu1\" + pName ); // 2 out = new ConvolutionLayer2D < DTYPE > ( out , pNumOutputChannel , pNumOutputChannel , 3 , 3 , 1 , 1 , 1 , FALSE , \"BasicBlock_Conv2\" + pName ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BasicBlock_BN2\" + pName ); // out = new Relu<DTYPE>(out, \"BasicBlock_Relu2\" + pName); // ShortCut if (( pStride != 1 ) || ( pNumInputChannel != pNumOutputChannel )) { remember = new ConvolutionLayer2D < DTYPE > ( remember , pNumInputChannel , pNumOutputChannel , 1 , 1 , pStride , pStride , 0 , FALSE , \"BasicBlock_Conv3_Shortcut\" + pName ); remember = new BatchNormalizeLayer < DTYPE > ( remember , TRUE , \"BasicBlock_BN3_Shortcut\" + pName ); // remember = new Relu<DTYPE>(remember, \"BasicBlock_Relu3_Shortcut\" + pName); } // Add (for skip Connection) out = new Addall < DTYPE > ( remember , out , \"ResNet_Skip_Add\" + pName ); // out = new Addall<DTYPE>(remember, out, \"ResNet_Skip_Add\"); // Last Relu out = new Relu < DTYPE > ( out , \"BasicBlock_Relu3\" + pName ); this -> AnalyzeGraph ( out ); return TRUE ; } }; 20~32 : BasicBlock \uc740 Convolution layer , BatchNormailze layer , Relu \ub85c \uc774\ub8e8\uc5b4\uc9c4 2\uac1c\uc758 layer\uc640 skip connection(Short cut) \uc73c\ub85c \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. 37 : skip connection \uc740 Addall Operator \ub85c \uad6c\ud604\ub429\ub2c8\ub2e4. 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 template < typename DTYPE > class ResNet : public NeuralNetwork < DTYPE > { private : int m_numInputChannel ; public : ResNet ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pNumOfClass ) { Alloc ( pInput , pLabel , pBlockType , pNumOfBlock1 , pNumOfBlock2 , pNumOfBlock3 , pNumOfBlock4 , pNumOfClass ); } virtual ~ ResNet () {} int Alloc ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pNumOfClass ) { this -> SetInput ( 2 , pInput , pLabel ); m_numInputChannel = 64 ; Operator < DTYPE > * out = pInput ; // ReShape out = new ReShape < DTYPE > ( out , 3 , 224 , 224 , \"ReShape\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN0\"); // 1 out = new ConvolutionLayer2D < DTYPE > ( out , 3 , m_numInputChannel , 7 , 7 , 2 , 2 , 3 , FALSE , \"Conv\" ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BN0\" ); out = new Relu < DTYPE > ( out , \"Relu0\" ); out = new Maxpooling2D < float > ( out , 3 , 3 , 2 , 2 , 1 , \"MaxPool_2\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN1\"); out = this -> MakeLayer ( out , m_numInputChannel , pBlockType , pNumOfBlock1 , 1 , \"Block1\" ); out = this -> MakeLayer ( out , 128 , pBlockType , pNumOfBlock2 , 2 , \"Block2\" ); out = this -> MakeLayer ( out , 256 , pBlockType , pNumOfBlock3 , 2 , \"Block3\" ); out = this -> MakeLayer ( out , 512 , pBlockType , pNumOfBlock3 , 2 , \"Block4\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN1\"); // out = new Relu<DTYPE>(out, \"Relu1\"); out = new GlobalAvaragePooling2D < DTYPE > ( out , \"Avg Pooling\" ); out = new ReShape < DTYPE > ( out , 1 , 1 , 512 , \"ReShape\" ); out = new Linear < DTYPE > ( out , 512 , pNumOfClass , FALSE , \"Classification\" ); // out = new BatchNormalizeLayer < DTYPE > (out, FALSE, \"BN0\"); this -> AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== this -> SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , pLabel , \"SCE\" )); // SetLossFunction(new MSE<float>(out, label, \"MSE\")); // ======================= Select Optimizer =================== // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.1, 0.9, 5e-4, MINIMIZE)); // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.001, MINIMIZE)); this -> SetOptimizer ( new AdamOptimizer < float > ( this -> GetParameter (), 0.001 , 0.9 , 0.999 , 1e-08 , 5e-4 , MINIMIZE )); return TRUE ; } Operator < DTYPE >* MakeLayer ( Operator < DTYPE > * pInput , int pNumOfChannel , std :: string pBlockType , int pNumOfBlock , int pStride , std :: string pName = NULL ) { if ( pNumOfBlock == 0 ) { return pInput ; } else if (( pBlockType == \"BasicBlock\" ) && ( pNumOfBlock > 0 )) { Operator < DTYPE > * out = pInput ; out = new BasicBlock < DTYPE > ( out , m_numInputChannel , pNumOfChannel , pStride , pName ); int pNumOutputChannel = pNumOfChannel ; for ( int i = 1 ; i < pNumOfBlock ; i ++ ) { out = new BasicBlock < DTYPE > ( out , pNumOutputChannel , pNumOutputChannel , 1 , pName ); } m_numInputChannel = pNumOutputChannel ; return out ; } else if (( pBlockType == \"Bottleneck\" ) && ( pNumOfBlock > 0 )) { return NULL ; } else return NULL ; } }; 73~83 : WICWIU \uc758 ResNet \ud29c\ud1a0\ub9ac\uc5bc\uc758 \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc740 Conv , BatchNorm \ub4f1\uc758 Operator \ub4e4\uacfc \uc0ac\uc804\uc5d0 \uc815\uc758\ud55c 4\uac1c\uc758 BasicBlock \uc73c\ub85c \ubaa8\ub378\uc744 \uad6c\uc131\ud569\ub2c8\ub2e4. 98~104 : SetLossFunction \uacfc SetOptimizer \ub97c \uc774\uc6a9\ud574 \uc190\uc2e4\ud568\uc218\uc640 Optimizer \ub97c \uc815\uc758\ud569\ub2c8\ub2e4. 131 132 133 134 135 136 137 template < typename DTYPE > NeuralNetwork < DTYPE >* Resnet18 ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new ResNet < DTYPE > ( pInput , pLabel , \"BasicBlock\" , 2 , 2 , 2 , 2 , pNumOfClass ); } template < typename DTYPE > NeuralNetwork < DTYPE >* Resnet34 ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new ResNet < DTYPE > ( pInput , pLabel , \"BasicBlock\" , 3 , 4 , 6 , 3 , pNumOfClass ); } 131~137 ResNet \uc758 \uc885\ub958\ub294 BasicBlock \ub0b4\ubd80\uc758 \ucc44\ub110 \uc218\ub97c \ub2e4\ub974\uac8c \ud568\uc73c\ub85c\uc368 \ub098\ub204\uc5b4\uc9d1\ub2c8\ub2e4.","title":"tutorials/ImageNet/net/my_Resnet.hpp"},{"location":"dev/wicwiu/code/#tutorialsimagenetmaincpp","text":"tutorials/ImageNet/main.cpp \uc740 Source 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 int main ( int argc , char const * argv []) { ... // create input, label data placeholder -> Tensorholder Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 150528 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 1000 , \"label\" ); // ======================= Select net =================== NeuralNetwork < float > * net = Resnet18 < float > ( x , label , NUMBER_OF_CLASS ); // NeuralNetwork<float> *net = Resnet34<float>(x, label, NUMBER_OF_CLASS); // NeuralNetwork<float> *net = DenseNetLite<float>(x, label, NUMBER_OF_CLASS); net -> PrintGraphInformation (); // ======================= Prepare Data =================== ImageNetDataReader < float > * train_data_reader = new ImageNetDataReader < float > ( BATCH , 25 , TRUE ); train_data_reader -> UseNormalization ( TRUE , mean , stddev ); train_data_reader -> UseRandomHorizontalFlip (); // train_data_reader->UseRandomVerticalFlip(); ImageNetDataReader < float > * test_data_reader = new ImageNetDataReader < float > ( BATCH , 25 , FALSE ); test_data_reader -> UseNormalization ( TRUE , mean , stddev ); train_data_reader -> StartProduce (); test_data_reader -> StartProduce (); 21~23 : \ub370\uc774\ud130 placeholder \ub97c \ub9cc\ub4e0\ub2e4. 26 : \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud55c\ub2e4. 32~34 : ImageNet \ub370\uc774\ud130\ub294 random crop , normalization , random Filp \uacfc\uc815\uc744 \uac70\uccd0 \uc804\ucc98\ub9ac \ub41c\ub2e4. 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 // ======================= Train ======================= ... net -> SetModeTrain (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { data = train_data_reader -> GetDataFromBuffer (); #ifdef __CUDNN__ data [ 0 ] -> SetDeviceGPU ( GPUID ); data [ 1 ] -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , data [ 0 ], data [ 1 ]); delete data ; data = NULL ; net -> ResetParameterGradient (); net -> Train (); 111~117 : \uc804\ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub97c \ubc84\ud37c\ub85c\ubd80\ud130 \uac00\uc838\uc640 \uc2e0\uacbd\ub9dd\uc5d0 \ub123\ub294\ub2e4. 120~121 : Gradient\ub97c \ucd08\uae30\ud654 \ud55c \ub4a4 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud55c\ub2e4. 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 // ======================= Test ====================== ... net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_TEST ; j ++ ) { data = test_data_reader -> GetDataFromBuffer (); #ifdef __CUDNN__ data [ 0 ] -> SetDeviceGPU ( GPUID ); // \u7570\ubdc0\uc351 ?\uba2e\ub8de???\uafa9\uc282 data [ 1 ] -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , data [ 0 ], data [ 1 ]); delete data ; data = NULL ; net -> Test (); test_avg_accuracy += net -> GetAccuracy ( NUMBER_OF_CLASS ); test_avg_top5_accuracy += net -> GetTop5Accuracy ( NUMBER_OF_CLASS ); test_avg_loss += net -> GetLoss (); printf ( \" \\r %d / %d -> avg_loss : %0.4f, avg_acc : %0.4f, avg_top5_acc : %0.4f\" /*(ExcuteTime : %f)*/ , j + 1 , LOOP_FOR_TEST , test_avg_loss / ( j + 1 ), test_avg_accuracy / ( j + 1 ), test_avg_top5_accuracy / ( j + 1 )); fflush ( stdout ); } 157 : \uc2e0\uacbd\ub9dd\uc744 inference \ubaa8\ub4dc\ub85c \uc804\ud658 \ud55c\ub2e4. 160~170 : \uc804\ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub97c \ubc84\ud37c\ub85c\ubd80\ud130 \uac00\uc838\uc640 \uc2e0\uacbd\ub9dd\uc5d0 \ub123\uc5b4 \uc815\ud655\ub3c4\uc640 \uc190\uc2e4\uc744 \uce21\uc815\ud55c\ub2e4. 172~181 : \uc815\ud655\ub3c4\uc640 \uc190\uc2e4\uc744 \ucd9c\ub825\ud55c\ub2e4.","title":"tutorials/ImageNet/main.cpp"},{"location":"dev/wicwiu/code/#tutorials-tutorialsimagenet-densenet","text":"tutorials/ImageNet \ub294 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4.","title":"Tutorials tutorials/ImageNet (DenseNet)"},{"location":"dev/wicwiu/code/#tutorialsimagenetnetmy_densenethpp","text":"tutorials/ImageNet/net/my_Densenet.hpp \ub294 WICWIU \uc5d0\uc11c DenseNet \uc73c\ub85c ImageNet \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\ud558\uae30 \uc704\ud55c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4. \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. DenseNet \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc5ec\ub7ec \uac1c\uc758 DenseNetBlock \uc744 \uc801\uce35\uc2dc\ucf1c \uad6c\uc131\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 template < typename DTYPE > class DenseNetBlock : public Module < DTYPE > { private : public : DenseNetBlock ( Operator < DTYPE > * pInput , int pNumInputChannel , int pGrowthRate , std :: string pName = NULL ) : Module < DTYPE > ( pName ) { Alloc ( pInput , pNumInputChannel , pGrowthRate , pName ); } virtual ~ DenseNetBlock () {} int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pGrowthRate , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * remember = pInput ; Operator < DTYPE > * out = pInput ; // 1 out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"DenseNetBlock_BN1\" + pName ); out = new Relu < DTYPE > ( out , \"DenseNetBlock_Relu1\" + pName ); out = new ConvolutionLayer2D < DTYPE > ( out , pNumInputChannel , 4 * pGrowthRate , 1 , 1 , 1 , 1 , 0 , FALSE , \"DenseNetBlock_Conv1\" + pName ); // 2 out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"DenseNetBlock_BN2\" + pName ); out = new Relu < DTYPE > ( out , \"DenseNetBlock_Relu2\" + pName ); out = new ConvolutionLayer2D < DTYPE > ( out , 4 * pGrowthRate , pGrowthRate , 3 , 3 , 1 , 1 , 1 , FALSE , \"DenseNetBlock_Conv2\" + pName ); // Concat out = new ConcatenateChannelWise < float > ( remember , out , \"DenseNetBlock_ConCat\" ); this -> AnalyzeGraph ( out ); return TRUE ; } }; 20~41 : DenseNet \uc740 \uc774\uc640 \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 template < typename DTYPE > class Transition : public Module < DTYPE > { private : public : Transition ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , std :: string pName = NULL ) : Module < DTYPE > ( pName ) { Alloc ( pInput , pNumInputChannel , pNumOutputChannel , pName ); } virtual ~ Transition () {} int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * out = pInput ; // 1 out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"Transition_BN\" + pName ); out = new Relu < DTYPE > ( out , \"Transition_Relu\" + pName ); out = new ConvolutionLayer2D < DTYPE > ( out , pNumInputChannel , pNumOutputChannel , 1 , 1 , 1 , 1 , 0 , FALSE , \"Transition_Conv\" + pName ); // Avg Pooling out = new AvaragePooling2D < float > ( out , 2 , 2 , 2 , 2 , 0 , \"AVG\" ); this -> AnalyzeGraph ( out ); return TRUE ; } }; 40~66 : DenseNetBlock \uc744 \uc5f0\uacb0\ud558\ub294 Transition \uc740 \uc704\uc640 \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 template < typename DTYPE > class DenseNet : public NeuralNetwork < DTYPE > { private : int m_numInputChannel ; int m_numOutputChannel ; int m_growthRate ; float m_reduction ; public : DenseNet ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pGrowthRate = 12 , float pReduction = 0.5 , int pNumOfClass = 1000 ) { Alloc ( pInput , pLabel , pBlockType , pNumOfBlock1 , pNumOfBlock2 , pNumOfBlock3 , pNumOfBlock4 , pGrowthRate , pReduction , pNumOfClass ); } virtual ~ DenseNet () {} int Alloc ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , std :: string pBlockType , int pNumOfBlock1 , int pNumOfBlock2 , int pNumOfBlock3 , int pNumOfBlock4 , int pGrowthRate , float pReduction , int pNumOfClass ) { this -> SetInput ( 2 , pInput , pLabel ); m_numInputChannel = 2 * pGrowthRate ; m_growthRate = pGrowthRate ; m_reduction = pReduction ; Operator < DTYPE > * out = pInput ; // ReShape out = new ReShape < DTYPE > ( out , 3 , 224 , 224 , \"ReShape\" ); // out = new BatchNormalizeLayer<DTYPE>(out, TRUE, \"BN0\"); // 1 out = new ConvolutionLayer2D < DTYPE > ( out , 3 , m_numInputChannel , 7 , 7 , 2 , 2 , 3 , FALSE , \"Conv\" ); out = new BatchNormalizeLayer < DTYPE > ( out , TRUE , \"BN0\" ); out = new Relu < DTYPE > ( out , \"Relu0\" ); out = this -> MakeLayer ( out , m_numInputChannel , pBlockType , pNumOfBlock1 , 1 , \"Block1\" ); m_numInputChannel += pNumOfBlock1 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans1\" ); m_numInputChannel = m_numOutputChannel ; out = this -> MakeLayer ( out , m_numOutputChannel , pBlockType , pNumOfBlock2 , 1 , \"Block2\" ); m_numInputChannel += pNumOfBlock2 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans2\" ); m_numInputChannel = m_numOutputChannel ; out = this -> MakeLayer ( out , m_numOutputChannel , pBlockType , pNumOfBlock3 , 1 , \"Block3\" ); m_numInputChannel += pNumOfBlock3 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans3\" ); m_numInputChannel = m_numOutputChannel ; out = this -> MakeLayer ( out , m_numOutputChannel , pBlockType , pNumOfBlock4 , 1 , \"Block4\" ); m_numInputChannel += pNumOfBlock4 * m_growthRate ; m_numOutputChannel = ( int )( floor ( m_numInputChannel * m_reduction )); out = new Transition < DTYPE > ( out , m_numInputChannel , m_numOutputChannel , \"Trans4\" ); m_numInputChannel = m_numOutputChannel ; out = new GlobalAvaragePooling2D < DTYPE > ( out , \"Avg Pooling\" ); out = new ReShape < DTYPE > ( out , 1 , 1 , m_numInputChannel , \"ReShape\" ); out = new Linear < DTYPE > ( out , m_numInputChannel , pNumOfClass , TRUE , \"Classification\" ); this -> AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== this -> SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , pLabel , \"SCE\" )); // SetLossFunction(new MSE<float>(out, label, \"MSE\")); // ======================= Select Optimizer =================== // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.000001, 0.9, 5e-4, MINIMIZE)); // this->SetOptimizer(new GradientDescentOptimizer<float>(this->GetParameter(), 0.001, MINIMIZE)); this -> SetOptimizer ( new AdamOptimizer < float > ( this -> GetParameter (), 0.001 , 0.9 , 0.999 , 1e-08 , 5e-4 , MINIMIZE )); return TRUE ; } Operator < DTYPE >* MakeLayer ( Operator < DTYPE > * pInput , int pNumOfChannel , std :: string pBlockType , int pNumOfBlock , int pStride , std :: string pName = NULL ) { if ( pNumOfBlock == 0 ) { return pInput ; } else if (( pBlockType == \"DenseNetBlock\" ) && ( pNumOfBlock > 0 )) { Operator < DTYPE > * out = pInput ; for ( int i = 0 ; i < pNumOfBlock ; i ++ ) { out = new DenseNetBlock < DTYPE > ( out , pNumOfChannel , m_growthRate , pName ); pNumOfChannel += m_growthRate ; } return out ; } else if (( pBlockType == \"Bottleneck\" ) && ( pNumOfBlock > 0 )) { return NULL ; } else return NULL ; } }; template < typename DTYPE > NeuralNetwork < DTYPE >* DenseNet121 ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new DenseNet < DTYPE > ( pInput , pLabel , \"DenseNetBlock\" , 6 , 12 , 24 , 16 , 12 , 0.5 , pNumOfClass ); } template < typename DTYPE > NeuralNetwork < DTYPE >* DenseNetLite ( Tensorholder < DTYPE > * pInput , Tensorholder < DTYPE > * pLabel , int pNumOfClass ) { return new DenseNet < DTYPE > ( pInput , pLabel , \"DenseNetBlock\" , 2 , 3 , 6 , 4 , 32 , 0.5 , pNumOfClass ); } 92~121 : WICWIU \ud29c\ud1a0\ub9ac\uc5bc\uc758 DenseNet \uc740 \\(4\\) \uac1c\uc758 DenseNetBlock \uacfc \uac01\uac01\uc758 DenseNetBlock \uc0ac\uc774\ub97c \uc787\ub294 4\uac1c\uc758 Transition \uc73c\ub85c \uc815\uc758\ub429\ub2c8\ub2e4.","title":"tutorials/ImageNet/net/my_Densenet.hpp"},{"location":"dev/wicwiu/code/#tutorials-tutorialsganvanillagan","text":"tutorials/GAN/VanillaGAN \uc740 WICWIU \uc2e0\uacbd\ub9dd \ubaa8\ub378 \uc608\uc81c\uc785\ub2c8\ub2e4. WICWIU \uc758 GAN \uc740 Generator \uc640 Discriminator \ub97c \uac01\uac01 \uad6c\uc131\ud55c\ub2e4.","title":"Tutorials tutorials/GAN/VanillaGAN"},{"location":"dev/wicwiu/code/#tutorialsganvanillagannetmy_generatorhpp","text":"WICWIU \uc758 GAN \ud29c\ud1a0\ub9ac\uc5bc\uc758 Generator \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 template < typename DTYPE > class my_Generator : public NeuralNetwork < DTYPE > { public : my_Generator ( Operator < float > * z ){ Alloc ( z ); } virtual ~ my_Generator () { } int Alloc ( Operator < float > * z ){ this -> SetInput ( z ); Operator < float > * out = z ; // ======================= layer 1 ====================== out = new Linear < float > ( out , 100 , 128 , TRUE , \"G_L1\" ); // ======================= layer 2 ====================== out = new Linear < float > ( out , 128 , 256 , TRUE , \"G_L2\" ); out = new BatchNormalizeLayer < DTYPE > ( out , FALSE , \"G_BN1\" ); out = new LRelu < float > ( out , 0.2 , \"G_LRelu1\" ); // out = new Relu<float>(out, \"G_Relu1\"); // ======================= layer 3 ====================== out = new Linear < float > ( out , 256 , 512 , TRUE , \"G_L3\" ); out = new BatchNormalizeLayer < DTYPE > ( out , FALSE , \"G_BN2\" ); out = new LRelu < float > ( out , 0.2 , \"G_LRelu2\" ); // out = new Relu<float>(out, \"G_Relu2\"); // ======================= layer 4 ====================== out = new Linear < float > ( out , 512 , 1024 , TRUE , \"G_L4\" ); out = new BatchNormalizeLayer < DTYPE > ( out , FALSE , \"G_BN3\" ); out = new LRelu < float > ( out , 0.2 , \"G_LRelu3\" ); // out = new Relu<float>(out, \"G_Relu3\"); // ======================= layer 5 ==================== out = new Linear < float > ( out , 1024 , 784 , TRUE , \"G_L5\" ); out = new Tanh < float > ( out , \"Tanh\" ); this -> AnalyzeGraph ( out ); } };","title":"tutorials/GAN/VanillaGAN/net/my_Generator.hpp"},{"location":"dev/wicwiu/code/#tutorialsganvanillagannetmy_discriminatorhpp","text":"WICWIU \uc758 GAN \ud29c\ud1a0\ub9ac\uc5bc\uc758 Discriminator \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 template < typename DTYPE > class my_Discriminator : public NeuralNetwork < DTYPE > { public : my_Discriminator ( Operator < float > * x ){ Alloc ( x ); } virtual ~ my_Discriminator () { } int Alloc ( Operator < float > * x ){ this -> SetInput ( x ); Operator < float > * out = x ; // ======================= layer 1 ====================== out = new Linear < float > ( out , 784 , 512 , TRUE , \"D_L1\" ); out = new LRelu < float > ( out , 0.2 , \"D_LRelu1\" ); // out = new Relu<float>(out, \"D_Relu1\"); // ======================= layer 2 ====================== out = new Linear < float > ( out , 512 , 256 , TRUE , \"D_L2\" ); out = new LRelu < float > ( out , 0.2 , \"D_LRelu2\" ); // out = new Relu<float>(out, \"D_Relu2\"); // ======================= layer 3 ====================== out = new Linear < float > ( out , 256 , 1 , TRUE , \"D_L3\" ); out = new Sigmoid < float > ( out , \"D_Sigmoid\" ); this -> AnalyzeGraph ( out ); } };","title":"tutorials/GAN/VanillaGAN/net/my_Discriminator.hpp"},{"location":"dev/wicwiu/code/#tutorialsganvanillagannetmy_ganhpp","text":"WICWIU \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c Generator \uc640 Discriminator \uc758 \ud559\uc2b5\uc744 \uc81c\uc5b4\ud558\ub294 GAN \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 template < typename DTYPE > class my_GAN : public GAN < DTYPE > { public : my_GAN ( Tensorholder < float > * z , Tensorholder < float > * x , Tensorholder < float > * label ){ Alloc ( z , x , label ); } virtual ~ my_GAN () { } int Alloc ( Tensorholder < float > * z , Tensorholder < float > * x , Tensorholder < float > * label ){ this -> SetInput ( 3 , z , x , label ); this -> SetGenerator ( new my_Generator < float > ( z )); this -> SetSwitch ( new Switch < float > ( this -> GetGenerator (), x )); this -> SetDiscriminator ( new my_Discriminator < float > ( this -> GetSwitch ())); this -> AnalyzeGraph ( this -> GetDiscriminator ()); this -> SetLabel ( label ); // ======================= Select LossFunction =================== this -> SetGANLossFunctions ( new VanillaGANGeneratorLoss < float > ( this -> GetDiscriminator (), this -> GetLabel (), \"VanillaGANGeneratorLoss\" ), new VanillaGANDiscriminatorLoss < float > ( this -> GetDiscriminator (), this -> GetLabel (), \"VanillaGANDiscriminatorLoss\" )); // ======================= Select Optimizer =================== // this->SetGANOptimizers(new GradientDescentOptimizer<float>(this->GetGenerator()->GetParameter(), 0.000001, MINIMIZE), new GradientDescentOptimizer<float>(this->GetDiscriminator()->GetParameter(), 0.000001, MAXIMIZE)); // this->SetGANOptimizers(new RMSPropOptimizer<float>(this->GetGenerator()->GetParameter(), 0.0001, 0.9, 1e-08, FALSE, MINIMIZE), new RMSPropOptimizer<float>(this->GetDiscriminator()->GetParameter(), 0.0001, 0.9, 1e-08, FALSE, MAXIMIZE)); this -> SetGANOptimizers ( new AdamOptimizer < float > ( this -> GetGenerator () -> GetParameter (), 0.0002 , 0.5 , 0.999 , 1e-08 , MINIMIZE ), new AdamOptimizer < float > ( this -> GetDiscriminator () -> GetParameter (), 0.0002 , 0.5 , 0.999 , 1e-08 , MINIMIZE )); } };","title":"tutorials/GAN/VanillaGAN/net/my_GAN.hpp"},{"location":"dev/wicwiu/code/#tutorialsganvanillaganmaincpp","text":"WICWIU \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c \uc0ac\uc804\uc5d0 \uc815\uc758\ub41c GAN \uc744 \uc0ac\uc6a9\ud558\ub294 main \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. Source 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 int main ( int argc , char const * argv []) { ... // create input, label data placeholder -> Tensorholder Tensorholder < float > * z = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 100 , \"z\" ); Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 1 , \"label\" ); // create NoiseGenrator GaussianNoiseGenerator < float > * Gnoise = new GaussianNoiseGenerator < float > ( 1 , BATCH , 1 , 1 , 100 , 0 , 1 ); // ======================= Select net =================== // GAN<float> *net = new my_BEGAN<float>(z, x, label); GAN < float > * net = new my_GAN < float > ( z , x , label ); //net->Load(filename); // ======================= Prepare Data =================== MNISTDataSet < float > * dataset = CreateMNISTDataSet < float > (); 16 : Generator \uc758 \uc785\ub825\uc73c\ub85c \uc0ac\uc6a9\ud560 latent variable\uc744 \uc800\uc7a5 \ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4. 25 : \uc0ac\uc804\uc5d0 \uc815\uc758\ud55c GAN \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud574 \uc2e0\uacbd\ub9dd\uc744 \uc0dd\uc131\ud55c\ub2e4. 29 : MNIST \ub370\uc774\ud130\uc14b\uc744 \uc800\uc7a5 \ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4. 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 //Start make Noise Gnoise -> StartProduce (); for ( int i = epoch + 1 ; i < EPOCH ; i ++ ) { std :: cout << \"EPOCH : \" << i << '\\n' ; // ======================= Train ======================= float genLoss = 0.f ; float discLoss = 0.f ; net -> SetModeTrain (); startTime = clock (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { dataset -> CreateTrainDataPair ( BATCH ); Tensor < float > * x_t = dataset -> GetTrainFeedImage (); Tensor < float > * l_t = dataset -> GetTrainFeedLabel (); delete l_t ; Tensor < float > * z_t = Gnoise -> GetNoiseFromBuffer (); #ifdef __CUDNN__ x_t -> SetDeviceGPU ( GPUID ); z_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 2 , z_t , x_t ); net -> ResetParameterGradient (); net -> TrainDiscriminator (); z_t = Gnoise -> GetNoiseFromBuffer (); #ifdef __CUDNN__ z_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 1 , z_t ); net -> ResetParameterGradient (); net -> TrainGenerator (); if (( j + 1 ) % 50 == 0 ){ genLoss = ( * net -> GetGeneratorLossFunction () -> GetResult ())[ Index5D ( net -> GetGeneratorLossFunction () -> GetResult () -> GetShape (), 0 , 0 , 0 , 0 , 0 )]; discLoss = ( * net -> GetDiscriminatorLossFunction () -> GetResult ())[ Index5D ( net -> GetDiscriminatorLossFunction () -> GetResult () -> GetShape (), 0 , 0 , 0 , 0 , 0 )]; printf ( \" \\r Train complete percentage is %d / %d -> Generator Loss : %f, Discriminator Loss : %f\" , j + 1 , LOOP_FOR_TRAIN , genLoss , discLoss ); fflush ( stdout ); string filePath = \"trained/epoch\" + std :: to_string ( i ) + \"_\" + std :: to_string ( j + 1 ) + \".jpg\" ; const char * cstr = filePath . c_str (); Tensor2Image < float > ( net -> GetGenerator () -> GetResult (), cstr , 3 , 20 , 28 , 28 ); } } endTime = clock (); nProcessExcuteTime = (( double )( endTime - startTime )) / CLOCKS_PER_SEC ; printf ( \" \\n (excution time per epoch : %f) \\n\\n \" , nProcessExcuteTime ); 60 : \uc804\ucc98\ub9ac\ub41c \ub370\uc774\ud130\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. 63 : latent \ubcc0\uc218\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. 70~71 : Gradient \ub97c \ucd08\uae30\ud654\ud558\uace0 \ud559\uc2b5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud569\ub2c8\ub2e4. 95 \ud589: Generator \uc5d0\uc11c \uc0dd\uc131\ud55c \uc774\ubbf8\uc9c0\ub97c \uc77c\uc815 step\ub9c8\ub2e4 \uc800\uc7a5\ud55c\ub2e4. 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 // =======================Test Generate(Save Generated Image)====================== net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_GENERATE ; j ++ ) { Tensor < float > * z_t = Gnoise -> GetNoiseFromBuffer (); #ifdef __CUDNN__ z_t -> SetDeviceGPU ( GPUID ); #endif // __CUDNN__ net -> FeedInputTensor ( 1 , z_t ); net -> Generate (); string filePath = \"generated/epoch\" + std :: to_string ( i ) + \"_\" + std :: to_string ( j + 1 ) + \".jpg\" ; const char * cstr = filePath . c_str (); Tensor2Image < float > ( net -> GetGenerator () -> GetResult (), cstr , 3 , 20 , 28 , 28 ); printf ( \" \\r Generate complete percentage is %d / %d\" , j + 1 , LOOP_FOR_GENERATE ); fflush ( stdout ); } std :: cout << \" \\n\\n \" ; net -> Save ( filename ); 106~127 : GAN \uc5d0\uc11c\ub294 \uc815\ud655\ub3c4\uac00 \uc758\ubbf8\uc788\ub294 \uac83\uc774 \uc544\ub2c8\ubbc0\ub85c \ud14c\uc2a4\ud2b8\uc5d0\uc11c\ub294 Generator \uc5d0\uc11c \uc774\ubbf8\uc9c0\ub97c \uc0dd\uc131\uc2dc\ud0a8 \ub4a4 \uc800\uc7a5\ud558\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud55c\ub2e4.","title":"tutorials/GAN/VanillaGAN/main.cpp"},{"location":"dev/wicwiu/learn/","text":"\uc774\uacf3\uc5d0\uc11c\ub294 WICWIU \uac00 \uad6c\uc131\ub41c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud1b5\ud558\uc5ec \uc5b4\ub5bb\uac8c \ub525\ub7ec\ub2dd\uc744 \ud558\ub294\uc9c0 \uc124\uba85\ud569\ub2c8\ub2e4. \ub525\ub7ec\ub2dd \ud559\uc2b5\ud558\uae30 \u00b6 Step 1. \ud559\uc2b5 \ub370\uc774\ud130 \u2192 Tensor \u00b6 \uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc704\ud574 \uc900\ube44\ub41c \ud559\uc2b5\ub370\uc774\ud130\ub97c \uba3c\uc800 Tensor \ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. Tip tutorals/<DATA_NAME>/*Reader.hpp \ud30c\uc77c\ub4e4\uc744 \ucc38\uace0\ud558\uc138\uc694. FeedInput \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubcc0\ud658\ub41c \ub370\uc774\ud130\ub97c \uc2e0\uacbd\ub9dd\uc5d0 \uc801\uc6a9\ud569\ub2c8\ub2e4. Warning \uc785\ub825\uc758 \ud06c\uae30\uac00 \uc2e0\uacbd\ub9dd\uc5d0\uc11c \uae30\ub300\ud558\ub294 \uae30\ub300\uac12 \ud150\uc11c \ud06c\uae30\uc640 \uc77c\uce58\ud574\uc57c \ud558\uba70, \uc77c\uce58\ud558\uc9c0 \uc54a\uc744 \uacbd\uc6b0 \ud559\uc2b5\uc774 \uc62c\ubc14\ub85c \uc9c4\ud589\ub418\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704\uc758 \uc791\uc5c5\uc774 \uc644\ub8cc\ub418\uba74 \uc2e0\uacbd\ub9dd\uc758 \uc785\ub825 \uacf5\uac04\uc5d0\ub294 \uc704\uc758 Tensor (\ud559\uc2b5 \ub370\uc774\ud130)\uac00 \ub4f1\ub85d\ub418\uc5b4 \uc0ac\uc6a9\ub41c\ub2e4. Step 2. \uc21c\uc804\ud30c \u00b6 \ub370\uc774\ud130\uac00 \uc801\uc6a9\ub41c \uc2e0\uacbd\ub9dd\uc740 \uc6b0\uc120 \uc774\uc804\uc758 \uac12\uc774 \ub4f1\ub85d\ub418\uc5b4 \uc788\uc744 \uac00\ub2a5\uc131\uc774 \uc874\uc7ac\ud558\ub294 \uad6c\uac04\uc744 \ubaa8\ub450 \\(0\\) \uc73c\ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. Info \ub300\ud45c\uc801\uc73c\ub85c\ub294 \uc5f0\uc0b0\uc5d0 \ucc38\uc5ec\ud558\ub294 Operator \ubc0f LossFunction \uc758 \uacb0\uacfc Tensor \uc640 \uae30\uc6b8\uae30\ubca1\ud130 Tensor \uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc704\uc758 \ucd08\uae30\ud654 \uc791\uc5c5\uc774 \uc644\ub8cc\ub418\uba74, \uc55e\uc11c \ubd84\uc11d\ud55c \uadf8\ub798\ud504\uc758 Operator \uc758 \uc21c\uc804\ud30c \uc5f0\uc0b0\uc744 \uc21c\uc11c\ub300\ub85c \uc2e4\ud589\ud569\ub2c8\ub2e4. Note \ubcf8 \ud504\ub808\uc784\uc6cc\ud06c\uc758 \uc2e0\uacbd\ub9dd\uc740 \uc0ac\uc6a9\uc790\uac00 \ucd94\uac00\ud55c Operator \uc758 \uc5f0\uacb0\uc0c1\ud0dc\ub97c BFS \ub85c \ubd84\uc11d\ud558\uba70, \uc774\ub97c \uae30\uc900\uc73c\ub85c \uc2e0\uacbd\ub9dd \uc5f0\uc0b0\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4. \ubaa8\ub4e0 Operator \uc758 \uc5f0\uc0b0\uc774 \ub05d\ub098\uba74, \ub9c8\uc9c0\ub9c9\uc73c\ub85c LossFunction \uc758 \uc21c\uc804\ud30c\ub97c \uc2e4\ud589\ud558\uc5ec \uc190\uc2e4\uc744 \uad6c\ud569\ub2c8\ub2e4. Step 3. \uc5ed\uc804\ud30c \u00b6 \uc190\uc2e4\uc774 \uad6c\ud574\uc9c4 \uc2e0\uacbd\ub9dd\uc740, LossFunction \uc758 \uc5ed\uc804\ud30c \uc5f0\uc0b0\uc744 \uc2dc\uc791\uc73c\ub85c \uac01 Operator \uc758 \ubc18\ub300 \uc21c\uc11c\ub85c \uc190\uc2e4\uc5d0 \ub300\ud55c \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uad6c\ud569\ub2c8\ub2e4. Note \uc5ed\uc804\ud30c \uc5f0\uc0b0\uc744 \ubaa8\ub450 \ub9c8\ubb34\ub9ac\ud558\uba74, \uc2e0\uacbd\ub9dd\uc5d0 \uc801\uc6a9\ub41c Weight \ud30c\ub77c\ubbf8\ud130\ub4e4\uc740 \uc190\uc2e4\uc5d0 \ub300\ud55c \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uac00\uc9c0\uac8c \ub429\ub2c8\ub2e4. Step 4. Weight \ud30c\ub77c\ubbf8\ud130 \uac31\uc2e0 \u00b6 \uac01 Weight \ud30c\ub77c\ubbf8\ud130\ub294 \uc2e0\uacbd\ub9dd\uc5d0 \uc801\uc6a9\ub41c Optimizer \uc5d0\uc11c \uc9c0\uc815\ub41c \uc54c\uace0\ub9ac\uc998\uc744 \ub530\ub77c \ucd5c\uc801\ud654\ub429\ub2c8\ub2e4. Note \uc774\ub54c \uc0ac\uc6a9\ud558\ub294 \uac12\uc740 \uc55e\uc11c \uc5ed\uc804\ud30c \uc5f0\uc0b0\uc73c\ub85c \uad6c\ud574\uc9c4 \uae30\uc6b8\uae30 \ubca1\ud130\uc774\uba70, \uc774\ub97c \ud1b5\ud574 \uc2e0\uacbd\ub9dd\uc740 \uc190\uc2e4\uc774 \uc791\uc544\uc9c0\ub294 \ubc29\ud5a5\uc73c\ub85c \ud559\uc2b5\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4.","title":"3. WICWIU \ub85c \ud559\uc2b5\ud558\uae30"},{"location":"dev/wicwiu/learn/#_1","text":"","title":"\ub525\ub7ec\ub2dd \ud559\uc2b5\ud558\uae30"},{"location":"dev/wicwiu/learn/#step-1-tensor","text":"\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc704\ud574 \uc900\ube44\ub41c \ud559\uc2b5\ub370\uc774\ud130\ub97c \uba3c\uc800 Tensor \ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. Tip tutorals/<DATA_NAME>/*Reader.hpp \ud30c\uc77c\ub4e4\uc744 \ucc38\uace0\ud558\uc138\uc694. FeedInput \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubcc0\ud658\ub41c \ub370\uc774\ud130\ub97c \uc2e0\uacbd\ub9dd\uc5d0 \uc801\uc6a9\ud569\ub2c8\ub2e4. Warning \uc785\ub825\uc758 \ud06c\uae30\uac00 \uc2e0\uacbd\ub9dd\uc5d0\uc11c \uae30\ub300\ud558\ub294 \uae30\ub300\uac12 \ud150\uc11c \ud06c\uae30\uc640 \uc77c\uce58\ud574\uc57c \ud558\uba70, \uc77c\uce58\ud558\uc9c0 \uc54a\uc744 \uacbd\uc6b0 \ud559\uc2b5\uc774 \uc62c\ubc14\ub85c \uc9c4\ud589\ub418\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704\uc758 \uc791\uc5c5\uc774 \uc644\ub8cc\ub418\uba74 \uc2e0\uacbd\ub9dd\uc758 \uc785\ub825 \uacf5\uac04\uc5d0\ub294 \uc704\uc758 Tensor (\ud559\uc2b5 \ub370\uc774\ud130)\uac00 \ub4f1\ub85d\ub418\uc5b4 \uc0ac\uc6a9\ub41c\ub2e4.","title":"Step 1. \ud559\uc2b5 \ub370\uc774\ud130 &rarr; Tensor"},{"location":"dev/wicwiu/learn/#step-2","text":"\ub370\uc774\ud130\uac00 \uc801\uc6a9\ub41c \uc2e0\uacbd\ub9dd\uc740 \uc6b0\uc120 \uc774\uc804\uc758 \uac12\uc774 \ub4f1\ub85d\ub418\uc5b4 \uc788\uc744 \uac00\ub2a5\uc131\uc774 \uc874\uc7ac\ud558\ub294 \uad6c\uac04\uc744 \ubaa8\ub450 \\(0\\) \uc73c\ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. Info \ub300\ud45c\uc801\uc73c\ub85c\ub294 \uc5f0\uc0b0\uc5d0 \ucc38\uc5ec\ud558\ub294 Operator \ubc0f LossFunction \uc758 \uacb0\uacfc Tensor \uc640 \uae30\uc6b8\uae30\ubca1\ud130 Tensor \uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc704\uc758 \ucd08\uae30\ud654 \uc791\uc5c5\uc774 \uc644\ub8cc\ub418\uba74, \uc55e\uc11c \ubd84\uc11d\ud55c \uadf8\ub798\ud504\uc758 Operator \uc758 \uc21c\uc804\ud30c \uc5f0\uc0b0\uc744 \uc21c\uc11c\ub300\ub85c \uc2e4\ud589\ud569\ub2c8\ub2e4. Note \ubcf8 \ud504\ub808\uc784\uc6cc\ud06c\uc758 \uc2e0\uacbd\ub9dd\uc740 \uc0ac\uc6a9\uc790\uac00 \ucd94\uac00\ud55c Operator \uc758 \uc5f0\uacb0\uc0c1\ud0dc\ub97c BFS \ub85c \ubd84\uc11d\ud558\uba70, \uc774\ub97c \uae30\uc900\uc73c\ub85c \uc2e0\uacbd\ub9dd \uc5f0\uc0b0\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4. \ubaa8\ub4e0 Operator \uc758 \uc5f0\uc0b0\uc774 \ub05d\ub098\uba74, \ub9c8\uc9c0\ub9c9\uc73c\ub85c LossFunction \uc758 \uc21c\uc804\ud30c\ub97c \uc2e4\ud589\ud558\uc5ec \uc190\uc2e4\uc744 \uad6c\ud569\ub2c8\ub2e4.","title":"Step 2. \uc21c\uc804\ud30c"},{"location":"dev/wicwiu/learn/#step-3","text":"\uc190\uc2e4\uc774 \uad6c\ud574\uc9c4 \uc2e0\uacbd\ub9dd\uc740, LossFunction \uc758 \uc5ed\uc804\ud30c \uc5f0\uc0b0\uc744 \uc2dc\uc791\uc73c\ub85c \uac01 Operator \uc758 \ubc18\ub300 \uc21c\uc11c\ub85c \uc190\uc2e4\uc5d0 \ub300\ud55c \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uad6c\ud569\ub2c8\ub2e4. Note \uc5ed\uc804\ud30c \uc5f0\uc0b0\uc744 \ubaa8\ub450 \ub9c8\ubb34\ub9ac\ud558\uba74, \uc2e0\uacbd\ub9dd\uc5d0 \uc801\uc6a9\ub41c Weight \ud30c\ub77c\ubbf8\ud130\ub4e4\uc740 \uc190\uc2e4\uc5d0 \ub300\ud55c \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uac00\uc9c0\uac8c \ub429\ub2c8\ub2e4.","title":"Step 3. \uc5ed\uc804\ud30c"},{"location":"dev/wicwiu/learn/#step-4-weight","text":"\uac01 Weight \ud30c\ub77c\ubbf8\ud130\ub294 \uc2e0\uacbd\ub9dd\uc5d0 \uc801\uc6a9\ub41c Optimizer \uc5d0\uc11c \uc9c0\uc815\ub41c \uc54c\uace0\ub9ac\uc998\uc744 \ub530\ub77c \ucd5c\uc801\ud654\ub429\ub2c8\ub2e4. Note \uc774\ub54c \uc0ac\uc6a9\ud558\ub294 \uac12\uc740 \uc55e\uc11c \uc5ed\uc804\ud30c \uc5f0\uc0b0\uc73c\ub85c \uad6c\ud574\uc9c4 \uae30\uc6b8\uae30 \ubca1\ud130\uc774\uba70, \uc774\ub97c \ud1b5\ud574 \uc2e0\uacbd\ub9dd\uc740 \uc190\uc2e4\uc774 \uc791\uc544\uc9c0\ub294 \ubc29\ud5a5\uc73c\ub85c \ud559\uc2b5\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4.","title":"Step 4. Weight \ud30c\ub77c\ubbf8\ud130 \uac31\uc2e0"},{"location":"dev/wicwiu/nn/","text":"\uc774\uacf3\uc5d0\uc11c\ub294 WICWIU \uac00 \uc5b4\ub5bb\uac8c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud558\ub294\uc9c0 \uc124\uba85\ud569\ub2c8\ub2e4. \ub370\uc774\ud130 \uad6c\uc870 \u00b6 Tensor, Shape, LongArray \ub370\uc774\ud130 \ud615\uc2dd \uc694\uc57d Class Tensor \u00b6 Class Tensor : WICWIU \uc5d0\uc11c \uc778\uacf5 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc758 \ud559\uc2b5\uc5d0 \uc774\uc6a9\ub418\ub294 \ub370\uc774\ud130\uc758 \uae30\ubcf8 \ud615\uc2dd \uc785\ub2c8\ub2e4. Tensor \ud074\ub798\uc2a4\ub294 \ucd5c\ub300 5\uc758 \uacc4\uc218(Rank)\ub97c \uac16\ub294 \ud150\uc11c\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ud150\uc11c\uc758 \uac01 \ucd95\uc740 \uc778\uacf5 \uc2e0\uacbd\ub9dd \ud559\uc2b5\uc5d0\uc11c Time, Batch, Row, Column \ucd95\uc5d0 \ud574\ub2f9 \ud569\ub2c8\ub2e4. Tensor \ud074\ub798\uc2a4\ub294 \ud150\uc11c\uc758 \ucc28\uc6d0\uc5d0 \uad00\ud55c \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape \ud074\ub798\uc2a4\uc640 \uac01 \ucc28\uc6d0\uc758 \uac1c\ubcc4 \ub370\uc774\ud130\ub97c \ub2f4\uace0 \uc788\ub294 LongArray \ud074\ub798\uc2a4 \ub97c \uba64\ubc84 \ubcc0\uc218\ub85c \uac16\uc2b5\ub2c8\ub2e4. Tensor \ud074\ub798\uc2a4\ub294 Shape \ud074\ub798\uc2a4\uc758 \ucc28\uc6d0 \uc815\ubcf4 \ub370\uc774\ud130\ub97c \ud65c\uc6a9\ud574 \uac01 \ucc28\uc6d0\uc758 \uac1c\ubcc4 \ub370\uc774\ud130\ub97c \ub2f4\uace0 \uc788\ub294 \uba54\ubaa8\ub9ac\uc5d0 \uc811\uadfc\ud569\ub2c8\ub2e4. Info Tensor \ub294 \ubb3c\ub9ac\ud559\uc758 \uac1c\ub150\uc744 \ucc28\uc6a9, \ub2e4\ucc28\uc6d0\uc758 \uc815\ubcf4\ub97c \uac16\ub294 \ub370\uc774\ud130\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. Class Shape \u00b6 Class Shape : Tensor \ub370\uc774\ud130\uc758 \ucc28\uc6d0\uc5d0 \uad00\ud55c \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Shape \ud074\ub798\uc2a4\ub294 \ud150\uc11c\uc758 \uacc4\uc218(Rank)\ub97c \ub2f4\uace0 \uc788\ub294 \ubcc0\uc218\uc640 \uacc4\uc218 \uac01 \ucd95\uc758 \ucc28\uc6d0 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ubcc0\uc218 \ub97c \uba64\ubc84 \ubcc0\uc218\ub85c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uacc4\uc218 \ubcc0\uc218\uc758 \ucd5c\ub313\uac12\uc740 5 \uc774\uace0, \uac01 \ucd95\uc740 \uc778\uacf5 \uc2e0\uacbd\ub9dd \ud559\uc2b5\uc5d0\uc11c Time, Batch, Channel, Row, Column \ucd95\uc73c\ub85c \ud65c\uc6a9\ub429\ub2c8\ub2e4. \uac01 \ucd95\uc758 \ucc28\uc6d0 \uc815\ubcf4\uc5d0 \ud574\ub2f9\ud558\ub294 \ubcc0\uc218\ub294 \ud3ec\uc778\ud130\ub85c \uc120\uc5b8 \ub418\uc5b4 \uc788\uc73c\uba70, \ucd95\uc758 \uac1c\uc218\ub9cc\ud07c \ubc30\uc5f4\ub85c\uc11c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ub418\uc5b4 \ucd95\uc758 \ucc28\uc6d0 \uc815\ubcf4\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. Class LongArray \u00b6 LongArray \ud074\ub798\uc2a4\uc758 \uc704\uacc4\uc801 \ub370\uc774\ud130 \uad6c\uc870 Class LongArray : High-dimensional Array \uc758 \uc57d\uc5b4\ub85c, \uc2e4\uc81c \uac01 \ucc28\uc6d0\uc758 \uac1c\ubcc4 \ub370\uc774\ud130\ub97c \ub2f4\uace0 \uc788\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. LongArray \ud074\ub798\uc2a4\uc758 \ub370\uc774\ud130\ub4e4\uc740 \ub3d9\uc801\uc73c\ub85c \ud55c \ubc88\uc5d0 \ud560\ub2f9\ud588\uc744 \ub54c \uba54\ubaa8\ub9ac\uac00 \ubd80\uc871\ud574 \ud560\ub2f9\uc774 \ubd88\uac00\ud558\ub294 \uacbd\uc6b0\ub97c \ub9c9\uae30 \uc704\ud574 \uc704\uacc4\uc801 \uad6c\uc870\ub97c \uac00\uc9c0\uace0 \uc774\uc911 \ud3ec\uc778\ud130\ub97c \uc774\uc6a9\ud558\uc5ec \uc120\uc5b8 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ub17c\ub9ac\uc801\uc73c\ub85c\ub294 \ud558\ub098\uc758 \uc5f0\uc18d\uc801\uc778 \ubc30\uc5f4\uc774\ub098 \ubb3c\ub9ac\uc801\uc73c\ub85c\ub294 \ube14\ub85d\uc73c\ub85c \ub098\ub204\uc5b4\uc838 \uba54\ubaa8\ub9ac\uc5d0 \ud560\ub2f9\ub429\ub2c8\ub2e4. \uac01 \ube14\ub85d\uc740 Time \ucd95\uc744 \uae30\uc900\uc73c\ub85c \uadf8 \uc678 \ub098\uba38\uc9c0 4\uac1c\uc758 \ucc28\uc6d0(Batch, Channel, Row, Column)\uc744 \uac16\ub294 \ub370\uc774\ud130\ub85c \ubd84\ub9ac\ub429\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd \uad6c\uc131 \ud074\ub798\uc2a4 \u00b6 Class Operator \u00b6 Operator \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uad6c\uc870 Operator \ud074\ub798\uc2a4 \uac04 \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0 Class Operator : \uc778\uacf5\uc2e0\uacbd\ub9dd \uc548\uc5d0\uc11c \uc800\uc218\uc900\uc758 \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Operator \ud074\ub798\uc2a4\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc758 \ub178\ub4dc\ub97c \uad6c\uc131\ud558\ub294 \uac00\uc7a5 \uc791\uc740 \ub2e8\uc704 \uc785\ub2c8\ub2e4. Operator \ud074\ub798\uc2a4\ub294 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc131\uc744 \uc704\ud574 \uac01\uac01 \uc5f0\uc0b0\uc758 \uc785\ub825 \ubc29\ud5a5\uacfc \ucd9c\ub825 \ubc29\ud5a5\uc5d0 \ub300\ud574\uc11c Operator \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uc800\uc7a5\ud558\ub294 Container \ub97c \uba64\ubc84 \ubcc0\uc218 \ub85c \uac16\uc2b5\ub2c8\ub2e4. Note Container \ub294 WICWIU \uc5d0\uc11c \uc815\uc758\ud55c \ud050\uc640 \ube44\uc2b7\ud55c \uc790\ub8cc \uad6c\uc870\uc785\ub2c8\ub2e4. \ub610\ud55c \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc758 \uc21c\uc804\ud30c\uc640 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\uae30 \uc704\ud574 \uc5f0\uc0b0\uc758 \uacb0\uacfc \uac12\uacfc \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud55c Tensor \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uc800\uc7a5\ud558\ub294 Container \ub97c \uba64\ubc84 \ubcc0\uc218\ub85c \uac16\uc2b5\ub2c8\ub2e4. \uc21c\uc804\ud30c\uc640 \uc5ed\uc804\ud30c\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 Weight \ud30c\ub77c\ubbf8\ud130\ub4e4\uc740 \ud6c4\uc5d0 \uae30\uc220\ud560 NeuralNetwork \ud074\ub798\uc2a4\uac00 \ud3ec\uc778\ud130\ub4e4\uc758 Container \ub85c \uac00\uc9c0\uace0 \uc788\uc73c\uba70, Operator \ud074\ub798\uc2a4\uc5d0\uac8c \uc804\ub2ec\ud569\ub2c8\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 \uc5f0\uc0b0\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. Class Module \u00b6 Module \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uad6c\uc870 \uc608\uc2dc Class Module : \ub2e8\uc77c Operator \ud074\ub798\uc2a4\ub85c\ub294 \uc218\ud589\ud560 \uc218 \uc5c6\ub294 \uace0\uc218\uc900\uc758 \ubcf5\ud569 \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Module \ud074\ub798\uc2a4\ub294 Operator \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d \ubc1b\uc73c\uba70, \ubcf5\uc218\uc758 Operator \ub4e4\uc744 \uc870\ud569\ud558\uc5ec \uc11c\ube0c \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\uace0 \uc5f0\uc0b0\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. Module \ud074\ub798\uc2a4\ub294 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9(Breadth-First Search) \ubc29\uc2dd\uc744 \uc774\uc6a9\ud574 \uc11c\ube0c \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\uace0 \uc5f0\uc0b0\ud569\ub2c8\ub2e4. Module \ud074\ub798\uc2a4\ub294 \ub2e4\ub978 Module \ud074\ub798\uc2a4\ub97c \ud3ec\ud568\ud558\ub294 \uc7ac\uadc0\uc801 \uad6c\uc870\ub97c \ud615\uc131\ud560 \uc218 \uc788\ub2e4. Module \ud074\ub798\uc2a4\ub294 \ud558\ub098\uc758 \ub2e8\uc77c Operator \ud074\ub798\uc2a4\uc640 \uac19\uc774 \uae30\ub2a5 \ubc0f \ub3d9\uc791 \ud55c\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 \uc5f0\uc0b0\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4. \uc2e0\uacbd\ub9dd \ud559\uc2b5 \ud074\ub798\uc2a4 \u00b6 Class LossFunction \u00b6 LossFunction \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uad6c\uc870 Class LossFunction : NeuralNetwork \uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uc5bb\uc5b4\uc9c4 \ucd5c\uc885 \ucd9c\ub825 Tensor \uc640 NeuralNetwork \ub85c\ubd80\ud130 \uc804\ub2ec \ubc1b\uc740 \uc785\ub825 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ub808\uc774\ube14 \uac12\uc744 \ube44\uad50\ud558\uc5ec \uc190\uc2e4 \ud568\uc218 \uac12\uc744 \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Operator \ud074\ub798\uc2a4\uc640\ub294 \uad6c\ubd84\ub41c \ub3c5\ub9bd\uc801\uc778 \ud074\ub798\uc2a4\uc774\uba70, \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uacc4\uc0b0\ud558\uc5ec NeuralNetwork \uc758 \uc5ed\uc804\ud30c\uc758 \uc2dc\uc791 \ubd80\ubd84\uc744 \ub2f4\ub2f9 \ud569\ub2c8\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 \uc190\uc2e4 \ud568\uc218\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4. Class Optimizer \u00b6 NeuralNetwork \ud074\ub798\uc2a4 \ub0b4 \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130\uc758 \uae30\ubcf8 \uad6c\uc870 Optimizer \ud074\ub798\uc2a4 : \ucd5c\uc801\ud654 \uc54c\uace0\ub9ac\uc998\uc744 \ud65c\uc6a9\ud574 Weight \ud30c\ub77c\ubbf8\ud130\ub97c \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd \ubaa8\ub378\uc758 \uc5ed\uc804\ud30c \uc2dc, \uc190\uc2e4 \ud568\uc218\uc5d0\uc11c \uacc4\uc0b0\ub41c \uac12\uc5d0 \ub300\ud574\uc11c \uac01 \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130\uc758 \uae30\uc6b8\uae30 \ubca1\ud130\uac00 Tensor \ud615\ud0dc\ub85c \uacc4\uc0b0\ub41c\ub2e4. Optimizer \ud074\ub798\uc2a4\ub294 \uc774 \uae30\uc6b8\uae30 \ubca1\ud130\uc5d0 \ub300\ud55c Tensor \ub4e4\uc758 \ud3ec\uc778\ud130\ub97c Container \ub85c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 Optimizer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4. \uc2e0\uacbd\ub9dd \uad6c\uc131 \u00b6 Class NeuralNetwork \u00b6 NeuralNetwork \ud074\ub798\uc2a4 \uadf8\ub798\ud504 \uc608\uc2dc NeuralNetwork \ud074\ub798\uc2a4 : \uc55e\uc5d0\uc11c \uc124\uba85\ud588\ub358 \uc694\uc18c\ub4e4\uc744 \uc870\ud569\ud558\uc5ec, \ud559\uc2b5 \uac00\ub2a5\ud55c \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc744 \uad6c\uc131\ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 \ud558\ub098\uc758 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\ub294 Operator(Module) \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\uc5d0 \ub300\ud55c Container \ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. Operator(Module) \ud074\ub798\uc2a4\ub4e4\uc774 \uad6c\uc131\ud558\ub294 \uadf8\ub798\ud504\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd \ubaa8\ub378\uc5d0 \ub300\uc751\ub429\ub2c8\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9(Breadth-first Search) \ubc29\uc2dd\uc73c\ub85c \uac01 Operator \ud074\ub798\uc2a4\ub4e4\uc5d0 \uc811\uadfc\ud569\ub2c8\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 LossFunction \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud574 \uc190\uc2e4 \ud568\uc218\uc758 \uac12\uc744 \uacc4\uc0b0\ud558\uace0, Optimizer \ud074\ub798\uc2a4\uc758 \ucd5c\uc801\ud654 \uc54c\uace0\ub9ac\uc998\uc744 \uc774\uc6a9\ud574 \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc744 \ucd5c\uc801\ud654\ud55c\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 Weight \ud30c\ub77c\ubbf8\ud130\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc758 Container \ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba70, \uc5ed\uc804\ud30c \ubc0f \ucd5c\uc801\ud654 \uc2dc \ud65c\uc6a9\ud55c\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud55c \ud559\uc2b5 \uc9c4\ud589 \ubc29\uc2dd\uc758 \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ud6c4\uc220\ud558\uc600\ub2e4.","title":"2. WICWIU \uc2e0\uacbd\ub9dd \uad6c\uc131"},{"location":"dev/wicwiu/nn/#_1","text":"Tensor, Shape, LongArray \ub370\uc774\ud130 \ud615\uc2dd \uc694\uc57d","title":"\ub370\uc774\ud130 \uad6c\uc870"},{"location":"dev/wicwiu/nn/#class-tensor","text":"Class Tensor : WICWIU \uc5d0\uc11c \uc778\uacf5 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc758 \ud559\uc2b5\uc5d0 \uc774\uc6a9\ub418\ub294 \ub370\uc774\ud130\uc758 \uae30\ubcf8 \ud615\uc2dd \uc785\ub2c8\ub2e4. Tensor \ud074\ub798\uc2a4\ub294 \ucd5c\ub300 5\uc758 \uacc4\uc218(Rank)\ub97c \uac16\ub294 \ud150\uc11c\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ud150\uc11c\uc758 \uac01 \ucd95\uc740 \uc778\uacf5 \uc2e0\uacbd\ub9dd \ud559\uc2b5\uc5d0\uc11c Time, Batch, Row, Column \ucd95\uc5d0 \ud574\ub2f9 \ud569\ub2c8\ub2e4. Tensor \ud074\ub798\uc2a4\ub294 \ud150\uc11c\uc758 \ucc28\uc6d0\uc5d0 \uad00\ud55c \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 Shape \ud074\ub798\uc2a4\uc640 \uac01 \ucc28\uc6d0\uc758 \uac1c\ubcc4 \ub370\uc774\ud130\ub97c \ub2f4\uace0 \uc788\ub294 LongArray \ud074\ub798\uc2a4 \ub97c \uba64\ubc84 \ubcc0\uc218\ub85c \uac16\uc2b5\ub2c8\ub2e4. Tensor \ud074\ub798\uc2a4\ub294 Shape \ud074\ub798\uc2a4\uc758 \ucc28\uc6d0 \uc815\ubcf4 \ub370\uc774\ud130\ub97c \ud65c\uc6a9\ud574 \uac01 \ucc28\uc6d0\uc758 \uac1c\ubcc4 \ub370\uc774\ud130\ub97c \ub2f4\uace0 \uc788\ub294 \uba54\ubaa8\ub9ac\uc5d0 \uc811\uadfc\ud569\ub2c8\ub2e4. Info Tensor \ub294 \ubb3c\ub9ac\ud559\uc758 \uac1c\ub150\uc744 \ucc28\uc6a9, \ub2e4\ucc28\uc6d0\uc758 \uc815\ubcf4\ub97c \uac16\ub294 \ub370\uc774\ud130\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4.","title":"Class Tensor"},{"location":"dev/wicwiu/nn/#class-shape","text":"Class Shape : Tensor \ub370\uc774\ud130\uc758 \ucc28\uc6d0\uc5d0 \uad00\ud55c \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Shape \ud074\ub798\uc2a4\ub294 \ud150\uc11c\uc758 \uacc4\uc218(Rank)\ub97c \ub2f4\uace0 \uc788\ub294 \ubcc0\uc218\uc640 \uacc4\uc218 \uac01 \ucd95\uc758 \ucc28\uc6d0 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ubcc0\uc218 \ub97c \uba64\ubc84 \ubcc0\uc218\ub85c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uacc4\uc218 \ubcc0\uc218\uc758 \ucd5c\ub313\uac12\uc740 5 \uc774\uace0, \uac01 \ucd95\uc740 \uc778\uacf5 \uc2e0\uacbd\ub9dd \ud559\uc2b5\uc5d0\uc11c Time, Batch, Channel, Row, Column \ucd95\uc73c\ub85c \ud65c\uc6a9\ub429\ub2c8\ub2e4. \uac01 \ucd95\uc758 \ucc28\uc6d0 \uc815\ubcf4\uc5d0 \ud574\ub2f9\ud558\ub294 \ubcc0\uc218\ub294 \ud3ec\uc778\ud130\ub85c \uc120\uc5b8 \ub418\uc5b4 \uc788\uc73c\uba70, \ucd95\uc758 \uac1c\uc218\ub9cc\ud07c \ubc30\uc5f4\ub85c\uc11c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ub418\uc5b4 \ucd95\uc758 \ucc28\uc6d0 \uc815\ubcf4\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.","title":"Class Shape"},{"location":"dev/wicwiu/nn/#class-longarray","text":"LongArray \ud074\ub798\uc2a4\uc758 \uc704\uacc4\uc801 \ub370\uc774\ud130 \uad6c\uc870 Class LongArray : High-dimensional Array \uc758 \uc57d\uc5b4\ub85c, \uc2e4\uc81c \uac01 \ucc28\uc6d0\uc758 \uac1c\ubcc4 \ub370\uc774\ud130\ub97c \ub2f4\uace0 \uc788\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. LongArray \ud074\ub798\uc2a4\uc758 \ub370\uc774\ud130\ub4e4\uc740 \ub3d9\uc801\uc73c\ub85c \ud55c \ubc88\uc5d0 \ud560\ub2f9\ud588\uc744 \ub54c \uba54\ubaa8\ub9ac\uac00 \ubd80\uc871\ud574 \ud560\ub2f9\uc774 \ubd88\uac00\ud558\ub294 \uacbd\uc6b0\ub97c \ub9c9\uae30 \uc704\ud574 \uc704\uacc4\uc801 \uad6c\uc870\ub97c \uac00\uc9c0\uace0 \uc774\uc911 \ud3ec\uc778\ud130\ub97c \uc774\uc6a9\ud558\uc5ec \uc120\uc5b8 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ub17c\ub9ac\uc801\uc73c\ub85c\ub294 \ud558\ub098\uc758 \uc5f0\uc18d\uc801\uc778 \ubc30\uc5f4\uc774\ub098 \ubb3c\ub9ac\uc801\uc73c\ub85c\ub294 \ube14\ub85d\uc73c\ub85c \ub098\ub204\uc5b4\uc838 \uba54\ubaa8\ub9ac\uc5d0 \ud560\ub2f9\ub429\ub2c8\ub2e4. \uac01 \ube14\ub85d\uc740 Time \ucd95\uc744 \uae30\uc900\uc73c\ub85c \uadf8 \uc678 \ub098\uba38\uc9c0 4\uac1c\uc758 \ucc28\uc6d0(Batch, Channel, Row, Column)\uc744 \uac16\ub294 \ub370\uc774\ud130\ub85c \ubd84\ub9ac\ub429\ub2c8\ub2e4.","title":"Class LongArray"},{"location":"dev/wicwiu/nn/#_2","text":"","title":"\uc778\uacf5\uc2e0\uacbd\ub9dd \uad6c\uc131 \ud074\ub798\uc2a4"},{"location":"dev/wicwiu/nn/#class-operator","text":"Operator \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uad6c\uc870 Operator \ud074\ub798\uc2a4 \uac04 \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0 Class Operator : \uc778\uacf5\uc2e0\uacbd\ub9dd \uc548\uc5d0\uc11c \uc800\uc218\uc900\uc758 \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Operator \ud074\ub798\uc2a4\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc758 \ub178\ub4dc\ub97c \uad6c\uc131\ud558\ub294 \uac00\uc7a5 \uc791\uc740 \ub2e8\uc704 \uc785\ub2c8\ub2e4. Operator \ud074\ub798\uc2a4\ub294 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc131\uc744 \uc704\ud574 \uac01\uac01 \uc5f0\uc0b0\uc758 \uc785\ub825 \ubc29\ud5a5\uacfc \ucd9c\ub825 \ubc29\ud5a5\uc5d0 \ub300\ud574\uc11c Operator \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uc800\uc7a5\ud558\ub294 Container \ub97c \uba64\ubc84 \ubcc0\uc218 \ub85c \uac16\uc2b5\ub2c8\ub2e4. Note Container \ub294 WICWIU \uc5d0\uc11c \uc815\uc758\ud55c \ud050\uc640 \ube44\uc2b7\ud55c \uc790\ub8cc \uad6c\uc870\uc785\ub2c8\ub2e4. \ub610\ud55c \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc758 \uc21c\uc804\ud30c\uc640 \uc5ed\uc804\ud30c\ub97c \uc218\ud589\ud558\uae30 \uc704\ud574 \uc5f0\uc0b0\uc758 \uacb0\uacfc \uac12\uacfc \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud55c Tensor \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uc800\uc7a5\ud558\ub294 Container \ub97c \uba64\ubc84 \ubcc0\uc218\ub85c \uac16\uc2b5\ub2c8\ub2e4. \uc21c\uc804\ud30c\uc640 \uc5ed\uc804\ud30c\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 Weight \ud30c\ub77c\ubbf8\ud130\ub4e4\uc740 \ud6c4\uc5d0 \uae30\uc220\ud560 NeuralNetwork \ud074\ub798\uc2a4\uac00 \ud3ec\uc778\ud130\ub4e4\uc758 Container \ub85c \uac00\uc9c0\uace0 \uc788\uc73c\uba70, Operator \ud074\ub798\uc2a4\uc5d0\uac8c \uc804\ub2ec\ud569\ub2c8\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 \uc5f0\uc0b0\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.","title":"Class Operator"},{"location":"dev/wicwiu/nn/#class-module","text":"Module \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uad6c\uc870 \uc608\uc2dc Class Module : \ub2e8\uc77c Operator \ud074\ub798\uc2a4\ub85c\ub294 \uc218\ud589\ud560 \uc218 \uc5c6\ub294 \uace0\uc218\uc900\uc758 \ubcf5\ud569 \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uae30 \uc704\ud55c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Module \ud074\ub798\uc2a4\ub294 Operator \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d \ubc1b\uc73c\uba70, \ubcf5\uc218\uc758 Operator \ub4e4\uc744 \uc870\ud569\ud558\uc5ec \uc11c\ube0c \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\uace0 \uc5f0\uc0b0\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. Module \ud074\ub798\uc2a4\ub294 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9(Breadth-First Search) \ubc29\uc2dd\uc744 \uc774\uc6a9\ud574 \uc11c\ube0c \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\uace0 \uc5f0\uc0b0\ud569\ub2c8\ub2e4. Module \ud074\ub798\uc2a4\ub294 \ub2e4\ub978 Module \ud074\ub798\uc2a4\ub97c \ud3ec\ud568\ud558\ub294 \uc7ac\uadc0\uc801 \uad6c\uc870\ub97c \ud615\uc131\ud560 \uc218 \uc788\ub2e4. Module \ud074\ub798\uc2a4\ub294 \ud558\ub098\uc758 \ub2e8\uc77c Operator \ud074\ub798\uc2a4\uc640 \uac19\uc774 \uae30\ub2a5 \ubc0f \ub3d9\uc791 \ud55c\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 \uc5f0\uc0b0\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4.","title":"Class Module"},{"location":"dev/wicwiu/nn/#_3","text":"","title":"\uc2e0\uacbd\ub9dd \ud559\uc2b5 \ud074\ub798\uc2a4"},{"location":"dev/wicwiu/nn/#class-lossfunction","text":"LossFunction \ud074\ub798\uc2a4\uc758 \uae30\ubcf8 \uad6c\uc870 Class LossFunction : NeuralNetwork \uc758 \uc21c\uc804\ud30c\ub97c \ud1b5\ud574 \uc5bb\uc5b4\uc9c4 \ucd5c\uc885 \ucd9c\ub825 Tensor \uc640 NeuralNetwork \ub85c\ubd80\ud130 \uc804\ub2ec \ubc1b\uc740 \uc785\ub825 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ub808\uc774\ube14 \uac12\uc744 \ube44\uad50\ud558\uc5ec \uc190\uc2e4 \ud568\uc218 \uac12\uc744 \uacc4\uc0b0\ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. Operator \ud074\ub798\uc2a4\uc640\ub294 \uad6c\ubd84\ub41c \ub3c5\ub9bd\uc801\uc778 \ud074\ub798\uc2a4\uc774\uba70, \uae30\uc6b8\uae30 \ubca1\ud130\ub97c \uacc4\uc0b0\ud558\uc5ec NeuralNetwork \uc758 \uc5ed\uc804\ud30c\uc758 \uc2dc\uc791 \ubd80\ubd84\uc744 \ub2f4\ub2f9 \ud569\ub2c8\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 \uc190\uc2e4 \ud568\uc218\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4.","title":"Class LossFunction"},{"location":"dev/wicwiu/nn/#class-optimizer","text":"NeuralNetwork \ud074\ub798\uc2a4 \ub0b4 \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130\uc758 \uae30\ubcf8 \uad6c\uc870 Optimizer \ud074\ub798\uc2a4 : \ucd5c\uc801\ud654 \uc54c\uace0\ub9ac\uc998\uc744 \ud65c\uc6a9\ud574 Weight \ud30c\ub77c\ubbf8\ud130\ub97c \uc5c5\ub370\uc774\ud2b8 \ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uc778\uacf5\uc2e0\uacbd\ub9dd \ubaa8\ub378\uc758 \uc5ed\uc804\ud30c \uc2dc, \uc190\uc2e4 \ud568\uc218\uc5d0\uc11c \uacc4\uc0b0\ub41c \uac12\uc5d0 \ub300\ud574\uc11c \uac01 \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130\uc758 \uae30\uc6b8\uae30 \ubca1\ud130\uac00 Tensor \ud615\ud0dc\ub85c \uacc4\uc0b0\ub41c\ub2e4. Optimizer \ud074\ub798\uc2a4\ub294 \uc774 \uae30\uc6b8\uae30 \ubca1\ud130\uc5d0 \ub300\ud55c Tensor \ub4e4\uc758 \ud3ec\uc778\ud130\ub97c Container \ub85c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc0dd \ud074\ub798\uc2a4\ub4e4\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud558\uc5ec \uac01 Optimizer\uc758 \uae30\ub2a5\uc744 \uc218\ud589\ud55c\ub2e4.","title":"Class Optimizer"},{"location":"dev/wicwiu/nn/#_4","text":"","title":"\uc2e0\uacbd\ub9dd \uad6c\uc131"},{"location":"dev/wicwiu/nn/#class-neuralnetwork","text":"NeuralNetwork \ud074\ub798\uc2a4 \uadf8\ub798\ud504 \uc608\uc2dc NeuralNetwork \ud074\ub798\uc2a4 : \uc55e\uc5d0\uc11c \uc124\uba85\ud588\ub358 \uc694\uc18c\ub4e4\uc744 \uc870\ud569\ud558\uc5ec, \ud559\uc2b5 \uac00\ub2a5\ud55c \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc744 \uad6c\uc131\ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 \ud558\ub098\uc758 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud558\ub294 Operator(Module) \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\uc5d0 \ub300\ud55c Container \ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. Operator(Module) \ud074\ub798\uc2a4\ub4e4\uc774 \uad6c\uc131\ud558\ub294 \uadf8\ub798\ud504\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd \ubaa8\ub378\uc5d0 \ub300\uc751\ub429\ub2c8\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9(Breadth-first Search) \ubc29\uc2dd\uc73c\ub85c \uac01 Operator \ud074\ub798\uc2a4\ub4e4\uc5d0 \uc811\uadfc\ud569\ub2c8\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 LossFunction \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud574 \uc190\uc2e4 \ud568\uc218\uc758 \uac12\uc744 \uacc4\uc0b0\ud558\uace0, Optimizer \ud074\ub798\uc2a4\uc758 \ucd5c\uc801\ud654 \uc54c\uace0\ub9ac\uc998\uc744 \uc774\uc6a9\ud574 \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc744 \ucd5c\uc801\ud654\ud55c\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub294 Weight \ud30c\ub77c\ubbf8\ud130\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc758 Container \ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba70, \uc5ed\uc804\ud30c \ubc0f \ucd5c\uc801\ud654 \uc2dc \ud65c\uc6a9\ud55c\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\ub97c \uc774\uc6a9\ud55c \ud559\uc2b5 \uc9c4\ud589 \ubc29\uc2dd\uc758 \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ud6c4\uc220\ud558\uc600\ub2e4.","title":"Class NeuralNetwork"},{"location":"paper/facenet/","text":"FaceNet \uc0ac\uc804\uc9c0\uc2dd \u00b6 FaceNet \uc740 2015\ub144 \uad6c\uae00\uc5d0\uc11c \uac1c\ubc1c\ud55c \uc5bc\uad74 \uc778\uc2dd \uc2dc\uc2a4\ud15c\uc774\ub2e4. FaceNet \uc740 \uc5bc\uad74 \uc778\uc2dd \uc2dc\uc2a4\ud15c\uc758 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc5bc\uad74\uc5d0\uc11c \ud2b9\uc9d5\uc744 \uace0\ud03c\ub9ac\ud2f0\ub85c \ucd94\ucd9c(face embedding) \ud560 \uc218 \uc788\ub2e4. \uc5bc\uad74 \uc778\uc2dd \u00b6 \uc5bc\uad74 \uc778\uc2dd\uc758 \uc77c\ubc18\uc801\uc778 \uae30\ub2a5\uc740 \uc0ac\uc9c4 \ub610\ub294 \uc601\uc0c1\uc73c\ub85c\ubd80\ud130 \uc790\ub3d9\uc73c\ub85c \uc5bc\uad74\uc744 \ud655\uc778(\uc778\uc2dd)\ud558\ub294 \uac83\uacfc \uc5bc\uad74\uc744 \uac80\uc99d\ud558\ub294 \uac83\uc774\ub2e4. \uc5bc\uad74 \uac80\uc99d : \uc54c\ub824\uc9c4 \uc2e0\uc6d0\uc5d0 \uc5bc\uad74\uc744 one-to-one \ub9e4\ud551\ud558\ub294 \uac83 ( \uc774 \uc0ac\ub78c\uc774 \uc774 \uc0ac\ub78c\uc778\uac00? ) \uc5bc\uad74 \ud655\uc778(\uc778\uc2dd) : \uc54c\ub824\uc9c4 \uc5bc\uad74\ub4e4\ub85c\ubd80\ud130 \uc5bc\uad74\uc744 one-to-many \ub9e4\ud551\ud558\ub294 \uac83 ( \uc774 \uc0ac\ub78c\uc774 \ub204\uad6c\uc778\uac00? ) FaceNet \ubaa8\ub378 \u00b6 FaceNet \uc740 2015\ub144 \uad6c\uae00\uc758 \uc5f0\uad6c\uc6d0 Florian Schroff \uc758 \ub17c\ubb38 FaceNet: A Unified Embedding for Face Recognition and Clustering \uc5d0\uc11c \ubc1c\ud45c\ub41c \uc5bc\uad74 \uc778\uc2dd \uc2dc\uc2a4\ud15c\uc774\ub2e4. FaceNet \uc740 \uc5bc\uad74 \uc0ac\uc9c4\uc774 \uc8fc\uc5b4\uc9c0\uba74 \uc5bc\uad74\ub85c\ubd80\ud130 \uace0\ud03c\ub9ac\ud2f0\uc758 \ud2b9\uc9d5\ub4e4(features)\uc744 \ucd94\ucd9c\ud558\uc5ec \uc774 \ud2b9\uc9d5\uc744 \ud45c\ud604\ud558\ub294 128 \uac1c \uc6d0\uc18c\ub97c \uac16\ub294 \ubca1\ud130(face embedding)\ub97c \ub9cc\ub4e4\uc5b4\ub0b8\ub2e4. \uae30\uc220\uc801\uc73c\ub85c\ub294 \uac01 \uc6d0\uc18c\uac00 1 \ubc14\uc774\ud2b8\ub97c \uac00\uc9c0\ubbc0\ub85c \uac01 \ubca1\ud130\uac00 \ub2e8\uc9c0 128 \ubc14\uc774\ud2b8\ub9cc\uc73c\ub85c \uc5bc\uad74\uc744 \ud45c\ud604\ud558\ub294 \uac83\uc774\ub2e4. FaceNet \uc740 \uc774 face embedding \uc744 \ud1b5\ud558\uc5ec \uc5bc\uad74 \uc0ac\uc9c4\uc744 \uac70\ub9ac\uac00 \uc5bc\uad74 \uc720\uc0ac\ub3c4\ub97c \ub73b\ud558\ub294 \uc720\ud074\ub9ac\ub4dc \uacf5\uac04\uc5d0 \ub9e4\ud551\uc2dc\ud0a8\ub2e4. FaceNet \uc740 triplet loss \ub97c \ud1b5\ud55c deep CNN \uc774\ub2e4. \uc774 \ubaa8\ub378\ub85c \ube44\uc2b7\ud55c \uc2e0\uc6d0\uc758 \ubca1\ud130(\uc5bc\uad74)\ub294 \uac00\uae5d\uac8c, \ub2e4\ub978 \uc2e0\uc6d0\uc758 \ubca1\ud130(\uc5bc\uad74)\ub294 \uba40\uac8c \ub9cc\ub4e0\ub2e4. \uc774 \ubaa8\ub378\uc758 \ud559\uc2b5\uc740 \ubaa8\ub378\uc758 \uc911\uac04\uce35\uc73c\ub85c\ubd80\ud130 \uadf8\uac83\uc744 \ucd94\ucd9c\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c embedding \uc744 \uc9c1\uc811\uc801\uc744 \ub9cc\ub4dc\ub294 \uac83\uc5d0 \ucd08\uc810\uc744 \ub450\uc5c8\ub294\ub370 \uc774\uac83\uc740 \uc911\uc694\ud55c \ud601\uba85\uc774\ub2e4. FaceNet \uc740 \uc774\uc804\uc758 \uc811\uadfc\uc5d0\uc11c \ud588\ub358 \uac83\uacfc \ub2ec\ub9ac \uc911\uac04\uc758 \uc881\uc740 \uce35\uc774 \uc544\ub2c8\ub77c embedding \uadf8 \uc790\uccb4\ub97c \ucd5c\uc801\ud654\uc2dc\ud0a4\ub294 \uac83\uc744 \uc9c1\uc811\uc801\uc73c\ub85c \ud559\uc2b5\ud55c\ub2e4. \uc774 \uc5bc\uad74 embedding \uc740 \ud45c\uc900 \uc5bc\uad74 \uc778\uc2dd \ubca4\uce58\ub9c8\ud0b9\uc5d0\uc11c \ucd5c\uace0\uc758 \uc131\uacfc\ub97c \ub0b4\uac8c \ud558\ub294 \ubd84\ub958 \uc2dc\uc2a4\ud15c\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \uae30\ubc18\uc774 \ub41c\ub2e4. FaceNet \uc758 \ub17c\ubb38\uc740 \uc5bc\uad74\uc5d0\uc11c \ucd94\ucd9c\ud55c \uac19\uc740 \uc5bc\uad74\uc758 \ud2b9\uc9d5\uc744 \uad70\uc9d1\ud654\ud558\ub294 \ub4f1 embedding \uc744 \ub2e4\ub978 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud558\ub294 \ubc29\uc2dd\ub3c4 \ubcf4\uc5ec\uc8fc\uc5c8\ub2e4. FaceNet \uad6c\ud604 \uc624\ud508\uc18c\uc2a4 \u00b6 FaceNet \ubaa8\ub378\uc744 \uc81c\uacf5\ud558\ub294 \ud504\ub85c\uc81d\ud2b8\ub294 \ub9ce\uc774 \uc788\ub2e4. \uac00\uc7a5 \uc720\uba85\ud55c \ud504\ub85c\uc81d\ud2b8\ub294 OpenFace \uc778\ub370 \uc774 \ud504\ub85c\uc81d\ud2b8\ub294 PyTorch \ub97c \uc0ac\uc6a9\ud558\uc5ec FaceNet \ubaa8\ub378\uc744 \uc81c\uacf5\ud55c\ub2e4. \ub610 \uc720\uba85\ud55c \ud504\ub85c\uc81d\ud2b8\ub294 FaceNet by David Sandberg \uc778\ub370 David \ub294 TensorFlow \ub97c \uc0ac\uc6a9\ud558\uc5ec FaceNet \ubaa8\ub378\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc8fc\ubaa9\ud560\ub9cc\ud55c Keras FaceNet \uc608\uc81c\ub294 FaceNet by Hiroki Taniai \uc774\ub2e4. \uadf8\ub294 Inception ResNet v1 \uc744 TensorFlow \uc5d0\uc11c Keras \ub85c \ubcc0\ud658\ud574\uc8fc\ub294 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc81c\uacf5\ud588\ub2e4. \ub610 \uc774\ubbf8 \ud559\uc2b5\ub41c Keras \ubaa8\ub378\uc744 \uc81c\uacf5\ud588\ub2e4. Info \uc774 \ubaa8\ub378\uc740 MS-Celeb-1M \ub370\uc774\ud130\uc14b \uc5d0\uc11c \uc0ac\uc804\ud559\uc2b5\ub418\uc5c8\ub2e4. \uadf8\ub9ac\uace0 \uc785\ub825\ub41c \uc774\ubbf8\uc9c0\ub97c \uceec\ub7ec\uac00 \ub418\uac8c \ud558\uace0 3\uac1c\uc758 \ucc44\ub110\uc5d0 \ub300\ud55c \ud45c\uc900\ud654\ub41c \ud654\uc774\ud2b8\ub2dd \ub41c \ud53d\uc140 \uac12\uc744 \uac16\uac8c \ud558\uace0 \\(160 \\times 160\\) \ud615\uc0c1\uc744 \uac16\uac8c \ud55c\ub2e4. \uc5ec\uae30 \uc5d0\uc11c \ubbf8\ub9ac \ud559\uc2b5\ub41c Keras FaceNet \ubaa8\ub378\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud560 \uc218 \uc788\ub2e4. \uc5bc\uad74 \uc778\uc2dd\uc744 \uc704\ud55c \uc5bc\uad74 \ud0d0\uc0c9 \u00b6 \uc2e4\uc9c8\uc801\uc73c\ub85c \uc5bc\uad74 \uc778\uc2dd\uc744 \ud558\uae30 \uc804\uc5d0 \uba3c\uc800 \uc5bc\uad74\uc744 \ud0d0\uc0c9\ud574\uc57c\ub9cc \ud55c\ub2e4. \uc5bc\uad74 \ud0d0\uc0c9\uc774\ub780 \uc0ac\uc9c4\uc5d0\uc11c \uc5bc\uad74\uc744 \uc790\ub3d9\uc73c\ub85c \ucc3e\uace0 \uc5bc\uad74\uc5d0 \ub124\ubaa8 \ubc15\uc2a4\ub97c \uadf8\ub824\uc11c \ub098\uba38\uc9c0 \uc601\uc5ed\ub4e4\uc740 \uc81c\uc678\ud558\ub294 \uc791\uc5c5\uc774\ub2e4. \uc5bc\uad74 \ud0d0\uc0c9\uc744 \uc704\ud558\uc5ec MTCNN(Multi-Task Cascaded Convolutional Neural Network) \uc744 \uc0ac\uc6a9\ud558\uba74 \uc88b\ub2e4. \uc774\uac83\uc73c\ub85c \uc0ac\uc9c4\uc5d0\uc11c \uc5bc\uad74\ub9cc \ucd94\ucd9c\ud574\ub0bc \uc218 \uc788\ub2e4. MTCNN \uc740 2016\ub144 \ub17c\ubb38 Joint Face Detection and Alignment Using Multitask Cascaded Convolutional Networks \uc5d0\uc11c \uc124\uba85\ub41c \uc5bc\uad74 \ud0d0\uc0c9\uc5d0 \uc0ac\uc6a9\ub418\ub294 \ucd5c\uc801\uc758 \uae30\ubc95\uc774\ub2e4. MTCNN \uad6c\ud604 \uc624\ud508\uc18c\uc2a4 Iv\u00e1n de Paz Centeno \uc774 \uad6c\ud604\ud55c ipazc/mtcnn \uc774 \uc788\ub294\ub370 \uc774\uac83\uc740 pip \ub85c\ub3c4 \uc124\uce58\ud560 \uc218 \uc788\ub2e4. $ sudo pip install mtcnn References : FaceNet: A Unified Embedding for Face Recognition and Clustering FaceNet \ub17c\ubb38\uc744 \uc704\ud55c \uc0ac\uc804 \uc218\ud559\uc9c0\uc2dd \u00b6 Info \uc774 \uae00\uc740 \uc800\uc758 \ube14\ub85c\uadf8 \uae00 \uc744 \uc7ac\uc791\uc131 \ud55c \uac83\uc785\ub2c8\ub2e4. norm \uac70\ub9ac, \ubca1\ud130 \uc0ac\uc774\uc758 \uac70\ub9ac \u00b6 \\(L_1\\) norm \uac70\ub9ac, \ub9e8\ud574\ud2bc \uac70\ub9ac : \ubca1\ud130 \\(a\\) \uc5d0 \ub300\ud55c \\(L_1\\) norm \uc740 \\[ ||a|| _{1} = |a_1| + |a_2| + |a_3| + \\dots + |a_n| = \\sum_{i=1}^{n}|a_i| \\] \uc774\ub2e4. Example: \ubca1\ud130 \\(a = (4, 3)\\) \uc5d0 \ub300\ud55c \\(L_1\\) norm \uc740 \uc624\ub978\ucabd\uc73c\ub85c \\(4\\) , \uc704\ub85c \\(3\\) \uc6c0\uc9c1\uc778 \uac83\uacfc \uac19\uc774 \\(7\\) \uc774\ub2e4. \uc774\ucc98\ub7fc \\(L_1\\) norm \uc740 \uc640 \uac19\uc774 \ubc14\ub451\ud310 \ubaa8\uc591\uc73c\ub85c \uc6c0\uc9c1\uc778 \ucd5c\ub2e8\uac70\ub9ac\ub97c \ub73b\ud55c\ub2e4. \\(L_2\\) norm \uac70\ub9ac, \uc720\ud074\ub9ac\ub4dc \uac70\ub9ac, \ubca1\ud130\uc758 \ud06c\uae30, Squared Distance : \ubca1\ud130 \\(a\\) \uc5d0 \ub300\ud55c \\(L_2\\) norm \uc740 \\[ ||a|| _{2} = \\sqrt[]{\\sum_{i=1}^{n}a _ i ^{2}} = \\sqrt[]{a_1 ^{2}+a_2 ^{2}+\\dots+a_n ^{2}} \\] \uc774\ub2e4. \\(L_2\\) norm \uc740 \ubca1\ud130\uc758 \ud06c\uae30\uc758 \uc815\uc758\uc640 \ub3d9\uc77c\ud558\ub2e4\uace0 \ubcfc \uc218 \uc788\ub2e4. \\(L_2\\) norm \uc740 \uc720\ud074\ub9ac\ub4dc \uae30\ud558\ud559\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub358 \uac70\ub9ac\uc640 \ub611\uac19\uace0 \uc6b0\ub9ac\uac00 \uc77c\uc0c1\uc0dd\ud65c\uc5d0\uc11c \uc9c1\uad00\uc801\uc73c\ub85c \uc0dd\uac01\ud558\ub358 \uac70\ub9ac\uc640 \ub3d9\uc77c\ud558\ub2e4. \\(L_1, L_2\\) norm \uc740 \uc120\ud615\ud68c\uadc0 \ubaa8\ub378\uc758 \uc815\uaddc\ud654 \ud56d\uc5d0\uc11c \uc0ac\uc6a9\ub41c\ub2e4. \ub17c\ubb38\uc5d0\uc11c \ub098\uc624\ub294 \uc218\uc2dd \\(\\|f(x)\\|_{2} = 1\\) \uc740 \ubca1\ud130 \\(f(x)\\) \uc758 \ud06c\uae30 \ub610\ub294 \\(L_2\\) norm \uac70\ub9ac\uac00 \\(1\\) \uc774\ub77c\ub294 \uac83\uc774\ub2e4. \\(\\|f(x_i ^{a}) - f(x_i ^{p})\\| ^{2} _{2}\\) \ub294 \ubca1\ud130 \\(f(x_i ^{a})\\) \uc640 \ubca1\ud130 \\(f(x_i ^{p})\\) \uc758 \uac70\ub9ac( \\(L_2\\) \uac70\ub9ac) \uc758 \uc81c\uacf1\uc774\ub2e4. \ud3d0\uad6c\uac04 \u00b6 \uad6c\uac04(interval) : \ub450 \uc2e4\uc218 \\(a, b(a<b)\\) \uc5d0 \ub300\ud558\uc5ec \uc2e4\uc218\uc758 \uc9d1\ud569 \\[\\{x \\in \\mathbb{R} |a \\leq x \\leq b\\}, \\{x \\in \\mathbb{R} |a < x < b\\}, \\{x \\in \\mathbb{R} | a \\leq x < b\\}, \\{x \\in \\mathbb{R} |a<x \\leq b\\}\\] \ub97c \uad6c\uac04\uc774\ub77c \ud55c\ub2e4. \uae30\ud638\ub85c \uac01\uac01 \\([a,b], (a,b), [a,b), (a,b]\\) \ub77c \ud55c\ub2e4. \uad6c\uac04\uc740 \uc218\ub85c \uadf8 \ud2b9\uc131 \ud639\uc740 \uc874\uc7ac\uc790\uccb4\ub97c \uc218\ub85c \ucd94\uc0c1\ud654\ud560 \uc218 \uc788\ub294 \uc790\uc5f0\uc758 \ubaa8\ub4e0 \ub300\uc0c1\uc758 \uc9d1\ud569\uc744 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc218\ub85c \uaca9\ud558\ub420 \uc218 \uc788\ub294 \uc790\uc5f0\uc758 \uc5b4\ub5a4 \ub300\uc0c1\uc744 \uae30\uc900\uc73c\ub85c \ud558\uc5ec \ub098\ub208 \uac83\uc5d0 \ub300\uc751\ub41c\ub2e4. \ud3d0\uad6c\uac04(\ub2eb\ud78c\uad6c\uac04, closed interval) : \\([a,b]\\) \ub97c \ub2eb\ud78c\uad6c\uac04\uc774\ub77c \ud55c\ub2e4. \uc989, \\([a,b] = \\{x \\in \\mathbb{R} | a \\leq x \\leq b\\}\\) \uc774\ub2e4. \uac1c\uad6c\uac04(\uc5f4\ub9b0\uad6c\uac04, open interval) : \\((a,b)\\) \ub97c \uc5f4\ub9b0\uad6c\uac04\uc774\ub77c \ud55c\ub2e4. \uc989, \\((a,b) = \\{x \\in \\mathbb{R} | a < x < b\\}\\) \uc774\ub2e4. \ud2b9\ud788 \uc2e4\uc218 \uc804\uccb4\uc758 \uc9d1\ud569\ub3c4 \ud558\ub098\uc758 \uad6c\uac04\uc73c\ub85c \ubcf4\uace0 \uac1c\uad6c\uac04 \\((-\\infty, \\infty)\\) \ub85c \ub098\ud0c0\ub0b8\ub2e4. Tip \\(\\infty\\) \ub294 \ud2b9\uc815\ud55c \uac12\uc774 \uc544\ub2c8\uace0 \"\ud55c\uc5c6\uc774 \ucee4\uc9c0\uace0 \uc788\ub294 \uc0c1\ud0dc\" \ub97c \ub098\ud0c0\ub0b4\uae30 \ub54c\ubb38\uc5d0 \\([-\\infty, \\infty]\\) \ub098 \\((a, \\infty]\\) \uc640 \uac19\uc774 \\(\\infty\\) \ub97c \ud3d0\uad6c\uac04\uacfc \uc5ee\uc9c0 \uc54a\ub294\ub2e4. \uc2e4\uc218 \\(x\\) \uc758 \uac12\uc774 \ud55c\uc5c6\uc774 \ucee4\uc9c8 \uc218\ub294 \uc788\uc5b4\ub3c4 \\(x = \\infty\\) \ub77c\ub294 \uac12\uc744 \uac00\uc9c8 \uc218\ub294 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4. References : \uc800\uc758 \ube14\ub85c\uadf8 \u314e\u314e - \ubca1\ud130 \uc800\uc758 \ube14\ub85c\uadf8 \u314e\u314e - \ud574\uc11d \u300aFaceNet: A Unified Embedding for Face Recognition and Clustering\u300b \u00b6 Abstract \u00b6 \uc6b0\ub9ac\ub294 \uc774 \ub17c\ubb38\uc5d0\uc11c \uc5bc\uad74 \uc720\uc0ac\ub3c4\uac00 \uac70\ub9ac\uc778 \uc720\ud074\ub9ac\ub4dc \uacf5\uac04\uc73c\ub85c \uc5bc\uad74 \uc0ac\uc9c4\uc744 \uc0ac\uc0c1(mapping)\uc2dc\ud0a4\ub294 \uac83\uc744 \ud559\uc2b5\ud558\ub294 FaceNet \uc774\ub77c\ub294 \uc2dc\uc2a4\ud15c\uc744 \uc18c\uac1c\ud55c\ub2e4. \uc5bc\uad74 \uc720\uc0ac\ub3c4\uac00 \uac70\ub9ac\uc778 \uc720\ud074\ub9ac\ub4dc \uacf5\uac04\uc774 \uc0dd\uc131\ub418\uba74 \uc5bc\uad74 \uac80\uc99d( \uac19\uc740 \uc0ac\ub78c\uc778\uac00? ), \uc5bc\uad74 \ud655\uc778( \ub204\uad6c\uc778\uac00? ), \uc5bc\uad74 \uad70\uc9d1\ud654( \ube44\uc2b7\ud55c \uc5bc\uad74\uc744 \ubaa8\uc73c\ub294 \uac83 )\uac00 \ub9e4\uc6b0 \uc26c\uc6cc\uc9c4\ub2e4. \uc5bc\uad74 \uc720\uc0ac\ub3c4\uac00 \uac70\ub9ac\uc778 \uc720\ud074\ub9ac\ub4dc \uacf5\uac04\uc744 \ub9cc\ub4e4\uae30 \uc704\ud558\uc5ec \uc6b0\ub9ac\ub294 deep convolutional network \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc911\uac04\uce35\uc744 \ucd5c\uc801\ud654(\ud559\uc2b5)\ud558\ub294 \uac83\uc774 \uc544\ub2cc embedding(\uc5bc\uad74\uc5d0\uc11c \ucd94\ucd9c\ud55c \ubca1\ud130) \uc790\uccb4\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \ucd5c\uc801\ud654(\ud559\uc2b5)\uc2dc\ucf30\ub2e4. \ud559\uc2b5\uc744 \uc704\ud558\uc5ec triplets \uc744 \uc0ac\uc6a9\ud558\uc600\ub2e4. \uc774\ub85c\uc368 \uc6b0\ub9ac\ub294 \uc5bc\uad74 \ud558\ub098\ub2f9 \ub2e8\uc9c0 128 \ubc14\uc774\ud2b8\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud604\uc874\ud558\ub294 \uc5bc\uad74 \uc778\uc2dd \uc2dc\uc2a4\ud15c \uc911 \ucd5c\uace0\uc758 \uc131\ub2a5\uc744 \uc774\ub04c\uc5b4\ub0bc \uc218 \uc788\uc5c8\ub2e4. \uc6b0\ub9ac\ub294 \ub610\ud55c harmonic embeddings \uacfc harmonic triplet loss \ub77c\ub294 \ub610 \ub2e4\ub978 \uc5bc\uad74 embedding \ubc29\ubc95\uc744 \uc18c\uac1c\ud55c\ub2e4. \uc774 \ub450 embedding \ubc29\uc2dd\uc744 \uc11c\ub85c \ube44\uad50\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. 1. Introduction \u00b6 \uc6b0\ub9ac\ub294 deep convolutional network \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc774\ubbf8\uc9c0\uc758 \uc720\ud074\ub9ac\ub4dc embedding \uc744 \ud559\uc2b5\ud55c\ub2e4. \uc774 network \ub294 \uc5bc\uad74 \uc720\uc0ac\ub3c4\uac00 \uace7 \\(L_2\\) \uac70\ub9ac\uc778 embedding \uacf5\uac04\uc744 \ud559\uc2b5\ud558\uac8c \ub41c\ub2e4. Figure 1. Illumination and Pose invariance ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) \uc704 \uadf8\ub9bc\uc744 \ubcf4\uc790. \uc218\ud3c9\uc73c\ub85c\ub294 \uac19\uc740 \uc778\ubb3c\uc758 \uc0ac\uc9c4\uc774\uace0 \uc218\uc9c1\uc73c\ub85c\ub294 \ub2e4\ub978 \uc778\ubb3c\uc758 \uc0ac\uc9c4\uc774\ub2e4. \ub610\ud55c \uc218\ud3c9\uc73c\ub85c\ub294 \ub2e4\ub978 \ud3ec\uc988\ub97c \ucde8\ud558\uace0 \uc788\ub2e4. \uc774\ub54c \ub450 \uc0ac\uc9c4\uac04\uc758 \uc720\uc0ac\ub3c4, \uc989 \uac70\ub9ac\uac00 \\(1.04, 1.22, 1.33, \\dots\\) \ub4f1\uc73c\ub85c \uacc4\uc0b0\ub41c \uac83\uc774\ub2e4. \uc774 \uac12\uc740 \ud3d0\uad6c\uac04 \\([0, 4]\\) \uc5d0 \uc874\uc7ac\ud55c\ub2e4. \uac12\uc774 \\(0.0\\) \uc774\uba74 \uc5bc\uad74\uc774 \ub611\uac19\uc74c\uc744 \uc758\ubbf8\ud558\uace0 \uac12\uc774 \\(4.0\\) \uc774\uba74 \uc5bc\uad74\uc774 \ub2e4\ub974\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc774 \uacf5\uac04\uc774 \uc0dd\uc131\ub418\uba74 \uc5bc\uad74 \uc778\uc2dd \uc2dc\uc2a4\ud15c\uc758 \uace0\uc804\uc801\uc778 \ubb38\uc81c\ub4e4\uc758 \ud574\uacb0\uc774 \ub9e4\uc6b0 \uc26c\uc6cc\uc9c4\ub2e4. \uc5bc\uad74 \uac80\uc99d\uc740 \ub2e8\uc9c0 \ub450 embedding \uac04\uc758 thresholding \uc744 \uc815\ud558\ub294 \uac83\uc73c\ub85c \uadc0\uacb0\ub418\uace0, \uc5bc\uad74 \ud655\uc778\uc740 k-NN \ubd84\ub958\uae30\uc758 \ubb38\uc81c\uac00 \ub418\uba70, \uc5bc\uad74 \uad70\uc9d1\ud654\ub294 k-mean \ub098 agglomerative clustering \uac19\uc740 off-the-shelf \uae30\uc220\ub85c \ud574\uacb0\ud560 \uc218 \uc788\ub2e4. Example Figure 1. \uc5d0\uc11c thresholding \uc744 \\(1.1\\) \ub85c \ub450\uba74 \ubaa8\ub4e0 \uc5bc\uad74 \uc0ac\uc9c4\uc744 \uc798 \ubd84\ub958\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. FaceNet \uacfc \uc9c0\uae08\uae4c\uc9c0\uc758 \uc5bc\uad74 \uc778\uc2dd \uc811\uadfc\ubc95\uacfc\uc758 \ucc28\uc774 \uc9c0\uae08\uae4c\uc9c0\uc758 \uc5bc\uad74 \uc778\uc2dd \uc811\uadfc\ubc95\uc740 \uc2e0\uacbd\ub9dd\uc758 \uc911\uac04\uce35\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \uac83\uc774\uc5c8\ub2e4. \uc774 \ubc29\uc2dd\uc758 \ub2e8\uc810\uc740 \uac04\uc811\uc801\uc774\uace0, \ube44\ud6a8\uc728\uc801\uc774\ub77c\ub294 \uac83\uc774\ub2e4. \uc774 \ubc29\uc2dd\uc5d0\uc11c\ub294 \uc911\uac04\uce35\uc774 \uc0c8\ub85c\uc6b4 \uc5bc\uad74\ub3c4 \uc798 \uc778\uc2dd\ud558\uae38 \ubc14\ub77c\ub294 \uac83\uc774\uc5c8\ub2e4. \uadf8\ub9ac\uace0 \uc5bc\uad74\uc744 \ub098\ud0c0\ub0b4\ub294 \uc0ac\uc774\uc988\uac00 \uac70\uc758 1000 \ucc28\uc6d0 \uc815\ub3c4\ub85c \ub9e4\uc6b0 \ucef8\ub2e4. \ubc18\uba74 FaceNet \uc740 LMNN \uc744 \uae30\ubc18\uc73c\ub85c \ud55c triplet-based \uc190\uc2e4\ud568\uc218\ub97c \ud1b5\ud558\uc5ec \uc5bc\uad74\uc744 128 \ucc28\uc6d0\uc73c\ub85c embedding \uc2dc\ud0a8\ub2e4. triplet \uc740 \ub9e4\uce6d\ub418\ub294 \uc5bc\uad74 \uc378\ub124\uc77c\uacfc \ub9e4\uce6d\ub418\uc9c0 \uc54a\ub294 \uc5bc\uad74 \uc378\ub124\uc77c, \uadf8\ub9ac\uace0 positive pair \ub97c distance margin \uc73c\ub85c negative \ub85c\ubd80\ud130 \ubd84\ub9ac\uc2dc\ud0a4\uae30 \uc704\ud55c \uc190\uc2e4\uac12\uc73c\ub85c \uad6c\uc131\ub41c\ub2e4. \uc378\ub124\uc77c\uc774\ub780 \uc5bc\uad74 \uc601\uc5ed\ub9cc \uc798\ub824\uc9c4 \uc0ac\uc9c4\uc744 \ub73b\ud55c\ub2e4. \uc774 \uc378\ub124\uc77c\uc740 \uc2a4\ucf00\uc77c \uc870\uc815\uacfc \uc774\ubbf8\uc9c0 \ubcc0\ud658\uc774 \uc774\ub8e8\uc5b4\uc9c8 \uc218\ub3c4 \uc788\ub2e4. triplets \uc120\uc815 \uc5b4\ub5a4 triplets \uc744 \uc0ac\uc6a9\ud560\uc9c0 \uc120\uc815\ud558\ub294 \uac83\uc740 \uc88b\uc740 \uc131\ub2a5\uc744 \uc704\ud558\uc5ec \ub9e4\uc6b0 \uc911\uc694\ud558\ub2e4. Curriculum learning [1] \uc5d0\uc11c \ucc29\uc548\ud558\uc5ec \uc6b0\ub9ac\ub294 triplets \uc758 \uc5b4\ub824\uc6c0\uc744 \uc9c0\uc18d\uc801\uc73c\ub85c \uc99d\uac00\uc2dc\ud0a4\ub294 online negative exemplar mining \uc804\ub7b5\uc744 \uc18c\uac1c\ud55c\ub2e4. \ub610\ud55c \uad70\uc9d1\ud654\uc758 \uc815\ud655\ub3c4\ub97c \ud5a5\uc0c1\uc2dc\ud0a4\uae30 \uc704\ud558\uc5ec \ud55c \uc0ac\ub78c\uc758 embeddings \uc744 \uc704\ud55c \uad6c\ud615 \uad70\uc9d1\ud654\ub97c \uc774\ub8e8\ub294 hard-positive mining \uae30\uc220\uc744 \uc18c\uac1c\ud55c\ub2e4. \uc774\ub85c\uc368 Figure 1. \uac19\uc740 \uc0ac\uc9c4\ub4e4\ub3c4 \uc798 \ubd84\ub958\ud560 \uc218 \uc788\ub2e4. \uc194\uc9c1\ud788 \uc774\uac78 \ubd84\ub958\ud558\ub294 \uac74 \uac81\ub098 \uc5b4\ub824\uc6b4 \ubb38\uc81c\uc778\ub370 \uc6b0\ub9ac\ub294 \ud574\ub0c8\ub2e4. \ub17c\ubb38 \uad6c\uc870 \uc124\uba85 \uba3c\uc800 2. \uc5d0\uc11c \uc774 \uc5f0\uad6c\ubd84\uc57c\uc640 \uad00\ub828\ub41c \ub17c\ubb38\ub4e4\uc744 \ub9ac\ubdf0\ud574\ubcf8\ub2e4. 3.1 \uc5d0\uc11c\ub294 triplet loss \ub97c \uc815\uc758\ud574\ubcf8\ub2e4. 3.2 \uc5d0\uc11c\ub294 \uc6b0\ub9ac\uc758 triplet \uc120\uc815 \ubc29\uc2dd\uacfc \ubaa8\ub378 \ud559\uc2b5 \uc808\ucc28\ub97c \uc124\uba85\ud55c\ub2e4. 3.3 \uc5d0\uc11c \ubaa8\ub378 \uad6c\uc870 \uc0ac\uc6a9\uc5d0 \ub300\ud558\uc5ec \uc124\uba85\ud55c\ub2e4. 4. \uacfc 5. \uc5d0\uc11c \uc6b0\ub9ac\uc758 \ubc29\uc2dd\uc73c\ub85c embedding \uc744 \ud55c \uac83\uc744 \uc815\ub7c9\uc801 \ubc29\uc2dd\uc73c\ub85c \uacb0\uacfc\ub97c \ub0b4\ubcf4\uace0, \uc815\uc131\uc801 \ubc29\uc2dd\uc73c\ub85c \uad70\uc9d1\ud654 \uacb0\uacfc\ub97c \ud655\uc778\ud574\ubcf8\ub2e4. 2. Related Work \u00b6 Deeply learned facerepresentations are sparse, selective, and robust [15] \uc640 Deepface:Closing the gap to human-level performance in face verifica-tion [17] \uc640 \ube44\uc2b7\ud558\uac8c \uc6b0\ub9ac\ub3c4 \uc21c\uc218\ud558\uac8c data driven method \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc5bc\uad74 \uc0ac\uc9c4\uc758 \ud53d\uc140\ub85c\ubd80\ud130 \uadf8\uac83\uc744 \ud2b9\uc815\ud560 \uc218 \uc788\ub294 \ud2b9\uc9d5\uc744 \ud559\uc2b5\ud588\ub2e4. \uc6b0\ub9ac\ub294 \ub77c\ubca8\ub9c1 \ub41c \uc5bc\uad74 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uac00\ubcc0\ud558\ub294 \ud3ec\uc988, \uba85\ub3c4, \ub2e4\uc591\ud55c \uc870\uac74\uc5d0\uc11c \ubd88\ubcc0\ud558\ub294 \ud2b9\uc131\uc744 \uc5bb\uc5c8\ub2e4. \ubcf8 \ub17c\ubb38\uc5d0\uc11c\ub294 \ucef4\ud4e8\ud130 \ube44\uc804\uc5d0\uc11c \uc88b\uc740 \uc131\uacfc\ub97c \ub0b4\uace0 \uc788\ub294 \ub450 \uac00\uc9c0 \uc2e0\uacbd\ub9dd \uad6c\uc870\ub97c \uc124\uba85\ud55c\ub2e4. \ub450 \uac1c \ub2e4 deep convolutional network \uc774\ub2e4. \ud558\ub098\ub294 Backpropagation Applied to Handwritten Zip Code Recognition [8] \uc774\uace0 \ud558\ub098\ub294 Learningrepresentations by back-propagating errors [11] \uc774\ub2e4. \uccab\ubc88\uc9f8 \ubaa8\ub378\uc740 \uc5ec\ub7ec\uac1c\uc758 interleaved convolutional layers \uc640 non-linear activations \uacfc local response normalizations \uc640 max pooling layers \ub85c \uad6c\uc131\ub41c Visualizing and understandingconvolutional networks [22] \uc758 \ubaa8\ub378\uc744 \uae30\ubc18\uc73c\ub85c \ud55c\ub2e4. \uc6b0\ub9ac\ub294 Network in network [9] \uc5d0\uc11c \ucc29\uc548\ud558\uc5ec \uba87\uba87\uc758 \\(1 \\times 1 \\times d\\) convolutional layers \ub97c \ucd94\uac00\ud588\ub2e4. \ub450\ubc88\uc9f8 \ubaa8\ub378\uc740 ImageNet 2014 \uc5d0\uc11c \uc0ac\uc6a9\ub41c Szegedy \uc758 Inception model Going deeper with convolutions [16] \uc744 \uae30\ubc18\uc73c\ub85c \ud55c\ub2e4. \uc774 \ubaa8\ub378\uc740 \ubcd1\ud589\ud574\uc11c \uc2e4\ud589\ub418\ub294 \uba87 \uac1c\uc758 \ub2e4\ub978 convolutional \uacfc pooling layers \uac00 \uc11e\uc778 layers \ub97c \uc0ac\uc6a9\ud558\uace0 \uadf8\uac83\ub4e4\uc758 \ucd9c\ub825\uc744 \ud569\uce5c\ub2e4. 3. Method \u00b6 Figure 2. \ubaa8\ub378 \uad6c\uc870. FaceNet \uc740 \ubc30\uce58 \uc785\ub825\uce35, deep CNN \uce35, embedding \uc744 \ucd9c\ub825\ud558\ub294 \\(L_2\\) normalization \uce35, triplet loss \uce35\uc73c\ub85c \uad6c\uc131\ub41c\ub2e4. ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) Figure 3. Triplet Loss \ub294 \uac19\uc740 \uc2e0\uc6d0\uc744 \uac00\uc9c4 anchor \uc640 positive \uc758 \uac70\ub9ac\ub97c \ucd5c\uc18c\ud654 \uc2dc\ud0a4\uace0 \ub2e4\ub978 \uc2e0\uc6d0\uc744 \uac00\uc9c4 anchor \uc640 negative \uc758 \uac70\ub9ac\ub97c \ucd5c\ub300\ud654 \uc2dc\ud0a8\ub2e4. ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) FaceNet \uc740 deep convolutional network \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc6b0\ub9ac\ub294 \ub450 \uac00\uc9c0 \ud575\uc2ec \uad6c\uc870\ub97c \ub17c\uc758\ud560 \uac83\uc774\ub2e4. \uccab\uc9f8\ub294 Visualizing and understandingconvolutional networks [22] \uc2a4\ud0c0\uc77c\uc758 networks \uc774\uace0 \ub458\uc9f8\ub294 Going deeper with convolutions [16] \uc758 Inception \ud0c0\uc785\uc758 networks \uc774\ub2e4. \uc774 networks \uc758 \uc790\uc138\ud55c \uc124\uba85\uc740 3.3 \uc5d0\uc11c \ud55c\ub2e4. \uc774 \ubaa8\ub378\uc744 Figure 2. \uc5d0\uc11c \ud68c\uc0c9\ubc15\uc2a4\ub85c \ud45c\ud604\ud588\ub2e4. Figure 2. \uc5d0\uc11c \ubcfc \uc218 \uc788\ub4ef \uac00\uc7a5 \uc911\uc694\ud55c \uac83\uc740 \uc5b4\ub5bb\uac8c \uc5bc\uad74 \uc0ac\uc9c4\uc744 \uadf8 \ud2b9\uc9d5\uc744 \ub300\ud45c\ud560 \uc218 \uc788\ub294 \ubca1\ud130\ub85c \ubcc0\ud658\ud558\ub290\ub0d0\uc774\ub2e4. \uc989, \uc6b0\ub9ac\ub294 \uc870\uac74(\ud3ec\uc988, \uba85\ub3c4 \ub4f1)\uc5d0 \uad00\uacc4\uc5c6\uc774 \ubaa8\ub4e0 \uc5bc\uad74 \uc0ac\uc9c4\uc5d0 \ub300\ud558\uc5ec \uac19\uc740 \uc2e0\uc6d0\uc758 \\(L_2\\) \uac70\ub9ac\ub294 \uc791\uace0 \ub2e4\ub978 \uc2e0\uc6d0\uc758 \\(L_2\\) \uac70\ub9ac\ub294 \uba3c feature space \\(\\mathbb{R}^{d}\\) \uc5d0 \uc5bc\uad74 \uc0ac\uc9c4 \\(x\\) \uc744 \uc0ac\uc0c1\uc2dc\ud0a4\ub294 \ud568\uc218 \\(f(x)\\) \uc744 \ucc3e\uc544\ubcfc \uac83\uc774\ub2e4. \uc5ec\uae30\uc5d0\uc11c \ub2e4\ub978 \uc190\uc2e4 \ud568\uc218\uc640 triplet \uc744 \ube44\uad50\ud574\ubcf4\uc9c0\ub294 \uc54a\uaca0\uc9c0\ub9cc, \uadf8\ub798\ub3c4 triplet \uc774 \uc5bc\uad74 \uac80\uc99d\uc5d0\ub294 \uac00\uc7a5 \uc88b\uc744 \uac83\uc774\ub2e4. Deep learning facerepresentation by joint identification-verification [14] \uc5d0\uc11c\uc758 \uc190\uc2e4\ud568\uc218\ub294 \ud55c \uc2e0\uc6d0\uc758 \ubaa8\ub4e0 \uc5bc\uad74\uc744 embedding \uacf5\uac04\uc758 \ud55c \uc810\uc5d0 \uc0ac\uc601\uc2dc\ud0a8\ub2e4. \uc774\uac83\uc740 \uc5b5\uc9c0\ub85c \ub2e4\ub978 \uc2e0\uc6d0\uacfc\uc758 \uac70\ub9ac\uacfc \ucc28\ubcc4\uc131\uc744 \uac15\ud654\ud558\uba74\uc11c\ub3c4 \ud55c \uc2e0\uc6d0\uc758 \uc5bc\uad74\ub4e4\uc774 manifold \uc5d0 \uc788\uac8c \ud55c\ub2e4. 3.1. Triplet Loss embedding \uc740 \uc774\ubbf8\uc9c0 \\(x\\) \uc640 \uc720\ud074\ub9ac\ub4dc \uacf5\uac04 \\(\\mathbb{R}\\) \uc5d0 \ub300\ud558\uc5ec \\(f: x \\to \\mathbb{R}^{d}\\) \uc73c\ub85c \ud45c\ud604\ub41c\ub2e4. \ub610\ud55c \uc6b0\ub9ac\ub294 \uc774 embedding \uc744 \\(\\|f(x)\\| _{2} = 1\\) \uac19\uc740 \\(d\\) \ucc28\uc6d0 \ucd08\uad6c(hypersphere) \ub85c \uc81c\ud55c\uc2dc\ud0a8\ub2e4. \uc774 loss \ub294 Distance metric learning for large margin nearest neighbor classification [19] \uc5d0\uc11c nearest-neighbor classification \uc5d0\uc11c \ucc29\uc548\ud588\ub2e4. \uc774\uc81c \uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 \uac83\uc740 \uc5b4\ub5a4 \uc0ac\ub78c \uc0ac\uc9c4 \\(x _{i}^{a}\\) ( anchor ) \uc640 \uac19\uc740 \uc0ac\ub78c \uc0ac\uc9c4 \\(x _{i}^{p}\\) ( positive ) \uc758 \uac70\ub9ac\uac00 \ub2e4\ub978 \uc0ac\ub78c \uc0ac\uc9c4 \\(x _{i}^{n}\\) ( negative ) \uacfc\uc758 \uac70\ub9ac\ubcf4\ub2e4 \uac00\uae4c\uc6b4 \uac83\uc774\ub2e4. \uc774\uac83\uc744 Figure 3. \uc774 \ubcf4\uc5ec\uc900\ub2e4. \ub2e4\uc2dc\ub9d0\ud574 \uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 \uac83\uc740 positive \uc640 negative \uc0ac\uc774\uc758 \uc5ec\ubc31 \\(\\alpha \\in \\R\\) \uc640 \uc9d1\ud569\uc758 \ud06c\uae30 \\(N\\) \uc744 \uac16\ub294 \ubaa8\ub4e0 positive \uc640 negative \uc758 triplets \uc9d1\ud569 \\(\\mathcal{T}\\) \uc5d0 \ub300\ud558\uc5ec \\[ \\forall (f(x_i ^{a}), f(x_i ^{p}), f(x_i ^{n})) \\in \\mathcal{T} \\tag{1}\\] \\[ \\|f(x _{i} ^{a}) - f(x _{i}^{p})\\| ^{2} _{2} + \\alpha < \\| f(x _ i ^{a}) - f(x _i ^{n})\\| ^{2}_{2} \\tag{2}\\] \uc774\ub2e4. Note \ubaa8\ub4e0 triplets ( \\(\\forall (f(x_i ^{a}), f(x_i ^{p}), f(x_i ^{n})) \\in \\mathcal{T}\\) ) \uc5d0 \ub300\ud558\uc5ec anchor \uc640 positive \uc758 \uac70\ub9ac( \\(\\|f(x _{i} ^{a}) - f(x _{i}^{p})\\| ^{2} _{2}\\) )\uac00 anchor \uc640 negative \uc758 \uac70\ub9ac( \\(\\| f(x _ i ^{a}) - f(x _i ^{n})\\| ^{2}_{2}\\) )\ubcf4\ub2e4 \uc791\uc544\uc57c \ud55c\ub2e4\ub294 \uac83\uc774\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc6b0\ub9ac\ub294 anchor \uc640 positive \uc640\uc758 \uac70\ub9ac\uac00 \uba40\uba74 loss \uac00 \uc0c1\uc2b9\ud558\ub3c4\ub85d, \uadf8\ub9ac\uace0 anchor \uc640 negative \uc640\uc758 \uac70\ub9ac\uac00 \uba40\uba74 loss \uac00 \uac10\uc18c\ud558\ub3c4\ub85d loss \ud568\uc218\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ud560 \uc218 \uc788\ub2e4. \\[ \\sum_{i}^{N} \\bigg [\\|f(x _{i} ^{a}) - f(x _{i}^{p})\\| ^{2} _{2} - \\| f(x _ i ^{a}) - f(x _i ^{n})\\| ^{2}_{2} + \\alpha \\bigg ] \\tag{3} \\] \uac00\ub2a5\ud55c \ubaa8\ub4e0 triplets \uc744 \uc0dd\uc131\ud558\ub294 \uac83\uc740 (2) \uac19\uc740 \uc870\uac74\uc744 \uc27d\uac8c \ucda9\uc871\uc2dc\ud0a8\ub2e4. \uadf8\ub7f0\ub370 \uc774\ub7f0 triplets \uc740 \ub290\ub9ac\uac8c \uc218\ub834\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c hard triplets \uc744 \uc120\ud0dd\ud558\ub294 \uac83\uc740 \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ub192\uc774\ub294 \uac83\uc5d0 \uc788\uc5b4 \uc911\uc694\ud558\ub2e4. triplet \uc120\ud0dd\ud558\ub294 \uac83\uc5d0 \uad00\ud558\uc5ec \ub2e4\uc74c \uc139\uc158\uc5d0\uc11c \ub17c\uc758\ud574\ubcf4\uc790. 3.2. Triplet Selection \ube60\ub974\uac8c \uc218\ub834\uc2dc\ud0a4\uae30 \uc704\ud558\uc5ec \\(\\text{argmax} _{x_i ^{p}}\\| f(x_i ^{a} ) - f(x _i ^{p})\\| ^{2}_{2}\\) \uc989, hard positive \\(x_i ^{p}\\) \uc640 \\(\\text{argmin} _{x_i ^{n}}\\| f(x_i ^{a}) - f(x _i ^{n})\\| ^{2}_{2}\\) \uc989, hard negative \\(x_i ^{n}\\) \ub97c \uc120\ud0dd\ud558\ub294 \uac83\uc774 \uc911\uc694\ud558\ub2e4. \uadf8\ub7f0\ub370 \ubaa8\ub4e0 \ud559\uc2b5 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec \\(\\text{argmin} , \\text{argmax}\\) \ub97c \uacc4\uc0b0\ud558\ub294 \uac83\uc740 \uc5b4\ub835\ub2e4. \ub610\ud55c \ub77c\ubca8\ub9c1\uc774 \uc798\ubabb\ub41c \ub370\uc774\ud130\uc640 \ud615\ud3b8\uc5c6\ub294 \uc774\ubbf8\uc9c0\uac00 hard positive \uc640 hard negative \uac00 \ub420 \uc218\ub3c4 \uc788\ub2e4. \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud558\uc5ec \ub2e4\uc74c \ub450 \uc120\ud0dd\uc744 \ud560 \uc218 \uc788\ub2e4. \uac00\uc7a5 \ucd5c\uc2e0 network checkpoint \ub97c \uc0ac\uc6a9\ud558\uba70 \ub370\uc774\ud130\uc758 \ubd80\ubd84\uc9d1\ud569\uc5d0 \ub300\ud558\uc5ec \\(\\text{argmin} , \\text{argmax}\\) \ub97c \uacc4\uc0b0\ud558\uba70 \ub9e4 \\(n\\) \ub2e8\uacc4\ub9c8\ub2e4 triplets offline \uc744 \uc0dd\uc131\ud55c\ub2e4. mini-batch \uc5d0\uc11c hard positive/negative \ub97c \ud0dd\ud568\uc73c\ub85c\uc368 triplets online \uc744 \uc0dd\uc131\ud55c\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 triplets online \uc0dd\uc131\uc744 \ud574\ubcf4\uace0 \uba87 \ucc9c\uac1c\uc758 exemplars \uc21c\uc11c\uc758 mini-batch \uc18d\uc5d0\uc11c\ub9cc \\(\\text{argmin} ,\\text{argmax}\\) \ub97c \uacc4\uc0b0\ud574\ubcf8\ub2e4. anchor \uc640 positive \uc758 \uac70\ub9ac\uac00 \uc720\uc758\ubbf8\ud558\uac8c \uacc4\uc0b0\ub418\uae30 \uc704\ud558\uc5ec \uac01 mini-batch \ub9c8\ub2e4 \ucd5c\uc18c\ud55c\uc758 exemplars \uac00 \uc874\uc7ac\ud574\uc57c \ud55c\ub2e4. \uc6b0\ub9ac\ub294 \uc2e4\ud5d8\ud558\uba74\uc11c mini-batch \ub2f9 \uc2e0\uc6d0 \ub2f9 \uc57d 40 \uac1c \uc815\ub3c4\uc758 \uc5bc\uad74\uc774 \uc120\ud0dd\ub418\ub3c4\ub85d \ud6c8\ub828 \ub370\uc774\ud130\ub97c \ucd94\ucd9c\ud588\ub2e4. \ub610 \uc5ec\uae30\uc5d0 \ubb34\uc791\uc704\ub85c \ucd94\ucd9c\ub41c negative \uc5bc\uad74\ub4e4\uc774 \uac01 mini-batch \uc5d0 \ub4e4\uc5b4\uac00\ub3c4\ub85d \ud588\ub2e4. hardest positive \ub97c \ubf51\ub294 \uac83 \ub300\uc2e0 \uc6b0\ub9ac\ub294 mini-batch \uc18d\uc5d0\uc11c hard negative \ub97c \uc120\ud0dd\ud558\uba74\uc11c all anchor-positive \uc9dd\uc744 \uc0ac\uc6a9\ud588\ub2e4. hard anchor-positive \uc9dd\uacfc all anchor-positive \ub97c \ub098\ub780\ud788 \ube44\uad50\ud574\ubcf4\uc9c0\ub294 \uc54a\uc558\uc9c0\ub9cc \uc6b0\ub9ac\ub294 \uc2e4\ud5d8\ud558\uba74\uc11c all anchor-positive \uac00 \uc880 \ub354 \uc548\uc815\uc801\uc774\uace0 \ud559\uc2b5 \uc2dc \uc57d\uac04 \ub354 \ube60\ub974\uac8c \uc218\ub834\ud558\ub294 \uac83\uc744 \ubc1c\uacac\ud588\ub2e4. \ub610 \uc6b0\ub9ac\ub294 triplets \uc758 offline \uc0dd\uc131\uc744 online \uc0dd\uc131\uacfc \uc5f0\uacb0\uc2dc\ud0a4\ub294 \uc2e4\ud5d8\ub3c4 \ud588\ub294\ub370 \uc774\ub807\uac8c \ud558\uba74 batch \ud06c\uae30\ub97c \uc880 \ub354 \uc904\uc77c \uc218 \uc788\ub294 \uac83 \uac19\uc558\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc740 \uc544\uc9c1 \ud655\uc2e4\ud558\uc9c0 \uc54a\ub2e4. hardest negatives \ub97c \ud0dd\ud55c\ub2e4\uba74 \ud6c8\ub828 \ucd08\uae30\uc5d0 \ub85c\uceec \ucd5c\uc18c\uac12\ub4e4\uc774 \uc798\ubabb\ub420 \uc218 \uc788\uace0, \ud2b9\ud788 \\(f(x) = 0\\) \uc774 \ub418\ub294 \ub4f1 \ubaa8\ub378\uc774 \ubd95\uad34\ub420 \uc218\ub3c4 \uc788\ub2e4. \uc774\uac83\uc744 \uc644\ud654\ud558\uae30 \uc704\ud558\uc5ec \\[ \\|f(x_i ^{a}) - f(x_i ^{p})\\|^{2}_{2}<\\|f(x_i ^{a})- f(x_i ^{n})\\| ^{2}_2 \\tag{4} \\] \uc778 \\(x_i ^{n}\\) \uc744 \ud0dd\ud560 \uc218 \uc788\ub2e4. \uc6b0\ub9ac\ub294 \uc774\ub7f0 negative exemplars \ub97c semi-hard \ub77c\uace0 \ubd88\ub800\ub2e4. \uc774 negatives \ub4e4\uc740 \uc5ec\ubc31 \\(\\alpha\\) \ub0b4\ubd80\uc5d0 \uc788\ub2e4. \ub2e4\uc2dc \ub9d0\ud558\uc9c0\ub9cc \ube60\ub978 \uc218\ub834\uc774 \uc911\uc694\ud558\uae30 \ub54c\ubb38\uc5d0 SGD \uc758 \uc131\ub2a5\uc744 \ub192\uc774\uae30 \uc704\ud558\uc5ec \uc6b0\ub9ac\ub294 \ud55c\ud3b8\uc73c\ub85c\ub294 mini-batch \uc0ac\uc774\uc988\ub97c \uc791\uac8c \ud588\ub2e4.(The general inefficiencyof batch training for gradient descent learning. [20]) \ub2e4\ub978 \ud55c\ud3b8\uc73c\ub85c \uad6c\ud604 details \ub294 \uc218\uc2ed\uc5d0\uc11c \uc218\ubc31\uc758 exemplars \uc758 \ubc30\uce58\ub97c \ub354\uc6b1 \ud6a8\uc728\uc801\uc73c\ub85c \ub9cc\ub4e4\uc5c8\ub2e4. \uadf8\ub7ec\ub098 \ubc30\uce58 \uc0ac\uc774\uc988\uc5d0 \ub300\ud55c \uc8fc\ub41c \uc81c\uc57d\uc740 mini-batch \uc5d0\uc11c \uc5b4\ub5bb\uac8c hard triplets \uc744 \ud0dd\ud558\ub290\ub0d0 \uc774\ub2e4. \ub300\ubd80\ubd84\uc758 \uc2e4\ud5d8\uc5d0\uc11c \uc6b0\ub9ac\ub294 1800 \uc5ec\uac1c exemplar \uc758 \ubc30\uce58 \uc0ac\uc774\uc988\ub97c \uc0ac\uc6a9\ud588\ub2e4. 3.3. Deep Convolutional Networks \uc6b0\ub9ac\ub294 \ubaa8\ub4e0 \uc2e4\ud5d8\uc5d0\uc11c SGD ( Backpropagation Applied to Handwritten Zip Code Recognition [8] , Learningrepresentations by back-propagating errors [11] ) \uc640 AdaGrad ( Adaptive subgradientmethods for online learning and stochastic optimization [5] ) \ub97c \uc0ac\uc6a9\ud558\ub294 \uc5ed\uc804\ud30c\uc640 CNN \uc73c\ub85c \ud559\uc2b5\uc744 \uc9c4\ud589\ud588\ub2e4. \ub300\ubd80\ubd84\uc758 \uc2e4\ud5d8\uc5d0\uc11c \uc6b0\ub9ac\ub294 \uc5ec\ubc31\uc744 \\(\\alpha = 0.2\\) \ub85c \uc124\uc815\ud558\uace0, \ud559\uc2b5\ub960\uc744 \\(0.05\\) \ub85c \uc124\uc815\ud558\uc5ec \ud559\uc2b5\uc744 \uc2dc\uc791\ud588\uace0 \ubaa8\ub378\uc744 \uc644\uc131\ud558\uae30 \uc704\ud558\uc5ec \ud559\uc2b5\ub960\uc744 \ub0ae\ucdc4\ub2e4. \ucc98\uc74c\uc5d0\ub294 Going deeper with convolutions [16] \uacfc \ube44\uc2b7\ud558\uac8c \ubaa8\ub378\uc744 \ubb34\uc791\uc704\ub85c \ucd08\uae30\ud654\uc2dc\ucf30\uace0 CPU cluster \uc5d0\uc11c 1000~2000 \uc2dc\uac04\ub3d9\uc548 \ud559\uc2b5\uc2dc\ucf30\ub2e4. 500\uc2dc\uac04\uc774 \uc9c0\ub098\uc790 \uc190\uc2e4 \uac10\uc18c\uc640 \uc815\ud655\ub3c4 \uc0c1\uc2b9\uc774 \uc0c1\ub2f9\ud788 \ub290\ub824\uc84c\ub2e4. \ud558\uc9c0\ub9cc \ud559\uc2b5\uc744 \ub354 \uc9c4\ud589\uc2dc\ud0a4\uc790 \uc131\ub2a5\uc774 \ub208\uc5d0 \ub744\uac8c \uc0c1\uc2b9\ud588\ub2e4. \uc6b0\ub9ac\ub294 \ub450 \uc885\ub958\uc758 \uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\uba70 \uadf8 \ub458\uc758 trade-off \ub97c \uc870\uc0ac\ud588\ub2e4. \uc774\ub4e4\uc758 \uc2e4\uc9c8\uc801\uc778 \ucc28\uc774\ub294 \ud30c\ub77c\ubbf8\ud130\uc640 FLOPS \uc758 \ucc28\uc774\uc5d0 \uc788\ub2e4. \ucd5c\uc801\uc758 \ubaa8\ub378\uc740 \uc6a9\ub3c4\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c8 \uac83\uc774\ub2e4. \uac00\ub839 \ub370\uc774\ud130\uc13c\ud130\uc5d0\uc11c\ub294 \ub9ce\uc740 \ud30c\ub77c\ubbf8\ud130\ub97c \ub458 \uc218 \uc788\uace0 \ub9ce\uc740 \uc218\uc758 FLOPS \uac00 \ud544\uc694\ud560 \uac83\uc774\uc9c0\ub9cc, \ud578\ub4dc\ud3f0\uc5d0\uc11c \ub3cc\ub9b4\ub77c\uba74 \uc801\uc740 \ud30c\ub77c\ubbf8\ud130\uac00 \uc788\uc5b4\uc57c \uba54\ubaa8\ub9ac \uc18c\ubaa8\ub97c \uc904\uc77c \uc218 \uc788\ub2e4. Note trade-off \ub294 \ub450 \uc0c1\ubc18\ub41c \ub300\uc0c1\uc5d0 \ub300\ud558\uc5ec \ud558\ub098\ub97c \ucde8\ud558\uba74 \ub2e4\ub978 \ud558\ub098\ub97c \uc783\uace0, \ub2e4\ub978 \ud558\ub098\ub97c \ucde8\ud558\uba74 \ub610 \ub2e4\ub978 \uac83\uc744 \uc783\uac8c \ub418\ub294 \uc0c1\ud669\uc744 \ud45c\ud604\ud558\ub294 \ub9d0\uc774\ub2e4. \uc6b0\ub9ac\uc758 \ubaa8\ub4e0 \ubaa8\ub378\uc740 rectified linear units(ReLU) \ub97c \ube44\uc120\ud615 \ud65c\uc131\ud654\ud568\uc218\ub85c \uc0ac\uc6a9\ud55c\ub2e4. Table 1. NN1. \uc774 \ud45c\ub294 Network in network [9] \uc5d0\uc11c \ucc29\uc548\ud55c \\(1 \\times 1\\) convolutions \uc744 \uae30\ubc18\uc758 Visualizing and understandingconvolutional networks [22] \uc758 \uad6c\uc870\ub97c \ubcf4\uc5ec\uc900\ub2e4. kernel \uc740 \\(\\text{rows} \\times \\text{cols}, \\text{stride}\\) \uc774\uace0 maxout Maxout networks [6] pooling size \ub294 \\(p=2\\) \uc774\ub2e4. ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) \uccab\ubc88\uc9f8 \ubaa8\ub378\uc740 Table 1. \uc5d0\uc11c \ubcfc \uc218 \uc788\ub4ef Visualizing and understandingconvolutional networks [22] \uad6c\uc870 \uc0ac\uc774\uc5d0 Network in network [9] \uc5d0\uc11c \uc81c\uc548\ub41c \uac83\ucc98\ub7fc \\(1 \\times 1 \\times d\\) convolutional \uce35\uc744 \ub354\ud55c\ub2e4. \uadf8\ub7ec\uba74 \\(22\\) \uce35 \ub124\ud2b8\uc6cc\ud06c\uac00 \ub41c\ub2e4. \uc774 \ub124\ud2b8\uc6cc\ud06c\ub294 \\(140M\\) \ud30c\ub77c\ubbf8\ud130\ub97c \uac16\uace0 \uc774\ubbf8\uc9c0 \ub2f9 \\(1.6B\\) FLOPS \uc744 \ud544\uc694\ub85c \ud55c\ub2e4. Table 2. NN2. NN2 Inception \uad6c\ud604\uc758 \uc138\ubd80\uc0ac\ud56d\uc774\ub2e4. \uc774 \ubaa8\ub378\uc740 Going deeper with convolutions [16] \uc5d0\uc11c \uc124\uba85\ud55c \uac83\uacfc \uac70\uc758 \ub611\uac19\ub2e4. \ub450 \uac00\uc9c0 \uc8fc\uc694 \ucc28\uc774\uc810\uc740 max pooling \ub300\uc2e0 \\(L_2\\) pooling \uc744 \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uac83\uc774\ub2e4. pooling \uc740 \ucd5c\uc885 \ud3c9\uade0 pooling \uc744 \uc81c\uc678\ud558\uace0 \ud56d\uc0c1 \\(3 \\times 3\\) \uc774\uace0 \uac01 Inception \ubaa8\ub4c8\uc758 convolutional \ubaa8\ub4c8\uacfc parallel \uc774\ub2e4. ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) \ub450\ubc88\uc9f8 \ubaa8\ub378\uc740 Going deeper with convolutions [16] \uc2a4\ud0c0\uc77c\uc758 Inception \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uc774 \ubaa8\ub378\uc740 \\(20\\) \ubc30 \uc801\uc740 \ud30c\ub77c\ubbf8\ud130(6.6M-7.5M)\ub97c \uc0ac\uc6a9\ud558\uace0 \\(5\\) \ubc30 \uc801\uc740 FLOPS(500M-1.6B) \ub97c \uac16\ub294\ub2e4. \uc774 \ubaa8\ub378\uc740 \ud544\ud130 depth \uc640 \uac1c\uc218\ub97c \ub300\ud3ed \uc904\uc5ec\uc11c \ud578\ub4dc\ud3f0\uc5d0\uc11c\ub3c4 \uad6c\ub3d9\ub420 \uc218 \uc788\ub2e4. NNS1 \uc740 26M \uac1c\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \uac16\uace0 \uc774\ubbf8\uc9c0 \ub2f9 220M FLOPS \ub9cc \ud544\uc694\ud558\ub2e4. NNS2 \ub294 4.3M \uac1c\uc758 \ud30c\ub77c\ubbf8\ud130\uc640 20M FLOPS \ub97c \uac16\ub294\ub2e4. Table2. \uc758 NN2 \ub294 \uc6b0\ub9ac\uc758 \uac00\uc7a5 \ud070 \ub124\ud2b8\uc6cc\ud06c\uc758 \uc138\ubd80\uc0ac\ud56d\uc774\ub2e4. Table 3. Network Architectures. \uc774 \ud45c\ub294 hold out test set \uc5d0\uc11c \uc6b0\ub9ac\uc758 \ubaa8\ub378 \uad6c\uc870\uc758 \uc131\ub2a5\uc744 \ube44\uad50\ud55c\ub2e4. Reported is the mean validation rate VAL at 10E-3 false accept rate. Also shown is the standard error of the mean across the five test splits. ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) Note Training Datasets\uacfc Test Datasets\ub97c \ubd84\ub9ac\ud558\uc5ec \ubd84\uc11d\ud558\ub294 \uc808\ucc28\ub97c holdout \uae30\ubc95\uc774\ub77c\uace0 \uc54c\ub824\uc838 \uc788\ub2e4. (\ucd9c\ucc98: https://mlearn.tistory.com/entry/Holdout [Machine Learning]) NN3 \ub294 \uad6c\uc870\uc0c1 \ub611\uac19\uc9c0\ub9cc \uc785\ub825 \uc0ac\uc774\uc988\ub97c \\(160 \\times 160\\) \uc73c\ub85c \uc904\uc600\ub2e4. NN4 \ub294 \ub2e8\uc9c0 \\(96 \\times 96\\) \uc758 \uc785\ub825 \uc0ac\uc774\uc988\ub97c \uac00\uc9c0\uba70 \uc774\ub85c\uc368 CPU \ubd80\ud558\ub97c \ud655 \uc904\uc77c \uc218 \uc788\ub2e4. NN2 \ub294 1.6B FLOPS \uc778\ub370 NN4 \ub294 \ub2e8\uc9c0 285M FLOPS \uac00 \ud544\uc694\ud558\ub2e4. \ub610\ud55c \uc785\ub825 \uc0ac\uc774\uc988\ub97c \uc904\uc774\uba74 higher layers \uc5d0\uc11c \\(5 \\times 5\\) convolutional \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc6b0\ub9ac\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \\(5 \\times 5\\) convolutional \uc744 \uc57d\uac04\uc758 \uc815\ud655\ub3c4 \uc190\uc2e4\uc744 \uac10\uc218\ud558\uba74\uc11c \uc804\uccb4\uc801\uc73c\ub85c \uc5c6\uc568 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \ubc1c\uacac\ud588\ub2e4. Figure 4. FLOPS \uc640 \uc815\ud655\ub3c4\uc758 trade-off \ub97c \ub2e4\uc591\ud55c \uc0ac\uc774\uc988\uc640 \uad6c\uc870\ub85c \uad6c\uc131\ub41c \ub2e4\ub978 \ubaa8\ub378\ub4e4\uc744 \uad11\ubc94\uc704\ud558\uac8c \ube44\uad50\ud574\ubcf8 \uac83\uc774\ub2e4. \ube68\uac1b\uac8c \ud45c\uc2dc\ud55c \uac83\uc774 \ubcf8 \ub17c\ubb38\uc5d0\uc11c \uc8fc\ub85c \ub2e4\ub8e8\uace0 \uc788\ub294 \ubaa8\ub378\ub4e4\uc774\ub2e4. ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) Figure 4. \uc5d0\uc11c \uc6b0\ub9ac\uc758 \ubaa8\ub4e0 \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ube44\uad50\ud55c \uacb0\uacfc\ub97c \ubcfc \uc218 \uc788\ub2e4. 4. Datasets and Evaluation \u00b6 \uc6b0\ub9ac\ub294 \ub124\uac00\uc9c0 \ub370\uc774\ud130\uc14b\uc5d0 \ub300\ud558\uc5ec \uc6b0\ub9ac\uc758 \ubc29\ubc95\uc744 \ud3c9\uac00\ud574\ubcf4\uc558\ub2e4. \uc8fc\uc5b4\uc9c4 \ub450 \uc5bc\uad74 \uc0ac\uc9c4\uc758 embedding \ubca1\ud130 \\(x_i,x_j\\) \uc758 \uac70\ub9ac \\(D(x_i, x_j)\\) \ub97c \uad6c\ud558\uc5ec \uc11c\ub85c \uac19\uc740\uc9c0 \ub2e4\ub978\uc9c0 \ubd84\ub958\ud574\ubd24\ub2e4. \uc774\ub54c \ubaa8\ub4e0 \uac19\uc740 \uc2e0\uc6d0\uc758 \uc5bc\uad74 \uc21c\uc11c\uc30d \\((i, j)\\) \uc758 \ubaa8\uc74c\uc744 \\(\\mathcal{P} _{\\text{same}}\\) \ub77c\uace0 \ud558\uace0 \ubaa8\ub4e0 \ub2e4\ub978 \uc2e0\uc6d0\uc758 \uc5bc\uad74 \uc21c\uc11c\uc30d\uc758 \ubaa8\uc74c\uc744 \\(\\mathcal{P} _{\\text{diff}}\\) \ub77c\uace0 \ud558\uc790. \uadf8\ub7ec\uba74 threshold \\(d\\) \uc5d0 \ub300\ud558\uc5ec \uac19\ub2e4\uace0 \ubd84\ub958\ub418\uc5c8\uace0 \uc62c\ubc14\ub974\uac8c \ubd84\ub958\ub41c \uc5bc\uad74 \uc21c\uc11c\uc30d \ubaa8\uc74c true accepts \ub97c \\[ \\text{TA}(d) = \\{(i, j) \\in \\mathcal{P} _{\\text{same}} | D(x_i, x_j) \\leq d\\} \\tag{5} \\] \ub77c\uace0 \ud560 \uc218 \uc788\uace0, \uac19\ub2e4\uace0 \ubd84\ub958\ub418\uc5c8\uc9c0\ub9cc \uc62c\ubc14\ub974\uac8c \ubd84\ub958\ub418\uc9c0 \uc54a\uc740 \uc5bc\uad74 \uc21c\uc11c\uc30d \ubaa8\uc74c false accept \ub97c \\[ \\text{FA}(d) = \\{(i, j) \\in \\mathcal{P} _{\\text{diff}} | D(x_i, x_j) \\leq d\\} \\tag{6} \\] \ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74 \uac80\uc99d\uc131\uacf5\ub960 validation rate \\(\\text{VAL}(d)\\) \uacfc false accept rate \\(\\text{FAR}(d)\\) \ub97c \uc8fc\uc5b4\uc9c4 \uc5bc\uad74 \uac70\ub9ac \\(d\\) \uc5d0 \ub300\ud558\uc5ec \\[ \\text{VAL}(d) = \\dfrac{|\\text{TA}(d)|}{|\\mathcal{P} _{\\text{same}}|}, \\text{FAR}(d) = \\dfrac{|\\text{FA(d)|}}{|\\mathcal{P} _{\\text{diff}}|} \\tag{7} \\] \ub85c \uc815\uc758\ud560 \uc218 \uc788\ub2e4. Note \uc9d1\ud569 \\(A\\) \uc5d0 \ub300\ud55c \uc9d1\ud569\uc758 \ud06c\uae30, \uc989 \uc6d0\uc18c \uac1c\uc218(cardinality) \ub97c \\(|A|\\) \ub85c \ud45c\uae30\ud55c\ub2e4. 4.1. Hold-out Test Set \uc6b0\ub9ac\ub294 \uc6b0\ub9ac\uc758 \ud6c8\ub828 \ub370\uc774\ud130\uc14b\uacfc \uac19\uc740 \ubd84\ud3ec\ub97c \uac00\uc9c0\ub294 \ubc31\ub9cc\uac1c \uc815\ub3c4\uc758 \uc0ac\uc9c4\uc73c\ub85c \uad6c\uc131\ub41c hold out \ub370\uc774\ud130\uc14b\uc744 \uc0ac\uc6a9\ud588\ub2e4. \ud3c9\uac00\ub97c \uc704\ud574 \uc774\ubbf8\uc9c0\ub97c 20\ub9cc\uac1c \uc815\ub3c4\uc758 \uc11c\ub85c\uc18c \uc9d1\ud569\uc73c\ub85c \ubd84\ud560\ud558\uc5ec 5\uac1c\uc758 \uc791\uc740 \uc9d1\ud569\uc744 \ub9cc\ub4e4\uc5c8\ub2e4. VAL \uc640 FAR \ub294 \\(100k \\times 100k\\) \uc758 \uc774\ubbf8\uc9c0 \uc9dd\uc5d0 \ub300\ud558\uc5ec \uacc4\uc0b0\ub41c\ub2e4. 4.2. Personal Photos 12k \uac1c\uc758 \uc0ac\ub78c \uc0ac\uc9c4\uc73c\ub85c \uad6c\uc131\ub41c \ud14c\uc2a4\ud2b8 \uc14b\uc774\ub2e4. FAR, VAR rate \ub97c \\(12k \\times 12k\\) \uac1c\uc758 \uc774\ubbf8\uc9c0 \uc9dd\uc5d0 \ub300\ud558\uc5ec \uc804\ubd80 \uacc4\uc0b0\ud560 \uac70\ub2e4. 4.3. Academic Datasets Labled Faces in the Wild(LFW) \uc640 Youtube Faces DB \ub3c4 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc73c\ub85c \uc0ac\uc6a9\ud560\uac70\uc57c. 5. Experiments \u00b6 \uc6b0\ub9ac\ub294 8\ubc31\ub9cc\uac1c\uc758 \uc11c\ub85c \ub2e4\ub978 \uc2e0\uc6d0\uc758 1\uc5b5\uc5d0\uc11c 2\uc5b5\uac1c\uc758 \ud6c8\ub828 \ub370\uc774\ud130\uc14b\uc744 \uc0ac\uc6a9\ud588\uc5b4. \uba3c\uc800 face detector \ub85c \uac01 \uc5bc\uad74 \uc0ac\uc9c4\uc740 \uc5bc\uad74\uc5d0 \ub9de\uac8c crop \uc2dc\ucf1c\uc11c \uc378\ub124\uc77c\uc744 \uc0dd\uc131\ud588\uc5b4. \uc774 \uc378\ub124\uc77c\uc744 \\(96 \\times 96\\) \uc5d0\uc11c \\(224 \\times 224\\) \uc758 \ud06c\uae30\ub85c \uac01 \ubaa8\ub378\uc758 \uc785\ub825\uc5d0 \ub9de\uac8c \ud06c\uae30 \uc870\uc815\uc744 \ud574\uc11c \uc2e4\ud5d8\ud588\uc9c0. 5.1. Computation Accuracy Trade-off \uc2e4\ud5d8\uc5d0 \ub300\ud558\uc5ec \uc790\uc138\ud558\uac8c \uc124\uba85\ud558\uae30 \uc804\uc5d0 \uc815\ud655\ub3c4\uc640 FLOPS \uc758 trade-off \ub97c \uc880 \uc124\uba85\ud574\uc904\uaed8. Figure 4 \uc740 4.2 \uc139\uc158\uc5d0\uc11c \ub9d0\ud55c \uc6b0\ub9ac\uc758 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc14b\uc5d0 \ub300\ud55c x\ucd95\uc774 FLOPS \ub97c \ub098\ud0c0\ub0b4\uace0 y\ucd95\uc774 \uc815\ud655\ub3c4 \\(0.001\\) \uc5d0 \ub300\ud55c FAR \ub97c \ub098\ud0c0\ub0b4\uc9c0. Figure 4 \uc5d0 \ub098\ud0c0\ub098\ub294 \uc815\ud655\ub3c4\uc640 \uac01 \ubaa8\ub378\uc774 \uc694\uad6c\ud558\ub294 FLOPS \uc758 \uc0c1\uad00\uad00\uacc4\uac00 \ub418\uac8c \ud765\ubbf8\ub86d\uc9c0 \uc54a\uc544? \uc6b0\ub9ac\ub294 \ube68\uac1b\uac8c \ud45c\uc2dc\ud55c NN1, NN2, NN3, NNS1, NNS2 \ub9cc \uc9d1\uc911\uc801\uc73c\ub85c \ub2e4\ub904\ubcfc\uac70\uc57c. \uc6b0\ub9ac\ub294 \ubaa8\ub378\uc758 \ud30c\ub77c\ubbf8\ud130 \uac1c\uc218\uc5d0 \ub300\ud55c trade-off \ub3c4 \uc870\uc0ac\ud574\ubd24\uc5b4. \uadfc\ub370 \uc774\uac74 \uc880 \ubaa8\ud638\ud55c \ubd80\ubd84\uc774 \uc788\uc9c0. \uac00\ub839 Inception \ubaa8\ub378\uc744 \uae30\ubc18\uc73c\ub85c \ud55c NN2 \ub294 NN1 \uc640 \ube44\uad50\ud560\ub9cc\ud55c \uc131\ub2a5\uc744 \ub0b4\uc9c0\ub9cc \ub2e8\uc9c0 20 \ubd84\uc758 1 \uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \uac16\uace0 \uc788\uc5b4. \ubb3c\ub860 \ud30c\ub77c\ubbf8\ud130 \uac1c\uc218\ub97c \uc904\uc774\uba74 \uc131\ub2a5\uc774 \ub5a8\uc5b4\uc9c0\uc9c0. 5.2. Effect of CNN Model Figure 5. \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870\ub4e4 \uc131\ub2a5 \ube44\uad50. \uc774 \uadf8\ub798\ud504\ub294 4.2 \uc139\uc158\uc5d0\uc11c \ub9d0\ud55c \ud14c\uc2a4\ud2b8\uc14b\uc5d0 \ub300\ud55c 4 \uac00\uc9c0 \ubaa8\ub378\uc758 ROC \ucee4\ube0c\ub97c \ubcf4\uc5ec\uc8fc\uace0 \uc788\uc5b4. \ucee4\ube0c\uac00 FAR \uc758 \\(10E-4\\) \uc9c0\uc810\uc5d0\uc11c \ub5a8\uc5b4\uc9c0\uc9c0. \uc774\uac74 groundtruth \ub77c\ubca8\uc5d0 \uc788\ub294 \ub178\uc774\uc988\ub85c \uc124\uba85\ub420 \uc218 \uc788\uc5b4. \ubaa8\ub378 \uc131\ub2a5\uc740 \uac00\uc7a5 \ub192\uc740 \uc21c\ub300\ub85c \ub2e4\uc74c\uacfc \uac19\ub2e8\ub2e4. NN2( \\(224 \\times 224\\) \uc785\ub825\uc758 Inception \ubaa8\ub378), NN1( \\(1 \\times 1\\) convolutional), NNS1(\ub2e8\uc9c0 220M FLOPS \ub97c \uac16\ub294 small Inception \ubaa8\ub378), NNS2(20M FLOPS \ub9cc\uc744 \uac16\ub294 tiny Inception \ubaa8\ub378) ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) Note Ground-truth\ub294 \uae30\uc0c1\ud559\uc5d0\uc11c \uc720\ub798\ub41c \uc6a9\uc5b4\ub85c \uc5b4\ub290\ud55c \uc7a5\uc18c\uc5d0\uc11c \uc218\uc9d1\ub41c \uc815\ubcf4\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. Ground-truth\ub294 \ubcf4\ud1b5 '\uc9c0\uc0c1 \uc2e4\uce21 \uc815\ubcf4'\ub85c \ud574\uc11d\ub418\uba70 \uc778\uacf5\uc704\uc131\uacfc \uac19\uc774 \uc9c0\uad6c\uc5d0\uc11c \uba40\ub9ac \ub5a8\uc5b4\uc838\uc11c \uc9c0\uad6c\ub97c \uad00\ucc30\ud558\uc600\uc744 \ub54c \uc9c0\uad6c\uc758 \uc804\uccb4\uc801\uc778 \uad00\uc810\uc744 \ubcf4\ub294 \uac83\uc5d0\ub294 \ub113\uc740 \uc2dc\uc57c\ub97c \uac00\uc9c8 \uc218 \uc788\uc9c0\ub9cc \uc2e4\uc81c \uc9c0\uba74\uc758 \uad6c\uc870\ub97c \uc138\ubc00\ud558\uac8c \ubcf4\ub294 \uac83\uc740 \ube5b\uc774 \uad6c\ub984\uc774\ub098 \ub300\uae30\ub97c \ud1b5\uacfc\ud558\uac8c \ub418\uba74\uc11c \uc2e4\uc81c \ubaa8\uc2b5\uc774 \uc65c\uace1\ub418\uc5b4 \uc81c\ub300\ub85c \ud30c\uc545\ud558\ub294 \uac83\uc740 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc0c1\ud669\uc5d0\uc138 \uc9c0\uc0c1 \uc815\ubcf4\ub97c \uc9c1\uc811 \uce21\uc815\ud55c\ub2e4\uba74 \ubcf4\ub2e4 \uc815\ud655\ud55c \uc815\ubcf4\ub97c \uc5bb\uc744 \uc218 \uc788\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc815\ubcf4\uc5d0 \uc778\uacf5\uc704\uc131\uc5d0\uc11c \uad00\uce21\ub41c \ub370\uc774\ud130\ub97c \ucc38\uc870\ud558\uc5ec \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc880 \ub354 \uc815\ud655\ud55c \ub370\uc774\ud130\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae30\uacc4\ud559\uc2b5\uc758 \uad00\uc810\uc5d0\uc11c \ubcf4\uc558\uc744\ub54c Ground-truth\ub294 \ud559\uc2b5\ud558\uace0\uc790 \ud558\ub294 \ub370\uc774\ud130\uc758 \uc6d0\ubcf8 \ud639\uc740 \uc2e4\uc81c \uac12\uc744 \ud45c\ud604\ud560\ub54c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc774\ubbf8\uc9c0\uc5d0\uc11c \uac1d\uccb4 \uac10\uc9c0\ub97c \ubaa9\ud45c\ub85c \ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc758 \uc608\ub97c \ubd05\uc2dc\ub2e4.(\ucd9c\ucc98 : https://eair.tistory.com/16 ) \uc774\uc81c \uc6b0\ub9ac\uac00 Figure 5. \uc5d0\uc11c \ubcf4\uc5ec\uc900 4 \uac00\uc9c0 \ubaa8\ub378\ub4e4\uc758 \uc131\ub2a5\uc5d0 \ub300\ud558\uc5ec \uc790\uc138\ud788 \ub9d0\ud574\uc904\uaed8. \ud55c \uc885\ub958\ub294 Visualizing and understandingconvolutional networks [22] \uc640 Network in network [9] \ub97c \uae30\ubc18\uc73c\ub85c \ub9cc\ub4e0 \\(1 \\times 1\\) convolutional \ubaa8\ub378\uc774\uace0, \ub2e4\ub978 \ud55c \uc885\ub958\ub294 \ubaa8\ub378 \uc0ac\uc774\uc988\ub97c \ud68d\uae30\uc801\uc73c\ub85c \uc904\uc778 Going deeper with convolutions [16] \uc758 Inception \ubaa8\ub378\uc774\uc5c8\uc9c0. \uc194\uc9c1\ud788 \uc804\ubc18\uc801\uc73c\ub85c \uc6b0\ub9ac \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 \ub2e4 \uc88b\uc544. \uadfc\ub370 NN3 \uac19\uc740 \uacbd\uc6b0 FLOPS \uacfc \ubaa8\ub378 \uc0ac\uc774\uc988\ub97c \ud68d\uae30\uc801\uc73c\ub85c \uc904\uc774\uba74\uc11c\ub3c4 \uc131\ub2a5\uc740 \uc5ec\uc804\ud788 \uad1c\ucc2e\uc558\uc5b4. 4.2 \uc139\uc158\uc5d0\uc11c \ub9d0\ud55c \ud14c\uc2a4\ud2b8\uc14b\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ud3c9\uac00\ub97c Figure 5 \uac00 \ubcf4\uc5ec\uc8fc\uace0 \uc788\uc5b4. \uac00\uc7a5 \ud070 \ubaa8\ub378\uc774 tiny NNS2 \uc5d0 \ube44\ud558\uc5ec \uc88b\uc740 \uc131\ub2a5\uc744 \ub0b4\uace0 \uc788\uc9c0\ub9cc, \uc194\uc9c1\ud788 NNS2 \ub294 \uc774\ubbf8\uc9c0 \ud558\ub098\ub97c 30ms \ub85c \ucc98\ub9ac\ud558\uba74\uc11c \uaf64 \ub098\uc058\uc9c0 \uc54a\uc740 \uc131\ub2a5\uc744 \ub0b4\uace0 \uc788\uc5b4. \uc774\ubbf8\uc9c0\ub2f9 30ms \ub85c \ucc98\ub9ac\ud558\ub294 \uac74 \ud578\ub4dc\ud3f0\uc5d0\uc11c\ub3c4 \ub3cc\ub9b4 \uc218 \uc788\ub294 \uc131\ub2a5\uc774\uc57c. 5.3. Sensitivity to Image Quality Table 4. \uc67c\ucabd \ud45c\ub294 \uac80\uc99d\uc131\uacf5\ub960 VAR \uc758 10E-3 \uc815\ud655\ub3c4\uac00 JPEG \uc758 \ub2e4\uc591\ud55c \ud03c\ub9ac\ud2f0\uc5d0 \ub530\ub77c \uc5b4\ub5bb\uac8c \ub2ec\ub77c\uc9c0\ub294\uc9c0 \ubcf4\uc5ec\uc8fc\uace0 \uc788\uc5b4. \uc624\ub978\ucabd \ud45c\ub3c4 VAR \uc758 10E-3 \uc815\ud655\ub3c4\uac00 \uc774\ubbf8\uc9c0 \uc0ac\uc774\uc988\uc5d0 \ub300\ud558\uc5ec \uc5b4\ub5bb\uac8c \ub2ec\ub77c\uc9c0\ub294\uc9c0 \ubcf4\uc5ec\uc8fc\uc9c0. \uc774 \uc2e4\ud5d8\uc740 test hold-out \ub370\uc774\ud130\uc14b\uc758 \uccab\ubc88\uc9f8 \ubd84\ud560 \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec NN1 \uc5d0\uc11c \uc218\ud589\ub410\uc5b4. ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) Table 4 \ub294 \ub2e4\uc591\ud55c \uc774\ubbf8\uc9c0 \uc0ac\uc774\uc988\uc5d0 \ub300\ud574\uc11c\ub3c4 \uc6b0\ub9ac\uc758 \ubaa8\ub378\uc774 \uac81\ub098 \uacac\uace0\ud558\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc8fc\uc9c0. \uc2ec\uc9c0\uc5b4 JPEG \uc555\ucd95\ub960\uc774 20 \uae4c\uc9c0 \ub5a8\uc5b4\uc9c8 \ub54c\uae4c\uc9c0 \uc815\ud655\ub3c4\uac00 \ub098\uc058\uc9c0 \uc54a\ub2e4\ub294 \uacb0\ub860\uc774 \ub098\uc654\uc5b4. \\(120 \\times 120\\) \uc378\ub124\uc77c \ubfd0\ub9cc \uc544\ub2c8\ub77c \\(80 \\times 80\\) \uc0ac\uc774\uc988 \uc378\ub124\uc77c\uae4c\uc9c0\ub3c4 \uad1c\ucc2e\uc740 \uc131\ub2a5\uc774 \ub098\uc624\ub354\ub77c. \uc774 \uacb0\uacfc\ub294 \uc194\uc9c1\ud788 \uc8fc\ubaa9\ud560\ub9cc\ud574. \uc65c\ub0d0\uba74 \ubaa8\ub378\uc774 \\(220 \\times 220\\) \uc774\ubbf8\uc9c0\uc5d0\uc11c \ud6c8\ub828\ub418\uc5c8\uc73c\ub2c8\uae4c. \ub354 \ub0ae\uc740 \ud574\uc0c1\ub3c4\uc5d0 \ub300\ud55c \uc5bc\uad74 \uc0ac\uc9c4\uc5d0 \ub300\ud558\uc5ec \ud559\uc2b5\ud558\ub294 \uac83\uc740 \ub098\uc911\uc5d0\ub77c\ub3c4 \ubaa8\ub378\uc744 \ud5a5\uc0c1\uc2dc\ud0ac \uc218 \uc788\uc9c0. 5.4. Embedding Dimensionality Table 5. Embedding Dimensionality \uc5d0 \ub530\ub978 VAL \ube44\uad50. \uc774 \ud45c\ub294 4.1 \uc139\uc158\uc5d0\uc11c \ub9d0\ud55c hold-out \ub370\uc774\ud130\uc14b\uc744 NN1 \uc73c\ub85c \ud559\uc2b5\uc2dc\ud0a4\uba74\uc11c \ub2e4\uc591\ud55c embedding \ucc28\uc6d0\uc5d0 \ub300\ud55c \uc131\ub2a5\uc744 \ube44\uad50\ud55c\uac70\uc57c. VAL \uc758 \uc815\ud655\ub3c4\ub294 10E-3 \uc774\uc9c0. \uc6b0\ub9ac\ub294 5\uac1c \ubd84\ud560 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ud3c9\uade0 standard error \ub97c \uacc4\uc0b0\ud574\ubd24\uc5b4. ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) \uc6b0\ub9ac\ub294 \ub2e4\uc591\ud55c embedding \ucc28\uc6d0\uc744 \uc870\uc0ac\ud558\uace0 128 \uc744 \uc120\ud0dd\ud588\uc5b4. \ub354 \ud070 embedding \uc744 \uc120\ud0dd\ud558\uba74 \uc791\uc740 \uac83\ubcf4\ub2e4 \uc88b\uc9c0 \uc54a\uc744\uae4c \ub77c\uace0 \uc0dd\uac01\ud558\ub294 \uce5c\uad6c\ub4e4\uc774 \uc788\uc744 \uc218\ub3c4 \uc788\uc9c0\ub9cc, \ub354 \ud070 \uac78 \uc0ac\uc6a9\ud558\uba74 \ub611\uac19\uc740 \uc815\ud655\ub3c4\ub97c \ub0b4\uae30 \uc704\ud558\uc5ec \ub354 \ud070 \ud559\uc2b5 \ube44\uc6a9\uc774 \ubc1c\uc0dd\ud574. \ub2e4\uc2dc \ub9d0\ud574\uc11c Table 5 \uac00 \ubcf4\uc5ec\uc8fc\ub294 \uc131\ub2a5 \ucc28\uc774\ub294 \ud1b5\uacc4\uc801\uc73c\ub85c \ubb34\uc758\ubbf8\ud558\ub2e4\ub294 \uac70\uc57c. \ub0b4\uac00 \uac15\uc870\ud558\uace0 \uc2f6\uc740 \uac74 \ud6c8\ub828 \uc911\uc5d0\ub294 128 \ucc28\uc6d0\uc758 float \ubca1\ud130\uac00 \uc0ac\uc6a9\ub418\uc9c0\ub9cc, \uc815\ud655\ub3c4\uc758 \uc190\uc2e4 \uc5c6\uc774 \uc774\uac78 128 \ubc14\uc774\ud2b8\ub85c \uc591\uc790\ud654\ud560 \uc218 \uc788\uc5b4. Note \uc591\uc790\ud654(quantization)\ub77c\ub294 \uac83\uc740 \uc0d8\ud50c\ub9c1(sampling)\ud55c \uc544\ub0a0\ub85c\uadf8 \ud615\ud0dc\ub85c \ub418\uc5b4 \uc788\ub294 \uc2e0\ud638\ub098 \uc815\ubcf4\ub97c \ub514\uc9c0\ud138\ud654(digitizing) \ud558\ub294 \uc791\uc5c5\uc744 \ub9d0\ud55c\ub2e4. \uc880 \ub354 \uc27d\uac8c \ub9d0\ud558\uc790\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. 0 ~ 1\uc0ac\uc774\uc758 \uc22b\uc790\ub97c \uc0dd\uac01\ud574\ubcf4\uc790. \uc544\ub0a0\ub85c\uadf8 \ubc29\uc2dd\uc73c\ub85c \uc0dd\uac01\ud574\ubcf4\uba74 0\uacfc 1\uc0ac\uc774\uc5d4 \uc2e4\uc81c\ub85c \ubb34\uc218\ud788 \ub9ce\uc740 \uc22b\uc790\uac00 \uc874\uc7ac\ud55c\ub2e4. 0.1, 0.2479, 0.78001, 0.99999 \ub4f1 \uc6b0\ub9ac\uac00 \uc140 \uc218 \uc5c6\uc774 \ub9ce\uc740 \uc218\uac00 \ubb34\ud55c\ub300\ub85c \uc874\uc7ac\ud558\ub294 \uac83\uc774\ub2e4. \ud604\uc2e4\uc801\uc73c\ub85c \uc774 \ubb34\uc218\ud55c \uc22b\uc790\ub4e4\uc744 \ub2e4\ub8e8\uae30\ub780 \ubd88\uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc5d0 \uc6b0\ub9ac\ub294 \uc77c\uc815\ud55c \ubc94\uc704\uc640 \uae30\uc900\uac12\uc744 \uc815\ud574\ub193\uace0 \uc5b4\ub5a4 \uc784\uc758\uc758 \uc22b\uc790\uac00 \ub098\uc624\uba74 \uadf8\uc640 \uac00\uc7a5 \uadfc\uc811\ud55c \uae30\uc900\uac12\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc6b0\ub9ac\uac00 \uc5b4\ub5a4 \uc804\uc555 \uac12\uc744 \uce21\uc815\ud55c\ub2e4\uace0 \ud574\ubcf4\uc790. \uc774\ub54c \uc6b0\ub9ac\ub294 0.1V \ub2e8\uc704\ub85c\ub9cc \uac12\uc744 \uce21\uc815\ud55c\ub2e4\uace0 \uac00\uc815\ud574\ubcf4\uc790. \uc2e4\uc81c\uc758 \uc804\uc555 \uac12\uc774 3.4122319800200922212935482...V \ub77c\uace0 \ud588\uc744 \ub54c \uacfc\uc5f0 \uc774 \uac12\uc744 \uc804\ubd80 \ud45c\ud604\ud558\ub294\uac83\uc774 \uc633\uc740\uac00? \uc800\ub807\uac8c\uae4c\uc9c0 \uc815\ubc00\ud558\uac8c \uce21\uc815\ud558\uae30\ub3c4 \uc5b4\ub824\uc6b8 \ubfd0\ub354\ub7ec \uadf8\ub7f4 \ub9cc\ud55c \uc815\ubc00\ud55c \uc13c\uc11c\ub3c4 \uc5c6\uace0 \uadf8\ub7f4 \ud544\uc694\uc131\ub3c4 \uc5c6\ub2e4. \uc774\ub7f4\ub54c \uc6b0\ub9ac\ub294 \ub4a4\uc5d0 \ud544\uc694 \uc5c6\ub294 \uc815\ubcf4\ub294 \uc0dd\uac01\ud558\uc9c0 \uc54a\uace0 \uce21\uc815\ub41c \uac12\uc744 \uac00\uc7a5 \uadfc\uc811\ud55c \uac12\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\ub2e4. \uc2e4\uc81c\ub85c \uc13c\uc11c\uc5d0 \uc758\ud574 \uce21\uc815\ub41c \uc544\ub0a0\ub85c\uadf8 \uc804\uc555\uac12\uc774 3.41223V\ub77c\uace0 \ud588\uc744 \ub54c 0.1V \ub2e8\uc704\ub85c \uce21\uc815\ud55c\ub2e4\uace0 \ud588\uc73c\ub2c8 \uc774\ub54c\uc758 \uc591\uc790\ud654 \uc2dc\ud0a8 Voltage\uac12\uc740 3.4V\uc77c \uac83\uc774\ub2e4. \uacb0\uad6d \uc591\uc790\ud654\ub77c\ub294 \uac83\uc740 \ubb34\ud55c\ub300\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uc140 \uc218 \uc5c6\ub294 \uc544\ub0a0\ub85c\uadf8 \uc815\ubcf4\ub97c \uc140 \uc218 \uc788\uc744 \ub9cc\ud07c\uc758 \uac04\uaca9\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc11c \uc720\uc758\ubbf8\ud55c \uc815\ubcf4\ub9cc\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\ub2e4. \uc774 \ub9d0\uc740 \uc0d8\ud50c\ub9c1\uc5d0\ub3c4 \uc720\ud6a8\ud560 \uac83\uc774\ub2e4. (\ucd9c\ucc98 : https://twlab.tistory.com/19 ) \uadf8\ub7ec\ubbc0\ub85c \ubaa8\ub4e0 \uc5bc\uad74\uc774 \ud070 \uc2a4\ucf00\uc77c\uc758 \uad70\uc9d1\ud654\uc640 \uc5bc\uad74 \uc778\uc2dd\uc5d0 \uc544\uc8fc \uc774\uc0c1\uc801\uc778 128 \ucc28\uc6d0 \ubc14\uc774\ud2b8 \ubca1\ud130\ub85c \ud45c\ud604\ub420 \uc218 \uc788\ub294 \uac70\uc9c0. \uc774\uac83\ubcf4\ub2e4 \ub354 \uc791\uc740 embedding \uc744 \uc0ac\uc6a9\ud558\uba74 \ubb34\uc2dc\ud560 \uc218 \uc788\ub294 \uc815\ud655\ub3c4 \uc190\uc2e4\uacfc \ud568\uaed8 \ud578\ub4dc\ud3f0 \uac19\uc740 \uc784\ubca0\ub514\ub4dc \uae30\uae30\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294\uac70\uc9c0. 5.5. Amount of Training Data Table 6. \ud6c8\ub828 \ub370\uc774\ud130 \uc0ac\uc774\uc988\uc5d0 \ub530\ub978 \uac80\uc99d\uc131\uacf5\ub960 VAL. \uc774 \ud45c\ub294 \\(96 \\times 96\\) \uc774\ubbf8\uc9c0\ub97c \uc791\uc740 \ubaa8\ub378\uc5d0 \uc785\ub825\ud558\uba74\uc11c 700 \uc2dc\uac04 \ub3d9\uc548 \ud559\uc2b5\ud55c \uacb0\uacfc\ub97c \ube44\uad50\ud574\uc8fc\uace0 \uc788\uc5b4. \uc774 \ubaa8\ub378\uc740 NN2 \uc640 \ube44\uc2b7\ud558\uc9c0\ub9cc Inception \ubaa8\ub378\uc758 \\(5 \\times 5\\) convolutional \uc740 \uc5c6\uc5b4. ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) Table 6 \uc740 \ud6c8\ub828 \ub370\uc774\ud130 \uc591\uc5d0 \ub530\ub978 \uc815\ud655\ub3c4\ub97c \ube44\uad50\ud574\uc8fc\uc9c0. \uc194\uc9c1\ud788 \uc6b0\ub9ac\uc5d0\uac8c \uc2dc\uac04\uc774 \ubb34\ud55c\ud55c\uac8c \uc544\ub2c8\ub2c8\uae4c \uc791\uc740 \ubaa8\ub378\uc5d0\uc11c \ud14c\uc2a4\ud2b8\ud574\ubd24\uc5b4. \uacb0\uad6d \ucc9c\ub9cc\uac1c \uc774\uc0c1\uc758 \ub370\uc774\ud130\uc14b\uc744 \uc0ac\uc6a9\ud574\uc57c \uc815\ud655\ub3c4\ub97c \ud655 \ub04c\uc5b4\ub0bc \uc218 \uc788\ub2e4\ub294 \uac78 \uc54c \uc218 \uc788\uc9c0. 5.6. Performance on LFW LFW \ub370\uc774\ud130\uc14b\uc5d0\uc11c\ub3c4 \uc6b0\ub9ac\uc758 \ubaa8\ub378\uc744 \ud3c9\uac00\ud574\ubd24\ub294\ub370 \ud6c8\ub828 \ub370\uc774\ud130\uc14b\uc744 9\uac1c\ub85c \ubd84\ud560\ud558\uc5ec \\(L_2\\) \uac70\ub9ac\uc758 threshold \ub97c \uc815\ud574\ubd24\uc5b4. \ubd84\ub958( \uac19\uc740\uc9c0 \ud2c0\ub9b0\uc9c0 ) \uc5d0\uc11c\ub294 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc744 10\uac1c\ub85c \ubd84\ud560\ud558\uc5ec \uc2dc\ud589\ud574\ubd24\uc9c0. \uacb0\uad6d \ucd5c\uc801\uc758 threshold \ub294 \\(1.242\\) \uc600\uc5b4. \ub2e4\ub9cc 8\ubc88\uc9f8 \ubd84\ud560 \ub370\uc774\ud130\ub9cc threshold \uac00 \\(1.256\\) \uc774\uc5c8\uc5b4. \uc6b0\ub9ac\ub294 \ub2e4\uc74c \ub450 \uac00\uc9c0 \ubaa8\ub450\ub85c \uc2e4\ud5d8\uc744 \uc9c4\ud589\ud588\uc9c0. Center crop \ub41c LFW \uc378\ub124\uc77c. LFW \uc378\ub124\uc77c\uc5d0 face detector \ub97c \uc0ac\uc6a9\ud588\uc5b4. Figure 6. LFW \uc5d0\ub7ec\ub4e4. \ud2b9\ud788 False reject \uc5d0\uc11c\ub294 \ub2e8\uc9c0 8 \uac1c\ub9cc \uc798\ubabb \ubd84\ub958\ub41c \uac70\uc600\uace0 5 \uac1c\ub294 \ub77c\ubca8\ub9c1\uc774 \uc798\ubabb\ub41c \uc0ac\uc9c4\uc774\uc5c8\uc5b4. ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) Figure 6 \uc740 \ubaa8\ub4e0 \uc2e4\ud328 \ucf00\uc774\uc2a4\ub97c \ubcf4\uc5ec\uc8fc\uc9c0. \uc6b0\ub9ac\ub294 center crop \ub41c \uc378\ub124\uc77c\uc5d0 \ub300\ud558\uc5ec \\(98.87\\% \\pm 0.15\\) \uc758 \ubd84\ub958 \uc815\ud655\ub3c4\ub97c \uc5bb\uc5c8\uc5b4. \uc774\uac74 DeepFace \ub098 \uc608\uc804\uc5d0 state-of-the-art \uc600\ub358 DeepId2+ \ubcf4\ub2e4 \ub354 \uc88b\uc740 \uc131\ub2a5\uc774\uc9c0. \uc774\uac74 NN1 \uc758 \uc131\ub2a5\uc774\uc57c. \ud558\uc9c0\ub9cc NN3 \ub3c4 \ud1b5\uacc4\uc801\uc73c\ub85c \ube44\uad50\uac00 \ubb34\uc758\ubbf8\ud55c \uc131\ub2a5\uc744 \ub0b4\ub354\ub77c. 5.7. Performance on Youtube Faces DB \uc6b0\ub9ac\ub294 \uc720\ud29c\ube0c \ube44\ub514\uc624\uc758 \uccab 100 \ud504\ub808\uc784\uc5d0 \ub300\ud55c \uc5bc\uad74 \uc720\uc0ac\ub3c4 \ud3c9\uade0\uc744 \uc0ac\uc6a9\ud588\ub294\ub370, \ubd84\ub958 \uc815\ud655\ub3c4\uac00 \\(95.12\\% \\pm 0.39\\) \uac00 \ub098\uc654\uc5b4. \ucc98\uc74c 100 \ud504\ub808\uc784\uc744 \uc0ac\uc6a9\ud588\uc744 \ub54c \\(95.18\\%\\) \uac00 \ub098\uc654\uc9c0. Deepface:Closing the gap to human-level performance in face verifica-tion [17] \uc5d0\uc11c\ub294 \uc815\ud655\ub3c4\uac00 \\(91.4\\%\\) \uc600\uace0 DeepId2+ \uc758 \uc815\ud655\ub3c4\ub294 \\(93.2\\%\\) \uc600\uc5b4. 5.8. Face Clustering Figure 7. Face Clustering ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) \uc6b0\ub9ac\uac00 \ub9cc\ub4e0 \ubaa8\ub378\uc774 \ub0b3\uc740 embedding \uc744 \uac19\uc740 \uc2e0\uc6d0\uc758 \uc5bc\uad74 \uc0ac\uc9c4\uc744 \ubb36\ub294\ub370\uc5d0\ub3c4 \uc4f8 \uc218 \uc788\uc5b4. \uc9c4\uc9dc \uad49\uc7a5\ud558\uc9c0? \ub098\uc774, \ud3ec\uc988, \uba85\uc554, \ud3d0\uc0c9\uc774 \ub2ec\ub77c\uc838\ub3c4 \uc751\uc9d1 \uad70\uc9d1\ud654\ub97c \uc798 \ud574\ub0b4\ub294 \uac78 \uc54c \uc218 \uc788\uc5b4. 6. Summary \u00b6 \uc6b0\ub9ac\ub294 \uc5bc\uad74 \uc0ac\uc9c4\uc744 \uac70\ub9ac\uac00 \uc720\uc0ac\ub3c4\uc778 \uc720\ud074\ub9ac\ub4dc \uacf5\uac04\uc5d0 embedding \ud558\ub294 \ubc29\ubc95\uc744 \uc18c\uac1c\ud588\uc5b4. \uc774\uac74 \uc9c0\uae08\uae4c\uc9c0\uc640\uc758 \ubc29\ubc95\uacfc \ub2e4\ub974\uac8c \uc911\uac04 layers \ub97c \ud559\uc2b5\ud558\ub294 \uac83\uc5d0 \uc9d1\uc911\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c embedding \uc790\uccb4\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \ud559\uc2b5\uc2dc\ud0a4\ub294 \uac70\ub77c \ud601\uc2e0\uc801\uc774\uc9c0. References : FaceNet: A Unified Embedding for Face Recognition and Clustering","title":"FaceNet"},{"location":"paper/facenet/#facenet","text":"FaceNet \uc740 2015\ub144 \uad6c\uae00\uc5d0\uc11c \uac1c\ubc1c\ud55c \uc5bc\uad74 \uc778\uc2dd \uc2dc\uc2a4\ud15c\uc774\ub2e4. FaceNet \uc740 \uc5bc\uad74 \uc778\uc2dd \uc2dc\uc2a4\ud15c\uc758 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc5bc\uad74\uc5d0\uc11c \ud2b9\uc9d5\uc744 \uace0\ud03c\ub9ac\ud2f0\ub85c \ucd94\ucd9c(face embedding) \ud560 \uc218 \uc788\ub2e4.","title":"FaceNet \uc0ac\uc804\uc9c0\uc2dd"},{"location":"paper/facenet/#_1","text":"\uc5bc\uad74 \uc778\uc2dd\uc758 \uc77c\ubc18\uc801\uc778 \uae30\ub2a5\uc740 \uc0ac\uc9c4 \ub610\ub294 \uc601\uc0c1\uc73c\ub85c\ubd80\ud130 \uc790\ub3d9\uc73c\ub85c \uc5bc\uad74\uc744 \ud655\uc778(\uc778\uc2dd)\ud558\ub294 \uac83\uacfc \uc5bc\uad74\uc744 \uac80\uc99d\ud558\ub294 \uac83\uc774\ub2e4. \uc5bc\uad74 \uac80\uc99d : \uc54c\ub824\uc9c4 \uc2e0\uc6d0\uc5d0 \uc5bc\uad74\uc744 one-to-one \ub9e4\ud551\ud558\ub294 \uac83 ( \uc774 \uc0ac\ub78c\uc774 \uc774 \uc0ac\ub78c\uc778\uac00? ) \uc5bc\uad74 \ud655\uc778(\uc778\uc2dd) : \uc54c\ub824\uc9c4 \uc5bc\uad74\ub4e4\ub85c\ubd80\ud130 \uc5bc\uad74\uc744 one-to-many \ub9e4\ud551\ud558\ub294 \uac83 ( \uc774 \uc0ac\ub78c\uc774 \ub204\uad6c\uc778\uac00? )","title":"\uc5bc\uad74 \uc778\uc2dd"},{"location":"paper/facenet/#facenet_1","text":"FaceNet \uc740 2015\ub144 \uad6c\uae00\uc758 \uc5f0\uad6c\uc6d0 Florian Schroff \uc758 \ub17c\ubb38 FaceNet: A Unified Embedding for Face Recognition and Clustering \uc5d0\uc11c \ubc1c\ud45c\ub41c \uc5bc\uad74 \uc778\uc2dd \uc2dc\uc2a4\ud15c\uc774\ub2e4. FaceNet \uc740 \uc5bc\uad74 \uc0ac\uc9c4\uc774 \uc8fc\uc5b4\uc9c0\uba74 \uc5bc\uad74\ub85c\ubd80\ud130 \uace0\ud03c\ub9ac\ud2f0\uc758 \ud2b9\uc9d5\ub4e4(features)\uc744 \ucd94\ucd9c\ud558\uc5ec \uc774 \ud2b9\uc9d5\uc744 \ud45c\ud604\ud558\ub294 128 \uac1c \uc6d0\uc18c\ub97c \uac16\ub294 \ubca1\ud130(face embedding)\ub97c \ub9cc\ub4e4\uc5b4\ub0b8\ub2e4. \uae30\uc220\uc801\uc73c\ub85c\ub294 \uac01 \uc6d0\uc18c\uac00 1 \ubc14\uc774\ud2b8\ub97c \uac00\uc9c0\ubbc0\ub85c \uac01 \ubca1\ud130\uac00 \ub2e8\uc9c0 128 \ubc14\uc774\ud2b8\ub9cc\uc73c\ub85c \uc5bc\uad74\uc744 \ud45c\ud604\ud558\ub294 \uac83\uc774\ub2e4. FaceNet \uc740 \uc774 face embedding \uc744 \ud1b5\ud558\uc5ec \uc5bc\uad74 \uc0ac\uc9c4\uc744 \uac70\ub9ac\uac00 \uc5bc\uad74 \uc720\uc0ac\ub3c4\ub97c \ub73b\ud558\ub294 \uc720\ud074\ub9ac\ub4dc \uacf5\uac04\uc5d0 \ub9e4\ud551\uc2dc\ud0a8\ub2e4. FaceNet \uc740 triplet loss \ub97c \ud1b5\ud55c deep CNN \uc774\ub2e4. \uc774 \ubaa8\ub378\ub85c \ube44\uc2b7\ud55c \uc2e0\uc6d0\uc758 \ubca1\ud130(\uc5bc\uad74)\ub294 \uac00\uae5d\uac8c, \ub2e4\ub978 \uc2e0\uc6d0\uc758 \ubca1\ud130(\uc5bc\uad74)\ub294 \uba40\uac8c \ub9cc\ub4e0\ub2e4. \uc774 \ubaa8\ub378\uc758 \ud559\uc2b5\uc740 \ubaa8\ub378\uc758 \uc911\uac04\uce35\uc73c\ub85c\ubd80\ud130 \uadf8\uac83\uc744 \ucd94\ucd9c\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c embedding \uc744 \uc9c1\uc811\uc801\uc744 \ub9cc\ub4dc\ub294 \uac83\uc5d0 \ucd08\uc810\uc744 \ub450\uc5c8\ub294\ub370 \uc774\uac83\uc740 \uc911\uc694\ud55c \ud601\uba85\uc774\ub2e4. FaceNet \uc740 \uc774\uc804\uc758 \uc811\uadfc\uc5d0\uc11c \ud588\ub358 \uac83\uacfc \ub2ec\ub9ac \uc911\uac04\uc758 \uc881\uc740 \uce35\uc774 \uc544\ub2c8\ub77c embedding \uadf8 \uc790\uccb4\ub97c \ucd5c\uc801\ud654\uc2dc\ud0a4\ub294 \uac83\uc744 \uc9c1\uc811\uc801\uc73c\ub85c \ud559\uc2b5\ud55c\ub2e4. \uc774 \uc5bc\uad74 embedding \uc740 \ud45c\uc900 \uc5bc\uad74 \uc778\uc2dd \ubca4\uce58\ub9c8\ud0b9\uc5d0\uc11c \ucd5c\uace0\uc758 \uc131\uacfc\ub97c \ub0b4\uac8c \ud558\ub294 \ubd84\ub958 \uc2dc\uc2a4\ud15c\uc744 \ud559\uc2b5\uc2dc\ud0a4\ub294 \uae30\ubc18\uc774 \ub41c\ub2e4. FaceNet \uc758 \ub17c\ubb38\uc740 \uc5bc\uad74\uc5d0\uc11c \ucd94\ucd9c\ud55c \uac19\uc740 \uc5bc\uad74\uc758 \ud2b9\uc9d5\uc744 \uad70\uc9d1\ud654\ud558\ub294 \ub4f1 embedding \uc744 \ub2e4\ub978 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud558\ub294 \ubc29\uc2dd\ub3c4 \ubcf4\uc5ec\uc8fc\uc5c8\ub2e4.","title":"FaceNet \ubaa8\ub378"},{"location":"paper/facenet/#facenet_2","text":"FaceNet \ubaa8\ub378\uc744 \uc81c\uacf5\ud558\ub294 \ud504\ub85c\uc81d\ud2b8\ub294 \ub9ce\uc774 \uc788\ub2e4. \uac00\uc7a5 \uc720\uba85\ud55c \ud504\ub85c\uc81d\ud2b8\ub294 OpenFace \uc778\ub370 \uc774 \ud504\ub85c\uc81d\ud2b8\ub294 PyTorch \ub97c \uc0ac\uc6a9\ud558\uc5ec FaceNet \ubaa8\ub378\uc744 \uc81c\uacf5\ud55c\ub2e4. \ub610 \uc720\uba85\ud55c \ud504\ub85c\uc81d\ud2b8\ub294 FaceNet by David Sandberg \uc778\ub370 David \ub294 TensorFlow \ub97c \uc0ac\uc6a9\ud558\uc5ec FaceNet \ubaa8\ub378\uc744 \uc81c\uacf5\ud55c\ub2e4. \uc8fc\ubaa9\ud560\ub9cc\ud55c Keras FaceNet \uc608\uc81c\ub294 FaceNet by Hiroki Taniai \uc774\ub2e4. \uadf8\ub294 Inception ResNet v1 \uc744 TensorFlow \uc5d0\uc11c Keras \ub85c \ubcc0\ud658\ud574\uc8fc\ub294 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc81c\uacf5\ud588\ub2e4. \ub610 \uc774\ubbf8 \ud559\uc2b5\ub41c Keras \ubaa8\ub378\uc744 \uc81c\uacf5\ud588\ub2e4. Info \uc774 \ubaa8\ub378\uc740 MS-Celeb-1M \ub370\uc774\ud130\uc14b \uc5d0\uc11c \uc0ac\uc804\ud559\uc2b5\ub418\uc5c8\ub2e4. \uadf8\ub9ac\uace0 \uc785\ub825\ub41c \uc774\ubbf8\uc9c0\ub97c \uceec\ub7ec\uac00 \ub418\uac8c \ud558\uace0 3\uac1c\uc758 \ucc44\ub110\uc5d0 \ub300\ud55c \ud45c\uc900\ud654\ub41c \ud654\uc774\ud2b8\ub2dd \ub41c \ud53d\uc140 \uac12\uc744 \uac16\uac8c \ud558\uace0 \\(160 \\times 160\\) \ud615\uc0c1\uc744 \uac16\uac8c \ud55c\ub2e4. \uc5ec\uae30 \uc5d0\uc11c \ubbf8\ub9ac \ud559\uc2b5\ub41c Keras FaceNet \ubaa8\ub378\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud560 \uc218 \uc788\ub2e4.","title":"FaceNet \uad6c\ud604 \uc624\ud508\uc18c\uc2a4"},{"location":"paper/facenet/#_2","text":"\uc2e4\uc9c8\uc801\uc73c\ub85c \uc5bc\uad74 \uc778\uc2dd\uc744 \ud558\uae30 \uc804\uc5d0 \uba3c\uc800 \uc5bc\uad74\uc744 \ud0d0\uc0c9\ud574\uc57c\ub9cc \ud55c\ub2e4. \uc5bc\uad74 \ud0d0\uc0c9\uc774\ub780 \uc0ac\uc9c4\uc5d0\uc11c \uc5bc\uad74\uc744 \uc790\ub3d9\uc73c\ub85c \ucc3e\uace0 \uc5bc\uad74\uc5d0 \ub124\ubaa8 \ubc15\uc2a4\ub97c \uadf8\ub824\uc11c \ub098\uba38\uc9c0 \uc601\uc5ed\ub4e4\uc740 \uc81c\uc678\ud558\ub294 \uc791\uc5c5\uc774\ub2e4. \uc5bc\uad74 \ud0d0\uc0c9\uc744 \uc704\ud558\uc5ec MTCNN(Multi-Task Cascaded Convolutional Neural Network) \uc744 \uc0ac\uc6a9\ud558\uba74 \uc88b\ub2e4. \uc774\uac83\uc73c\ub85c \uc0ac\uc9c4\uc5d0\uc11c \uc5bc\uad74\ub9cc \ucd94\ucd9c\ud574\ub0bc \uc218 \uc788\ub2e4. MTCNN \uc740 2016\ub144 \ub17c\ubb38 Joint Face Detection and Alignment Using Multitask Cascaded Convolutional Networks \uc5d0\uc11c \uc124\uba85\ub41c \uc5bc\uad74 \ud0d0\uc0c9\uc5d0 \uc0ac\uc6a9\ub418\ub294 \ucd5c\uc801\uc758 \uae30\ubc95\uc774\ub2e4.","title":"\uc5bc\uad74 \uc778\uc2dd\uc744 \uc704\ud55c \uc5bc\uad74 \ud0d0\uc0c9"},{"location":"paper/facenet/#facenet_3","text":"Info \uc774 \uae00\uc740 \uc800\uc758 \ube14\ub85c\uadf8 \uae00 \uc744 \uc7ac\uc791\uc131 \ud55c \uac83\uc785\ub2c8\ub2e4.","title":"FaceNet \ub17c\ubb38\uc744 \uc704\ud55c \uc0ac\uc804 \uc218\ud559\uc9c0\uc2dd"},{"location":"paper/facenet/#norm","text":"\\(L_1\\) norm \uac70\ub9ac, \ub9e8\ud574\ud2bc \uac70\ub9ac : \ubca1\ud130 \\(a\\) \uc5d0 \ub300\ud55c \\(L_1\\) norm \uc740 \\[ ||a|| _{1} = |a_1| + |a_2| + |a_3| + \\dots + |a_n| = \\sum_{i=1}^{n}|a_i| \\] \uc774\ub2e4. Example: \ubca1\ud130 \\(a = (4, 3)\\) \uc5d0 \ub300\ud55c \\(L_1\\) norm \uc740 \uc624\ub978\ucabd\uc73c\ub85c \\(4\\) , \uc704\ub85c \\(3\\) \uc6c0\uc9c1\uc778 \uac83\uacfc \uac19\uc774 \\(7\\) \uc774\ub2e4. \uc774\ucc98\ub7fc \\(L_1\\) norm \uc740 \uc640 \uac19\uc774 \ubc14\ub451\ud310 \ubaa8\uc591\uc73c\ub85c \uc6c0\uc9c1\uc778 \ucd5c\ub2e8\uac70\ub9ac\ub97c \ub73b\ud55c\ub2e4. \\(L_2\\) norm \uac70\ub9ac, \uc720\ud074\ub9ac\ub4dc \uac70\ub9ac, \ubca1\ud130\uc758 \ud06c\uae30, Squared Distance : \ubca1\ud130 \\(a\\) \uc5d0 \ub300\ud55c \\(L_2\\) norm \uc740 \\[ ||a|| _{2} = \\sqrt[]{\\sum_{i=1}^{n}a _ i ^{2}} = \\sqrt[]{a_1 ^{2}+a_2 ^{2}+\\dots+a_n ^{2}} \\] \uc774\ub2e4. \\(L_2\\) norm \uc740 \ubca1\ud130\uc758 \ud06c\uae30\uc758 \uc815\uc758\uc640 \ub3d9\uc77c\ud558\ub2e4\uace0 \ubcfc \uc218 \uc788\ub2e4. \\(L_2\\) norm \uc740 \uc720\ud074\ub9ac\ub4dc \uae30\ud558\ud559\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub358 \uac70\ub9ac\uc640 \ub611\uac19\uace0 \uc6b0\ub9ac\uac00 \uc77c\uc0c1\uc0dd\ud65c\uc5d0\uc11c \uc9c1\uad00\uc801\uc73c\ub85c \uc0dd\uac01\ud558\ub358 \uac70\ub9ac\uc640 \ub3d9\uc77c\ud558\ub2e4. \\(L_1, L_2\\) norm \uc740 \uc120\ud615\ud68c\uadc0 \ubaa8\ub378\uc758 \uc815\uaddc\ud654 \ud56d\uc5d0\uc11c \uc0ac\uc6a9\ub41c\ub2e4. \ub17c\ubb38\uc5d0\uc11c \ub098\uc624\ub294 \uc218\uc2dd \\(\\|f(x)\\|_{2} = 1\\) \uc740 \ubca1\ud130 \\(f(x)\\) \uc758 \ud06c\uae30 \ub610\ub294 \\(L_2\\) norm \uac70\ub9ac\uac00 \\(1\\) \uc774\ub77c\ub294 \uac83\uc774\ub2e4. \\(\\|f(x_i ^{a}) - f(x_i ^{p})\\| ^{2} _{2}\\) \ub294 \ubca1\ud130 \\(f(x_i ^{a})\\) \uc640 \ubca1\ud130 \\(f(x_i ^{p})\\) \uc758 \uac70\ub9ac( \\(L_2\\) \uac70\ub9ac) \uc758 \uc81c\uacf1\uc774\ub2e4.","title":"norm \uac70\ub9ac, \ubca1\ud130 \uc0ac\uc774\uc758 \uac70\ub9ac"},{"location":"paper/facenet/#_3","text":"\uad6c\uac04(interval) : \ub450 \uc2e4\uc218 \\(a, b(a<b)\\) \uc5d0 \ub300\ud558\uc5ec \uc2e4\uc218\uc758 \uc9d1\ud569 \\[\\{x \\in \\mathbb{R} |a \\leq x \\leq b\\}, \\{x \\in \\mathbb{R} |a < x < b\\}, \\{x \\in \\mathbb{R} | a \\leq x < b\\}, \\{x \\in \\mathbb{R} |a<x \\leq b\\}\\] \ub97c \uad6c\uac04\uc774\ub77c \ud55c\ub2e4. \uae30\ud638\ub85c \uac01\uac01 \\([a,b], (a,b), [a,b), (a,b]\\) \ub77c \ud55c\ub2e4. \uad6c\uac04\uc740 \uc218\ub85c \uadf8 \ud2b9\uc131 \ud639\uc740 \uc874\uc7ac\uc790\uccb4\ub97c \uc218\ub85c \ucd94\uc0c1\ud654\ud560 \uc218 \uc788\ub294 \uc790\uc5f0\uc758 \ubaa8\ub4e0 \ub300\uc0c1\uc758 \uc9d1\ud569\uc744 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc218\ub85c \uaca9\ud558\ub420 \uc218 \uc788\ub294 \uc790\uc5f0\uc758 \uc5b4\ub5a4 \ub300\uc0c1\uc744 \uae30\uc900\uc73c\ub85c \ud558\uc5ec \ub098\ub208 \uac83\uc5d0 \ub300\uc751\ub41c\ub2e4. \ud3d0\uad6c\uac04(\ub2eb\ud78c\uad6c\uac04, closed interval) : \\([a,b]\\) \ub97c \ub2eb\ud78c\uad6c\uac04\uc774\ub77c \ud55c\ub2e4. \uc989, \\([a,b] = \\{x \\in \\mathbb{R} | a \\leq x \\leq b\\}\\) \uc774\ub2e4. \uac1c\uad6c\uac04(\uc5f4\ub9b0\uad6c\uac04, open interval) : \\((a,b)\\) \ub97c \uc5f4\ub9b0\uad6c\uac04\uc774\ub77c \ud55c\ub2e4. \uc989, \\((a,b) = \\{x \\in \\mathbb{R} | a < x < b\\}\\) \uc774\ub2e4. \ud2b9\ud788 \uc2e4\uc218 \uc804\uccb4\uc758 \uc9d1\ud569\ub3c4 \ud558\ub098\uc758 \uad6c\uac04\uc73c\ub85c \ubcf4\uace0 \uac1c\uad6c\uac04 \\((-\\infty, \\infty)\\) \ub85c \ub098\ud0c0\ub0b8\ub2e4. Tip \\(\\infty\\) \ub294 \ud2b9\uc815\ud55c \uac12\uc774 \uc544\ub2c8\uace0 \"\ud55c\uc5c6\uc774 \ucee4\uc9c0\uace0 \uc788\ub294 \uc0c1\ud0dc\" \ub97c \ub098\ud0c0\ub0b4\uae30 \ub54c\ubb38\uc5d0 \\([-\\infty, \\infty]\\) \ub098 \\((a, \\infty]\\) \uc640 \uac19\uc774 \\(\\infty\\) \ub97c \ud3d0\uad6c\uac04\uacfc \uc5ee\uc9c0 \uc54a\ub294\ub2e4. \uc2e4\uc218 \\(x\\) \uc758 \uac12\uc774 \ud55c\uc5c6\uc774 \ucee4\uc9c8 \uc218\ub294 \uc788\uc5b4\ub3c4 \\(x = \\infty\\) \ub77c\ub294 \uac12\uc744 \uac00\uc9c8 \uc218\ub294 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4. References : \uc800\uc758 \ube14\ub85c\uadf8 \u314e\u314e - \ubca1\ud130 \uc800\uc758 \ube14\ub85c\uadf8 \u314e\u314e - \ud574\uc11d","title":"\ud3d0\uad6c\uac04"},{"location":"paper/facenet/#facenet-a-unified-embedding-for-face-recognition-and-clustering","text":"","title":"\u300aFaceNet: A Unified Embedding for Face Recognition and Clustering\u300b"},{"location":"paper/facenet/#abstract","text":"\uc6b0\ub9ac\ub294 \uc774 \ub17c\ubb38\uc5d0\uc11c \uc5bc\uad74 \uc720\uc0ac\ub3c4\uac00 \uac70\ub9ac\uc778 \uc720\ud074\ub9ac\ub4dc \uacf5\uac04\uc73c\ub85c \uc5bc\uad74 \uc0ac\uc9c4\uc744 \uc0ac\uc0c1(mapping)\uc2dc\ud0a4\ub294 \uac83\uc744 \ud559\uc2b5\ud558\ub294 FaceNet \uc774\ub77c\ub294 \uc2dc\uc2a4\ud15c\uc744 \uc18c\uac1c\ud55c\ub2e4. \uc5bc\uad74 \uc720\uc0ac\ub3c4\uac00 \uac70\ub9ac\uc778 \uc720\ud074\ub9ac\ub4dc \uacf5\uac04\uc774 \uc0dd\uc131\ub418\uba74 \uc5bc\uad74 \uac80\uc99d( \uac19\uc740 \uc0ac\ub78c\uc778\uac00? ), \uc5bc\uad74 \ud655\uc778( \ub204\uad6c\uc778\uac00? ), \uc5bc\uad74 \uad70\uc9d1\ud654( \ube44\uc2b7\ud55c \uc5bc\uad74\uc744 \ubaa8\uc73c\ub294 \uac83 )\uac00 \ub9e4\uc6b0 \uc26c\uc6cc\uc9c4\ub2e4. \uc5bc\uad74 \uc720\uc0ac\ub3c4\uac00 \uac70\ub9ac\uc778 \uc720\ud074\ub9ac\ub4dc \uacf5\uac04\uc744 \ub9cc\ub4e4\uae30 \uc704\ud558\uc5ec \uc6b0\ub9ac\ub294 deep convolutional network \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc911\uac04\uce35\uc744 \ucd5c\uc801\ud654(\ud559\uc2b5)\ud558\ub294 \uac83\uc774 \uc544\ub2cc embedding(\uc5bc\uad74\uc5d0\uc11c \ucd94\ucd9c\ud55c \ubca1\ud130) \uc790\uccb4\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \ucd5c\uc801\ud654(\ud559\uc2b5)\uc2dc\ucf30\ub2e4. \ud559\uc2b5\uc744 \uc704\ud558\uc5ec triplets \uc744 \uc0ac\uc6a9\ud558\uc600\ub2e4. \uc774\ub85c\uc368 \uc6b0\ub9ac\ub294 \uc5bc\uad74 \ud558\ub098\ub2f9 \ub2e8\uc9c0 128 \ubc14\uc774\ud2b8\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud604\uc874\ud558\ub294 \uc5bc\uad74 \uc778\uc2dd \uc2dc\uc2a4\ud15c \uc911 \ucd5c\uace0\uc758 \uc131\ub2a5\uc744 \uc774\ub04c\uc5b4\ub0bc \uc218 \uc788\uc5c8\ub2e4. \uc6b0\ub9ac\ub294 \ub610\ud55c harmonic embeddings \uacfc harmonic triplet loss \ub77c\ub294 \ub610 \ub2e4\ub978 \uc5bc\uad74 embedding \ubc29\ubc95\uc744 \uc18c\uac1c\ud55c\ub2e4. \uc774 \ub450 embedding \ubc29\uc2dd\uc744 \uc11c\ub85c \ube44\uad50\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4.","title":"Abstract"},{"location":"paper/facenet/#1-introduction","text":"\uc6b0\ub9ac\ub294 deep convolutional network \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc774\ubbf8\uc9c0\uc758 \uc720\ud074\ub9ac\ub4dc embedding \uc744 \ud559\uc2b5\ud55c\ub2e4. \uc774 network \ub294 \uc5bc\uad74 \uc720\uc0ac\ub3c4\uac00 \uace7 \\(L_2\\) \uac70\ub9ac\uc778 embedding \uacf5\uac04\uc744 \ud559\uc2b5\ud558\uac8c \ub41c\ub2e4. Figure 1. Illumination and Pose invariance ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) \uc704 \uadf8\ub9bc\uc744 \ubcf4\uc790. \uc218\ud3c9\uc73c\ub85c\ub294 \uac19\uc740 \uc778\ubb3c\uc758 \uc0ac\uc9c4\uc774\uace0 \uc218\uc9c1\uc73c\ub85c\ub294 \ub2e4\ub978 \uc778\ubb3c\uc758 \uc0ac\uc9c4\uc774\ub2e4. \ub610\ud55c \uc218\ud3c9\uc73c\ub85c\ub294 \ub2e4\ub978 \ud3ec\uc988\ub97c \ucde8\ud558\uace0 \uc788\ub2e4. \uc774\ub54c \ub450 \uc0ac\uc9c4\uac04\uc758 \uc720\uc0ac\ub3c4, \uc989 \uac70\ub9ac\uac00 \\(1.04, 1.22, 1.33, \\dots\\) \ub4f1\uc73c\ub85c \uacc4\uc0b0\ub41c \uac83\uc774\ub2e4. \uc774 \uac12\uc740 \ud3d0\uad6c\uac04 \\([0, 4]\\) \uc5d0 \uc874\uc7ac\ud55c\ub2e4. \uac12\uc774 \\(0.0\\) \uc774\uba74 \uc5bc\uad74\uc774 \ub611\uac19\uc74c\uc744 \uc758\ubbf8\ud558\uace0 \uac12\uc774 \\(4.0\\) \uc774\uba74 \uc5bc\uad74\uc774 \ub2e4\ub974\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc774 \uacf5\uac04\uc774 \uc0dd\uc131\ub418\uba74 \uc5bc\uad74 \uc778\uc2dd \uc2dc\uc2a4\ud15c\uc758 \uace0\uc804\uc801\uc778 \ubb38\uc81c\ub4e4\uc758 \ud574\uacb0\uc774 \ub9e4\uc6b0 \uc26c\uc6cc\uc9c4\ub2e4. \uc5bc\uad74 \uac80\uc99d\uc740 \ub2e8\uc9c0 \ub450 embedding \uac04\uc758 thresholding \uc744 \uc815\ud558\ub294 \uac83\uc73c\ub85c \uadc0\uacb0\ub418\uace0, \uc5bc\uad74 \ud655\uc778\uc740 k-NN \ubd84\ub958\uae30\uc758 \ubb38\uc81c\uac00 \ub418\uba70, \uc5bc\uad74 \uad70\uc9d1\ud654\ub294 k-mean \ub098 agglomerative clustering \uac19\uc740 off-the-shelf \uae30\uc220\ub85c \ud574\uacb0\ud560 \uc218 \uc788\ub2e4. Example Figure 1. \uc5d0\uc11c thresholding \uc744 \\(1.1\\) \ub85c \ub450\uba74 \ubaa8\ub4e0 \uc5bc\uad74 \uc0ac\uc9c4\uc744 \uc798 \ubd84\ub958\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.","title":"1. Introduction"},{"location":"paper/facenet/#2-related-work","text":"Deeply learned facerepresentations are sparse, selective, and robust [15] \uc640 Deepface:Closing the gap to human-level performance in face verifica-tion [17] \uc640 \ube44\uc2b7\ud558\uac8c \uc6b0\ub9ac\ub3c4 \uc21c\uc218\ud558\uac8c data driven method \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc5bc\uad74 \uc0ac\uc9c4\uc758 \ud53d\uc140\ub85c\ubd80\ud130 \uadf8\uac83\uc744 \ud2b9\uc815\ud560 \uc218 \uc788\ub294 \ud2b9\uc9d5\uc744 \ud559\uc2b5\ud588\ub2e4. \uc6b0\ub9ac\ub294 \ub77c\ubca8\ub9c1 \ub41c \uc5bc\uad74 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uac00\ubcc0\ud558\ub294 \ud3ec\uc988, \uba85\ub3c4, \ub2e4\uc591\ud55c \uc870\uac74\uc5d0\uc11c \ubd88\ubcc0\ud558\ub294 \ud2b9\uc131\uc744 \uc5bb\uc5c8\ub2e4. \ubcf8 \ub17c\ubb38\uc5d0\uc11c\ub294 \ucef4\ud4e8\ud130 \ube44\uc804\uc5d0\uc11c \uc88b\uc740 \uc131\uacfc\ub97c \ub0b4\uace0 \uc788\ub294 \ub450 \uac00\uc9c0 \uc2e0\uacbd\ub9dd \uad6c\uc870\ub97c \uc124\uba85\ud55c\ub2e4. \ub450 \uac1c \ub2e4 deep convolutional network \uc774\ub2e4. \ud558\ub098\ub294 Backpropagation Applied to Handwritten Zip Code Recognition [8] \uc774\uace0 \ud558\ub098\ub294 Learningrepresentations by back-propagating errors [11] \uc774\ub2e4. \uccab\ubc88\uc9f8 \ubaa8\ub378\uc740 \uc5ec\ub7ec\uac1c\uc758 interleaved convolutional layers \uc640 non-linear activations \uacfc local response normalizations \uc640 max pooling layers \ub85c \uad6c\uc131\ub41c Visualizing and understandingconvolutional networks [22] \uc758 \ubaa8\ub378\uc744 \uae30\ubc18\uc73c\ub85c \ud55c\ub2e4. \uc6b0\ub9ac\ub294 Network in network [9] \uc5d0\uc11c \ucc29\uc548\ud558\uc5ec \uba87\uba87\uc758 \\(1 \\times 1 \\times d\\) convolutional layers \ub97c \ucd94\uac00\ud588\ub2e4. \ub450\ubc88\uc9f8 \ubaa8\ub378\uc740 ImageNet 2014 \uc5d0\uc11c \uc0ac\uc6a9\ub41c Szegedy \uc758 Inception model Going deeper with convolutions [16] \uc744 \uae30\ubc18\uc73c\ub85c \ud55c\ub2e4. \uc774 \ubaa8\ub378\uc740 \ubcd1\ud589\ud574\uc11c \uc2e4\ud589\ub418\ub294 \uba87 \uac1c\uc758 \ub2e4\ub978 convolutional \uacfc pooling layers \uac00 \uc11e\uc778 layers \ub97c \uc0ac\uc6a9\ud558\uace0 \uadf8\uac83\ub4e4\uc758 \ucd9c\ub825\uc744 \ud569\uce5c\ub2e4.","title":"2. Related Work"},{"location":"paper/facenet/#3-method","text":"Figure 2. \ubaa8\ub378 \uad6c\uc870. FaceNet \uc740 \ubc30\uce58 \uc785\ub825\uce35, deep CNN \uce35, embedding \uc744 \ucd9c\ub825\ud558\ub294 \\(L_2\\) normalization \uce35, triplet loss \uce35\uc73c\ub85c \uad6c\uc131\ub41c\ub2e4. ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) Figure 3. Triplet Loss \ub294 \uac19\uc740 \uc2e0\uc6d0\uc744 \uac00\uc9c4 anchor \uc640 positive \uc758 \uac70\ub9ac\ub97c \ucd5c\uc18c\ud654 \uc2dc\ud0a4\uace0 \ub2e4\ub978 \uc2e0\uc6d0\uc744 \uac00\uc9c4 anchor \uc640 negative \uc758 \uac70\ub9ac\ub97c \ucd5c\ub300\ud654 \uc2dc\ud0a8\ub2e4. ( FaceNet: A Unified Embedding for Face Recognition and Clustering ) FaceNet \uc740 deep convolutional network \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc6b0\ub9ac\ub294 \ub450 \uac00\uc9c0 \ud575\uc2ec \uad6c\uc870\ub97c \ub17c\uc758\ud560 \uac83\uc774\ub2e4. \uccab\uc9f8\ub294 Visualizing and understandingconvolutional networks [22] \uc2a4\ud0c0\uc77c\uc758 networks \uc774\uace0 \ub458\uc9f8\ub294 Going deeper with convolutions [16] \uc758 Inception \ud0c0\uc785\uc758 networks \uc774\ub2e4. \uc774 networks \uc758 \uc790\uc138\ud55c \uc124\uba85\uc740 3.3 \uc5d0\uc11c \ud55c\ub2e4. \uc774 \ubaa8\ub378\uc744 Figure 2. \uc5d0\uc11c \ud68c\uc0c9\ubc15\uc2a4\ub85c \ud45c\ud604\ud588\ub2e4. Figure 2. \uc5d0\uc11c \ubcfc \uc218 \uc788\ub4ef \uac00\uc7a5 \uc911\uc694\ud55c \uac83\uc740 \uc5b4\ub5bb\uac8c \uc5bc\uad74 \uc0ac\uc9c4\uc744 \uadf8 \ud2b9\uc9d5\uc744 \ub300\ud45c\ud560 \uc218 \uc788\ub294 \ubca1\ud130\ub85c \ubcc0\ud658\ud558\ub290\ub0d0\uc774\ub2e4. \uc989, \uc6b0\ub9ac\ub294 \uc870\uac74(\ud3ec\uc988, \uba85\ub3c4 \ub4f1)\uc5d0 \uad00\uacc4\uc5c6\uc774 \ubaa8\ub4e0 \uc5bc\uad74 \uc0ac\uc9c4\uc5d0 \ub300\ud558\uc5ec \uac19\uc740 \uc2e0\uc6d0\uc758 \\(L_2\\) \uac70\ub9ac\ub294 \uc791\uace0 \ub2e4\ub978 \uc2e0\uc6d0\uc758 \\(L_2\\) \uac70\ub9ac\ub294 \uba3c feature space \\(\\mathbb{R}^{d}\\) \uc5d0 \uc5bc\uad74 \uc0ac\uc9c4 \\(x\\) \uc744 \uc0ac\uc0c1\uc2dc\ud0a4\ub294 \ud568\uc218 \\(f(x)\\) \uc744 \ucc3e\uc544\ubcfc \uac83\uc774\ub2e4. \uc5ec\uae30\uc5d0\uc11c \ub2e4\ub978 \uc190\uc2e4 \ud568\uc218\uc640 triplet \uc744 \ube44\uad50\ud574\ubcf4\uc9c0\ub294 \uc54a\uaca0\uc9c0\ub9cc, \uadf8\ub798\ub3c4 triplet \uc774 \uc5bc\uad74 \uac80\uc99d\uc5d0\ub294 \uac00\uc7a5 \uc88b\uc744 \uac83\uc774\ub2e4. Deep learning facerepresentation by joint identification-verification [14] \uc5d0\uc11c\uc758 \uc190\uc2e4\ud568\uc218\ub294 \ud55c \uc2e0\uc6d0\uc758 \ubaa8\ub4e0 \uc5bc\uad74\uc744 embedding \uacf5\uac04\uc758 \ud55c \uc810\uc5d0 \uc0ac\uc601\uc2dc\ud0a8\ub2e4. \uc774\uac83\uc740 \uc5b5\uc9c0\ub85c \ub2e4\ub978 \uc2e0\uc6d0\uacfc\uc758 \uac70\ub9ac\uacfc \ucc28\ubcc4\uc131\uc744 \uac15\ud654\ud558\uba74\uc11c\ub3c4 \ud55c \uc2e0\uc6d0\uc758 \uc5bc\uad74\ub4e4\uc774 manifold \uc5d0 \uc788\uac8c \ud55c\ub2e4.","title":"3. Method"},{"location":"paper/facenet/#4-datasets-and-evaluation","text":"\uc6b0\ub9ac\ub294 \ub124\uac00\uc9c0 \ub370\uc774\ud130\uc14b\uc5d0 \ub300\ud558\uc5ec \uc6b0\ub9ac\uc758 \ubc29\ubc95\uc744 \ud3c9\uac00\ud574\ubcf4\uc558\ub2e4. \uc8fc\uc5b4\uc9c4 \ub450 \uc5bc\uad74 \uc0ac\uc9c4\uc758 embedding \ubca1\ud130 \\(x_i,x_j\\) \uc758 \uac70\ub9ac \\(D(x_i, x_j)\\) \ub97c \uad6c\ud558\uc5ec \uc11c\ub85c \uac19\uc740\uc9c0 \ub2e4\ub978\uc9c0 \ubd84\ub958\ud574\ubd24\ub2e4. \uc774\ub54c \ubaa8\ub4e0 \uac19\uc740 \uc2e0\uc6d0\uc758 \uc5bc\uad74 \uc21c\uc11c\uc30d \\((i, j)\\) \uc758 \ubaa8\uc74c\uc744 \\(\\mathcal{P} _{\\text{same}}\\) \ub77c\uace0 \ud558\uace0 \ubaa8\ub4e0 \ub2e4\ub978 \uc2e0\uc6d0\uc758 \uc5bc\uad74 \uc21c\uc11c\uc30d\uc758 \ubaa8\uc74c\uc744 \\(\\mathcal{P} _{\\text{diff}}\\) \ub77c\uace0 \ud558\uc790. \uadf8\ub7ec\uba74 threshold \\(d\\) \uc5d0 \ub300\ud558\uc5ec \uac19\ub2e4\uace0 \ubd84\ub958\ub418\uc5c8\uace0 \uc62c\ubc14\ub974\uac8c \ubd84\ub958\ub41c \uc5bc\uad74 \uc21c\uc11c\uc30d \ubaa8\uc74c true accepts \ub97c \\[ \\text{TA}(d) = \\{(i, j) \\in \\mathcal{P} _{\\text{same}} | D(x_i, x_j) \\leq d\\} \\tag{5} \\] \ub77c\uace0 \ud560 \uc218 \uc788\uace0, \uac19\ub2e4\uace0 \ubd84\ub958\ub418\uc5c8\uc9c0\ub9cc \uc62c\ubc14\ub974\uac8c \ubd84\ub958\ub418\uc9c0 \uc54a\uc740 \uc5bc\uad74 \uc21c\uc11c\uc30d \ubaa8\uc74c false accept \ub97c \\[ \\text{FA}(d) = \\{(i, j) \\in \\mathcal{P} _{\\text{diff}} | D(x_i, x_j) \\leq d\\} \\tag{6} \\] \ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74 \uac80\uc99d\uc131\uacf5\ub960 validation rate \\(\\text{VAL}(d)\\) \uacfc false accept rate \\(\\text{FAR}(d)\\) \ub97c \uc8fc\uc5b4\uc9c4 \uc5bc\uad74 \uac70\ub9ac \\(d\\) \uc5d0 \ub300\ud558\uc5ec \\[ \\text{VAL}(d) = \\dfrac{|\\text{TA}(d)|}{|\\mathcal{P} _{\\text{same}}|}, \\text{FAR}(d) = \\dfrac{|\\text{FA(d)|}}{|\\mathcal{P} _{\\text{diff}}|} \\tag{7} \\] \ub85c \uc815\uc758\ud560 \uc218 \uc788\ub2e4. Note \uc9d1\ud569 \\(A\\) \uc5d0 \ub300\ud55c \uc9d1\ud569\uc758 \ud06c\uae30, \uc989 \uc6d0\uc18c \uac1c\uc218(cardinality) \ub97c \\(|A|\\) \ub85c \ud45c\uae30\ud55c\ub2e4.","title":"4. Datasets and Evaluation"},{"location":"paper/facenet/#5-experiments","text":"\uc6b0\ub9ac\ub294 8\ubc31\ub9cc\uac1c\uc758 \uc11c\ub85c \ub2e4\ub978 \uc2e0\uc6d0\uc758 1\uc5b5\uc5d0\uc11c 2\uc5b5\uac1c\uc758 \ud6c8\ub828 \ub370\uc774\ud130\uc14b\uc744 \uc0ac\uc6a9\ud588\uc5b4. \uba3c\uc800 face detector \ub85c \uac01 \uc5bc\uad74 \uc0ac\uc9c4\uc740 \uc5bc\uad74\uc5d0 \ub9de\uac8c crop \uc2dc\ucf1c\uc11c \uc378\ub124\uc77c\uc744 \uc0dd\uc131\ud588\uc5b4. \uc774 \uc378\ub124\uc77c\uc744 \\(96 \\times 96\\) \uc5d0\uc11c \\(224 \\times 224\\) \uc758 \ud06c\uae30\ub85c \uac01 \ubaa8\ub378\uc758 \uc785\ub825\uc5d0 \ub9de\uac8c \ud06c\uae30 \uc870\uc815\uc744 \ud574\uc11c \uc2e4\ud5d8\ud588\uc9c0.","title":"5. Experiments"},{"location":"paper/facenet/#6-summary","text":"\uc6b0\ub9ac\ub294 \uc5bc\uad74 \uc0ac\uc9c4\uc744 \uac70\ub9ac\uac00 \uc720\uc0ac\ub3c4\uc778 \uc720\ud074\ub9ac\ub4dc \uacf5\uac04\uc5d0 embedding \ud558\ub294 \ubc29\ubc95\uc744 \uc18c\uac1c\ud588\uc5b4. \uc774\uac74 \uc9c0\uae08\uae4c\uc9c0\uc640\uc758 \ubc29\ubc95\uacfc \ub2e4\ub974\uac8c \uc911\uac04 layers \ub97c \ud559\uc2b5\ud558\ub294 \uac83\uc5d0 \uc9d1\uc911\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c embedding \uc790\uccb4\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \ud559\uc2b5\uc2dc\ud0a4\ub294 \uac70\ub77c \ud601\uc2e0\uc801\uc774\uc9c0. References : FaceNet: A Unified Embedding for Face Recognition and Clustering","title":"6. Summary"},{"location":"paper/quadruplet/","text":"\u300aBeyond triplet loss: a deep quadruplet network for person re-identification\u300b \u00b6 \ub17c\ubb38+\ud574\uc124 \uc815\ub9ac \ud574\ub460. https://ccss17.github.io/paper/quadruplet/","title":"Quadruplet"},{"location":"paper/quadruplet/#beyond-triplet-loss-a-deep-quadruplet-network-for-person-re-identification","text":"\ub17c\ubb38+\ud574\uc124 \uc815\ub9ac \ud574\ub460. https://ccss17.github.io/paper/quadruplet/","title":"\u300aBeyond triplet loss: a deep quadruplet network for person re-identification\u300b"},{"location":"paper/resnet/","text":"ResNet \ub17c\ubb38 \uc815\ub9ac \u00b6 Info \uc774 \uae00\uc740 Deep residual learning for image recognition \ub17c\ubb38\uc744 \ubd84\uc11d\ud558\uace0 \uc774\ud574\ub97c \ub3d5\uae30\uc704\ud568 \uc785\ub2c8\ub2e4. \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : Degradation : Reformation : Identity mapping : \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 : 0.Abstract \u00b6 \uc774 \ub17c\ubb38\uc5d0 ResNet\uc740 152\uac1c\uc758 layer\ub85c \uad6c\uc131\ub418\uc5c8\uace0, ILSVRC 2015 ImageNet Dataset classification \ubd80\ubd84\uc5d0\uc11c top-5 error 3.57%\ub85c 1\uc704\ub97c \uae30\ub85d\ud558\uc600\ub2e4. \ub610\ud55c ImageNet Dataset\ubfd0\ub9cc\uc774 \uc544\ub2c8\ub77c, CIFAR-10\ub4f1 \ub2e4\uc591\ud55c \ub370\uc774\ud130\uc14b\uc5d0\uc11c\ub3c4 \uc88b\uc740 \uc131\ub2a5\uc744 \ub0b4\uace0 \uc788\ub2e4. \uc774\ub294 \uc804\ub144\ub3c4 \uc6b0\uc2b9 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870\uc778 GoogleNet\uc758 22\uac1c\uc758 layer\ubcf4\ub2e4 \ubb34\ub824 8\ubc30\ub098 \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c\ub97c \ub9cc\ub4e4\uc5b4 \uc131\uacf5\uc2dc\ucf30\ub2e4\ub294 \uc810\uc5d0\uc11c \ub525\ub7ec\ub2dd \uc5ed\uc0ac\uc5d0 \ud55c \ud68d\uc744 \uadf8\uc740 \ub17c\ubb38\uc73c\ub85c \ud3c9\uac00 \ubc1b\uace0 \uc788\ub2e4. \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95 Degradation : Reformation : Identity mapping : \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 : 1.Introduction \u00b6 \ub124\ud2b8\uc6cc\ud06c\ub97c \uae4a\uac8c \uc313\uc73c\uba74 \ubc1c\uc0dd\ud558\ub294 \ubb38\uc81c\ub85c \uac00\uc7a5 \ud655\uc5f0\ud788 \ub4e4\uc5b4\ub098\ub294 \ub450\uac00\uc9c0\uac00 \ubc14\ub85c overfitting \ubb38\uc81c\uc640 degradation \ubb38\uc81c\uc774\ub2e4. \ud558\uc9c0\ub9cc, \uc774 \ub17c\ubb38\uc5d0\uc11c \uc81c\uc2dc\ud558\ub294 \ubb38\uc81c\ub294 \uc774\uc911 degradation \ubb38\uc81c\uc774\ub2e4. name ( from ) Success \uc65c\ub0d0\ud558\uba74 56 \ub808\uc774\uc5b4 \ubaa8\ub378\uacfc 20 \ub808\uc774\uc5b4 \ubaa8\ub378\uc744 \ube44\uad50\ud55c \uacb0\uacfc \ud14c\uc2a4\ud2b8\uc640 \ud2b8\ub808\uc774\ub2dd \ub458\ub2e4\uc758 \uc5d0\ub7ec\uc728\uc774 \ub354 \uae4a\uc740 56 \ub808\uc774\uc5b4 \ubaa8\ub378\uc774 \ub354 \ub192\uc558\uae30 \ub54c\ubb38\uc774\ub2e4. \ub9cc\uc57d \uc774\uac8c \uc624\ubc84\ud53c\ud305\uc758 \ubb38\uc81c\uc600\ub2e4\uba74, \ud2b8\ub808\uc774\ub2dd\uc5d0\uc11c\ub294 \ub354 \uae4a\uc740 56\ub808\uc774\uc5b4\uc758 \uc5d0\ub7ec\uc728\uc774 \ub354 \uc791\uace0, \ud14c\uc2a4\ud2b8\uc5d0\uc11c\ub9cc 56\ub808\uc774\uc5b4\uc758 \uc5d0\ub7ec\uac00 \ub354 \ub192\uc558\uc5b4\uc57c \ud55c\ub2e4. \uadf8\ub7f0\uc810\uc73c\ub85c \ubd24\uc744\ub54c, \ubaa8\ub378\uc744 \ub354 \uae4a\uc774 \uc313\uc558\uc744\ub54c \ud574\uacb0\ub418\uc5b4\uc57c \ud558\ub294 \uadfc\ubcf8\uc801\uc778 \ubb38\uc81c\uc911 \ud558\ub098\ub294 degradation \ubb38\uc81c\uc774\ub2e4. Note degradation\uc740 vanishing gradient \uc640 exploding gradient \ubb38\uc81c\ub97c \ud569\uccd0\uc11c \uc774\uc57c\uae30 \ud55c\ub2e4. \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95 Degradation : \uc624\ubc84\ud53c\ud305\uacfc\uc758 \ucc28\uc774 \ud30c\uc545 Reformation : Identity mapping : \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 : 2.Deep Residual Learning \u00b6 \uadf8\ub807\ub2e4\uba74 \uc774 \ub17c\ubb38\uc5d0\uc11c\ub294 \uc5b4\ub5bb\uac8c degradation \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uace0 \uc788\uc744\uae4c? \uc774 \ub17c\ubb38\uc5d0\uc11c\ub294 \u201cResidual Learning Framework\u201d\ub97c \ub3c4\uc785\ud558\uc5ec \uc131\ub2a5 \uc800\ud558 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uace0 \uc788\ub2e4. Residual learning\uc744 \ud1b5\ud574\uc11c optimize\uac00 \ub354 \uc26c\uc6cc\uc9c0\uace0, accuracy\uac00 \ub354 \ub192\uc544\uc9c4\ub2e4\ub294 \ub450\uac00\uc9c0 \uc7a5\uc810\uc774 \uc788\ub2e4. Reformation\uc744 \ud1b5\ud574 \ub808\uc988\ub137\uc740 few stacked layer\ub97c underlying mapping\uc744 \uc9c1\uc811 \ud559\uc2b5\ud558\uc9c0 \uc54a\uace0, residual mapping\uc5d0 \ub9de\ucd94\uc5b4 \ud559\uc2b5\ud558\ub3c4\ub85d \ud55c\ub2e4. Reformation\uc774\ub780 H(x) = F(x) + x \uc5d0\uc11c x\ub97c \uc774\ud56d\ud558\uc5ec F(x)\ub294 H(x)-x \ub77c\ub294 \uac12\uc73c\ub85c \ub9cc\ub4dc\ub294 \uac83\uc744 \uc758\ubbf8 \ud55c\ub2e4. Success underlying mapping \uc989, \uc6d0\ub798\uc758 original mapping\uc744 H(x)\ub85c \ub098\ud0c0\ub0b8\ub2e4\uba74, residual mapping\uc774 \uc544\ub2cc \uac83\uc740 H(x)\ub97c \ucc98\uc74c\ubd80\ud130 \uadf8 \uc790\uccb4\ub97c \ud559\uc2b5\ud560 \uac83\uc774\uace0, variance\uac00 \ub530\ub7ec\uc11c \ub9e4\uc6b0 \ud074 \uac83\uc774\uaca0\uc9c0\ub9cc, residual learning \uc5d0\uc11c\ub294 H(x) = F(x) + x \ub97c \uc774\uc6a9\ud574\uc11c, stacked nonlinear layer\uc758 mapping\uc778 F(x)\ub294 H(x)-x \ub97c \ud559\uc2b5\ud558\ub294 \uac83\uc774\ub2e4. \uc774\uac83\uc744 \ud1b5\ud574\uc11c F(x)\ub294 0\uc774 \ubaa9\ud45c\ub77c\ub294 \ud2b9\uc9d5\uc744 \uac00\uc9c0\uae30 \ub54c\ubb38\uc5d0 variance\ub294 \ub9e4\uc6b0 \uc791\uc544\uc9c0\uace0, optimize\uac00 \ub354 \uc26c\uc6cc\uc9c4\ub2e4\ub294 \uc7a5\uc810\uc774 \uc0dd\uae34\ub2e4. original mapping\uc740 F(x)+x \ub85c \uc7ac\uad6c\uc131 \ub41c\ub2e4. Note deep learning\uc5d0\uc11c \uc5d0\ub7ec\uc728\uc5d0\ub294 variance\uac00 \uc601\ud5a5\uc744 \ub07c\uce58\ub294 \uc694\uc18c\uc774\ub2e4. variance\uac00 \ud06c\uba74,overfitting\uc758 \ud655\ub960\uc774 \ub192\uc544\uc9c0\uace0 \ubaa8\ub378 \ud559\uc2b5\uc5d0 \uc5b4\ub824\uc6c0\uc774 \uc0dd\uae34\ub2e4. \ubc18\uba74 variance\uac00 \uc791\uc73c\uba74,\uc77c\ubc18\ud654\uc5d0 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. \ud558\uc9c0\ub9cc \ubb34\uc870\uac74 \uc774\uac8c \ud56d\uc0c1 \ub9de\ub294\uac83\uc774 \uc544\ub2c8\ub2e4. \uc5ec\uae30\uc5d0 \ub300\ud574\uc11c \ub354 \uc644\uc804\ud788 \uc790\uc138\ud788 \uc54c\uace0 \uc2f6\ub2e4\uba74, bias-variance trade-off\uc5d0 \ub300\ud574 \uacf5\ubd80\ud574\uc57c\ud558\uace0, \uc544\ub798 \ube14\ub85c\uadf8\uc758 \uadf8\ub9bc\ub4e4\uc744 \ucc38\uc870\ud558\ub77c : bias-variance trade-off Residual learning\uc5d0\uc11c \uc54c\uc544\uc57c\ud560 \uc815\ub9d0 \uc911\uc694\ud55c \ub2e8\uc5b4\uc911 \ud558\ub098\uac00 \ubc14\ub85c shortcut connection\uc774\ub77c\uace0\ub3c4 \ubd88\ub9ac\ub294 identity mapping \uc774\ub2e4. Success identity mapping\uc744 \ud1b5\ud574\uc11c, \ucd5c\uc18c\ud55c \ud55c\ucabd\uc758 gradient\ub294 \uacc4\uc18d \ud750\ub97c \uc218 \uc788\uac8c mapping \ud574\uc90c\uc73c\ub85c\uc368 \uc6b0\ub9ac\ub294 \ub354 \uc595\uc740 \ub124\ud2b8\uc6cc\ud06c\ubcf4\ub2e4 \ucd5c\uc18c\ud55c \ub354 \ub098\uc058\uc9c0\ub294 \uc54a\uc740 \uacb0\uacfc\ub97c \ubcf4\uc7a5 \ubc1b\uc744 \uc218 \uc788\ub2e4.\ub610, \uc774\ub97c \ud1b5\ud574 vanishing gradient \uc640 exploding gradient \uc989 degradation \ubb38\uc81c\ub97c \ud574\uacb0\ud560 \uc218 \uc788\uace0, \ubaa8\ub378\uc744 \ub354 \uae4a\uac8c \uc313\uc744 \uc218 \uc788\uac8c \ub418\uc5b4\uc11c \uacb0\uad6d \ub354 \uc88b\uc740 accuracy\uac00 \uc885\uc885 \ub098\ud0c0\ub09c\ub2e4. Tip \ub9cc\uc57d \uc704\uc758 \uc0ac\uc9c4\uacfc \uc124\uba85\uc744 \ubcf4\uc558\ub294\ub370\ub3c4 \ub808\uc988\ub137\uc774 \uc544\uc9c1\ub3c4 \uc644\uc804\ud788 \uc774\ud574\uac00 \uac00\uc9c0 \uc54a\ub294\ub2e4\uba74, \uc218\uc2dd\uc801\uc73c\ub85c \uc99d\uba85\ud574 \ubcf4\ub294\uac83\uc744 \ucd94\ucc9c\ud55c\ub2e4. \uadf8\ub7ec\uba74 \uc644\uc804\ud788 \uba38\ub9ac \uc18d\uc73c\ub85c \uc774 \uacfc\uc815\uc774 \uc774\ud574\uac00 \ub420\uac83\uc774\ub2e4. \uc774 \ub808\uc988\ub137 \ub17c\ubb38\uc740 \uacbd\ud5d8\uc801\uc73c\ub85c \uae30\uc220\ub418\uc5c8\ub2e4. \uc774\ud6c4\uc5d0 \uc774 \ub808\uc988\ub137\uc774 \uc65c \ud6a8\uacfc\uac00 \uc788\ub294\uc9c0 \uc124\uba85\ud55c \ud6c4\uc18d \ub17c\ubb38\ub4e4\uc774 \ub9ce\uc774 \ub098\uc640 \uc788\ub2e4. \uc6d0\ubcf8\uc744 \uc77d\uace0 \uc2f6\ub2e4\uba74, Identity Mappings in Deep Residual Networks \ub77c\ub294 \ub17c\ubb38\uc744 \uc77d\uc73c\uba74 \ub41c\ub2e4. \ub098\ub294 \ube60\ub974\uac8c \uc798 \uc774 \ub17c\ubb38\uc744 \uc815\ub9ac\ud574\ub454 \ube14\ub85c\uadf8\ub97c \ud558\ub098 \ucd94\ucc9c\ud574 \uc8fc\ub824\uace0 \ud55c\ub2e4. \uccab\ubc88\uc9f8 \uc218\uc2dd \uc99d\uba85\uc744 \uc798 \ud655\uc778\ud574\ubcf4\uae30\ub97c \ubc14\ub780\ub2e4. \uc218\uc2dd \uad00\ub828 \ucd94\ucc9c \ub17c\ubb38 \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95 Degradation : \uc624\ubc84\ud53c\ud305\uacfc\uc758 \ucc28\uc774 \ud30c\uc545 Reformation : easy to optimize Identity mapping : increase accuracy \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 : 3.Network Architecture \u00b6 \ub9e8 \uc67c\ucabd \ubd80\ud130 VGGnet, plain, residual \uc758 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 \uc785\ub2c8\ub2e4. Plain Network\uc758 \uacbd\uc6b0, \ub300\ubd80\ubd84 3*3 convolutional \ud544\ud130\ub85c \uc774\ub8e8\uc5b4\uc838\uc788\ub2e4. \uc5ec\uae30\ub294 \ub8f0\uc774 \ub450\uac00\uc9c0 \uc788\ub294\ub370, \ud558\ub098\ub294 \ud53c\uccd0\ubc41\uacfc \uac19\uc740 \uc0ac\uc774\uc988\uc758 \uc544\uc6c3\ud48b\uc77c\uacbd\uc6b0 \ub808\uc774\uc5b4\ub294 \uac19\uc740 \uac1c\uc218\uc758 \ud544\ud130\ub97c \uac00\uc9c0\uac8c \ud558\ub294\uac83\uc774\ub2e4. \ub450\ubc88\uc9f8\ub85c\ub294 \ub9cc\uc57d \ud53c\uccd0\ub9e5 \uc0ac\uc774\uc988\uc758 \ubc18\uc774\ub77c\uba74, \ud544\ud130\ub294 \uac01 \ub808\uc774\uc5b4 \ubcc4 \ud0c0\uc784 \ucef4\ud50c\ub809 \uc2dc\ud2f0\ub97c \ub9de\ucd94\uae30 \uc704\ud574 \ud544\ud130\uc758 \uac1c\uc218\ub97c \ub450\ubc30\ub85c \ub298\ub9b0\ub2e4. Downsampling \uc740 stride 2\ub85c \uc774\ub8e8\uc5b4\uc9c0\uace0, \ub9c8\uc9c0\ub9c9\uc740 \uae00\ub85c\ubc8c \uc5d0\ubc84\ub9ac\uc9c0 \ud480\ub9c1\uc744 \uc801\uc6a9\ud558\uace0, 1000-way fully connected layer\uc5d0 softmax\ub97c \uc801\uc6a9\ud55c\ub2e4. Residual Network\uc758 \uacbd\uc6b0, plain \ubaa8\ub378\uc5d0 shortcut connection\uc744 \ucd94\uac00\ud55c\ub2e4. \uac19\uc740 dimension\uc77c \uacbd\uc6b0 \uadf8\ub0e5 \uc5f0\uacb0\uc744 \ud55c\ub2e4. \ub9cc\uc57d Dimension\uc774 \uc99d\uac00\ud560 \uacbd\uc6b0, \ub450\uac00\uc9c0 \ubc29\ubc95\uc744 \uc0ac\uc6a9 \ud560 \uc218 \uc788\ub2e4. Extral zero entries padded \ub97c \uc8fc\uc5b4 dimension\uc744 \uc99d\uac00 \uc2dc\ud0a4\uac70\ub098, 1*1convolutions\uc744 \uc774\uc6a9\ud574\uc11c projection shortcut\uc744 \ud574\uc8fc\ub294 \ubc29\ubc95\uc774 \uc788\ub2e4. \ub458\ub2e4 strided 2\ub97c \uc774\uc6a9\ud55c\ub2e4. \uc5ec\uae30\uc11c \uc810\uc120\uc73c\ub85c \ub41c \ubd80\ubd84\uc740 dimension\uc774 \uc99d\uac00\ud558\ub294 \ubd80\ubd84\uc774\ub2e4. ResNet \uad6c\ud604 \uc138\ud305: image resized 224 * 224 (RC,HF) Batch normalization BN \uc0ac\uc6a9 Initialize Weights SGD, mini batch 256 Learning rate 0.1 Iteration 60 * 10^4 weight decay 0.0001, momentum 0.9 No dropout Success Residual Network\uc758 \uacbd\uc6b0, plain \ubaa8\ub378\uc5d0 shortcut connection\uc744 \ucd94\uac00\ud55c\ub2e4. Note \uc774 \ub450 \ub124\ud2b8\uc6cc\ud06c\uc758 TOTAL FLOP\uc740 3.6billion \uc785\ub2c8\ub2e4. \uc774\uac74 VGG \ub294 19.6 billion FLOP\uc774 \uc788\ub294\ub370, \ube44\uad50\ud558\uba74 18\ud37c\uc13c\ud2b8 \ubc16\uc5d0 \uc548\ub418\ub294 \ubcf5\uc7a1\uc131\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. Tip \uc2e4\ud5d8\uc801\uc73c\ub85c \uc774\uac8c \uac00\uc7a5 \uc88b\uc544\uc11c \uc774\ub807\uac8c \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870\uac00 \uc9dc\uc5ec\uc84c\ub2e4. \ub098\ucc98\ub7fc \uc774 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870\uc758 \uc138\ud305\uc774 \uc65c \uc774\ub807\uac8c \uc774\ub8e8\uc5b4 \uc84c\uace0, \uc774\uac8c \uac00\uc7a5 \uc88b\ub2e4\ub294 \uac83\uc744 \uc774\ud574\ud558\uae30 \uc5b4\ub835\ub2e4\uba74, \ud6c4\uc18d \ub17c\ubb38\ub4e4\uc758 \uc2e4\ud5d8 \ub0b4\uc6a9\uacfc \uc99d\uba85\uc744 \ubcf4\uae30\ub97c \ucd94\ucc9c\ud55c\ub2e4. identity mapping\uc99d\uba85 \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95 Degradation : \uc624\ubc84\ud53c\ud305\uacfc\uc758 \ucc28\uc774 \ud30c\uc545 Reformation : easy to optimize Identity mapping : increase accuracy \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : plain network with identity mapping \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 : 4.Experiment \u00b6 Table.2 \ud559\uc2b5 \ub41c 18-layer \ubc0f 34-layer plain/residual network\uc758 validation data\uc5d0 \ub300\ud55c 10-crop testing \uacb0\uacfc \uc911 top-1 error\ub97c \ub098\ud0c0\ub0b8 \ud45c\ub2e4. \ubd84\uc11d\uacb0\uacfc: 34-layer ResNet\uc774 18-layer ResNet\ubcf4\ub2e4 \uc6b0\uc218\ud55c \uc131\ub2a5\uc744 \ubcf4\uc778\ub2e4. \uc989, \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc131\ub2a5 \uc800\ud558 \ubb38\uc81c\uac00 \uc798 \ud574\uacb0\ub418\uc5c8\ub2e4. plain network\uc640 \ube44\uad50\ud560\ub54c,residual learning\uc758 \uc720\ud6a8\uc131\uc744 \uc785\uc99d\ud560 \uc218 \uc788\ub2e4. (increase acurracy) 18-layer plain/residual network \uac04\uc5d0\ub294 \uc720\uc0ac\ud55c \uc131\ub2a5\uc744 \ubcf4\uc600\uc9c0\ub9cc, \ub17c\ubb38\uc758 Fig.4\uc5d0 \ub530\ub974\uba74 18-layer ResNet\uc774 \ub354\uc6b1 \ube60\ub974\uac8c \uc218\ub834\ud55c\ub2e4. \uc774\ub294 network\uac00 \u201cnot overly deep\u201d\ud55c \uacbd\uc6b0(18-layers\uc758 \uacbd\uc6b0), \ud604\uc7ac\uc758 SGD solver\ub294 \uc5ec\uc804\ud788 plain net\uc5d0\uc11c\ub3c4 \uc88b\uc740 solution\uc744 \ucc3e\uc744 \uc218 \uc788\ub2e4\ub294 \uac83\uc73c\ub85c \ubcfc \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc, \uc774\ub7ec\ud55c \uacbd\uc6b0\uc5d0\ub3c4 ResNet\uc5d0\uc11c\ub294 \ube60\ub978 \uc218\ub834\uc18d\ub3c4\ub97c \uae30\ub300\ud560 \uc218 \uc788\ub2e4. (easy to optimize) Table.3 \uac01 \uc218\uce58\ub294 ImageNet validation data\uc5d0 \ub300\ud55c 10-crop testing error\ub97c \ub098\ud0c0\ub0b8\ub2e4. \ubd84\uc11d\uacb0\uacfc: projection shortcut\ub294 dimension\uc744 \ub298\ub9b4 \ub54c\ub9cc \uc0ac\uc6a9\ub418\uba70, \ub2e4\ub978 shortcut\uc740 \ubaa8\ub450 identity\ub85c \uc138\ud305\ud55c\ub2e4. ResNet152 \uc989, \uac00\uc7a5 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c\uac00 \ub0ae\uc740 \uc5d0\ub7ec\uc728\uc744 \ubcf4\uc778\ub2e4. \ub2e4\ub978 \ub124\ud2b8\uc6cc\ud06c\uc5d0 \ube44\ud574 \ub35c \ubcf5\uc7a1\ud55c ResNet\uc774 \ub0ae\uc740 \uc5d0\ub7ec\ub97c \uac00\uc9c4\ub2e4. \uc989, \ub808\uc988\ub137\uc740 \ub9e4\uc6b0 \ud6cc\ub96d\ud55c \ub124\ud2b8\uc6cc\ud06c\uc774\ub2e4. \uc704\uc758 \ud14c\uc774\ube14\uc758 \uacb0\uacfc\uc5d0 \ub530\ub974\uba74, A\uc758 \uc138\ud305\uc740 zero-padding shortcut\ub294 dimension matching\uc5d0 \uc0ac\uc6a9\ub418\uba70, \ubaa8\ub4e0 shortcut\ub294 parameter-free\uc774\uace0, B\uc758 \uc138\ud305\uc740 projection shortcut\ub294 dimension\uc744 \ub298\ub9b4 \ub54c\ub9cc \uc0ac\uc6a9\ub418\uba70, \ub2e4\ub978 shortcut\uc740 \ubaa8\ub450 identity\uc774\uba70, C\uc758 \uc138\ud305\uc740 \ubaa8\ub4e0 shortcut\uc740 projection\uc774\ub2e4. Note \uacb0\uacfc\uc801\uc73c\ub85c\ub294 C\uac00 \uac00\uc7a5 \uc88b\uc9c0\ub9cc, \uadf8 \ucc28\uc774\uac00 \uc544\uc8fc \uc791\ub2e4. \uc989, \uc131\ub2a5\uc800\ud558\uc5d0 \ud070 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\ub294\ub2e4. \ud558\uc9c0\ub9cc, C\uc758 \ubcf5\uc7a1\uc131\uc5d0 \ube44\ud574 B\uac00 \ud6e8\uc52c \ub35c \ubcf5\uc7a1\ud558\ubbc0\ub85c \ub17c\ubb38\uc5d0\uc11c\ub294 B\ub97c \ucc44\ud0dd\ud588\ub2e4. Fig.5 ImageNet data\uc5d0 \ub300\ud55c \ud559\uc2b5\uc744 \uc704\ud55c deeper residual function F\uc758 building block\uc774\ub2e4. \uc67c\ucabd\uc740 Fig.3\uc758 ResNet\uc5d0\uc11c feature map\uc758 \ud06c\uae30\uac00 56x56\uc778 \uacbd\uc6b0\uc758 building block\uc774\uba70, \uc624\ub978\ucabd\uc740 ResNet-50/101/152\uc5d0\uc11c \uac19\uc740 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ud558\ub294 \u2018bottleneck\u2019 building block\uc774\ub2e4. \ub2e4\uc74c\uc73c\ub85c ImageNet dataset\uc744 \uc704\ud55c deeper network\ub97c \uc124\uba85\ud55c\ub2e4. \uac10\ub2f9\ud560 \uc218 \uc5c6\ub294 training time\uc5d0 \ub300\ud55c \uc6b0\ub824\ub85c \uc778\ud574, building block\uc744 bottleneck design\uc73c\ub85c \uc218\uc815\ud55c\ub2e4. \uac01 residual function F, 2-layer stack\ub300\uc2e0 3-layer stack\uc744 \uc0ac\uc6a9\ud55c\ub2e4(Fig.5 \ucc38\uc870). 3\uac1c\uc758 layer\ub294 \uac01\uac01 \uc21c\uc11c\ub300\ub85c 1x1, 3x3, 1x1 conv layer\uc774\uba70, 1x1 conv layer\ub294 dimension\uc744 \uc904\uc774\uac70\ub098 \ub298\ub9ac\ub294 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud558\uba70, 3x3 layer\uc758 input/output\uc758 dimension\uc744 \uc904\uc778 bottleneck\uc73c\ub85c \ub454\ub2e4. Fig.5\uc5d0\uc11c\ub294 2-layer stack\uacfc 3-layer stack\uc758 \ub514\uc790\uc778\uc744 \ubcf4\uc5ec\uc900\ub2e4. \ub458\uc740 \uc720\uc0ac\ud55c time complexity\ub97c \uac16\ub294\ub2e4. \uc5ec\uae30\uc11c parameter-free\uc778 ideneity shortcut\uc740 \uc774 architecture\uc5d0\uc11c \ud2b9\ud788 \uc911\uc694\ud558\ub2e4. \ub9cc\uc57d Fig.5\uc758 \uc624\ub978\ucabd \ub2e4\uc774\uc5b4\uadf8\ub7a8\uc5d0\uc11c identity shortcut\uc774 projection\uc73c\ub85c \ub300\uccb4\ub41c\ub2e4\uba74, shortcut\uc774 \ub450 \uac1c\uc758 high-dimensional \ucd9c\ub825\uacfc \uc5f0\uacb0\ub418\ubbc0\ub85c time complexity\uc640 model size\uac00 \ub450 \ubc30\ub85c \ub298\uc5b4\ub09c\ub2e4. \ub530\ub77c\uc11c identity shortcut\uc740 \uc774 bottleneck design\uc744 \ubcf4\ub2e4 \ud6a8\uc728\uc801\uc778 \ubaa8\ub378\ub85c \ub9cc\ub4e4\uc5b4\uc900\ub2e4. CIFAR10 and Analysis: \uacb0\ub860\ub9cc \ub9d0\ud558\uc790\uba74, ImageNet Dataset\uc774 \uc544\ub2cc \ub2e4\ub978 \ub370\uc774\ud130 \uc14b\uc5d0\uc11c\ub3c4 \ub808\uc988\ub137\uc740 \uc798 \ub3d9\uc791\ud55c\ub2e4. \ub610 overfitting\uc774 \uc870\uae08 \uc774\ub8e8\uc5b4\uc9c0\uae30\ub294 \ud588\uc9c0\ub9cc, \uadf8\ub798\ub3c4 \uaf64 \uc88b\uc740 \uacb0\uacfc\ub85c 1000 \ub808\uc774\uc5b4 \uae4c\uc9c0 \uc313\uc544\ubcf8 \uc2e4\ud5d8\uacb0\uacfc\uac00 \ub2f4\uaca8\uc838 \uc788\ub2e4. \uc791\uc740 \ub370\uc774\ud130\uc14b\uc5d0\ub294 1000\ub808\uc774\uc5b4\uac00 \uc624\ubc84\ud53c\ud305\uc774 \uc77c\uc5b4\ub098\uc9c0\ub9cc, \ud070 \ub370\uc774\ud130\uc14b\uc744 \ub300\uc0c1\uc73c\ub85c\ub294 \uc88b\uc740 \uacb0\uacfc\ub97c \ubc1b\uc744\uac83\uc73c\ub85c \uc608\uce21\ub418\uba70, \ub808\uc988\ub137 \ub355\ubd84\uc5d0 \ub124\ud2b8\uc6cc\ud06c\ub97c \uc544\uc8fc \uae4a\uac8c \uad6c\ucd95 \ud560 \uc218 \uc788\uac8c \ub418\uc5c8\ub2e4. Info \uc880\ub354 \uc790\uc138\ud788 \ubd84\uc11d\ud558\uace0 \uc2f6\ub2e4\uba74, \ub354 \ub9ce\uc740 \uc2e4\ud5d8\uacb0\uacfc \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95 Degradation : \uc624\ubc84\ud53c\ud305\uacfc\uc758 \ucc28\uc774 \ud30c\uc545 Reformation : easy to optimize Identity mapping : increase accuracy \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : plain network with identity mapping \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : \ub9ce\uc740 \ub370\uc774\ud130 \uc14b\uc5d0 \uad00\ud574 \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95\uc73c\ub85c \ub192\uc740 accuracy \uc131\uacf5 pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 : 5.Pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class BasicBlock ( nn . Module ): expansion = 1 def __init__ ( self , inplanes , planes , stride = 1 , downsample = None , groups = 1 , base_width = 64 , dilation = 1 , norm_layer = None ): super ( BasicBlock , self ) . __init__ () if norm_layer is None : norm_layer = nn . BatchNorm2d if groups != 1 or base_width != 64 : raise ValueError ( 'BasicBlock only supports groups=1 and base_width=64' ) if dilation > 1 : raise NotImplementedError ( \"Dilation > 1 not supported in BasicBlock\" ) # Both self.conv1 and self.downsample layers downsample the input when stride != 1 self . conv1 = conv3x3 ( inplanes , planes , stride ) self . bn1 = norm_layer ( planes ) self . relu = nn . ReLU ( inplace = True ) self . conv2 = conv3x3 ( planes , planes ) self . bn2 = norm_layer ( planes ) self . downsample = downsample self . stride = stride def forward ( self , x ): identity = x out = self . conv1 ( x ) out = self . bn1 ( out ) out = self . relu ( out ) out = self . conv2 ( out ) out = self . bn2 ( out ) if self . downsample is not None : identity = self . downsample ( x ) out += identity out = self . relu ( out ) return out 4 : init \ud568\uc218 \uc548\uc5d0\uc11c 3*3 \ucee8\ubcfc\ub8e8\uc158 2\uac1c\ub97c \ud1b5\uacfc\ud558\ub294\uac83\uc744 \ud655\uc778\ud558\uba74, \uc774\uac8c basic \uad6c\uc870\ub77c\ub294\uac83\uc744 \uc880\ub354 \uba85\ud655\ud558\uac8c \ubcfc \uc218 \uc788\ub2e4. 22 : \ub610 forward \ud568\uc218\uc5d0\uc11c identity mapping\uc744 \uc2e4\uc81c\ub85c out += identity\uc5d0\uc11c \ub354\ud574\uc8fc\uace0 \ud574\uc8fc\uace0 \uc788\uc74c\uc744 \ud655\uc778\ud558\uc790. class Bottleneck ( nn . Module ): # Bottleneck in torchvision places the stride for downsampling at 3x3 convolution(self.conv2) # while original implementation places the stride at the first 1x1 convolution(self.conv1) # according to \"Deep residual learning for image recognition\"https://arxiv.org/abs/1512.03385. # This variant is also known as ResNet V1.5 and improves accuracy according to # https://ngc.nvidia.com/catalog/model-scripts/nvidia:resnet_50_v1_5_for_pytorch. expansion = 4 def __init__ ( self , inplanes , planes , stride = 1 , downsample = None , groups = 1 , base_width = 64 , dilation = 1 , norm_layer = None ): super ( Bottleneck , self ) . __init__ () if norm_layer is None : norm_layer = nn . BatchNorm2d width = int ( planes * ( base_width / 64. )) * groups # Both self.conv2 and self.downsample layers downsample the input when stride != 1 self . conv1 = conv1x1 ( inplanes , width ) self . bn1 = norm_layer ( width ) self . conv2 = conv3x3 ( width , width , stride , groups , dilation ) self . bn2 = norm_layer ( width ) self . conv3 = conv1x1 ( width , planes * self . expansion ) self . bn3 = norm_layer ( planes * self . expansion ) self . relu = nn . ReLU ( inplace = True ) self . downsample = downsample self . stride = stride def forward ( self , x ): identity = x out = self . conv1 ( x ) out = self . bn1 ( out ) out = self . relu ( out ) out = self . conv2 ( out ) out = self . bn2 ( out ) out = self . relu ( out ) out = self . conv3 ( out ) out = self . bn3 ( out ) if self . downsample is not None : identity = self . downsample ( x ) out += identity out = self . relu ( out ) return out Tip init \ud568\uc218\uc5d0\uc11c 1*1 convolutional network \ud1b5\uacfc\ud6c4 3*3 convolutional network \ud1b5\uacfc\ud6c4 1*1 convolutional network\ub97c \ud1b5\uacfc\ud558\uac8c \uad6c\uc870\uac00 \uc9dc\uc838\uc788\uc74c\uc744 \ud655\uc778\ud558\ub2e4. \uc5ed\uc2dc \ucc98\ub7fc identity mapping\uc774 \uc788\uace0, \uadf8\uac83\uc744 \ub354\ud574\uc90c\uc744 \ud655\uc778\ud558\uc790. def _forward_impl ( self , x ): # See note [TorchScript super()] x = self . conv1 ( x ) x = self . bn1 ( x ) x = self . relu ( x ) x = self . maxpool ( x ) x = self . layer1 ( x ) x = self . layer2 ( x ) x = self . layer3 ( x ) x = self . layer4 ( x ) x = self . avgpool ( x ) x = torch . flatten ( x , 1 ) x = self . fc ( x ) return x Tip \uc774 forward\ud568\uc218\ub294 ResNet \ud074\ub798\uc2a4\uc5d0\uc11c \uac00\uc838\uc628 \uac83\uc774\ub2e4. forward \uc758 \uc2e4\uc81c \uad6c\uc870\uac00 \uc544\uae4c network architecture\ub97c \uc124\uba85\ud560\ub54c \ubcf4\uc5ec\uc92c\ub358 \uc0ac\uc9c4\uc758 \uad6c\uc870\uc640 \uac19\uc740\uc9c0 \ud55c\ubc88 \ud655\uc778\ud574\ubcf4\uc790. \ub9c8\uc9c0\ub9c9\uc740 \uc5ed\uc2dc \ub17c\ubb38\uc5d0\uc11c \ub098\uc628\uac83\ucc98\ub7fc global average pooling \uacfc linear projection, \uadf8\ub9ac\uace0 softmax \ud568\uc218\ub97c \uc801\uc6a9\ud55c\ub2e4. def resnet18 ( pretrained = False , progress = True , ** kwargs ): r \"\"\"ResNet-18 model from `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_ Args: pretrained (bool): If True, returns a model pre-trained on ImageNet progress (bool): If True, displays a progress bar of the download to stderr \"\"\" return _resnet ( 'resnet18' , BasicBlock , [ 2 , 2 , 2 , 2 ], pretrained , progress , ** kwargs ) Tip \uc2e4\uc81c\ub85c \ub17c\ubb38\uc5d0\uc11c \ub098\uc628\uac83 \ucc98\ub7fc, \ub808\uc988\ub137 18\uacfc 34\ub294 basic block\uc744 \uc0ac\uc6a9\ud55c\ub2e4. def resnet50 ( pretrained = False , progress = True , ** kwargs ): r \"\"\"ResNet-50 model from `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_ Args: pretrained (bool): If True, returns a model pre-trained on ImageNet progress (bool): If True, displays a progress bar of the download to stderr \"\"\" return _resnet ( 'resnet50' , Bottleneck , [ 3 , 4 , 6 , 3 ], pretrained , progress , ** kwargs ) !! tip \ubc18\uba74, \ub808\uc988\ub137 50\uc774\uc0c1\uc740 \uc2e4\uc81c\ub85c \ub17c\ubb38\uc5d0\uc11c \ub098\uc628\uac83 \ucc98\ub7fc, bottleneck\uad6c\uc870\ub97c \uc774\uc6a9\ud574\uc11c \uad6c\ud604\ud55c\uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. Success \ub9cc\uc57d \ud30c\uc774\ud1a0\uce58 \ub0b4\ubd80 \ub808\uc988\ub137 \uad6c\ud604\uc774 \uc880 \ub354 \uad81\uae08\ud574\uc11c \ucf54\ub4dc \uc804\ubb38\uc744 \ubcf4\uace0\uc2f6\ub2e4\uba74 \uc544\ub798\ub97c \ud074\ub9ad\ud574\ub77c. \ud30c\uc774\ud1a0\uce58 ResNet\uad6c\ud604 \ucf54\ub4dc \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95 Degradation : \uc624\ubc84\ud53c\ud305\uacfc\uc758 \ucc28\uc774 \ud30c\uc545 Reformation : easy to optimize Identity mapping : increase accuracy \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : plain network with identity mapping \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : \ub9ce\uc740 \ub370\uc774\ud130 \uc14b\uc5d0 \uad00\ud574 \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95\uc73c\ub85c \ub192\uc740 accuracy \uc131\uacf5 pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 : \ucf54\ub4dc \uad6c\uc870 \uc774\ud574 \ub808\uc988\ub137 \uc774\ud574 \uc644\ub8cc \uc218\uace0\ud558\uc168\uc2b5\ub2c8\ub2e4 :)","title":"ResNet"},{"location":"paper/resnet/#resnet","text":"Info \uc774 \uae00\uc740 Deep residual learning for image recognition \ub17c\ubb38\uc744 \ubd84\uc11d\ud558\uace0 \uc774\ud574\ub97c \ub3d5\uae30\uc704\ud568 \uc785\ub2c8\ub2e4. \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : Degradation : Reformation : Identity mapping : \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 :","title":"ResNet \ub17c\ubb38 \uc815\ub9ac"},{"location":"paper/resnet/#0abstract","text":"\uc774 \ub17c\ubb38\uc5d0 ResNet\uc740 152\uac1c\uc758 layer\ub85c \uad6c\uc131\ub418\uc5c8\uace0, ILSVRC 2015 ImageNet Dataset classification \ubd80\ubd84\uc5d0\uc11c top-5 error 3.57%\ub85c 1\uc704\ub97c \uae30\ub85d\ud558\uc600\ub2e4. \ub610\ud55c ImageNet Dataset\ubfd0\ub9cc\uc774 \uc544\ub2c8\ub77c, CIFAR-10\ub4f1 \ub2e4\uc591\ud55c \ub370\uc774\ud130\uc14b\uc5d0\uc11c\ub3c4 \uc88b\uc740 \uc131\ub2a5\uc744 \ub0b4\uace0 \uc788\ub2e4. \uc774\ub294 \uc804\ub144\ub3c4 \uc6b0\uc2b9 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870\uc778 GoogleNet\uc758 22\uac1c\uc758 layer\ubcf4\ub2e4 \ubb34\ub824 8\ubc30\ub098 \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c\ub97c \ub9cc\ub4e4\uc5b4 \uc131\uacf5\uc2dc\ucf30\ub2e4\ub294 \uc810\uc5d0\uc11c \ub525\ub7ec\ub2dd \uc5ed\uc0ac\uc5d0 \ud55c \ud68d\uc744 \uadf8\uc740 \ub17c\ubb38\uc73c\ub85c \ud3c9\uac00 \ubc1b\uace0 \uc788\ub2e4. \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95 Degradation : Reformation : Identity mapping : \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 :","title":"0.Abstract"},{"location":"paper/resnet/#1introduction","text":"\ub124\ud2b8\uc6cc\ud06c\ub97c \uae4a\uac8c \uc313\uc73c\uba74 \ubc1c\uc0dd\ud558\ub294 \ubb38\uc81c\ub85c \uac00\uc7a5 \ud655\uc5f0\ud788 \ub4e4\uc5b4\ub098\ub294 \ub450\uac00\uc9c0\uac00 \ubc14\ub85c overfitting \ubb38\uc81c\uc640 degradation \ubb38\uc81c\uc774\ub2e4. \ud558\uc9c0\ub9cc, \uc774 \ub17c\ubb38\uc5d0\uc11c \uc81c\uc2dc\ud558\ub294 \ubb38\uc81c\ub294 \uc774\uc911 degradation \ubb38\uc81c\uc774\ub2e4. name ( from ) Success \uc65c\ub0d0\ud558\uba74 56 \ub808\uc774\uc5b4 \ubaa8\ub378\uacfc 20 \ub808\uc774\uc5b4 \ubaa8\ub378\uc744 \ube44\uad50\ud55c \uacb0\uacfc \ud14c\uc2a4\ud2b8\uc640 \ud2b8\ub808\uc774\ub2dd \ub458\ub2e4\uc758 \uc5d0\ub7ec\uc728\uc774 \ub354 \uae4a\uc740 56 \ub808\uc774\uc5b4 \ubaa8\ub378\uc774 \ub354 \ub192\uc558\uae30 \ub54c\ubb38\uc774\ub2e4. \ub9cc\uc57d \uc774\uac8c \uc624\ubc84\ud53c\ud305\uc758 \ubb38\uc81c\uc600\ub2e4\uba74, \ud2b8\ub808\uc774\ub2dd\uc5d0\uc11c\ub294 \ub354 \uae4a\uc740 56\ub808\uc774\uc5b4\uc758 \uc5d0\ub7ec\uc728\uc774 \ub354 \uc791\uace0, \ud14c\uc2a4\ud2b8\uc5d0\uc11c\ub9cc 56\ub808\uc774\uc5b4\uc758 \uc5d0\ub7ec\uac00 \ub354 \ub192\uc558\uc5b4\uc57c \ud55c\ub2e4. \uadf8\ub7f0\uc810\uc73c\ub85c \ubd24\uc744\ub54c, \ubaa8\ub378\uc744 \ub354 \uae4a\uc774 \uc313\uc558\uc744\ub54c \ud574\uacb0\ub418\uc5b4\uc57c \ud558\ub294 \uadfc\ubcf8\uc801\uc778 \ubb38\uc81c\uc911 \ud558\ub098\ub294 degradation \ubb38\uc81c\uc774\ub2e4. Note degradation\uc740 vanishing gradient \uc640 exploding gradient \ubb38\uc81c\ub97c \ud569\uccd0\uc11c \uc774\uc57c\uae30 \ud55c\ub2e4. \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95 Degradation : \uc624\ubc84\ud53c\ud305\uacfc\uc758 \ucc28\uc774 \ud30c\uc545 Reformation : Identity mapping : \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 :","title":"1.Introduction"},{"location":"paper/resnet/#2deep-residual-learning","text":"\uadf8\ub807\ub2e4\uba74 \uc774 \ub17c\ubb38\uc5d0\uc11c\ub294 \uc5b4\ub5bb\uac8c degradation \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uace0 \uc788\uc744\uae4c? \uc774 \ub17c\ubb38\uc5d0\uc11c\ub294 \u201cResidual Learning Framework\u201d\ub97c \ub3c4\uc785\ud558\uc5ec \uc131\ub2a5 \uc800\ud558 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uace0 \uc788\ub2e4. Residual learning\uc744 \ud1b5\ud574\uc11c optimize\uac00 \ub354 \uc26c\uc6cc\uc9c0\uace0, accuracy\uac00 \ub354 \ub192\uc544\uc9c4\ub2e4\ub294 \ub450\uac00\uc9c0 \uc7a5\uc810\uc774 \uc788\ub2e4. Reformation\uc744 \ud1b5\ud574 \ub808\uc988\ub137\uc740 few stacked layer\ub97c underlying mapping\uc744 \uc9c1\uc811 \ud559\uc2b5\ud558\uc9c0 \uc54a\uace0, residual mapping\uc5d0 \ub9de\ucd94\uc5b4 \ud559\uc2b5\ud558\ub3c4\ub85d \ud55c\ub2e4. Reformation\uc774\ub780 H(x) = F(x) + x \uc5d0\uc11c x\ub97c \uc774\ud56d\ud558\uc5ec F(x)\ub294 H(x)-x \ub77c\ub294 \uac12\uc73c\ub85c \ub9cc\ub4dc\ub294 \uac83\uc744 \uc758\ubbf8 \ud55c\ub2e4. Success underlying mapping \uc989, \uc6d0\ub798\uc758 original mapping\uc744 H(x)\ub85c \ub098\ud0c0\ub0b8\ub2e4\uba74, residual mapping\uc774 \uc544\ub2cc \uac83\uc740 H(x)\ub97c \ucc98\uc74c\ubd80\ud130 \uadf8 \uc790\uccb4\ub97c \ud559\uc2b5\ud560 \uac83\uc774\uace0, variance\uac00 \ub530\ub7ec\uc11c \ub9e4\uc6b0 \ud074 \uac83\uc774\uaca0\uc9c0\ub9cc, residual learning \uc5d0\uc11c\ub294 H(x) = F(x) + x \ub97c \uc774\uc6a9\ud574\uc11c, stacked nonlinear layer\uc758 mapping\uc778 F(x)\ub294 H(x)-x \ub97c \ud559\uc2b5\ud558\ub294 \uac83\uc774\ub2e4. \uc774\uac83\uc744 \ud1b5\ud574\uc11c F(x)\ub294 0\uc774 \ubaa9\ud45c\ub77c\ub294 \ud2b9\uc9d5\uc744 \uac00\uc9c0\uae30 \ub54c\ubb38\uc5d0 variance\ub294 \ub9e4\uc6b0 \uc791\uc544\uc9c0\uace0, optimize\uac00 \ub354 \uc26c\uc6cc\uc9c4\ub2e4\ub294 \uc7a5\uc810\uc774 \uc0dd\uae34\ub2e4. original mapping\uc740 F(x)+x \ub85c \uc7ac\uad6c\uc131 \ub41c\ub2e4. Note deep learning\uc5d0\uc11c \uc5d0\ub7ec\uc728\uc5d0\ub294 variance\uac00 \uc601\ud5a5\uc744 \ub07c\uce58\ub294 \uc694\uc18c\uc774\ub2e4. variance\uac00 \ud06c\uba74,overfitting\uc758 \ud655\ub960\uc774 \ub192\uc544\uc9c0\uace0 \ubaa8\ub378 \ud559\uc2b5\uc5d0 \uc5b4\ub824\uc6c0\uc774 \uc0dd\uae34\ub2e4. \ubc18\uba74 variance\uac00 \uc791\uc73c\uba74,\uc77c\ubc18\ud654\uc5d0 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. \ud558\uc9c0\ub9cc \ubb34\uc870\uac74 \uc774\uac8c \ud56d\uc0c1 \ub9de\ub294\uac83\uc774 \uc544\ub2c8\ub2e4. \uc5ec\uae30\uc5d0 \ub300\ud574\uc11c \ub354 \uc644\uc804\ud788 \uc790\uc138\ud788 \uc54c\uace0 \uc2f6\ub2e4\uba74, bias-variance trade-off\uc5d0 \ub300\ud574 \uacf5\ubd80\ud574\uc57c\ud558\uace0, \uc544\ub798 \ube14\ub85c\uadf8\uc758 \uadf8\ub9bc\ub4e4\uc744 \ucc38\uc870\ud558\ub77c : bias-variance trade-off Residual learning\uc5d0\uc11c \uc54c\uc544\uc57c\ud560 \uc815\ub9d0 \uc911\uc694\ud55c \ub2e8\uc5b4\uc911 \ud558\ub098\uac00 \ubc14\ub85c shortcut connection\uc774\ub77c\uace0\ub3c4 \ubd88\ub9ac\ub294 identity mapping \uc774\ub2e4. Success identity mapping\uc744 \ud1b5\ud574\uc11c, \ucd5c\uc18c\ud55c \ud55c\ucabd\uc758 gradient\ub294 \uacc4\uc18d \ud750\ub97c \uc218 \uc788\uac8c mapping \ud574\uc90c\uc73c\ub85c\uc368 \uc6b0\ub9ac\ub294 \ub354 \uc595\uc740 \ub124\ud2b8\uc6cc\ud06c\ubcf4\ub2e4 \ucd5c\uc18c\ud55c \ub354 \ub098\uc058\uc9c0\ub294 \uc54a\uc740 \uacb0\uacfc\ub97c \ubcf4\uc7a5 \ubc1b\uc744 \uc218 \uc788\ub2e4.\ub610, \uc774\ub97c \ud1b5\ud574 vanishing gradient \uc640 exploding gradient \uc989 degradation \ubb38\uc81c\ub97c \ud574\uacb0\ud560 \uc218 \uc788\uace0, \ubaa8\ub378\uc744 \ub354 \uae4a\uac8c \uc313\uc744 \uc218 \uc788\uac8c \ub418\uc5b4\uc11c \uacb0\uad6d \ub354 \uc88b\uc740 accuracy\uac00 \uc885\uc885 \ub098\ud0c0\ub09c\ub2e4. Tip \ub9cc\uc57d \uc704\uc758 \uc0ac\uc9c4\uacfc \uc124\uba85\uc744 \ubcf4\uc558\ub294\ub370\ub3c4 \ub808\uc988\ub137\uc774 \uc544\uc9c1\ub3c4 \uc644\uc804\ud788 \uc774\ud574\uac00 \uac00\uc9c0 \uc54a\ub294\ub2e4\uba74, \uc218\uc2dd\uc801\uc73c\ub85c \uc99d\uba85\ud574 \ubcf4\ub294\uac83\uc744 \ucd94\ucc9c\ud55c\ub2e4. \uadf8\ub7ec\uba74 \uc644\uc804\ud788 \uba38\ub9ac \uc18d\uc73c\ub85c \uc774 \uacfc\uc815\uc774 \uc774\ud574\uac00 \ub420\uac83\uc774\ub2e4. \uc774 \ub808\uc988\ub137 \ub17c\ubb38\uc740 \uacbd\ud5d8\uc801\uc73c\ub85c \uae30\uc220\ub418\uc5c8\ub2e4. \uc774\ud6c4\uc5d0 \uc774 \ub808\uc988\ub137\uc774 \uc65c \ud6a8\uacfc\uac00 \uc788\ub294\uc9c0 \uc124\uba85\ud55c \ud6c4\uc18d \ub17c\ubb38\ub4e4\uc774 \ub9ce\uc774 \ub098\uc640 \uc788\ub2e4. \uc6d0\ubcf8\uc744 \uc77d\uace0 \uc2f6\ub2e4\uba74, Identity Mappings in Deep Residual Networks \ub77c\ub294 \ub17c\ubb38\uc744 \uc77d\uc73c\uba74 \ub41c\ub2e4. \ub098\ub294 \ube60\ub974\uac8c \uc798 \uc774 \ub17c\ubb38\uc744 \uc815\ub9ac\ud574\ub454 \ube14\ub85c\uadf8\ub97c \ud558\ub098 \ucd94\ucc9c\ud574 \uc8fc\ub824\uace0 \ud55c\ub2e4. \uccab\ubc88\uc9f8 \uc218\uc2dd \uc99d\uba85\uc744 \uc798 \ud655\uc778\ud574\ubcf4\uae30\ub97c \ubc14\ub780\ub2e4. \uc218\uc2dd \uad00\ub828 \ucd94\ucc9c \ub17c\ubb38 \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95 Degradation : \uc624\ubc84\ud53c\ud305\uacfc\uc758 \ucc28\uc774 \ud30c\uc545 Reformation : easy to optimize Identity mapping : increase accuracy \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 :","title":"2.Deep Residual Learning"},{"location":"paper/resnet/#3network-architecture","text":"\ub9e8 \uc67c\ucabd \ubd80\ud130 VGGnet, plain, residual \uc758 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 \uc785\ub2c8\ub2e4. Plain Network\uc758 \uacbd\uc6b0, \ub300\ubd80\ubd84 3*3 convolutional \ud544\ud130\ub85c \uc774\ub8e8\uc5b4\uc838\uc788\ub2e4. \uc5ec\uae30\ub294 \ub8f0\uc774 \ub450\uac00\uc9c0 \uc788\ub294\ub370, \ud558\ub098\ub294 \ud53c\uccd0\ubc41\uacfc \uac19\uc740 \uc0ac\uc774\uc988\uc758 \uc544\uc6c3\ud48b\uc77c\uacbd\uc6b0 \ub808\uc774\uc5b4\ub294 \uac19\uc740 \uac1c\uc218\uc758 \ud544\ud130\ub97c \uac00\uc9c0\uac8c \ud558\ub294\uac83\uc774\ub2e4. \ub450\ubc88\uc9f8\ub85c\ub294 \ub9cc\uc57d \ud53c\uccd0\ub9e5 \uc0ac\uc774\uc988\uc758 \ubc18\uc774\ub77c\uba74, \ud544\ud130\ub294 \uac01 \ub808\uc774\uc5b4 \ubcc4 \ud0c0\uc784 \ucef4\ud50c\ub809 \uc2dc\ud2f0\ub97c \ub9de\ucd94\uae30 \uc704\ud574 \ud544\ud130\uc758 \uac1c\uc218\ub97c \ub450\ubc30\ub85c \ub298\ub9b0\ub2e4. Downsampling \uc740 stride 2\ub85c \uc774\ub8e8\uc5b4\uc9c0\uace0, \ub9c8\uc9c0\ub9c9\uc740 \uae00\ub85c\ubc8c \uc5d0\ubc84\ub9ac\uc9c0 \ud480\ub9c1\uc744 \uc801\uc6a9\ud558\uace0, 1000-way fully connected layer\uc5d0 softmax\ub97c \uc801\uc6a9\ud55c\ub2e4. Residual Network\uc758 \uacbd\uc6b0, plain \ubaa8\ub378\uc5d0 shortcut connection\uc744 \ucd94\uac00\ud55c\ub2e4. \uac19\uc740 dimension\uc77c \uacbd\uc6b0 \uadf8\ub0e5 \uc5f0\uacb0\uc744 \ud55c\ub2e4. \ub9cc\uc57d Dimension\uc774 \uc99d\uac00\ud560 \uacbd\uc6b0, \ub450\uac00\uc9c0 \ubc29\ubc95\uc744 \uc0ac\uc6a9 \ud560 \uc218 \uc788\ub2e4. Extral zero entries padded \ub97c \uc8fc\uc5b4 dimension\uc744 \uc99d\uac00 \uc2dc\ud0a4\uac70\ub098, 1*1convolutions\uc744 \uc774\uc6a9\ud574\uc11c projection shortcut\uc744 \ud574\uc8fc\ub294 \ubc29\ubc95\uc774 \uc788\ub2e4. \ub458\ub2e4 strided 2\ub97c \uc774\uc6a9\ud55c\ub2e4. \uc5ec\uae30\uc11c \uc810\uc120\uc73c\ub85c \ub41c \ubd80\ubd84\uc740 dimension\uc774 \uc99d\uac00\ud558\ub294 \ubd80\ubd84\uc774\ub2e4. ResNet \uad6c\ud604 \uc138\ud305: image resized 224 * 224 (RC,HF) Batch normalization BN \uc0ac\uc6a9 Initialize Weights SGD, mini batch 256 Learning rate 0.1 Iteration 60 * 10^4 weight decay 0.0001, momentum 0.9 No dropout Success Residual Network\uc758 \uacbd\uc6b0, plain \ubaa8\ub378\uc5d0 shortcut connection\uc744 \ucd94\uac00\ud55c\ub2e4. Note \uc774 \ub450 \ub124\ud2b8\uc6cc\ud06c\uc758 TOTAL FLOP\uc740 3.6billion \uc785\ub2c8\ub2e4. \uc774\uac74 VGG \ub294 19.6 billion FLOP\uc774 \uc788\ub294\ub370, \ube44\uad50\ud558\uba74 18\ud37c\uc13c\ud2b8 \ubc16\uc5d0 \uc548\ub418\ub294 \ubcf5\uc7a1\uc131\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. Tip \uc2e4\ud5d8\uc801\uc73c\ub85c \uc774\uac8c \uac00\uc7a5 \uc88b\uc544\uc11c \uc774\ub807\uac8c \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870\uac00 \uc9dc\uc5ec\uc84c\ub2e4. \ub098\ucc98\ub7fc \uc774 \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870\uc758 \uc138\ud305\uc774 \uc65c \uc774\ub807\uac8c \uc774\ub8e8\uc5b4 \uc84c\uace0, \uc774\uac8c \uac00\uc7a5 \uc88b\ub2e4\ub294 \uac83\uc744 \uc774\ud574\ud558\uae30 \uc5b4\ub835\ub2e4\uba74, \ud6c4\uc18d \ub17c\ubb38\ub4e4\uc758 \uc2e4\ud5d8 \ub0b4\uc6a9\uacfc \uc99d\uba85\uc744 \ubcf4\uae30\ub97c \ucd94\ucc9c\ud55c\ub2e4. identity mapping\uc99d\uba85 \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95 Degradation : \uc624\ubc84\ud53c\ud305\uacfc\uc758 \ucc28\uc774 \ud30c\uc545 Reformation : easy to optimize Identity mapping : increase accuracy \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : plain network with identity mapping \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 :","title":"3.Network Architecture"},{"location":"paper/resnet/#4experiment","text":"Table.2 \ud559\uc2b5 \ub41c 18-layer \ubc0f 34-layer plain/residual network\uc758 validation data\uc5d0 \ub300\ud55c 10-crop testing \uacb0\uacfc \uc911 top-1 error\ub97c \ub098\ud0c0\ub0b8 \ud45c\ub2e4. \ubd84\uc11d\uacb0\uacfc: 34-layer ResNet\uc774 18-layer ResNet\ubcf4\ub2e4 \uc6b0\uc218\ud55c \uc131\ub2a5\uc744 \ubcf4\uc778\ub2e4. \uc989, \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \uc131\ub2a5 \uc800\ud558 \ubb38\uc81c\uac00 \uc798 \ud574\uacb0\ub418\uc5c8\ub2e4. plain network\uc640 \ube44\uad50\ud560\ub54c,residual learning\uc758 \uc720\ud6a8\uc131\uc744 \uc785\uc99d\ud560 \uc218 \uc788\ub2e4. (increase acurracy) 18-layer plain/residual network \uac04\uc5d0\ub294 \uc720\uc0ac\ud55c \uc131\ub2a5\uc744 \ubcf4\uc600\uc9c0\ub9cc, \ub17c\ubb38\uc758 Fig.4\uc5d0 \ub530\ub974\uba74 18-layer ResNet\uc774 \ub354\uc6b1 \ube60\ub974\uac8c \uc218\ub834\ud55c\ub2e4. \uc774\ub294 network\uac00 \u201cnot overly deep\u201d\ud55c \uacbd\uc6b0(18-layers\uc758 \uacbd\uc6b0), \ud604\uc7ac\uc758 SGD solver\ub294 \uc5ec\uc804\ud788 plain net\uc5d0\uc11c\ub3c4 \uc88b\uc740 solution\uc744 \ucc3e\uc744 \uc218 \uc788\ub2e4\ub294 \uac83\uc73c\ub85c \ubcfc \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc, \uc774\ub7ec\ud55c \uacbd\uc6b0\uc5d0\ub3c4 ResNet\uc5d0\uc11c\ub294 \ube60\ub978 \uc218\ub834\uc18d\ub3c4\ub97c \uae30\ub300\ud560 \uc218 \uc788\ub2e4. (easy to optimize) Table.3 \uac01 \uc218\uce58\ub294 ImageNet validation data\uc5d0 \ub300\ud55c 10-crop testing error\ub97c \ub098\ud0c0\ub0b8\ub2e4. \ubd84\uc11d\uacb0\uacfc: projection shortcut\ub294 dimension\uc744 \ub298\ub9b4 \ub54c\ub9cc \uc0ac\uc6a9\ub418\uba70, \ub2e4\ub978 shortcut\uc740 \ubaa8\ub450 identity\ub85c \uc138\ud305\ud55c\ub2e4. ResNet152 \uc989, \uac00\uc7a5 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c\uac00 \ub0ae\uc740 \uc5d0\ub7ec\uc728\uc744 \ubcf4\uc778\ub2e4. \ub2e4\ub978 \ub124\ud2b8\uc6cc\ud06c\uc5d0 \ube44\ud574 \ub35c \ubcf5\uc7a1\ud55c ResNet\uc774 \ub0ae\uc740 \uc5d0\ub7ec\ub97c \uac00\uc9c4\ub2e4. \uc989, \ub808\uc988\ub137\uc740 \ub9e4\uc6b0 \ud6cc\ub96d\ud55c \ub124\ud2b8\uc6cc\ud06c\uc774\ub2e4. \uc704\uc758 \ud14c\uc774\ube14\uc758 \uacb0\uacfc\uc5d0 \ub530\ub974\uba74, A\uc758 \uc138\ud305\uc740 zero-padding shortcut\ub294 dimension matching\uc5d0 \uc0ac\uc6a9\ub418\uba70, \ubaa8\ub4e0 shortcut\ub294 parameter-free\uc774\uace0, B\uc758 \uc138\ud305\uc740 projection shortcut\ub294 dimension\uc744 \ub298\ub9b4 \ub54c\ub9cc \uc0ac\uc6a9\ub418\uba70, \ub2e4\ub978 shortcut\uc740 \ubaa8\ub450 identity\uc774\uba70, C\uc758 \uc138\ud305\uc740 \ubaa8\ub4e0 shortcut\uc740 projection\uc774\ub2e4. Note \uacb0\uacfc\uc801\uc73c\ub85c\ub294 C\uac00 \uac00\uc7a5 \uc88b\uc9c0\ub9cc, \uadf8 \ucc28\uc774\uac00 \uc544\uc8fc \uc791\ub2e4. \uc989, \uc131\ub2a5\uc800\ud558\uc5d0 \ud070 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\ub294\ub2e4. \ud558\uc9c0\ub9cc, C\uc758 \ubcf5\uc7a1\uc131\uc5d0 \ube44\ud574 B\uac00 \ud6e8\uc52c \ub35c \ubcf5\uc7a1\ud558\ubbc0\ub85c \ub17c\ubb38\uc5d0\uc11c\ub294 B\ub97c \ucc44\ud0dd\ud588\ub2e4. Fig.5 ImageNet data\uc5d0 \ub300\ud55c \ud559\uc2b5\uc744 \uc704\ud55c deeper residual function F\uc758 building block\uc774\ub2e4. \uc67c\ucabd\uc740 Fig.3\uc758 ResNet\uc5d0\uc11c feature map\uc758 \ud06c\uae30\uac00 56x56\uc778 \uacbd\uc6b0\uc758 building block\uc774\uba70, \uc624\ub978\ucabd\uc740 ResNet-50/101/152\uc5d0\uc11c \uac19\uc740 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ud558\ub294 \u2018bottleneck\u2019 building block\uc774\ub2e4. \ub2e4\uc74c\uc73c\ub85c ImageNet dataset\uc744 \uc704\ud55c deeper network\ub97c \uc124\uba85\ud55c\ub2e4. \uac10\ub2f9\ud560 \uc218 \uc5c6\ub294 training time\uc5d0 \ub300\ud55c \uc6b0\ub824\ub85c \uc778\ud574, building block\uc744 bottleneck design\uc73c\ub85c \uc218\uc815\ud55c\ub2e4. \uac01 residual function F, 2-layer stack\ub300\uc2e0 3-layer stack\uc744 \uc0ac\uc6a9\ud55c\ub2e4(Fig.5 \ucc38\uc870). 3\uac1c\uc758 layer\ub294 \uac01\uac01 \uc21c\uc11c\ub300\ub85c 1x1, 3x3, 1x1 conv layer\uc774\uba70, 1x1 conv layer\ub294 dimension\uc744 \uc904\uc774\uac70\ub098 \ub298\ub9ac\ub294 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud558\uba70, 3x3 layer\uc758 input/output\uc758 dimension\uc744 \uc904\uc778 bottleneck\uc73c\ub85c \ub454\ub2e4. Fig.5\uc5d0\uc11c\ub294 2-layer stack\uacfc 3-layer stack\uc758 \ub514\uc790\uc778\uc744 \ubcf4\uc5ec\uc900\ub2e4. \ub458\uc740 \uc720\uc0ac\ud55c time complexity\ub97c \uac16\ub294\ub2e4. \uc5ec\uae30\uc11c parameter-free\uc778 ideneity shortcut\uc740 \uc774 architecture\uc5d0\uc11c \ud2b9\ud788 \uc911\uc694\ud558\ub2e4. \ub9cc\uc57d Fig.5\uc758 \uc624\ub978\ucabd \ub2e4\uc774\uc5b4\uadf8\ub7a8\uc5d0\uc11c identity shortcut\uc774 projection\uc73c\ub85c \ub300\uccb4\ub41c\ub2e4\uba74, shortcut\uc774 \ub450 \uac1c\uc758 high-dimensional \ucd9c\ub825\uacfc \uc5f0\uacb0\ub418\ubbc0\ub85c time complexity\uc640 model size\uac00 \ub450 \ubc30\ub85c \ub298\uc5b4\ub09c\ub2e4. \ub530\ub77c\uc11c identity shortcut\uc740 \uc774 bottleneck design\uc744 \ubcf4\ub2e4 \ud6a8\uc728\uc801\uc778 \ubaa8\ub378\ub85c \ub9cc\ub4e4\uc5b4\uc900\ub2e4. CIFAR10 and Analysis: \uacb0\ub860\ub9cc \ub9d0\ud558\uc790\uba74, ImageNet Dataset\uc774 \uc544\ub2cc \ub2e4\ub978 \ub370\uc774\ud130 \uc14b\uc5d0\uc11c\ub3c4 \ub808\uc988\ub137\uc740 \uc798 \ub3d9\uc791\ud55c\ub2e4. \ub610 overfitting\uc774 \uc870\uae08 \uc774\ub8e8\uc5b4\uc9c0\uae30\ub294 \ud588\uc9c0\ub9cc, \uadf8\ub798\ub3c4 \uaf64 \uc88b\uc740 \uacb0\uacfc\ub85c 1000 \ub808\uc774\uc5b4 \uae4c\uc9c0 \uc313\uc544\ubcf8 \uc2e4\ud5d8\uacb0\uacfc\uac00 \ub2f4\uaca8\uc838 \uc788\ub2e4. \uc791\uc740 \ub370\uc774\ud130\uc14b\uc5d0\ub294 1000\ub808\uc774\uc5b4\uac00 \uc624\ubc84\ud53c\ud305\uc774 \uc77c\uc5b4\ub098\uc9c0\ub9cc, \ud070 \ub370\uc774\ud130\uc14b\uc744 \ub300\uc0c1\uc73c\ub85c\ub294 \uc88b\uc740 \uacb0\uacfc\ub97c \ubc1b\uc744\uac83\uc73c\ub85c \uc608\uce21\ub418\uba70, \ub808\uc988\ub137 \ub355\ubd84\uc5d0 \ub124\ud2b8\uc6cc\ud06c\ub97c \uc544\uc8fc \uae4a\uac8c \uad6c\ucd95 \ud560 \uc218 \uc788\uac8c \ub418\uc5c8\ub2e4. Info \uc880\ub354 \uc790\uc138\ud788 \ubd84\uc11d\ud558\uace0 \uc2f6\ub2e4\uba74, \ub354 \ub9ce\uc740 \uc2e4\ud5d8\uacb0\uacfc \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95 Degradation : \uc624\ubc84\ud53c\ud305\uacfc\uc758 \ucc28\uc774 \ud30c\uc545 Reformation : easy to optimize Identity mapping : increase accuracy \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : plain network with identity mapping \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : \ub9ce\uc740 \ub370\uc774\ud130 \uc14b\uc5d0 \uad00\ud574 \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95\uc73c\ub85c \ub192\uc740 accuracy \uc131\uacf5 pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 :","title":"4.Experiment"},{"location":"paper/resnet/#5pytorch","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class BasicBlock ( nn . Module ): expansion = 1 def __init__ ( self , inplanes , planes , stride = 1 , downsample = None , groups = 1 , base_width = 64 , dilation = 1 , norm_layer = None ): super ( BasicBlock , self ) . __init__ () if norm_layer is None : norm_layer = nn . BatchNorm2d if groups != 1 or base_width != 64 : raise ValueError ( 'BasicBlock only supports groups=1 and base_width=64' ) if dilation > 1 : raise NotImplementedError ( \"Dilation > 1 not supported in BasicBlock\" ) # Both self.conv1 and self.downsample layers downsample the input when stride != 1 self . conv1 = conv3x3 ( inplanes , planes , stride ) self . bn1 = norm_layer ( planes ) self . relu = nn . ReLU ( inplace = True ) self . conv2 = conv3x3 ( planes , planes ) self . bn2 = norm_layer ( planes ) self . downsample = downsample self . stride = stride def forward ( self , x ): identity = x out = self . conv1 ( x ) out = self . bn1 ( out ) out = self . relu ( out ) out = self . conv2 ( out ) out = self . bn2 ( out ) if self . downsample is not None : identity = self . downsample ( x ) out += identity out = self . relu ( out ) return out 4 : init \ud568\uc218 \uc548\uc5d0\uc11c 3*3 \ucee8\ubcfc\ub8e8\uc158 2\uac1c\ub97c \ud1b5\uacfc\ud558\ub294\uac83\uc744 \ud655\uc778\ud558\uba74, \uc774\uac8c basic \uad6c\uc870\ub77c\ub294\uac83\uc744 \uc880\ub354 \uba85\ud655\ud558\uac8c \ubcfc \uc218 \uc788\ub2e4. 22 : \ub610 forward \ud568\uc218\uc5d0\uc11c identity mapping\uc744 \uc2e4\uc81c\ub85c out += identity\uc5d0\uc11c \ub354\ud574\uc8fc\uace0 \ud574\uc8fc\uace0 \uc788\uc74c\uc744 \ud655\uc778\ud558\uc790. class Bottleneck ( nn . Module ): # Bottleneck in torchvision places the stride for downsampling at 3x3 convolution(self.conv2) # while original implementation places the stride at the first 1x1 convolution(self.conv1) # according to \"Deep residual learning for image recognition\"https://arxiv.org/abs/1512.03385. # This variant is also known as ResNet V1.5 and improves accuracy according to # https://ngc.nvidia.com/catalog/model-scripts/nvidia:resnet_50_v1_5_for_pytorch. expansion = 4 def __init__ ( self , inplanes , planes , stride = 1 , downsample = None , groups = 1 , base_width = 64 , dilation = 1 , norm_layer = None ): super ( Bottleneck , self ) . __init__ () if norm_layer is None : norm_layer = nn . BatchNorm2d width = int ( planes * ( base_width / 64. )) * groups # Both self.conv2 and self.downsample layers downsample the input when stride != 1 self . conv1 = conv1x1 ( inplanes , width ) self . bn1 = norm_layer ( width ) self . conv2 = conv3x3 ( width , width , stride , groups , dilation ) self . bn2 = norm_layer ( width ) self . conv3 = conv1x1 ( width , planes * self . expansion ) self . bn3 = norm_layer ( planes * self . expansion ) self . relu = nn . ReLU ( inplace = True ) self . downsample = downsample self . stride = stride def forward ( self , x ): identity = x out = self . conv1 ( x ) out = self . bn1 ( out ) out = self . relu ( out ) out = self . conv2 ( out ) out = self . bn2 ( out ) out = self . relu ( out ) out = self . conv3 ( out ) out = self . bn3 ( out ) if self . downsample is not None : identity = self . downsample ( x ) out += identity out = self . relu ( out ) return out Tip init \ud568\uc218\uc5d0\uc11c 1*1 convolutional network \ud1b5\uacfc\ud6c4 3*3 convolutional network \ud1b5\uacfc\ud6c4 1*1 convolutional network\ub97c \ud1b5\uacfc\ud558\uac8c \uad6c\uc870\uac00 \uc9dc\uc838\uc788\uc74c\uc744 \ud655\uc778\ud558\ub2e4. \uc5ed\uc2dc \ucc98\ub7fc identity mapping\uc774 \uc788\uace0, \uadf8\uac83\uc744 \ub354\ud574\uc90c\uc744 \ud655\uc778\ud558\uc790. def _forward_impl ( self , x ): # See note [TorchScript super()] x = self . conv1 ( x ) x = self . bn1 ( x ) x = self . relu ( x ) x = self . maxpool ( x ) x = self . layer1 ( x ) x = self . layer2 ( x ) x = self . layer3 ( x ) x = self . layer4 ( x ) x = self . avgpool ( x ) x = torch . flatten ( x , 1 ) x = self . fc ( x ) return x Tip \uc774 forward\ud568\uc218\ub294 ResNet \ud074\ub798\uc2a4\uc5d0\uc11c \uac00\uc838\uc628 \uac83\uc774\ub2e4. forward \uc758 \uc2e4\uc81c \uad6c\uc870\uac00 \uc544\uae4c network architecture\ub97c \uc124\uba85\ud560\ub54c \ubcf4\uc5ec\uc92c\ub358 \uc0ac\uc9c4\uc758 \uad6c\uc870\uc640 \uac19\uc740\uc9c0 \ud55c\ubc88 \ud655\uc778\ud574\ubcf4\uc790. \ub9c8\uc9c0\ub9c9\uc740 \uc5ed\uc2dc \ub17c\ubb38\uc5d0\uc11c \ub098\uc628\uac83\ucc98\ub7fc global average pooling \uacfc linear projection, \uadf8\ub9ac\uace0 softmax \ud568\uc218\ub97c \uc801\uc6a9\ud55c\ub2e4. def resnet18 ( pretrained = False , progress = True , ** kwargs ): r \"\"\"ResNet-18 model from `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_ Args: pretrained (bool): If True, returns a model pre-trained on ImageNet progress (bool): If True, displays a progress bar of the download to stderr \"\"\" return _resnet ( 'resnet18' , BasicBlock , [ 2 , 2 , 2 , 2 ], pretrained , progress , ** kwargs ) Tip \uc2e4\uc81c\ub85c \ub17c\ubb38\uc5d0\uc11c \ub098\uc628\uac83 \ucc98\ub7fc, \ub808\uc988\ub137 18\uacfc 34\ub294 basic block\uc744 \uc0ac\uc6a9\ud55c\ub2e4. def resnet50 ( pretrained = False , progress = True , ** kwargs ): r \"\"\"ResNet-50 model from `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_ Args: pretrained (bool): If True, returns a model pre-trained on ImageNet progress (bool): If True, displays a progress bar of the download to stderr \"\"\" return _resnet ( 'resnet50' , Bottleneck , [ 3 , 4 , 6 , 3 ], pretrained , progress , ** kwargs ) !! tip \ubc18\uba74, \ub808\uc988\ub137 50\uc774\uc0c1\uc740 \uc2e4\uc81c\ub85c \ub17c\ubb38\uc5d0\uc11c \ub098\uc628\uac83 \ucc98\ub7fc, bottleneck\uad6c\uc870\ub97c \uc774\uc6a9\ud574\uc11c \uad6c\ud604\ud55c\uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. Success \ub9cc\uc57d \ud30c\uc774\ud1a0\uce58 \ub0b4\ubd80 \ub808\uc988\ub137 \uad6c\ud604\uc774 \uc880 \ub354 \uad81\uae08\ud574\uc11c \ucf54\ub4dc \uc804\ubb38\uc744 \ubcf4\uace0\uc2f6\ub2e4\uba74 \uc544\ub798\ub97c \ud074\ub9ad\ud574\ub77c. \ud30c\uc774\ud1a0\uce58 ResNet\uad6c\ud604 \ucf54\ub4dc \ub808\uc988\ub137 \ud575\uc2ec \uc774\ud574 \ub808\uc988\ub137\uc758 \uc6b0\uc218\uc131 : \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95 Degradation : \uc624\ubc84\ud53c\ud305\uacfc\uc758 \ucc28\uc774 \ud30c\uc545 Reformation : easy to optimize Identity mapping : increase accuracy \ub124\ud2b8\uc6cc\ud06c \uad6c\uc870 : plain network with identity mapping \uc2e4\ud5d8 \uacb0\uacfc \uc774\ud574 : \ub9ce\uc740 \ub370\uc774\ud130 \uc14b\uc5d0 \uad00\ud574 \ub354 \uae4a\uc740 \ub124\ud2b8\uc6cc\ud06c \uad6c\ucd95\uc73c\ub85c \ub192\uc740 accuracy \uc131\uacf5 pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604 : \ucf54\ub4dc \uad6c\uc870 \uc774\ud574 \ub808\uc988\ub137 \uc774\ud574 \uc644\ub8cc \uc218\uace0\ud558\uc168\uc2b5\ub2c8\ub2e4 :)","title":"5.Pytorch\ub97c \uc774\uc6a9\ud55c \ucf54\ub4dc \uad6c\ud604"},{"location":"sync/convention/googlestyleguide/","text":"Info \uc774\ubc88 \ud3ec\uc2a4\ud2b8\uc5d0\uc11c\ub294 Google C++ Style Guide \uc758 \ubaa9\ud45c\uae4c\uc9c0\ub9cc \ub2e4\ub8e8\uace0 \uc2e4\uc9c8\uc801\uc778 \ucf54\ub529 \ucee8\ubca4\uc158 \uaddc\uce59\uc740 \ub2e4\uc74c \ud3ec\uc2a4\ud2b8\uc5d0\uc11c \ub2e4\ub8e8\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ud3ec\uc2a4\ud2b8\uc5d0\uc11c \ub2e4\ub8f0 Google C++ Style Guide \uc740 \ub3c5\uc790\uac00 Abseil \uc744 \uae30\ubcf8\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\uace0 \uac00\uc815\ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \uae30\ucd08\uc801\uc778 Abseil \uc0ac\uc6a9\ubc95\uc744 \uc54c\uace0 \ub118\uc5b4\uac00\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub7f0\ub370 Abseil \uc758 \uacf5\uc2dd\uc801\uc778 \ube4c\ub4dc \ud234\uc740 bazel \uc774\uae30 \ub54c\ubb38\uc5d0 bazel \uc5d0 \ub300\ud558\uc5ec \uba3c\uc800 \uac04\ub2e8\ud788 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Bazel \u00b6 bazel \uc740 C++ , Java , Android , iOS , Go \ub4f1\uc758 \uc18c\ud504\ud2b8\uc6e8\uc5b4\uc758 \ube4c\ub4dc \ubc0f \ud14c\uc2a4\ud2b8\ub97c \uc790\ub3d9\ud654\uc2dc\ucf1c\uc8fc\ub294 \ud234\uc774\ub2e4. Why Bazel? \u00b6 bazel \uc740 Make , Ant , Gradle \ub4f1\uc758 \ud234\uacfc \ube44\uc2b7\ud558\ub2e4. \ud558\uc9c0\ub9cc bazel \uc740 \ub2e4\uc74c\uc758 \uc774\uc720 \ub54c\ubb38\uc5d0 \ud2b9\ubcc4\ud558\ub2e4. bazel \uc740 Google \uc758 \ube4c\ub4dc \uc2dc\uc2a4\ud15c\uc774\ub2e4. bazel \uc758 \ube4c\ub4dc \uba85\ub839\uc5b4\ub294 \ub9e4\uc6b0 \uc27d\uace0 \uac04\ub2e8\ud558\uace0 \uace0\uc218\uc900\uc774\ub2e4. \uac00\ub839 Make \ub85c \ube4c\ub4dc\ud558\uae30 \uc704\ud558\uc5ec Makefile \uc744 \ub9cc\ub4e4\uba74 \ubaa8\ub4e0 \ud30c\uc77c\uc744 \uc77c\uc77c\uc774 \ucef4\ud30c\uc77c\ub7ec\uc5d0\uac8c \uba85\uc2dc\ud574\uc8fc\uc5b4\uc57c\ub9cc \ud574\uc11c \ub108\ubb34 \uc5b4\ub835\ub2e4. \ub611\uac19\uc740 \ube4c\ub4dc \ud30c\uc77c\ub85c \uc5ec\ub7ec \ud50c\ub7ab\ud3fc\uacfc \uc544\ud0a4\ud14d\ucc98\ub85c \ucef4\ud30c\uc77c \ud560 \uc218 \uc788\ub2e4. Google \uc740 \uc2e4\uc81c\ub85c \ub370\uc774\ud130\uc13c\ud130 \uc11c\ubc84\uc5d0\uc11c \uc2e4\ud589\ub420 \uac70\ub300\ud55c \ud504\ub85c\uadf8\ub7a8\ubd80\ud130 \ud578\ub4dc\ud3f0\uc5d0\uc11c \uc2e4\ud589\ub420 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uae4c\uc9c0 \ubaa8\ub450 \ub2e4 bazel \uc744 \uc0ac\uc6a9\ud558\uc5ec \ucef4\ud30c\uc77c\ud55c\ub2e4. bazel \uc740 \ube4c\ub4dc \ud30c\uc77c\uc744 \ubd84\uc11d\ud574\uc11c \ub2e4\uc2dc \ucef4\ud30c\uc77c\ud574\uc57c\ud558\ub294 \ubd80\ubd84\ub9cc \ucef4\ud30c\uc77c\ud55c\ub2e4. Note Flutter \ub85c \uac1c\ubc1c \ud574\ubcf4\uc2e0 \ubd84\ub4e4\uc740 \uc218\uc815\ub41c \ucf54\ub4dc\ub9cc \ud0d0\uc9c0\ud574\uc11c \ube60\ub974\uac8c \ub9ac\ube4c\ub529\ud558\ub294 Hot reload \uae30\ub2a5\uc774 \ub5a0\uc624\ub974\uc2e4 \uac81\ub2c8\ub2e4. \uadf8\uac83\uc744 C++ \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub3c4 \ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc774\uc9c0\uc694. bazel \uc740 \ub9e4\uc6b0 \ud070 \ud504\ub85c\uadf8\ub7a8\ub3c4 \ub9e4\uc6b0 \ube60\ub974\uac8c \ube4c\ub4dc\ud55c\ub2e4. \uac00\ub839 \uc6b0\ub9ac Google \uc5d0\uc11c\ub294 \uc11c\ubc84\uc5d0\uc11c \uc2e4\ud589\ub420 \uc18c\uc2a4\ud30c\uc77c\ub9cc 10 \ub9cc\uac1c \uc815\ub3c4\uc778 \ud504\ub85c\uc81d\ud2b8\uac00 \uc788\ub294\ub370 \ud30c\uc77c\uc774 \ubcc0\uacbd\ub418\uc9c0 \uc54a\uc73c\uba74 \ube4c\ub4dc \uc2dc\uac04\uc774 \ub2e8\uc9c0 0.2 \ucd08\ubc16\uc5d0 \uc548\uac78\ub9b0\ub2e4. bazel \uc740 Linux, macOS, Windows \uc5d0\uc11c \uc2e4\ud589\uac00\ub2a5\ud558\uace0 \uc190\uc27d\uac8c cross-compile \uc744 \ud560 \uc218 \uc788\ub2e4. bazel \uc774 crash \uac00 \uac70\uc758 \ub098\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc6b0\ub9ac Google \uc774 \ubcf4\uc99d\ud55c\ub2e4. \uc6b0\ub9ac\ub3c4 bazel \ub85c Google \uc758 \ud504\ub85c\uc81d\ud2b8\ub97c \uad00\ub9ac\ud558\uace0 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc6b0\ub9ac Google \uc740 \uc65c \ub2e4\ub978 \ube4c\ub4dc \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\uac00? Make , Ninja : \uc774 \ud234\ub4e4\uc740 \ud0c0\uac9f\uc5d0 \ub300\ud55c \ub9e4\uc6b0 \uc815\ud655\ud55c \uba85\ub839\uc744 \uc81c\uacf5\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uadf8\uac83\uc744 \uc62c\ubc14\ub974\uac8c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc804\uc801\uc73c\ub85c \uac1c\ubc1c\uc790\uc758 \ubaab\uc774\ub2e4. \ubc18\uba74 bazel \uc758 \uc720\uc800 \uc778\ud130\ud398\uc774\uc2a4\ub294 \ub9e4\uc6b0 \uace0\uc218\uc900\uc774\ub2e4. Ant , Maven : \uc774\ub4e4\uc740 Java \ub9cc \uc9c0\uc6d0\ud558\ub294 \ubc18\uba74 bazel \uc740 \ub2e4\uc591\ud55c \uc5b8\uc5b4\ub97c \ubaa8\ub450 \ub2e4 \uc9c0\uc6d0\ud55c\ub2e4. Gradle : bazel \uc758 \ube4c\ub4dc \ud30c\uc77c\uc740 Gradle \ubcf4\ub2e4 \uad6c\uc870\ud654\ub418\uc5b4 \uc788\uc5b4\uc11c \ub354 \uc774\ud574\ud558\uae30 \uc27d\uace0 \uc7ac\uc0ac\uc6a9\ud558\uae30 \uc27d\ub2e4. \uc6b0\ub9ac Google \ub3c4 \uc6d0\ub798 Makefile \uc744 \uc0ac\uc6a9\ud574\uc654\ub2e4. \uadf8\ub7f0\ub370 \uc18c\ud504\ud2b8\uc6e8\uc5b4\uc758 \uaddc\ubaa8\uac00 \ucee4\uc9c0\uba74 \ucee4\uc9c8\uc218\ub85d Makefile \uc740 \ube4c\ub4dc \uc18d\ub3c4\ub97c \ub290\ub9ac\uac8c\ud588\ub2e4. \uadf8\ub9ac\uace0 Makefile \uc758 \ube4c\ub4dc\ub97c \uc2e0\ub8b0\ud560 \uc218\ub3c4 \uc5c6\uc5c8\ub2e4. \uacb0\uacfc\uc801\uc73c\ub85c Makefile \uc740 Google \uac1c\ubc1c\uc790\ub4e4\uc758 \uc0dd\uc0b0\uc131\uc5d0 \uc9c1\uaca9\ud0c0\ub97c \ub0a0\ub838\uace0 \uc6b0\ub9ac Google \uc758 \uae30\uc5c5\uc801\uc778 \ubbfc\ucca9\uc131\uc5d0\ub3c4 \uc601\ud5a5\uc744 \ubbf8\ucce4\ub2e4. bazel \uc740 \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud588\ub2e4. bazel \uc740 \ucc98\uc74c\uc5d0\ub294 Google \ub0b4\ubd80\uc758 \uc11c\ubc84 \ud504\ub85c\uadf8\ub7a8 \uac1c\ubc1c \ub3c4\uad6c\uc600\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc720\uc6a9\uc131\uc774 \uc785\uc99d\ub418\uc5b4 \uacc4\uc18d \ud655\uc7a5\ub418\uc5c8\ub2e4. \uadf8 \uacb0\uacfc \uc9c0\uae08\uc740 \uc2ec\uc9c0\uc5b4 \ud578\ub4dc\ud3f0 \uc5b4\ud50c\uc744 \uc704\ud55c iOS \uc640 Android \ube4c\ub4dc\uc5d0\ub3c4 \uc4f8 \uc218 \uc788\ub2e4. bazel \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \ube5b\uc744 \ubc1c\ud55c\ub2e4. \ub9e4\uc6b0 \ud070 \ud504\ub85c\uc81d\ud2b8. \uc5ec\ub7ec \uc5b8\uc5b4\ub85c \uc791\uc131\ub41c \ud504\ub85c\uc81d\ud2b8. \uc5ec\ub7ec \ud50c\ub7ab\ud3fc\uc5d0 \ubc30\ud3ec\ub418\uc5b4\uc57c \ud558\ub294 \ud504\ub85c\uc81d\ud2b8. \uc218\ub9ce\uc740 \ud14c\uc2a4\ud2b8\ub97c \ud574\uc57c \ud558\ub294 \ud504\ub85c\uc81d\ud2b8. Note \ubaa8\ub450 WICWIU \uc5d0 \uc720\uc6a9\ud55c \uae30\ub2a5\ub4e4 \uac19\ub124\uc694. \ubaa8\ub4e0 Google \ud504\ub85c\uc81d\ud2b8\uac00 bazel \ub85c \ube4c\ub4dc\ub418\uae30 \ub54c\ubb38\uc5d0 TensorFlow \ub3c4 bazel \ub85c \ube4c\ub4dc\ub429\ub2c8\ub2e4. \uc2ec\uc9c0\uc5b4 \uc6b0\ub9ac \uc5f0\uad6c\uc2e4\uc774 \uc88b\uc544\ud558\ub294 PyTorch \ub3c4 bazel \ub85c \ube4c\ub4dc\ub418\ub354\uad70\uc694. https://github.com/pytorch/pytorch/blob/master/BUILD.bazel \ub97c \ubcf4\uc138\uc694. Installation \u00b6 \uadf8\ub7ec\uba74 bazel \uc744 \uc27d\uac8c \ubc30\uc6b8 \uc218 \uc788\ub3c4\ub85d bazel \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c \uac00\ubccd\uac8c \ubc30\uc6cc\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc758 \uba85\ub839\uc5b4\ub85c bazel \uc758 \uc2e4\ud589\ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uace0 bazel \uc744 \uba85\ub839\uc5b4 bazel \ub85c \uc2e4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \ud658\uacbd\ubcc0\uc218\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4. $ wget https://github.com/bazelbuild/bazel/releases/download/3.4.1/bazel-3.4.1-linux-x86_64 $ mkdir ~/bin $ mv bazel-3.4.1-linux-x86_64 ~/bin/bazel $ chmod +x ~/bin/bazel bash \uc258 \uc0ac\uc6a9\uc790 \uadf8\ub9ac\uace0 export PATH=\"$PATH:$HOME/bin\" \ub97c .bashrc \uc5d0 \ucd94\uac00\ud574\uc8fc\uc138\uc694. \ub2e4\uc74c\uc758 \uba85\ub839\uc5b4\ub85c \uac04\ub2e8\ud558\uac8c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. $ echo export PATH = \"\\$PATH:\\$HOME/bin\" >> ~/.bashrc \uadf8\ub9ac\uace0 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \ud1b5\ud574 rc \ud30c\uc77c\uc744 \uc258\uc5d0 \uc801\uc6a9\ud574\uc8fc\uac70\ub098 \uc258\uc744 \ub2e4\uc2dc \uc2dc\uc791\ud558\uc138\uc694. $ source ~/.bashrc zsh \uc258 \uc0ac\uc6a9\uc790 \uadf8\ub9ac\uace0 export PATH=\"$PATH:$HOME/bin\" \ub97c .zshrc \uc5d0 \ucd94\uac00\ud574\uc8fc\uc138\uc694. \ub2e4\uc74c\uc758 \uba85\ub839\uc5b4\ub85c \uac04\ub2e8\ud558\uac8c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. $ echo export PATH = \"\\$PATH:\\$HOME/bin\" >> ~/.zshrc \uadf8\ub9ac\uace0 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \ud1b5\ud574 rc \ud30c\uc77c\uc744 \uc258\uc5d0 \uc801\uc6a9\ud574\uc8fc\uac70\ub098 \uc258\uc744 \ub2e4\uc2dc \uc2dc\uc791\ud558\uc138\uc694. $ source ~/.zshrc \uc774\uc81c bazel \uc744 \uc2dc\ud5d8\uc0bc\uc544 \uc2e4\ud589\ud574\ubcf4\uc138\uc694. $ bazel Tutorial \u00b6 \ub2e4\uc74c\uc758 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ud1b5\ud558\uc5ec bazel \uc758 \uae30\ubcf8\uc801\uc778 \uc0ac\uc6a9\ubc95\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. Bazel C++ Simple Tutorial Bazel C++ Common Use Cases \uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ub9c8\ucce4\ub2e4\uba74 \ub2e4\uc74c\uc758 bazel \uc0ac\uc6a9\ubc95\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. bazel \ub85c \ud504\ub85c\uc81d\ud2b8\ub97c \ube4c\ub4dc\ud558\ub824\uba74 workspace \ub97c \uc124\uc815\ud574\uc57c \ud55c\ub2e4. workspace \ub780 \ud504\ub85c\uc81d\ud2b8\uc758 \uc18c\uc2a4\ud30c\uc77c\uacfc bazel \uc758 \ube4c\ub4dc\ub97c \uc800\uc7a5\ud558\ub294 \ub514\ub809\ud1a0\ub9ac\uc774\ub2e4. workspace \ub294 WORKSPACE \ud30c\uc77c\uc744 \uac16\uace0 \uc788\uc5b4\uc57c \ud558\uace0, \ud558\ub098 \uc774\uc0c1\uc758 BUILD \ud30c\uc77c\uc744 \uac16\uace0 \uc788\uc5b4\uc57c \ud55c\ub2e4. C++ \ube4c\ub4dc \uaddc\uce59\uc744 \uc120\uc5b8\ud558\uae30 \uc704\ud558\uc5ec BUILD \ud30c\uc77c\uc5d0 \uba3c\uc800 \ub2e4\uc74c\uc758 \uc120\uc5b8\uc744 \ud574\uc57c \ud55c\ub2e4. load ( \"@rules_cc//cc:defs.bzl\" , \"cc_binary\" , \"cc_library\" ) C++ \ud30c\uc77c\uc758 \ucef4\ud30c\uc77c\uc744 \uc704\ud558\uc5ec cc_binary \ube4c\ub4dc \uaddc\uce59\uc744 \ub9cc\ub4e4\uc5b4\uc57c \ud55c\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 name \uc5d0 \uc2e4\ud589\ud30c\uc77c\uc758 \uc774\ub984, srcs \uc5d0 \uc18c\uc2a4\ud30c\uc77c\uc744 \uba85\uc2dc\ud55c\ub2e4. cc_binary ( name = \"hello-world\" , srcs = [ \"hello-world.cc\" ], ) bazel \ub85c \ud504\ub85c\uc81d\ud2b8\ub97c \ube4c\ub4dc\ud558\uae30 \uc704\ud558\uc5ec \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub54c WORKSPACE \ud30c\uc77c\uc774 \uc788\ub294 \uacf3\uc5d0\uc11c \uc774 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\uc57c \ud55c\ub2e4. $ bazel build //path/to/package:target-name \ub2e4\uc74c \uba85\ub839\uc5b4\uc758 \ucd9c\ub825 \uacb0\uacfc\ub97c Graphviz \uc5d0 \uc785\ub825\ud558\uba74 \ud504\ub85c\uc81d\ud2b8 \uc758\uc874\uc131\uc744 \uadf8\ub798\ud504 \ud615\ud0dc\ub85c \ube44\uc96c\uc5bc\ud558\uac8c \ubcfc \uc218 \uc788\ub2e4. $ bazel query --notool_deps --noimplicit_deps \"deps(//main:hello-world)\" --output graph \ub2e4\uc74c\uacfc \uac19\uc774 \ube4c\ub4dc \uaddc\uce59\uc758 deps \uc5d0 \uc758\uc874\uc131\uc744 \ucd94\uac00\ud558\uba74 \ub41c\ub2e4. \uadf8\ub7ec\uba74 bazel \uc774 \uc758\uc874\uc131\uc744 \uba3c\uc800 \ube4c\ub4dc\ud574\uc900\ub2e4. cc_library ( name = \"hello-greet\" , srcs = [ \"hello-greet.cc\" ], hdrs = [ \"hello-greet.h\" ], ) cc_binary ( name = \"hello-world\" , srcs = [ \"hello-world.cc\" ], deps = [ \":hello-greet\" , ], ) \uc758\uc874\uc131\uc774 \ub2e4\ub978 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 //path/to/library:target-name \uc744 dets \uc5d0 \ucd94\uac00\ud558\uba74 \ub41c\ub2e4. cc_library ( name = \"hello-greet\" , srcs = [ \"hello-greet.cc\" ], hdrs = [ \"hello-greet.h\" ], ) cc_binary ( name = \"hello-world\" , srcs = [ \"hello-world.cc\" ], deps = [ \":hello-greet\" , \"//lib:hello-time\" , ], ) \uc774\ub54c hello-time \ube4c\ub4dc \uaddc\uce59\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc774 visibility \uc635\uc158\uc5d0 //path/to/target:__pkg__ \ub97c \ucd94\uac00\ud558\uc5ec \uac00\uc2dc\uc131 \uc124\uc815\uc744 \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4. cc_library ( name = \"hello-time\" , srcs = [ \"hello-time.cc\" ], hdrs = [ \"hello-time.h\" ], visibility = [ \"//main:__pkg__\" ], ) \uc5ec\ub7ec \ud30c\uc77c\uc744 \ud55c\uaebc\ubc88\uc5d0 \ucef4\ud30c\uc77c\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 glob \uc744 \uc0ac\uc6a9\ud55c\ub2e4. cc_library ( name = \"build-all-the-files\" , srcs = glob ([ \"*.cc\" ]), hdrs = glob ([ \"*.h\" ]), ) \ub2e4\uc74c\uc740 \uc758\uc874\uc131\uc5d0 \ub300\ud55c \uc608\uc2dc\uc774\ub2e4. sandwich.h \uac00 bread.h \uc5d0 \uc758\uc874\ud558\uace0, bread.h \uac00 flour.h \uc5d0 \uc758\uc874\ud55c\ub2e4\uba74 BUILD \ud30c\uc77c\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \uc124\uc815\ud558\uba74 \ub41c\ub2e4. cc_library ( name = \"sandwich\" , srcs = [ \"sandwich.cc\" ], hdrs = [ \"sandwich.h\" ], deps = [ \":bread\" ], ) cc_library ( name = \"bread\" , srcs = [ \"bread.cc\" ], hdrs = [ \"bread.h\" ], deps = [ \":flour\" ], ) cc_library ( name = \"flour\" , srcs = [ \"flour.cc\" ], hdrs = [ \"flour.h\" ], ) \ub2e4\ub978 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub294 \uc758\uc874\uc131\uc5d0 \ub300\ud55c \uc608\uc2dc\uc774\ub2e4. C++ \ud504\ub85c\uc81d\ud2b8\uac00 \ub2e4\uc74c\uacfc \uac19\uc740 \ud30c\uc77c \uad6c\uc870\ub97c \uac16\uace0 \uc788\ub2e4\uace0 \ud558\uc790. \u2514\u2500\u2500 my - project \u251c\u2500\u2500 legacy \u2502 \u2514\u2500\u2500 some_lib \u2502 \u251c\u2500\u2500 BUILD \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 some_lib . h \u2502 \u2514\u2500\u2500 some_lib . cc \u2514\u2500\u2500 WORKSPACE \uc774\ub54c some_lib.cc \uac00 some_lib.h \uc5d0 \uc758\uc874\ud558\uace0 \uc788\ub2e4. \uadf8\ub7f0\ub370 #include \"legacy/some_lib/include/some_lib.h \ub85c \ud5e4\ub354\ub97c \uc120\uc5b8\ud55c \uac83\uc774 \uc544\ub2c8\ub77c. #include \"some_lib.h \ub85c \ud5e4\ub354\ub97c \uc120\uc5b8\ud588\ub2e4\uace0 \ud558\uc790. \uadf8\ub7ec\uba74 bazel \uc774 some_lib.cc \ub97c \ube4c\ub4dc\ud558\uae30 \uc704\ud558\uc5ec \ud5e4\ub354 \ud30c\uc77c\uc744 \ud0d0\uc0c9\ud560 \uacbd\ub85c legacy/some_lib/include \ub97c \ucd94\uac00\ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4. cc_library ( name = \"some_lib\" , srcs = [ \"some_lib.cc\" ], hdrs = [ \"include/some_lib.h\" ], copts = [ \"-Ilegacy/some_lib/include\" ], ) C++ \ud504\ub85c\uc81d\ud2b8\uac00 \ub2e4\ub978 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub294 mylib.so \ub77c\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 mylib.h \ub77c\ub294 \ud5e4\ub354\uc5d0 \uc758\uc874\uc131\uc774 \uc788\ub2e4\uba74 cc_library \ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc120\uc5b8\ud558\uba74 \ub41c\ub2e4. cc_library ( name = \"mylib\" , srcs = [ \"mylib.so\" ], hdrs = [ \"mylib.h\" ], ) References : https://bazel.build/ Abseil \u00b6 Abseil \uc740 Google \uc5d0\uc11c \uc81c\uc791\ud55c C++ \ud45c\uc900 STL \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ud655\uc7a5\uc774\ub2e4. Google \uc740 Abseil \uc744 \ud1b5\ud558\uc5ec STL \uc758 \ubd80\uc871\ud55c \ubd80\ubd84\uc744 \ubcf4\uc644\ud588\ub2e4. Abseil \uc740 Google \uc758 C++ \ud504\ub85c\uc81d\ud2b8\uc758 \uae30\ubc18\uc73c\ub85c \uad11\ubc94\uc704\ud558\uac8c \uc0ac\uc6a9\ub418\uace0 \uc788\ub2e4. Why Abseil? \u00b6 Google \uc740 C++ \ud504\ub85c\uc81d\ud2b8\uc5d0 Abseil \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \ucd94\ucc9c\ud55c\ub2e4. Why : Abseil \uc740 \ud56d\uc0c1 \ucd5c\uc2e0 C++ \ud45c\uc900\uacfc \ud638\ud658\ub41c\ub2e4. Google \uc758 \uc624\ud508\uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8\uc640 \ud638\ud658\ub41c\ub2e4. \uac00\ub839 TensorFlow , gRPC \ub4f1\ub4f1. Note TensorFlow \uc18c\uc2a4\ucf54\ub4dc \ubd84\uc11d\uc744 \ud574\uc57c \ud560 \ub54c\ub3c4 Abseil \uc744 \uc54c\uc544\uc57c \ud558\uaca0\ub124\uc694. Abseil \uc740 Google \uc774 C++ \uc81c\ud488\uc744 \ub9cc\ub4dc\ub294 \uc778\ud130\ud398\uc774\uc2a4\uc774\uae30 \ub54c\ubb38\uc5d0 Google \uc774 \uc5b4\ub5bb\uac8c C++ \ud504\ub85c\uc81d\ud2b8\ub97c \uac1c\ubc1c\ud558\ub294\uc9c0 \ubc30\uc6b8 \uc218 \uc788\ub2e4. Google \uc740 Abseil \uc744 \ub9e4\uc77c \ubc1c\uc804\uc2dc\ud0a4\uace0 \uc788\uace0 C++ \uac1c\ubc1c\uc790\ub4e4\uc758 \uc694\uad6c\ub97c \ub04a\uc784\uc5c6\uc774 Abseil \uc5d0 \uad6c\ud604\ud558\uace0 \uc788\ub2e4. Codemap \u00b6 Abseil \uc740 \ub2e4\uc74c\uc758 C++ \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4. base : \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ucd08\uae30\ud654 \ucf54\ub4dc\ub97c \ub2f4\uace0 \uc788\ub2e4. \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc774 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uc758\uc874\ud55c\ub2e4. algorithm : C++ STL \uc758 algorithm \uc758 \ud655\uc7a5\uc774\ub2e4. container : C++ STL \uc758 container \uc758 \ud655\uc7a5\uc774\ub2e4. debugging : \uba54\ubaa8\ub9ac \ub204\uc218 \uac80\uc99d, stacktrace \ub4f1\ub4f1 \uc744 \uc9c0\uc6d0\ud558\ub294 \ub514\ubc84\uae45 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. hash : hash \ud0c0\uc785\uacfc \uad00\ub828 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\ub294 \ud504\ub808\uc784\uc6cc\ud06c\uc774\ub2e4. memory : std::make_unique() \uc640 \ud638\ud658\ub418\ub294 \uba54\ubaa8\ub9ac \uad00\ub9ac \uad00\ub828 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. meta : \ud0c0\uc785 \uccb4\ud06c \uad00\ub828 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. numeric : 128 \ube44\ud2b8 \uc815\uc218\ud615 \uad00\ub828 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. strings : STL \uacfc \ud638\ud658\ub418\ub294 string \uad00\ub828 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. synchronization : std::mutex \ub97c \ub300\uccb4\ud558\ub294 absl:Mutex \ub4f1 \ubcd1\ub82c \uc2e4\ud589\uc5d0 \uad00\ud55c \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. time : \uc2dc\uac04\uacfc \uad00\ub828\ub41c \ub2e4\uc591\ud55c \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. types : non-container \ud0c0\uc785 \uad00\ub828 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. utility : \uc5ec\ub7ec \uc720\ud2f8\ub9ac\ud2f0\uc640 \ub3c4\uc6c0\uc774 \ub420\ub9cc\ud55c \ucf54\ub4dc\ub4e4\uc744 \uc81c\uacf5\ud55c\ub2e4. References : https://abseil.io C++ Version \u00b6 C++17 \uc744 \uc368\ub77c. \uc544\uc9c1 C++2x \ub294 \uc4f0\uc9c0 \ub9c8\ub77c. \ube44\ud45c\uc900 C++ \ud655\uc7a5\uc740 \uc4f0\uc9c0 \ub9c8\ub77c. \ube44\ud45c\uc900 C++ \ud655\uc7a5\uc5d0 \ub300\ud574\uc11c\ub294 \uc544\ub798\uc5d0\uc11c \ub354 \uc790\uc138\ud788 \uc124\uba85\ud55c\ub2e4. Note \uc544\ub798\uc758 \ub0b4\uc6a9\uc740 Google C++ Style Guide \uc744 \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4. \uc544\ub798\uc758 \ub0b4\uc6a9\uc5d0\uc11c \ub9d0\ud558\ub294 1\uc778\uce6d \"\ub098\" \ub610\ub294 \"\uc6b0\ub9ac\" \ub4f1\ub4f1\uc740 \uc81c\uac00 \uc544\ub2c8\ub77c Google \uc774\uba70, \ud0c0\uac9f \ub3c5\uc790\ub4e4\uc740 Google \uc758 \uac1c\ubc1c\uc790\uc785\ub2c8\ub2e4. Google C++ Style Guide \u00b6 Background \u00b6 \uad6c\uae00\uc758 \ub9ce\uc740 \ud504\ub85c\uc81d\ud2b8\uac00 C++ \ub85c \uc9c4\ud589\ub41c\ub2e4. \uc774\ub294 C++ \uc758 \uac15\ub825\ud568 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7ec\ub098 \uadf8 \uac15\ub825\ud568\uc774 \uc885\uc885 \ubcf5\uc7a1\ud568\uc744 \ub0b3\ub294\ub2e4. \ubcf5\uc7a1\ud568\uc740 \uace7\ubc14\ub85c \ubc84\uadf8\ub97c \ub0b3\uace0 \uac00\ub3c5\uc131\uacfc \uc720\uc9c0\ubcf4\uc218\uc131\uacfc \ud655\uc7a5\uc131\uc744 \ub5a8\uc5b4\ub728\ub9b0\ub2e4. \uc774 \uac00\uc774\ub4dc\ub294 \uadf8\ub7ec\ud55c C++ \uc758 \ubcf5\uc7a1\ud568\uc744 \ud1b5\uc81c\ud558\uae30 \uc704\ud558\uc5ec Do \ub4e4\uacfc Don't \ub4e4\uc744 \uc54c\ub824\uc904 \uac83\uc774\ub2e4. \uad6c\uae00\uc758 \ub300\ubd80\ubd84\uc758 C++ \ud504\ub85c\uc81d\ud2b8\uac00 \uc774 \ucee8\ubca4\uc158\uc744 \ub530\ub978\ub2e4. Goals of the Style Guide \u00b6 \uc55e\uc73c\ub85c \uc18c\uac1c\ud560 \ucee8\ubca4\uc158\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ubaa9\ud45c\ub97c \ub2ec\uc131\ud558\uae30 \uc704\ud558\uc5ec \uc815\ub9bd\ub41c \uaddc\uce59\ub4e4\uc774\ub2e4. \uc65c \uc774\ub7f0 \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud574\uc57c \ud558\ub294\uc9c0 \uc758\ubb38\uc774 \ub4dc\ub294 \uc0ac\ub78c\uc5d0\uac8c \uc774\ub7ec\ud55c \ubaa9\ud45c\ub97c \ub2ec\uc131\ud558\uae30 \uc704\ud558\uc5ec \ub77c\uace0 \ub9d0\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. Style rules should pull their weight (\ucf54\ub529 \ucee8\ubca4\uc158\uc740 \uac00\uce58\uac00 \uc788\uc5b4\uc57c \ud55c\ub2e4.) \ucf54\ub529 \ucee8\ubca4\uc158\uc740 \ud574\ub2f9 \uacf5\ub3d9\uccb4\uc758 \ubaa8\ub4e0 \uac1c\ubc1c\uc790\uc5d0\uac8c \uc124\uba85\ub418\uace0 \uae30\uc5b5\ub418\uc5b4\uc57c \ud560\ub9cc\ud55c \uac00\uce58\uac00 \uc788\uc5b4\uc57c \ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub9e4\uc6b0 \uc548\uc88b\uc740 \ucf54\ub529 \ucee8\ubca4\uc158\uc740 \uc5b4\ucc28\ud53c \uc0ac\ub78c\ub4e4\uc774 \uadf8\ub807\uac8c \ucf54\ub529\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ubbc0\ub85c \uad73\uc774 \uc815\ub9bd\ud574\ub458 \ud544\uc694\uac00 \uc5c6\ub2e4. \uac00\ub839 goto \ubb38\uc774 \ub9e4\uc6b0 \uc548\uc88b\uc740 \ucf54\ub4dc\ub77c\ub294 \uac83\uc740 \uc774\ubbf8 \ub110\ub9ac \uc54c\ub824\uc84c\uae30 \ub54c\ubb38\uc5d0 \uc774\uac83\ub4e4\uc740 \uad73\uc774 \ucf54\ub529 \ucee8\ubca4\uc158\uc5d0 \uc5b8\uae09\ud558\uc9c0 \uc54a\uc558\ub2e4. Optimize for the reader, not the writer (writer \uac00 \uc544\ub2cc reader \ub97c \uc704\ud558\uc5ec \ucd5c\uc801\ud654\ud558\ub77c.) \uad6c\uae00\uc758 \ub300\ubd80\ubd84\uc758 \ud504\ub85c\uc81d\ud2b8\uc740 \ub2e8\uae30\uc131 \ud504\ub85c\uc81d\ud2b8\uac00 \uc544\ub2c8\ub77c \uc7a5\uae30 \ud504\ub85c\uc81d\ud2b8\uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ud504\ub85c\uc81d\ud2b8\ub294 \uacc4\uc18d\ud574\uc11c \ud6c4\uc784 \uac1c\ubc1c\uc790\uc5d0\uac8c \uc77d\ud78c\ub2e4. \uc774\ub294 \ud504\ub85c\uc81d\ud2b8\uc5d0 writing \uc2dc\uac04\ubcf4\ub2e4 reading \uc2dc\uac04\uc774 \ub354 \ub9ce\uc774 \uc18c\ubaa8\ub41c\ub2e4\ub294 \uac83\uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc6b0\ub9ac\ub294 \ucf54\ub4dc\ub97c writing \uc5d0 \ucd5c\uc801\ud654\uc2dc\ud0a8 \uac83\uc774 \uc544\ub2c8\ub77c \uac00\ub3c5\uc131, \uc720\uc9c0\ubcf4\uc218, \ub514\ubc84\uae45\uc5d0 \uc88b\ub3c4\ub85d \ucd5c\uc801\ud654\uc2dc\ucf30\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774 \ubaa9\ud45c\ub97c \uae30\ubc18\uc73c\ub85c \"Leave a trace for the reader\"(\ub3c5\uc790\uc5d0\uac8c \ud754\uc801\uc744 \ub0a8\uaca8\ub77c) \ub77c\ub294 \uc138\ubd80 \ubaa9\ud45c \ub4f1\uc774 \uc138\uc6cc\uc9c8 \uc218 \uc788\ub2e4. \uac00\ub839 \ud3ec\uc778\ud130\uc758 ownership \uc744 \uc62e\uae30\ub294 \ub4f1\uc758 \ub9e4\uc6b0 \ud754\uce58 \uc54a\uc740 \uc77c\uc774 \ubc1c\uc0dd\ud558\uba74 \uc65c \uc774\ub807\uac8c \ud588\ub294\uc9c0 \ud6c4\uc784 \uac1c\ubc1c\uc790\uac00 \uc54c \uc218 \uc788\ub3c4\ub85d \ud78c\ud2b8\ub97c \ub0a8\uaca8\uc57c \ud55c\ub2e4. Be consistent with existing code (\ucf54\ub529 \ucee8\ubca4\uc158\uc744 \uc9c0\ud0a4\uba74\uc11c \ucf54\ub529\ud574\ub77c.) \uc77c\uad00\ub41c \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \uc720\uc9c0\ud558\ub294 \uac83\uc740 \uc6b0\ub9ac\ub97c \ub2e4\ub978 \ub354 \uc911\uc694\ud55c \ubb38\uc81c\uc5d0 \uc9d1\uc911\ud560 \uc218 \uc788\uac8c \ud574\uc900\ub2e4. \ub300\ubd80\ubd84 Style \uc758 \ud1b5\uc77c\uc740 \uc790\ub3d9\ud654 \ub420 \uc218 \uc788\ub2e4. \"Be Consistent\" \ub77c\ub294 \ubaa9\ud45c\ub294 \ud56d\uc0c1 \"just pick one and stop worrying about it.\"(\ud558\ub098\ub97c \ud0dd\ud558\uace0 \ub354 \uc774\uc0c1 \uac71\uc815\ub9c8\uc138\uc694) \ub85c \uc694\uc57d\ub41c\ub2e4. \ucf54\ub529 \ucee8\ubca4\uc158\uc5d0 \uc790\uc720\ub97c \uc8fc\uba74 \uc624\ud788\ub824 \uc774 \uc2a4\ud0c0\uc77c\uc774 \ub354 \ub0ab\ub0d0 \uc800 \uc2a4\ud0c0\uc77c\uc774 \ub354 \ub0ab\ub0d0\uace0 \ud1a0\ub860\ud558\uba74\uc11c \ub354 \ub9ce\uc740 \ube44\uc6a9\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Be consistent with the broader C++ community when appropriate (\uac00\ub2a5\ud558\uba74 \ub110\ub9ac \uc54c\ub824\uc9c4 C++ \ucf54\ub529 \ucee8\ubca4\uc158\ub3c4 \uc9c0\ucf1c\ub77c.) \ub2e4\ub978 C++ \ucee4\ubba4\ub2c8\ud2f0\uac00 \uc9c0\ud0a4\ub294 \ucf54\ub529 \ucee8\ubca4\uc158\uc5d0 \ub300\ud55c \uc801\uc808\ud55c \uc77c\uad00\uc131\uc744 \uc720\uc9c0\ud558\ub294 \uac83\ub3c4 \ubaa9\ud45c 3 \uacfc \uac19\uc740 \ub9e5\ub77d\uc5d0\uc11c \uc774\ud574\ub420 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \ub110\ub9ac \ud1b5\uc6a9\ub418\ub294 C++ \ucf54\ub529 \ucee8\ubca4\uc158\uc5d0\ub3c4 \uc7a5\uc810\uc774 \uc788\uace0 \ub2e8\uc810\uc774 \uc788\ub2e4. \uc7a5\uc810\uc740 \ubc1b\uc544\ub4e4\uc5ec\uc57c \ud558\uc9c0\ub9cc, \ub2e8\uc810\uc740 \ub110\ub9ac \ud1b5\uc6a9\ub418\ub294 C++ \ucf54\ub529 \ucee8\ubca4\uc158\uc774\ub77c\ub3c4 \uacfc\uac10\ud788 \ubc1b\uc544\ub4e4\uc774\uc9c0 \uc54a\ub294\ub2e4. Avoid surprising or dangerous constructs (\uc704\ud5d8\ud55c C++ \ubb38\ubc95\uc740 \ud53c\ud574\ub77c.) C++ \uc740 \ud55c \uc0ac\ub78c\uc774 \uc7a0\uae50 \uc0dd\uac01\ud558\uace0 \uc124\uacc4\ud55c \uac83\uacfc \ub2ec\ub9ac \uc0dd\uac01\ubcf4\ub2e4 \ub180\ub78d\uace0 \uc704\ud5d8\ud55c \uae30\ub2a5\ub4e4\uc744 \uac16\uace0 \uc788\ub2e4. \uc5b4\ub5a4 Style \uac00\uc774\ub4dc\ub294 \uc774\ub7f0 \ud568\uc815\uc5d0 \ube60\uc9c0\uc9c0 \uc54a\uae30 \uc704\ud558\uc5ec \uc815\ub9bd\ub418\uc5c8\ub2e4. Avoid constructs that our average C++ programmer would find tricky or hard to maintain (\ub300\ubd80\ubd84\uc758 \uac1c\ubc1c\uc790\ub4e4\uc774 \uc5b4\ub824\uc6cc\ud558\ub294 C++ \ubb38\ubc95\ub3c4 \ud53c\ud574\ub77c.) C++ \uc740 \uadf8 \ubcf5\uc7a1\ud568 \ub54c\ubb38\uc5d0 \ud504\ub85c\uc81d\ud2b8\uc5d0 \ucd94\uac00\ub418\uc5b4\uc11c\ub294 \uc548\ub418\ub294 \uae30\ub2a5\ub4e4\ub3c4 \uac16\uace0 \uc788\ub2e4. \uae4c\ub2e4\ub85c\uc6b4 \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \ud604 \uc2dc\uc810\uc5d0\uc11c \ub2f9\uc2e0\uc758 \ud300\uc6d0\uc774 \ub2e4 \uc774\ud574\ud558\uc600\uace0 \uadf8 \uc720\uc6a9\uc131\ub3c4 \uc798 \uc0ac\uc6a9\ud558\uac8c \ub418\uc5c8\ub2e4\uace0 \ud574\ub3c4, \uadf8 \ub2e4\uc74c \ud300, \ub610\ub294 \uadf8 \ub2e4\uc74c \ud300\uc758 \ud300\uc6d0\ub4e4\uc774 \uadf8 \uae4c\ub2e4\ub85c\uc6b4 \ubb38\ubc95\uc744 \uc774\ud574\ud560 \uc218 \uc788\uc744\uc9c0 \uc54c \uc218 \uc5c6\ub2e4. Be mindful of our scale (\ub2f9\uc2e0\uc758 \ucf54\ub4dc \ud55c \uc904\uc774 \uc5bc\ub9c8\ub098 \ud070 \ud30c\uae09\ub825\uc744 \ubbf8\uce60\uc9c0 \uacbd\uac01\uc2ec\uc744 \uac00\uc838\ub77c.) \ucf54\ub4dc\uac00 1\uc5b5 \uc904\uc774 \ub118\uc5b4\uac00\ub294 \ud504\ub85c\uc81d\ud2b8\uc5d0\ub294 \uc218\ucc9c\uba85\uc758 \uac1c\ubc1c\uc790\uac00 \ud568\uaed8 \uc791\uc5c5\ud558\uace0 \uc788\ub2e4. \uc774\ub7f0 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 \uc0ac\uc18c\ud55c \uc2e4\uc218\uac00 \ub9c9\ub300\ud558\uac8c \ud070 \ube44\uc6a9\uc744 \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. \uac00\ub839 \uac1c\uc778 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 namespace \uc758 \ucda9\ub3cc\uc774 \uc544\uc8fc \uc0ac\uc18c\ud55c \uc2e4\uc218\uc774\uc9c0\ub9cc, \ud070 \uaddc\ubaa8\uc758 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 \ub9e4\uc6b0 \ud070 \ube44\uc6a9\uc744 \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \ubb38\uc81c\uac00 \ub41c\ub2e4. Concede to optimization when necessary (\uac00\ub054 \uc131\ub2a5 \ucd5c\uc801\ud654\uac00 \ud544\uc694\ud558\ub2e4\uba74 \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \uc5b4\uaca8\ub3c4 \uc88b\ub2e4.) \uc131\ub2a5 \ucd5c\uc801\ud654\ub294 \uc885\uc885 \ud544\uc694\ud558\uace0 \uc801\uc808\ud558\ub2e4. \uc2ec\uc9c0\uc5b4 \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \uc5b4\uaca8\uc11c\ub77c\ub3c4 \uc131\ub2a5 \ucd5c\uc801\ud654\uac00 \uc774\ub8e8\uc5b4\uc9c8 \uc218 \uc788\ub2e4\uba74 \uc131\ub2a5 \ucd5c\uc801\ud654\ub41c \ucf54\ub4dc\ub97c \uacfc\uac10\ud788 \uc791\uc131\ud558\ub77c. \uc774 \ubb38\uc11c\ub294 \ubaa8\ub4e0 \ud569\ub9ac\uc801 \uc81c\uc57d\uc744 \uae30\uc220\ud558\ub3c4\ub85d \uc791\uc131\ub41c \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \ube44\ud310\uc801\uc778 \uc790\uc138\ub97c \uac00\uc838\ub77c. \uadf8\ub9ac\uace0 \ub2f9\uc2e0\uc5d0\uac8c \ud655\uc2e0\uc774 \uc548\uc120\ub2e4\uba74 \ud504\ub85c\uc81d\ud2b8 \ud300\uc7a5\uc5d0\uac8c \uc774 \uaddc\uce59\uc5d0 \ub300\ud558\uc5ec \ub2f9\uc2e0\uc758 \ube44\ud310\uc744 \ub9d0\ud558\ub77c. Header Files \u00b6 \ubaa8\ub4e0 .cc \ud30c\uc77c\uc740 .h \ud5e4\ub354 \ud30c\uc77c\uacfc \uc5f0\uad00\ub418\uc5b4 \uc788\ub2e4. \uc544\uc8fc \uc608\uc678\uc801\uc73c\ub85c \uc720\ub2db \ud14c\uc2a4\ud2b8\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc791\uc740 .cc \ud30c\uc77c\ub4e4\uc740 \ub2e8\uc9c0 main() \ud568\uc218\ub9cc \uac16\uace0 \uc788\ub2e4. Note C++ \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uae30 \uc704\ud55c \ud30c\uc77c\uc758 \ud655\uc7a5\uc790\ub294 .cc , .cpp , .cxx , .c++ \ub4f1\uc774 \uc788\ub294\ub370 WICWIU \ub294 .cpp \ud655\uc7a5\uc790\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud5e4\ub354 \ud30c\uc77c\uc758 \uc62c\ubc14\ub978 \uc0ac\uc6a9\uc740 \uac00\ub3c5\uc131, \ud504\ub85c\uc81d\ud2b8 \ud06c\uae30, \ud504\ub85c\uc81d\ud2b8\uc758 \uc131\ub2a5\uc5d0 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4. \ub2e4\uc74c\uc758 \uaddc\uce59\ub4e4\uc740 \ud5e4\ub354 \ud30c\uc77c\uc744 \uc5b4\ub5bb\uac8c \uc62c\ubc14\ub974\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294\uc9c0 \uac00\uc774\ub4dc\ud574\uc900\ub2e4. Self-contained Headers \ud5e4\ub354 \ud30c\uc77c\uc740 \ubc18\ub4dc\uc2dc \ub3c5\ub9bd\uc801\uc774\uc5b4\uc57c \ud55c\ub2e4. \uc989, \uadf8 \uc790\uccb4\ub85c \ucef4\ud30c\uc77c \ub418\uc5b4\uc57c \ud55c\ub2e4. \uadf8\ub9ac\uace0 \ubc18\ub4dc\uc2dc .h \ud655\uc7a5\uc790\ub97c \uac00\uc838\uc57c \ud55c\ub2e4. \ud3ec\ud568\ub418\uc5b4\uc57c \ud558\ub294 \ube44\ud5e4\ub354 \ud30c\uc77c\uc740 .inc \ud655\uc7a5\uc790\ub97c \uac00\uc838\uc57c \ud558\uba70 \uc544\uc8fc \uc608\uc678\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4. \ud5e4\ub354 \ud30c\uc77c\uc774 \ubc18\ub4dc\uc2dc \ub3c5\ub9bd\uc801\uc774\uc5b4\uc57c \ud55c\ub2e4\ub294 \uac83\uc740 \uadf8\uac83\uc774 \ud544\uc694\ud55c \ubaa8\ub4e0 \uac83\uc744 \uc9c0\ub2c8\uace0 \uc788\uc5b4\uc57c \ud55c\ub2e4\ub294 \uac83\uc774\ub2e4. \ud5e4\ub354 \ud30c\uc77c\uc740 \uc544\ub798\uc5d0\uc11c \uc124\uba85\ud560 \ud5e4\ub354 \uac00\ub4dc\ub97c \uac00\uc838\uc57c\ub9cc \ud55c\ub2e4. template \uacfc inline \ud568\uc218\ub294 \uc120\uc5b8\uacfc \ub3d9\uc2dc\uc5d0 \uc815\uc758\ud574\ub77c. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 link \ub2e8\uacc4\uc5d0\uc11c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c\ub2e4. \uc608\uc678\uc801\uc73c\ub85c template \uad6c\ud604\uc744 \ud2b9\uc218\ud654\uc2dc\ucf1c\uc57c \ud560 \uacbd\uc6b0 \uc624\uc9c1 \ud574\ub2f9 .cc \ud30c\uc77c\uc5d0\uc11c \uad6c\ud604\ud558\ub294 \uac83\uc774 \ud5c8\ub77d\ub41c\ub2e4. The #define Guard \ubaa8\ub4e0 \ud5e4\ub354 \ud30c\uc77c\uc740 \uc911\ubcf5 \uc120\uc5b8\uc744 \ub9c9\uae30 \uc704\ud574 #define \uac00\ub4dc\ub97c \uac00\uc838\uc57c \ud55c\ub2e4. #define \uac00\ub4dc\uc758 \ud615\uc2dd\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud558\ub77c. < PROJECT > _ < PATH > _ < FILE > _H_ \uc720\uc77c\uc131\uc744 \ubcf4\uc7a5\ud558\uae30 \uc704\ud558\uc5ec \uacbd\ub85c\ub294 \uc804\uccb4 \uacbd\ub85c\uc5ec\uc57c \ud55c\ub2e4. Example \uac00\ub839 \ud30c\uc77c\uc774 foo/src/bar/baz.h \ub77c\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 #define \uac00\ub4dc\ub97c \uc0dd\uc131\ud558\ub77c. #ifndef FOO_BAR_BAZ_H_ #define FOO_BAR_BAZ_H_ ... #endif // FOO_BAR_BAZ_H_ Forward Declarations \uac00\ub2a5\ud55c \ud55c forward declarations \uc744 \ud53c\ud574\ub77c. forward declarations \ub294 \uc815\uc758 \uc5c6\uc774 \uc120\uc5b8\ud558\ub294 \uac83\uc774\ub2e4. Example \ud568\uc218\uc758 forward declarations \uc758 \uc608\uc2dc\uc774\ub2e4. void printThisInteger ( int ); \ud074\ub798\uc2a4\uc758 forward declarations \uc758 \uc608\uc2dc\uc774\ub2e4. class MyClass ; struct MyStruct ; Inline Functions inline \ud568\uc218\ub294 \uc624\uc9c1 \ucf54\ub4dc\uac00 \uc791\uc744 \ub54c, \uc989 \ucf54\ub4dc\uac00 10 \uc904 \uc774\ud558\uc77c \ub54c \uc0ac\uc6a9\ud558\ub77c. Why : inline \ud568\uc218\ub294 \uadf8 \ucf54\ub4dc\uac00 \uc791\uc73c\uba74 \uc791\uc744\uc218\ub85d \ud6a8\uc728\uc801\uc774\ub2e4. \ud558\uc9c0\ub9cc inline \ud568\uc218\ub97c \ub0a8\uc6a9\ud558\uba74 \ud504\ub85c\uadf8\ub7a8\uc774 \uc624\ud788\ub824 \ub290\ub824\uc9c4\ub2e4. \ud568\uc218\uc758 \ud06c\uae30\uac00 \ucee4\uc9c0\uba74 inlining \uc740 \ucf54\ub4dc\uc758 \ud06c\uae30\ub97c \ub9e4\uc6b0 \ud06c\uac8c \ud55c\ub2e4. virtual \uc774\ub098 \ub9ac\ucee4\uc2dc\ube0c \ud568\uc218 \uac19\uc740 \ud568\uc218\ub4e4\uc740 \ubcf4\ud1b5 inline \ub418\uc9c0 \uc54a\ub294\ub2e4. \ud2b9\ud788 \ub9ac\ucee4\uc2dc\ube0c \ud568\uc218\ub294 \uc808\ub300 inline \ud654 \uc2dc\ud0a4\uba74 \uc548 \ub41c\ub2e4. Order of Includes \ud5e4\ub354\ub97c \ub2e4\uc74c\uc758 \uc21c\uc11c\ub85c \ud3ec\ud568\uc2dc\ucf1c\ub77c. \uadf8\ub9ac\uace0 \uac01\uac01\uc758 \ud5e4\ub354 \ud30c\ud2b8\ub4e4\uc744 \uaf2d \ud55c \uce78 \ub744\uc6cc\uc918\ub77c. \ud30c\uc77c\uacfc \uad00\ub828\ub41c \ud5e4\ub354 C \uc2dc\uc2a4\ud15c \ud5e4\ub354 C++ STL \ud5e4\ub354 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud5e4\ub354 \ub2f9\uc2e0\uc758 \ud504\ub85c\uc81d\ud2b8\uc758 \ud5e4\ub354 \uac01\uac01\uc758 \ud5e4\ub354 \ud30c\ud2b8 \ub0b4\ubd80\uc5d0\uc11c\ub294 \uc54c\ud30c\ubcb3 \uc21c\uc11c\ub85c \ud5e4\ub354\ub97c \uc815\ub82c\ud574\ub77c. Example dir2/foo2.h \ub97c \uad6c\ud604\ud558\uac70\ub098 \ud14c\uc2a4\ud2b8\ud558\ub294 \uac83\uc774 \ubaa9\uc801\uc778 dir/foo.cc \uc640 dir/foo_test.cc \uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud5e4\ub354\ub97c \ud3ec\ud568\uc2dc\ud0a4\uba74 \ub41c\ub2e4. dir2/foo2.h A blank line C system headers, \uac00\ub839 <unistd.h> , <stdlib.h> A blank line C++ standard library headers, \uac00\ub839 <algorithm> , <cstddef> A blank line \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 .h \ud30c\uc77c \ub2f9\uc2e0\uc758 \ud504\ub85c\uc81d\ud2b8\uc758 .h \ud30c\uc77c Note \"\ud30c\uc77c\uacfc \uad00\ub828\ub41c \ud5e4\ub354\" \ub780 \uadf8\uac83\uc774 \ube60\uc9c0\uba74 \uc804\uccb4 \ud504\ub85c\uc81d\ud2b8\uc758 \ucef4\ud30c\uc77c \ube4c\ub4dc\uac00 \ub418\uc9c0 \uc54a\ub294 \ud5e4\ub354\ub97c \ub73b\ud55c\ub2e4. \uac00\ub839 \uc704\uc758 \uc608\uc2dc\uc5d0\uc11c dir2/foo2.h \ud5e4\ub354\uac00 dir/foo.cc \uc640 dir/foo_test.cc \ud30c\uc77c\uc5d0\uc11c \ube60\uc9c0\uba74 \ud504\ub85c\uc81d\ud2b8\uac00 \ube4c\ub4dc\uc5d0 \uc2e4\ud328\ud55c\ub2e4. Note stddef.h \uac19\uc740 C \ud5e4\ub354\ub294 cstddef \uc758 C++ \uc2a4\ud0c0\uc77c\ub85c \ubc14\uafc0 \uc218 \uc788\ub2e4. \ub450 \uc2a4\ud0c0\uc77c \ub2e4 \uac00\ub2a5\ud558\uc9c0\ub9cc \uae30\uc874\uc5d0 \uc788\ub294 \ucf54\ub4dc\uc640 \uc77c\uad00\uc131\uc744 \uc9c0\ud0a4\uba74 \ub41c\ub2e4. Example google-awesome-project/src/foo/internal/fooserver.cc \uc758 \ud5e4\ub354 \ud3ec\ud568\uc740 \ub2e4\uc74c\uacfc \uac19\uc744 \uc218 \uc788\ub2e4. #include \"foo/server/fooserver.h\" #include <sys/types.h> #include <unistd.h> #include <string> #include <vector> #include \"base/basictypes.h\" #include \"base/commandlineflags.h\" #include \"foo/server/bar.h\" \uba3c\uc800 fooserver.cc \uac00 \uad6c\ud604\ud574\uc57c \ud560 foo/server/fooserver.h \ub97c \ub9e8 \ucc98\uc74c\uc5d0 \ud3ec\ud568\uc2dc\ucf30\ub2e4. \uadf8 \ub2e4\uc74c\uc5d0 C \uc2dc\uc2a4\ud15c \ud5e4\ub354, C++ \ud5e4\ub354, \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud5e4\ub354, \uadf8\ub9ac\uace0 \ud574\ub2f9 \ud504\ub85c\uc81d\ud2b8\uc758 \ud5e4\ub354\ub97c \ud3ec\ud568\uc2dc\ud0a8\ub2e4. Names of Includes \ubaa8\ub4e0 \ud5e4\ub354 \ud30c\uc77c\uc740 . \uc774\ub098 .. \uc774 \uc5c6\uc774 \ud3ec\ud568\ub418\uc5b4\uc57c \ud55c\ub2e4. Example google-awesome-project/src/base/logging.h \ud5e4\ub354 \ud30c\uc77c\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud3ec\ud568\ub418\uc5b4\uc57c \ud55c\ub2e4. #include \"base/logging.h\" \ud5e4\ub354 \ud3ec\ud568 \uaddc\uce59 \ud544\uc694\ud55c \ubaa8\ub4e0 \ud5e4\ub354\ub97c \ud3ec\ud568\uc2dc\ucf1c\ub77c. Example \ub9cc\uc57d \ub2f9\uc2e0\uc774 bar.h \uc640 foo.h \ud5e4\ub354\ub97c \ud3ec\ud568\ud574\uc57c \ud558\ub294\ub370 bar.h \uac00 foo.h \ub97c \ud3ec\ud568\ud558\uace0 \uc788\ub2e4\uba74 \ub2f9\uc2e0\uc758 \ud30c\uc77c\uc5d0\uc11c \uc2e4\uc81c\ub85c bar.h \ub9cc \ud3ec\ud568\ud574\ub3c4 \ub41c\ub2e4. \ud558\uc9c0\ub9cc bar.h \uc640 foo.h \ub97c \ud3ec\ud568\uc2dc\ucf1c\ub77c. \uc870\uac74\ubd80 \ud5e4\ub354 \uc870\uac74\ubd80 \ud5e4\ub354\uac00 \ud544\uc694\ud558\ub2e4\uba74 \ubaa8\ub4e0 \ud5e4\ub354 \ubc11\uc5d0 \ud3ec\ud568\uc2dc\ucf1c\ub77c. Example \uac00\ub054 \ub2e4\uc74c\uacfc \uac19\uc774 \uc2dc\uc2a4\ud15c \uc0ac\uc591\uc744 \uccb4\ud06c\ud574\uc57c \ud558\ub294 \uc870\uac74\ubd80 \ud5e4\ub354\uac00 \ud544\uc694\ud558\ub2e4. \uadf8\ub7ec\uba74 \ubaa8\ub4e0 \ud5e4\ub354\ub4e4\ubcf4\ub2e4 \ubc11\uc5d0 \uc120\uc5b8\ud558\uba74 \ub41c\ub2e4. #include \"foo/public/fooserver.h\" #include \"base/port.h\" // For LANG_CXX11. #ifdef LANG_CXX11 #include <initializer_list> #endif // LANG_CXX11 Scoping \u00b6 Namespaces \uc608\uc678\uc801\uc778 \uc0c1\ud669\uc744 \uc81c\uc678\ud558\uace0 \ubaa8\ub4e0 \ucf54\ub4dc\ub97c namespace \ub0b4\ubd80\uc5d0 \uc791\uc131\ud574\ub77c. \uc774\ub984\uacf5\uac04\uc740 \ud504\ub85c\uc81d\ud2b8\uc758 \uc774\ub984\uc774\ub098 \uacbd\ub85c\ucc98\ub7fc \uc720\ub2c8\ud06c\ud574\uc57c \ud55c\ub2e4. namespace \uc758 using \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Example using namespace std; \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83\uc774\ub2e4. inline namespace \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. namespace \ub97c \uc5b4\ub5a4 \uc774\ub984\uacf5\uac04\uc778\uc9c0 \uc54c\ub824\uc8fc\ub294 \ucf54\uba58\ud2b8\ub85c \ub2eb\uc544\ub77c. Example \ub2e4\uc74c\uacfc \uac19\uc774 namespace \uac00 \ub05d\ub0a0 \ub54c \ucf54\uba58\ud2b8\ub97c \ub2ec\uc544\ub77c. 1 2 3 4 5 6 7 8 namespace mynamespace { class MyClass { public : ... void Foo (); }; } // namespace mynamespace namespace \uc758 alias \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Example namespace baz = ::foo::bar::baz; \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Unnamed Namespaces and Static Variables \ub9cc\uc57d \uc5b4\ub5a4 .cc \ud30c\uc77c\uc774 \uc678\ubd80\uc5d0\uc11c \ucc38\uc870\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \ucf54\ub4dc\ub97c \uc774\ub984\uc5c6\ub294 namespace \ub85c \ubb36\uac70\ub098 static \uc73c\ub85c \uc120\uc5b8\ud574\ub77c. main() \ud568\uc218\ub97c \uc815\uc758\ud558\ub294 main.cpp \uc774 \ubcf4\ud1b5 \uc774 \uacbd\uc6b0\uc5d0 \ud574\ub2f9\ud55c\ub2e4. Note \uc774\ub984\uc5c6\ub294 namespace \ub85c \ubb36\uac70\ub098 \ud568\uc218\ub97c static \uc73c\ub85c \uc120\uc5b8\ud558\uba74 \uc678\ubd80\uc5d0\uc11c \uc811\uadfc\ud560 \uc218 \uc5c6\uac8c \ub41c\ub2e4. Example \uc678\ubd80\uc5d0\uc11c \ucc38\uc870\ub418\uc9c0 \uc54a\ub294 .cc \ud30c\uc77c\uc774\ub77c\uba74 \ubaa8\ub4e0 \ucf54\ub4dc\ub97c \ub2e4\uc74c\uc758 \uc774\ub984\uc5c6\ub294 namespace \ub85c \ubb36\uc5b4\ub77c. Do : namespace { ... } // namespace Nonmember, Static Member, and Global Functions \ud568\uc218\ub97c namespace \uc5d0 \ub450\ub294 \uac83\uc744 \uc120\ud638\ud574\ub77c. \uc644\uc804\ud55c \uc804\uc5ed\ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Note \"\uba54\uc18c\ub4dc\" \ub294 \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ud568\uc218\uc774\uace0, \"\ud568\uc218\" \ub294 \ud074\ub798\uc2a4\uc5d0 \uc18d\ud558\uc9c0 \uc54a\uc740 \uc77c\ubc18\uc801\uc778 \ud568\uc218\uc785\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uace0 \ubaa8\ub4e0 \ud568\uc218\ub97c \uc5b4\ub5a4 \ud074\ub798\uc2a4\uc758 static \uba54\uc18c\ub4dc\ub85c \uc120\uc5b8\ud558\uc9c0\ub294 \ub9c8\ub77c. static \uba54\uc18c\ub4dc\ub294 \ubc18\ub4dc\uc2dc \uadf8 \ud074\ub798\uc2a4\uc640 \ubc00\uc811\ud558\uac8c \uc5f0\uad00\ub418\uc5b4 \uc788\uc5b4\uc57c \ud55c\ub2e4. Local Variables \ubcc0\uc218\ub97c \uac00\ub2a5\ud55c \ud55c \uac00\uc7a5 \uc881\uc740 scope \uc5d0 \ubc30\uce58\ud574\ub77c. \uadf8\ub9ac\uace0 \ubcc0\uc218\ub97c \ubcc0\uc218\uc758 \uccab \uc0ac\uc6a9\uacfc \uac00\ub2a5\ud55c \ud55c \uac00\uae4c\uc774 \ubc30\uce58\ud574\ub77c. \ubcc0\uc218\ub97c \uac00\ub2a5\ud55c \ud55c \uc120\uc5b8\uacfc \ub3d9\uc2dc\uc5d0 \ucd08\uae30\ud654\ud574\ub77c. Example Don't: int i ; i = f (); // Bad -- initialization separate from declaration. Do: int j = g (); // Good -- declaration has initialization. Don't: std :: vector < int > v ; v . push_back ( 1 ); // Prefer initializing using brace initialization. v . push_back ( 2 ); Do: std :: vector < int > v = { 1 , 2 }; // Good -- v start if \ub098 while \uc774\ub098 for \ubb38\uc5d0\uc11c \uc0ac\uc6a9\ub420 \ubcc0\uc218\ub294 \uadf8 scope \ub0b4\ubd80\uc5d0\uc11c \uc120\uc5b8\ud558\uc5ec \ubc14\uae65\uc5d0\uc11c \uc0ac\uc6a9\ub420 \uc218 \uc5c6\uac8c \ud558\ub77c. Example Do: while ( const char * p = strchr ( str , '/' )) str = p + 1 ; \ub2e8, \ubcc0\uc218\uac00 \uac1d\uccb4\ub77c\uba74 \ub9e4\ubc88 \uc0dd\uc131\ub418\uace0 \uc18c\uba78\ub418\uae30\ub97c \ubc18\ubcf5\ud558\uac8c \ub41c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774 \uacbd\uc6b0 \ubc18\ubcf5\ubb38 \ubc14\uae65\uc5d0 \uc120\uc5b8\ud574\ub77c. Example Don't: // Inefficient implementation: for ( int i = 0 ; i < 1000000 ; ++ i ) { Foo f ; // My ctor and dtor get called 1000000 times each. f . DoSomething ( i ); } Do: Foo f ; // My ctor and dtor get called once each. for ( int i = 0 ; i < 1000000 ; ++ i ) { f . DoSomething ( i ); } Static and Global Variables static \ubcc0\uc218\ub97c \uac16\ub294 \uac1d\uccb4\ub97c \ub9cc\ub4e4\uc9c0 \ub9c8\ub77c. Info \uc790\uc138\ud55c \uc124\uba85\uc740 https://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables \ucc38\uace0 (\uc77c\ub2e8 Pass) Decision on destruction (\uc77c\ub2e8 Pass) Decision on initialization (\uc77c\ub2e8 Pass) Common patterns (\uc77c\ub2e8 Pass) thread_local Variables (\uc77c\ub2e8 Pass) Classes \u00b6 \uc6b0\ub9ac\ub294 \ud074\ub798\uc2a4\ub97c \uad11\ubc94\uc704\ud558\uac8c \uc0ac\uc6a9\ud55c\ub2e4. \uc774 \uc139\uc158\uc5d0\uc11c \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud560 \ub54c Do \ub4e4\uacfc Don't \ub4e4\uc744 \uc124\uba85\ud55c\ub2e4. Doing Work in Constructors \uc0dd\uc131\uc790\uc5d0\uc11c virtual \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\uc9c0 \ub9c8\ub77c. \uc0dd\uc131\uc790\uc5d0\uc11c \uc5d0\ub7ec \uc2e0\ud638\ub97c \ubcf4\ub0bc \uc218 \uc5c6\ub294 \uacbd\uc6b0 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560\ub9cc\ud55c \ucd08\uae30\ud654\ub294 \ud53c\ud574\ub77c. \ud504\ub85c\uadf8\ub7a8\uc5d0 \uc801\ud569\ud558\ub2e4\uba74 \uc0dd\uc131\uc790\uc5d0\uc11c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud588\uc744 \ub54c \ud504\ub85c\uadf8\ub7a8\uc744 \uc911\ub2e8\ud558\ub3c4\ub85d \ud574\ub77c. Implicit Conversions \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc744 \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c. explicit \ud0a4\uc6cc\ub4dc\ub85c \ud615\ubcc0\ud658\uc744 \ub9c9\uac70\ub098 \uc77c\ubcc0\uc218 \uc0dd\uc131\uc790\uc758 \ud638\ucd9c\uc744 \ucc28\ub2e8\ud574\ub77c. Note \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \uac00\ub839 double \ubcc0\uc218\ub97c \ubc1b\ub294 \uba54\uc18c\ub4dc\uc5d0 int \ud615 \ubcc0\uc218\ub97c \uc804\ub2ec\ud560 \ub54c \ubc1c\uc0dd\ud55c\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 explicit \ud0a4\uc6cc\ub4dc\ub85c \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc744 \ub9c9\uc544\ub77c. Do : class Foo { explicit Foo ( int x , double y ); ... }; void Func ( Foo f ); ... Func ({ 42 , 3.14 }); // Error operator bool() \ub4f1\uc744 \ub9c9\uc744 \uc218 \uc788\ub2e4. \uac00\ub054 \uc124\uacc4 \ubaa9\uc801\uc774 \uac12\uc744 \uad50\ud658\uac00\ub2a5\ud55c \uac1d\uccb4\ub97c \ub9cc\ub4dc\ub294 \uac83\uc774\ub77c\uba74 \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \ud544\uc694\ud558\uace0 \uc801\uc808\ud558\ub2e4. \uc774 \uacbd\uc6b0 \ud504\ub85c\uc81d\ud2b8 \ud300\uc7a5\uc5d0\uac8c \ub9d0\ud574\uc11c \uc774 \uaddc\uce59\uc744 \uc608\uc678\uc801\uc73c\ub85c \uba74\uc81c\ud574\ub2ec\ub77c\uace0 \uc694\uccad\ud574\ub77c. Copyable and Movable Types \ud074\ub798\uc2a4\uc758 API \uc5d0\uc11c \ud074\ub798\uc2a4\uac00 copyable \uc778\uc9c0 movable \uc778\uc9c0, copyable \ub3c4 \uc544\ub2c8\uace0 movable \ub3c4 \uc544\ub2cc\uc9c0 \uba85\uc2dc\ud574\uc57c \ud55c\ub2e4. movable \uc740 \uc784\uc2dc\uc801\uc73c\ub85c \uc0dd\uc131\ub418\uace0 \ud560\ub2f9\ud560 \uc218 \uc788\ub294 \uac1d\uccb4\uc774\ub2e4. copyable \uc740 \ub2e4\ub978 \uac1d\uccb4\ub85c\ubd80\ud130 \ud560\ub2f9\ub420 \uc218 \uc788\ub294 \uac1d\uccb4\uc774\ub2e4. Example std::unique_ptr<int> \ub294 movable \uc778\ub370 copyable \uc740 \uc544\ub2c8\ub2e4. int \ub098 std::string \uc740 movable \uc774\uace0 copyable \uc774\ub2e4. user-defined \ud0c0\uc785\uc5d0\uc11c\ub294 copy constructor \ub098 copy-assignment operator \uac00 \uc815\uc758\ub418\uba74 copyable \uc774\uace0, move constructor \uc640 move-assignment operator \uac00 \uc815\uc758\ub418\uba74 movable \uc774\ub2e4. copy-only \ud074\ub798\uc2a4\uc5d0\uc11c\ub294 copy operation \uc744 \uba85\ud655\ud558\uac8c \uc815\uc758\ud558\uace0, move-only \ud074\ub798\uc2a4\uc5d0\uc11c\ub294 move operation \uc744 \uba85\ud655\ud558\uac8c \uc815\uc758\ud574\ub77c. non-copyable/movable \ud074\ub798\uc2a4\uc5d0\uc11c\ub294 \uba85\ud655\ud558\uac8c copy operation \uc744 \uc9c0\uc6cc\ub77c. Example Do : class Copyable { public : Copyable ( const Copyable & other ) = default ; Copyable & operator = ( const Copyable & other ) = default ; // The implicit move operations are suppressed by the declarations above. }; class MoveOnly { public : MoveOnly ( MoveOnly && other ); MoveOnly & operator = ( MoveOnly && other ); // The copy operations are implicitly deleted, but you can // spell that out explicitly if you want: MoveOnly ( const MoveOnly & ) = delete ; MoveOnly & operator = ( const MoveOnly & ) = delete ; }; class NotCopyableOrMovable { public : // Not copyable or movable NotCopyableOrMovable ( const NotCopyableOrMovable & ) = delete ; NotCopyableOrMovable & operator = ( const NotCopyableOrMovable & ) = delete ; // The move operations are implicitly disabled, but you can // spell that out explicitly if you want: NotCopyableOrMovable ( NotCopyableOrMovable && ) = delete ; NotCopyableOrMovable & operator = ( NotCopyableOrMovable && ) = delete ; }; \uc0c1\uc704 \ud074\ub798\uc2a4\uac00 copyable \uc774\ub77c\uba74 \uc0c1\uc18d\ubc1b\ub294 \ud558\uc704 \ud074\ub798\uc2a4\ub3c4 copyable \uc774\uc5b4\uc57c \ud55c\ub2e4. \uc774 \uacbd\uc6b0 public virtual clone() \uba54\uc18c\ub4dc \ub4f1\uc744 \uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0 \uc815\uc758\ud574\ub46c\ub77c. Structs vs. Classes \uc0c1\uc218\uc640 \uad00\ub828\ub41c \ub370\uc774\ud130\ub9cc\uc744 \uc9c0\ub2c8\ub294 \uc218\ub3d9\uc801\uc778 \uac1d\uccb4\ub9cc\uc744 struct \ub85c \uc120\uc5b8\ud574\ub77c. \ub2e4\ub978 \ubaa8\ub4e0 \uac1d\uccb4\ub97c class \ub85c \uc120\uc5b8\ud574\ub77c. Structs vs. Pairs and Tuples \ubcc0\uc218\uac00 \uc758\ubbf8\uc788\ub294 \uc774\ub984\uc744 \uac00\uc9c8 \uc218 \uc788\ub3c4\ub85d std::tuple \uc774\ub098 std::pair \ubcf4\ub2e4 struct \ub97c \uc0ac\uc6a9\ud574\ub77c. Why? : std::tuple \uc774\ub098 std::pair \ub97c \uc0ac\uc6a9\ud558\uba74 \ucee4\uc2a4\ud140 \ub370\uc774\ud130 \uad6c\uc870\ub97c \uc815\uc758\ud558\uc9c0 \uc548\ud558\ub3c4 \ub418\uc9c0\ub9cc, .first , .second , std::get<X> \ub97c \uc0ac\uc6a9\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \uac01 \ubcc0\uc218\uc758 \uc758\ubbf8\ub97c \uc54c\uc544\ucc28\ub9ac\uae30\uac00 \uc27d\uc9c0 \uc54a\ub2e4. \uc774\ub54c struct \ub97c \uc0ac\uc6a9\ud558\uba74 \ucf54\ub4dc\ub97c \uc77d\uc744 \ub54c \uac01 \ubcc0\uc218\ub4e4\uc774 \uc5b4\ub5a4 \uc758\ubbf8\uc778\uc9c0 \uc27d\uac8c \uc54c \uc218 \uc788\ub2e4. pair \ub098 tuple \uc740 \uadf8 \uc758\ubbf8\uac00 \ud2b9\uc815\ub418\uc9c0 \uc54a\uc740 \uc77c\ubc18\uc801\uc778 \ucf54\ub4dc\uc5d0 \uc801\ud569\ud558\ub2e4. \uc0c1\uc18d\uc740 \ubc18\ub4dc\uc2dc is-a \uad00\uacc4\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ud574\ub77c. \uc0c1\uc18d\uc744 \ub108\ubb34 \ub9ce\uc774 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Why : \uacfc\ub3c4\ud55c \uc0c1\uc18d\uc740 \uc624\ubc84\ud5e4\ub4dc\ub97c \ubc1c\uc0dd\uc2dc\ucf1c \uc131\ub2a5 \uc800\ud558\ub97c \uc77c\uc73c\ud0a8\ub2e4. Example Foo \uac00 Bar \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\ub294\ub2e4\uba74 \ubc18\ub4dc\uc2dc \" Foo \ub294 Bar \uc758 \ud55c \uc885\ub958\uc774\ub2e4.\" \ub77c\ub294 \uad00\uacc4\uac00 \uc131\ub9bd\ud574\uc57c\ub9cc \ud55c\ub2e4. virtual \ud568\uc218\ub098 virtual \uc18c\uba78\uc790\ub97c \uc624\ubc84\ub77c\uc774\ub529\ud560 \ub54c \uba85\uc2dc\uc801\uc73c\ub85c \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. Inheritance \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud558\ub824\uba74 public \uc0c1\uc18d\uc73c\ub85c \ud574\ub77c. \uc624\ubc84\ub77c\uc774\ub529\uc744 \ud588\ub2e4\uba74 \uc624\ubc84\ub77c\uc774\ub529 \ud588\ub2e4\ub294 \uc8fc\uc11d\uc744 \ub2ec\uac70\ub098 override \ud0a4\uc6cc\ub4dc \ub610\ub294 final \ud0a4\uc6cc\ub4dc\ub97c \uaf2d \ubd99\uc5ec\ub77c. \uc624\ubc84\ub77c\uc774\ub529 \ud560 \ub54c\uc5d0\ub294 virtual \ud0a4\uc6cc\ub4dc\ub97c \ub2ec\uc9c0 \ub9d0\uc544\ub77c. Example \uba54\uc18c\ub4dc\ub97c \uc624\ubc84\ub77c\uc774\ub529 \ud588\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 virtual \ud0a4\uc6cc\ub4dc\ub294 \ub2ec\uc9c0 \ub9d0\uace0, override \ud0a4\uc6cc\ub4dc\ub97c \ubc18\ub4dc\uc2dc \ub2ec\uace0, \ucd94\uc0c1 \ud074\ub798\uc2a4\uc758 \uba54\uc18c\ub4dc\ub294 = 0 \ub610\ub294 = delete \ub610\ub294 = defualt \ub85c \uc120\uc5b8\ud558\uc5ec \uad6c\ud604 \ubd88\uac00\ub2a5\ud558\uac8c \ub9cc\ub4e4\uc5b4\ub77c. Do : class Shape { public : virtual void Rotate ( double radians ) = 0 ; }; class Circle : public Shape { public : void Rotate ( double radians ) override ; }; Why: \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 virtual \uba54\uc18c\ub4dc\ub97c \uc624\ubc84\ub77c\uc774\ub529 \ud558\ub294 \uba54\uc18c\ub4dc\uac00 \uc544\ub2cc\ub370\ub3c4 override \ud0a4\uc6cc\ub4dc\ub098 final \ud0a4\uc6cc\ub4dc\uac00 \uc874\uc7ac\ud558\uba74 \ucef4\ud30c\uc77c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc5ec \uc5d0\ub7ec\ub97c \uc190\uc27d\uac8c \uc7a1\uc544\ub0bc \uc218 \uc788\ub2e4. \ub610\ud55c \uc774 \ud0a4\uc6cc\ub4dc\ub4e4 \uc790\uccb4\uac00 \ud558\ub098\uc758 Documentation \ucc98\ub7fc \uae30\ub2a5\ud55c\ub2e4. \uc774\ub85c\uc368 \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc774 \ubaa8\ub4e0 \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \ud655\uc778\ud558\uba74\uc11c \ubb38\uc81c\uc758 \uba54\uc18c\ub4dc\uac00 virtual \uc778\uc9c0 \uc544\ub2cc\uc9c0 \ud655\uc778\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub41c\ub2e4. \uc624\ubc84\ub77c\uc774\ub529 \uba54\uc18c\ub4dc\uc5d0\ub294 virtual \ud0a4\uc6cc\ub4dc\ub97c \ubd99\uc774\uc9c0 \ub9d0\uc544\ub77c. Operator Overloading \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529\uc740 \uc2e0\uc911\ud558\uac8c \uc120\ud0dd\ud574\ub77c. \uc5f0\uc0b0\uc790\uc758 \uc758\ubbf8\uac00 \uba85\ubc31\ud558\uace0, \ubb54\uac00 \uacfc\uaca9\ud558\uac70\ub098 \ub180\ub77c\uc6b4 \uac83\uc774 \uc544\ub2c8\uace0, \uae30\uc874\uc758 \uc5f0\uc0b0\uc790\uc758 \uc758\ubbf8\uc640 \uc77c\uad00\uc131\uc774 \uc788\uc744 \ub54c\uc5d0\ub9cc \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529\uc744 \ud574\ub77c. Example | \uc740 C++ \uc5d0\uc11c OR \uc5f0\uc0b0\uc5d0 \uc0ac\uc6a9\ub41c\ub2e4. | \uc740 \uc258\uc5d0\uc11c \ud30c\uc774\ud504\ub85c \uc4f0\uc774\ub294\ub370, \uac11\uc790\uae30 | \uc5f0\uc0b0\uc790\ub97c \ud30c\uc774\ud504\uc758 \uc758\ubbf8\ub97c \uac16\ub294 \uc5f0\uc0b0\uc790\ub85c \uc624\ubc84\ub85c\ub529 \ud558\uba74 \uc548\ub41c\ub2e4. user-defined literals \uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c. Example C+ \uc740 operator\"\" \ub85c\uc368 user-defined literals \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \uc5f0\uc0b0\uc790\ub97c \uc624\ubc84\ub85c\ub529\ud588\uc73c\uba74 \uadf8\uc640 \uad00\ub828\ub41c \uc5f0\uc0b0\uc790\ub3c4 \uc624\ubc84\ub85c\ub529\ud574\ub77c. Example > \uc5f0\uc0b0\uc790\ub97c \uc624\ubc84\ub85c\ub529 \ud588\uc73c\uba74 < \uc5f0\uc0b0\uc790\ub3c4 \uc624\ubc84\ub85c\ub529 \ud574\ub77c. \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529\uc744 \ud53c\ud558\uae30 \uc704\ud558\uc5ec \ub2f9\uc2e0\ub9cc\uc758 \ud568\uc218\ub098 \uba54\uc18c\ub4dc\ub97c \uad6c\ud604\ud558\uc9c0\ub294 \ub9d0\uc544\ub77c. Example == , = , << \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529\uc744 \ud558\uc9c0 \uc54a\uace0 \uc2f6\uc5b4\uc11c Equals() , CopyFrom() , PrintTo() \uac19\uc740 \ud568\uc218\ub098 \uba54\uc18c\ub4dc\ub97c \uad6c\ud604\ud558\uc9c0 \ub9d0\uc544\ub77c. \uadf8\ub0e5 \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529\uc744 \ud574\ub77c. && , || , , (comma), & \uc5f0\uc0b0\uc790\uc640 operator\"\" \ub294 \uc624\ubc84\ub85c\ub529 \ud558\uc9c0 \ub9c8\ub77c. Access Control \ud074\ub798\uc2a4 \ub370\uc774\ud130 \uba64\ubc84\ub294 \uadf8\uac83\uc774 \uc0c1\uc218\uac00 \uc544\ub2cc \uc774\uc0c1 private \uc73c\ub85c \uc120\uc5b8\ud574\ub77c. Why : \uc774\uac83\uc740 \ub370\uc774\ud130\uc758 \ubd88\ubcc0\uc131\uc744 \ubcf4\uc7a5\ud574\uc900\ub2e4. Declaration Order public: \uc73c\ub85c \uc120\uc5b8\uc744 \uc2dc\uc791\ud558\uace0, \uadf8 \ub2e4\uc74c\uc740 protected: , \ub9c8\uc9c0\ub9c9\uc73c\ub85c private: \uc744 \uc120\uc5b8\ud574\ub77c. \uac01 \uc139\uc158\uc758 \uc120\uc5b8\uc758 \uc21c\uc11c\ub294 \uc774\ub807\uac8c \ud574\ub77c. type \ub4e4, \uc0c1\uc218\ub4e4, factory \ud568\uc218\ub4e4, \uc0dd\uc131\uc790\ub4e4, \ud560\ub2f9 \uc5f0\uc0b0\uc790\ub4e4, \uc18c\uba78\uc790, \ub2e4\ub978 \uba54\uc18c\ub4dc\ub4e4, \ub370\uc774\ud130 \uba64\ubc84\ub4e4. Example (\uc2e4\uc81c \uad6c\uae00 C++ \ud504\ub85c\uc81d\ud2b8\uc758 \ud074\ub798\uc2a4 \uc120\uc5b8\uc758 \uc608\uc2dc\ub97c \uac00\uc838\uc640\uc57c \ud560 \ub4ef) \uac01 \uc139\uc158\uc758 \ube44\uc2b7\ud55c \uc120\uc5b8\ub4e4\uc744 \ud568\uaed8 \ubb36\uc5b4\ub77c. Functions \u00b6 Inputs and Outputs C++ \uc5d0\uc11c \ud568\uc218\uc758 \ucd9c\ub825\uc740 return \uac12 \ub610\ub294 output parameter \ub85c \uc804\ub2ec\ub41c\ub2e4. \uc774\ub54c output parameter \ubcf4\ub2e4 return \uac12\uc73c\ub85c \ucd9c\ub825\uc744 \uc804\ub2ec\ud574\ub77c. Why : \uadf8\uac8c \uac00\ub3c5\uc131\uc774 \ub354 \uc88b\uace0 \uc131\ub2a5\uc774 output parameter \uc640 \uac19\uac70\ub098 \ub354 \ub0ab\ub2e4. Example Don't : #define OUT void calculate ( int a , int b , OUT int & c ) { c = a + b ; } \uc704\uc758 \ud568\uc218\ub294 output parameter \ub85c \ucd9c\ub825\uc744 \uc804\ub2ec\ud55c\ub2e4. \uc774\ub807\uac8c \ud558\uc9c0 \ub9d0\uace0 \ub2e4\uc74c\uacfc \uac19\uc774 return \uc744 \uc0ac\uc6a9\ud574\ub77c. Do : int calculate ( int a , int b ) { return a + b ; } \uc785\ub825 \ud30c\ub77c\ubbf8\ud130\ub294 \uac12\uc744 \uc0ac\uc6a9\ud558\uac70\ub098 const \ucc38\uc870\uc790\ub97c \uc0ac\uc6a9\ud574\ub77c. \uc635\uc158 \uc785\ub825\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud558\uc5ec absl::optional \uc744 \uc0ac\uc6a9\ud574\ub77c. \uadf8\ub9ac\uace0 \uc635\uc158 \ucd9c\ub825\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud558\uc5ec const \uac00 \uc544\ub2cc \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud574\ub77c. \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uc628 const \ucc38\uc870\uc790\uac00 \ud568\uc218\uc758 \ud638\ucd9c\ubcf4\ub2e4 \uc624\ub798 \ub0a8\uc544\uc788\uae38 \ubc14\ub77c\ub294 \ud568\uc218\ub294 \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c. \uc65c\ub0d0\ud558\uba74 const \ucc38\uc870\uc790\ub294 \uc784\uc2dc\uc801\uc73c\ub85c \uc0dd\uc131\ub418\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8 \ub300\uc2e0 lifetime \uc694\uad6c\ub97c \uc5c6\uc568 \uc218 \uc788\ub294 \ubc29\ubc95\uc744 \ucc3e\uc544\ub77c. \uac00\ub839 \ud30c\ub77c\ubbf8\ud130\ub97c \ubcf5\uc0ac\ud558\uac70\ub098 const \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud574\ub77c. \ubaa8\ub4e0 input parameter \ub97c output parameter \ubcf4\ub2e4 \uba3c\uc800 \uc120\uc5b8\ud574\ub77c. \ud30c\ub77c\ubbf8\ud130\uac00 \ub2e8\uc9c0 \uc0c8\ub86d\uac8c \ucd94\uac00\ub418\uc5c8\ub2e4\ub294 \uc774\uc720\ub85c \uac00\uc7a5 \ub9c8\uc9c0\ub9c9\uc5d0 \uc120\uc5b8\ud558\uc9c0 \ub9d0\uc544\ub77c. Example \uc0c8\ub86d\uac8c \ucd94\uac00\ub41c input parameter \ub77c\uba74 output parameter \uc774\uc804\uc5d0 \uc120\uc5b8\ud574\ub77c. input parameter \uc774\uba74\uc11c output parameter \uc778 \ud30c\ub77c\ubbf8\ud130\ub294 \ud568\uc218\ub97c \ud63c\ub780\uc2a4\ub7fd\uac8c \ub9cc\ub4e0\ub2e4. Write Short Functions \ud568\uc218\ub97c \uc791\uac8c \ub9cc\ub4e4\uc5b4\ub77c. \ud568\uc218\uac00 \ud558\ub098\uc758 \uae30\ub2a5\ub9cc \ud558\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\ub77c. \uc6b0\ub9ac\ub294 \uac00\ub054 \ud070 \ud568\uc218\uac00 \ud544\uc694\ud558\ub2e4\ub294 \uac83\uc744 \uc54c\uace0 \uc788\uc73c\ubbc0\ub85c \ud568\uc218 \ud06c\uae30\uc5d0 \ub300\ud55c \uc5c4\uaca9\ud55c \uae38\uc774 \uc81c\ud55c\uc744 \ub450\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098 \ud568\uc218\uc758 \uae38\uc774\uac00 40 \uc904\uc774 \ub118\uc5b4\uac04\ub2e4\uba74 \ud568\uc218\ub97c \uc138\ubd80 \uae30\ub2a5\uc73c\ub85c \ucabc\uac1c\uc11c \ub354 \uc791\uc740 \ud568\uc218\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub294\uc9c0 \uac80\ud1a0\ud574\ubd10\ub77c. \ud568\uc218\ub97c \uc9e7\uace0 \ub2e8\uc21c\ud558\uac8c \uc720\uc9c0\uc2dc\ud0a4\uace0, \ub2e4\ub978 \uc0ac\ub78c\uc774 \uc77d\uc5c8\uc744 \ub54c \uc27d\uac8c \uc774\ud574\ud558\uace0 \ubc14\uafc0 \uc218 \uc788\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\ub77c. Why : \ub2f9\uc2e0\uc774 \ub9cc\ub4e0 \ud568\uc218\uac00 \uc5c4\uccad \ud070\ub370\ub3c4 \uc798 \uae30\ub2a5\ud55c\ub2e4\uace0 \ud558\uc790. \uadf8\ub798\ub3c4 \ud6c4\uc784 \uac1c\ubc1c\uc790\uac00 \ub098\uc911\uc5d0 \uc640\uc11c \ub2f9\uc2e0\uc774 \ub9cc\ub4e0 \ud568\uc218\uc5d0 \uc0c8\ub85c\uc6b4 \uae30\ub2a5\uc744 \ucd94\uac00\ud574\uc57c\ud560 \ub54c \uc2dc\uac04\uc774 \uc624\ub798\uac78\ub9ac\uace0 \ubc84\uadf8\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uac00\ub2a5\uc131\uc774 \ud06c\ub2e4. \ub610 \uc791\uc740 \ud568\uc218\ub97c \ub9cc\ub4e4\uba74 \ud14c\uc2a4\ud2b8 \ud558\uae30\uc5d0\ub3c4 \ud3b8\ud558\ub2e4. Function Overloading \uc624\ubc84\ub85c\ub529\uc740 \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc774 \ud638\ucd9c\ubb38\ub9cc \ubcf4\uace0 \uc65c \uc774\ub807\uac8c \uc624\ubc84\ub85c\ub529\ud588\ub294\uc9c0 \uc774\ud574\ud560 \uc218 \uc788\uc744 \ub54c\uc5d0\ub9cc \uc0ac\uc6a9\ud574\ub77c. \uc989, \uc758\ubbf8\uc801\uc73c\ub85c \ubcc4 \ucc28\uc774\uac00 \uc5c6\ub294 \uc624\ubc84\ub85c\ub529\ub9cc \uc0ac\uc6a9\ud574\ub77c. Example const std::string& \uc744 \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\ub294 \ud568\uc218\uc640 const char* \ub97c \ud30c\ub77c\ubbf8\ud130\ub85c \ubc1b\ub294 \ud568\uc218\ub97c \uc624\ubc84\ub85c\ub529 \ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc std::string_view \ub85c \ud1b5\ud569\ud558\ub294 \uac83\uc774 \ub354 \ub0ab\ub2e4. Default Arguments virtual \uc774 \uc544\ub2cc \uba54\uc18c\ub4dc\uc5d0 \ub514\ud3f4\ud2b8 \uac12\uc774 \ud56d\uc0c1 \uac19\uc740 \uac12\uc744 \uac00\uc9c8 \ub54c\uc5d0\ub9cc \ub514\ud3f4\ud2b8 \ud30c\ub77c\ubbf8\ud130\ub97c \uc0ac\uc6a9\ud574\ub77c. virtual \uba54\uc18c\ub4dc\uc5d0\uc11c\ub294 \ub514\ud3f4\ud2b8 \uac12\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \ubb3c\ub860 \ub514\ud3f4\ud2b8 \ud30c\ub77c\ubbf8\ud130\ub3c4 \uac00\ub054 \uc801\uc808\ud558\uace0 \uac00\ub3c5\uc131\uc744 \ub192\ud600\uc900\ub2e4. \ub9cc\uc57d \ub514\ud3f4\ud2b8 \ud30c\ub77c\ubbf8\ud130\ub97c \uc368\uc57c\ud560\uc9c0 \ub9d0\uc9c0 \ud63c\ub780\uc2a4\ub7fd\ub2e4\uba74 \uadf8\ub0e5 \uc624\ubc84\ub85c\ub529\ud574\ub77c. Trailing Return Type Syntax \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc744 \uc81c\uc678\ud558\uba74 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0\uc11c trailing return type \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Example Do : int foo ( int x ); \uc704\uc640 \uac19\uc740 \ud568\uc218 \uc120\uc5b8\uc774 \uc77c\ubc18\uc801\uc778 \ud568\uc218 \uc120\uc5b8\uc774\ub2e4. \ud558\uc9c0\ub9cc trailing return type \uc744 \uc0ac\uc6a9\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud568\uc218\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\ub2e4. Don't : auto foo ( int x ) -> int ; \uc774 \ub458\uc740 \uc644\uc804\ud788 \ub611\uac19\uc740 \uc120\uc5b8\uc774\ub2e4. \ud558\uc9c0\ub9cc \ub78c\ub2e4 \ud45c\ud604\uc2dd \uac19\uc740 \uc608\uc678\uc801\uc778 \uacbd\uc6b0\ub97c \uc81c\uc678\ud558\uace0 \uae30\uc874\uc758 \ud568\uc218 \uc120\uc5b8\uc744 \uc0ac\uc6a9\ud574\ub77c. Google-Specific Magic \u00b6 \uc6b0\ub9ac\ub294 \uc6b0\ub9ac\uc758 C++ \ud504\ub85c\uc81d\ud2b8\ub97c \ub354\uc6b1 \uacac\uace0\ud558\uac8c \ub9cc\ub4e4\uae30 \uc704\ud558\uc5ec \ub9ce\uc740 \ud2b8\ub9ad\uacfc \uc720\ud2f8\ub9ac\ud2f0\ub97c \uc0ac\uc6a9\ud55c\ub2e4. Ownership and Smart Pointers Ownership \uc774 \uace0\uc815\ub41c, \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ub41c \uac1d\uccb4\ub97c \uc0ac\uc6a9\ud574\ub77c. Ownership \uc744 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub85c \ub118\uaca8\uc8fc\uc5b4\ub77c. Note Ownership \uc774\ub780 \ub3d9\uc801 \ud560\ub2f9 \uac1d\uccb4\ub97c \uad00\ub9ac\ud558\uae30 \uc704\ud55c \uae30\uc220\uc774\ub2e4. Owner \ub780 \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ub41c \uac1d\uccb4\uac00 \ub354 \uc774\uc0c1 \ud544\uc694\uac00 \uc5c6\uc5b4\uc84c\uc744 \ub54c \uadf8\uac83\uc758 \ud560\ub2f9\uc744 \ud574\uc81c\ud574\uc904 \uc758\ubb34\uac00 \uc788\ub294 \uac1d\uccb4\ub97c \ub73b\ud55c\ub2e4. Ownership \uc740 \ub2e4\ub978 \uac1d\uccb4\uc5d0\uac8c \ub118\uaca8\uc904 \uc218 \uc788\ub2e4. \ub9c8\uc9c0\ub9c9\uc73c\ub85c Ownership \uc744 \ub118\uaca8 \ubc1b\uc740 \uac1d\uccb4\uac00 \ub3d9\uc801 \ud560\ub2f9\uc744 \ud574\uc81c\ud574\uc904 \uc758\ubb34\ub97c \uac16\uac8c \ub41c\ub2e4. \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub294 * \uc640 -> \uc5f0\uc0b0\uc790\ub97c \uc624\ubc84\ub85c\ub529\ud558\uc5ec \ud3ec\uc778\ud130\ucc98\ub7fc \ud589\ub3d9\ud558\ub294 \ud074\ub798\uc2a4\uc774\ub2e4. \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc758 \uc7a5\uc810\uc740 Ownership \uad00\ub9ac\ub97c \uc790\ub3d9\uc73c\ub85c \ud574\uc900\ub2e4\ub294 \uac83\uc774\ub2e4. std::unique_ptr \uc774 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc758 \ud55c \uc608\uc2dc\uc774\ub2e4. std::shared_ptr \ub3c4 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc758 \uc608\uc2dc\uc774\ub2e4. \ub3d9\uc801 \ud560\ub2f9 \uac1d\uccb4\uac00 \ud544\uc694\ud558\ub2e4\uba74 Ownership \uc744 \uadf8\uac83\uc744 \ud560\ub2f9\ud55c \ucf54\ub4dc\uac00 \uacc4\uc18d \uac00\uc9c0\uace0 \uc788\uc744 \uc218 \uc788\ub3c4\ub85d \ud574\ub77c. Example \ub9cc\uc57d \ub2e4\ub978 \ucf54\ub4dc\uac00 \uadf8 \uac1d\uccb4\uc5d0 \uc811\uadfc\ud574\uc57c \ud55c\ub2e4\uba74 Ownership \uc744 \ub118\uaca8\uc8fc\uc9c0 \uc54a\uc73c\uba74\uc11c \ubcf5\uc0ac\ud558\uac70\ub098 \ud3ec\uc778\ud130\ub97c \uc804\ub2ec\ud574\uc904 \uc218 \uc788\ub3c4\ub85d \ud574\ub77c. std::unique_ptr \uc744 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub85c\uc368 \uc0ac\uc6a9\ud574\ub77c. Example Do : std :: unique_ptr < Foo > FooFactory (); void FooConsumer ( std :: unique_ptr < Foo > ptr ); \ud569\ub9ac\uc801\uc778 \uc774\uc720\uac00 \uc5c6\ub2e4\uba74 Ownership \uc744 \uacf5\uc720\ud560 \uc218 \uc5c6\ub3c4\ub85d \ucf54\ub529\ud574\ub77c. Why : Ownership \uc744 \uacf5\uc720\ud558\uba74\uc11c \ubcf5\uc0ac\ud558\ub294 \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e0\ub2e4. \ub9cc\uc57d \uc131\ub2a5 \ud5a5\uc0c1\uc774 \uae30\ub300\ub418\uace0 std::shared_ptr<const Foo> \ucc98\ub7fc \uac1d\uccb4\uc758 \ubd88\ubcc0\uc131\uc774 \ubcf4\uc7a5\ub41c\ub2e4\uba74 Ownership \uacf5\uc720\ub97c \ud574\ub3c4 \uc88b\ub2e4. Ownership \uc744 \uacf5\uc720\ud574\uc57c \ud55c\ub2e4\uba74 std::shared_ptr \uc744 \uc0ac\uc6a9\ud574\ub77c. \uc808\ub300\ub85c std::auto_ptr \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c. \uadf8 \ub300\uc2e0 std::unique_ptr \ub97c \uc0ac\uc6a9\ud574\ub77c. cpplint \uc2a4\ud0c0\uc77c\uc744 \uc810\uac80\ud558\uae30 \uc704\ud558\uc5ec cpplint.py \ub97c \uc0ac\uc6a9\ud574\ub77c. Why : cpplint.py \ub294 \ud30c\uc77c\uc744 \uc77d\uace0 \uc2a4\ud0c0\uc77c \uc5d0\ub7ec\ub97c \uc810\uac80\ud574\uc8fc\ub294 \ud234\uc774\ub2e4. Note \uad6c\uae00\uc758 \ud504\ub85c\uc81d\ud2b8\ub294 \uc800\ub9c8\ub2e4 cpplint.py \ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud574\uc57c \ud558\ub294\uc9c0 \uba54\ub274\uc5bc\uc744 \uac16\uace0 \uc788\ub2e4. \ub9cc\uc57d \ub2f9\uc2e0\uc758 \ud504\ub85c\uc81d\ud2b8\uc5d0 cpplint.py \uac00 \uc5c6\ub2e4\uba74 \ub2f9\uc2e0\uc774 \ub530\ub85c cpplint.py \ub97c \ub2e4\uc6b4\ub85c\ub4dc\ud574\ub77c. Other C++ Features \u00b6 Rvalue References Rvalue \ucc38\uc870\uc790\ub97c \uc544\ub798\uc5d0\uc11c \uc815\uc758\ud558\ub294 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ud574\ub77c. Rvalue \ucc38\uc870\uc790\ub294 \uc624\uc9c1 \uc784\uc2dc \uac1d\uccb4\uc5d0\ub9cc \uc0ac\uc6a9\ub418\ub294 \ucc38\uc870\uc790\uc774\ub2e4. ( https://google.github.io/styleguide/cppguide.html#Rvalue_references ) Friends friend \ud0a4\uc6cc\ub4dc\ub294 \ubc18\ub4dc\uc2dc \uac19\uc740 \ud30c\uc77c \ub0b4\uc5d0\uc11c \uc0ac\uc6a9\ud574\ub77c. Why: \uc774\ub85c\uc368 \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc774 \ub2e4\ub978 \ud30c\uc77c\uc744 \ucc3e\uc544\ubcfc \ud544\uc694\uac00 \uc5c6\ub3c4\ub85d \ud574\ub77c. Exceptions C++ \uc758 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \uc989, try-catch \ubb38\uacfc throw \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Why: C++ \uc758 \uc608\uc678\ub294 \uace0\uc218\uc900\uc5d0\uc11c \uc77c\uc5b4\ub098\uc11c\ub294 \uc548\ub418\ub294 \uc0c1\ud669\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\uac8c \ud574\uc900\ub2e4. Python , Java \uac19\uc740 \ub2e4\ub978 \uc5b8\uc5b4\uc5d0\uc11c\ub3c4 \uc608\uc678\uac00 \uc0ac\uc6a9\ub418\ubbc0\ub85c C++ \uc5d0\uc11c \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uba74 \ucf54\ub4dc\uac00 \uc77c\uad00\uc131\uc774 \uc788\uc5b4\uc9c4\ub2e4. \ud558\uc9c0\ub9cc \ub9cc\uc57d \ub2f9\uc2e0\uc774 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uae30 \uc704\ud558\uc5ec throw \ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uadf8\uac83\uc744 \ud638\ucd9c\ud558\ub294 \ubaa8\ub4e0 \ud568\uc218\ub97c \uc810\uac80\ud574\uc57c\ub9cc \ud55c\ub2e4. \uadf8 \uacb0\uacfc \ubaa8\ub4e0 \ud638\ucd9c \ud568\uc218\ub4e4\uc774 \uae30\ubcf8\uc801\uc778 \uc608\uc678 \ucc98\ub9ac\ubb38\uc774\ub77c\ub3c4 \uc9c0\ub2c8\uace0 \uc788\uc5b4\uc57c \ud55c\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ud504\ub85c\uadf8\ub7a8\uc740 \uace7\ubc14\ub85c \uc885\ub8cc\ub41c\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uc608\uc678\ub294 \ud504\ub85c\uadf8\ub7a8\uc758 \uc2e4\ud589 \ud750\ub984\uc744 \uc5b4\ub835\uac8c \ub9cc\ub4e4\uc5b4\uc11c \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc774 \ucf54\ub4dc\ub97c \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6cc \uc9c4\ub2e4. \uc608\uc678\ub294 \ud568\uc218\uc758 \uc2e4\ud589 \ud750\ub984\uc744 \ub2f9\uc2e0\uc774 \uc608\uce21\ud558\uc9c0 \ubabb\ud558\ub294 \uacf3\uc73c\ub85c \ub118\uc5b4\uac00\uac8c \ud55c\ub2e4. \uc774\ub294 \uace7\ubc14\ub85c \uc720\uc9c0\ubcf4\uc218\uc640 \ub514\ubc84\uae45\uc744 \uc5b4\ub835\uac8c \ub9cc\ub4e4\uace0 \uac1c\ubc1c \ube44\uc6a9\uc744 \ub192\uc778\ub2e4. \uc544\ub9c8 \ub2f9\uc2e0\uc740 \uc774 \ubb38\uc81c\ub97c \uc5b4\ub5a4 \uc0c1\ud669\uc5d0\uc11c \uc5b8\uc81c \uc608\uc678\ub97c \uc0ac\uc6a9\ud574\uc57c \ud560\uc9c0 \uc815\ud568\uc73c\ub85c\uc368 \ud574\uacb0\ud560 \uc218\ub3c4 \uc788\uc744 \uac70\ub77c\uace0 \uc0dd\uac01\ud560 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \uadf8\uac83\uc744 \uc815\ub9bd\ud558\uace0 \uadf8\uac83\uc744 \ub2e4\ub978 \uc0ac\ub78c\uc5d0\uac8c \uc774\ud574\uc2dc\ud0a4\uace0 \uae30\uc5b5\uc2dc\ud0a4\ub294 \ube44\uc6a9\uc774 \ub354 \ub9ce\uc774 \ub4e4\uc5b4\uac08 \uac83\uc774\ub2e4. \ub610 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uba74 \ubc14\uc774\ub108\ub9ac \ud504\ub85c\uc2dc\uc838\uc5d0 \ub370\uc774\ud130\uac00 \ucd94\uac00\ub418\uace0 \ucef4\ud30c\uc77c \uc2dc\uac04\uc774 \ub298\uc5b4\ub098\uba70 \uc8fc\uc18c \uacf5\uac04\ub3c4 \ucee4\uc9c4\ub2e4. \ub610 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud558\uba74 \uac1c\ubc1c\uc790\ub294 throw \ub97c \uc801\uc808\ud558\uc9c0 \ubabb\ud55c \ub54c\uc5d0 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uace0, \uc548\uc804\ud558\uc9c0 \ubabb\ud55c \uc0c1\ud669\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. \uac00\ub839 \uc801\uc808\ud558\uc9c0 \ubabb\ud55c \ud30c\ub77c\ubbf8\ud130\uac00 \uc785\ub825\ub418\uc5c8\uc744 \ub54c \uadf8\uac83\uc740 \uc608\uc678\ub85c \ub358\uc838\uc838\uc11c\ub294 \uc548\ub41c\ub2e4. \uadf8\ub9ac\uace0 \uc608\uc678\uc5d0 \uad00\ub828\ub41c \uc81c\ud55c \uaddc\uce59\uc744 \ub9cc\ub4e4\ub824\uba74 \uc774 \ucf54\ub529 \ucee8\ubca4\uc158 \ubb38\uc11c\uac00 \ub9c9\ub300\ud558\uac8c \ub354 \ucee4\uc9c8 \uac83\uc774\ub2e4. \uc989, \uc608\uc678\ub97c \uc0ac\uc6a9\ud588\uc744 \ub54c \ubc1c\uc0dd\ud558\ub294 \ud6a8\uc6a9\ubcf4\ub2e4 \ubc1c\uc0dd\ud558\ub294 \ube44\uc6a9\uc774 \uc555\ub3c4\uc801\uc73c\ub85c \ub354 \ud06c\ub2e4\ub294 \uac83\uc774\ub2e4. \uc6b0\ub9ac\ub294 \uc5d0\ub7ec\ucc98\ub9ac \ucf54\ub4dc\ub098 assert \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \uc88b\ub2e4\uace0 \ubcf8\ub2e4. \uc774\uac83\uc740 \ucca0\ud559\uc801\uc774\ub098 \ub3c4\uc758\uc801\uc778 \uacb0\ub860\uc774 \uc544\ub2c8\ub77c \uc21c\uc804\ud788 \uc6b0\ub9ac( Google )\uc758 \uacbd\ud5d8\uc801\uc774\uace0 \uc2e4\uc6a9\uc801\uc778 \uacb0\ub860\uc774\ub2e4. \uc65c\ub0d0\ud558\uba74 \uc9c0\uae08\uae4c\uc9c0 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\ub294 \ud504\ub85c\uc81d\ud2b8\ub97c \uc0ac\uc6a9\ud574\uc57c \ud560 \ub54c\uba74 \uc6b0\ub9ac\ub294 \ub9e4\ubc88 \ub9c9\ub300\ud55c \uc5b4\ub824\uc6c0\uc744 \uacaa\uc5c8\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774 \uae08\uc9c0 \uaddc\uce59\uc740 \uc55e\uc73c\ub85c \uacc4\uc18d \ucd94\uac00\ub418\ub294 C++ \uc758 \uc608\uc678 \ucc98\ub9ac \ubb38\ubc95\uc5d0\ub3c4 \ub611\uac19\uc774 \uc801\uc6a9\ub41c\ub2e4. \uc55e\uc73c\ub85c\ub3c4 C++ \uc758 \uc608\uc678\ub97c \uc808\ub300\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c. Example C++11 \uc5d0\uc11c\ub294 std::exception_ptr \uacfc std::nested_exception \uc774 \ucd94\uac00\ub418\uc5c8\ub2e4. \ud558\uc9c0\ub9cc \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. noexcept (\uc77c\ub2e8 Pass) Run-Time Type Information (RTTI) RTTI \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \uc989, typeid \ud0a4\uc6cc\ub4dc\uc640 dynamic_cast \ud615\ubcc0\ud658\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. RTTI \ub97c \uc720\ub2db \ud14c\uc2a4\ud2b8, \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uc5d0\uc11c\ub294 \uc0ac\uc6a9\ud574\ub77c. Why: \ubb3c\ub860 dynamic_cast \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucd94\uc0c1 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\ub97c \ud558\uc704 \ud074\ub798\uc2a4\ub85c \ud615\ubcc0\ud658 \ud560 \ub54c \uc801\uc808\ud558\uac8c \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4. bool Base :: Equal ( Base * other ) = 0 ; bool Derived :: Equal ( Base * other ) { Derived * that = dynamic_cast < Derived *> ( other ); if ( that == nullptr ) return false ; ... } \ud558\uc9c0\ub9cc RTTI \ub294 \ub7f0\ud0c0\uc784 \uc0c1\uc5d0\uc11c \uac1d\uccb4\uc758 \ud0c0\uc785\uc744 \uc870\uc0ac\ud558\ub294\ub370 \uc774\uac83\uc740 \uace7 \uc124\uacc4 \ubb38\uc81c\ub97c \ub73b\ud55c\ub2e4. \ub7f0\ud0c0\uc784\uc5d0\uc11c \ub2f9\uc2e0\uc758 \ud074\ub798\uc2a4 \uad6c\uc870\ub97c \uc54c \uc218 \uc788\ub2e4\ub294 \ub9d0\uc740 \ub2f9\uc2e0\uc774 \ud074\ub798\uc2a4\ub97c \uc798\ubabb \uc124\uacc4\ud588\ub2e4\ub294 \uac83\uc774\ub2e4. \ub610\ud55c \ubb34\ubd84\ubcc4\ud55c RTTI \uc758 \uc0ac\uc6a9\uc740 \ud504\ub85c\uc81d\ud2b8\uc758 \uc720\uc9c0\ubcf4\uc218\uc131\uc744 \ub5a8\uc5b4\ub728\ub9b0\ub2e4. \uc65c\ub0d0\ud558\uba74 \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc774 \ud504\ub85c\uc81d\ud2b8\ub97c \ubd84\uc11d\ud558\uba74\uc11c typeid \ub098 dynamic_cast \uac00 \ub098\uc62c \ub54c\ub9c8\ub2e4 \ud3ec\uc778\ud130\uac00 \uc2e4\uc81c\ub85c \uac16\uace0 \uc788\ub294 \uac1d\uccb4\uc5d0 \ub530\ub77c \ubd84\uae30\ub97c \ub098\ub220\uac00\uba74\uc11c \ubd84\uc11d\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uac00\ub839 \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub97c \ubcf4\uc790. if ( typeid ( * data ) == typeid ( D1 )) { ... } else if ( typeid ( * data ) == typeid ( D2 )) { ... } else if ( typeid ( * data ) == typeid ( D3 )) { ... \uc704\uc640 \uac19\uc740 \ucf54\ub4dc\uc758 typeid \uc640 dynamic_cast \ub294 \uac1d\uccb4\uc758 \ud0c0\uc785\uc774 \ub7f0\ud0c0\uc784 \uc0c1\uc5d0\uc11c \uacb0\uc815\ub418\ubbc0\ub85c \ud504\ub85c\uadf8\ub7a8 \ub85c\uc9c1\uc5d0 \ub530\ub77c \uc644\uc804\ud788 \uacb0\uc815\ub418\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc774\uac83\uc740 \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c \uc785\uc7a5\uc5d0\uc11c\ub294 \uc815\ub9d0 \uac1c\ub625\uac19\uc740 \uc0c1\ud669\uc774\ub2e4. \uc2ec\uc9c0\uc5b4 \ud558\uc704 \ud074\ub798\uc2a4\ub97c \uc774\ud6c4\uc5d0 \ud655\uc7a5\ud588\ub2e4\uba74 \uc704\uc640 \uac19\uc740 \ubaa8\ub4e0 \ucf54\ub4dc\ub97c \ub2e4 \uc218\uc815\ud574\uc57c\ub9cc \ud55c\ub2e4. \ub9cc\uc57d RTTI \ub97c \uc0ac\uc6a9\ud574\uc57c\uaca0\ub2e4\ub294 \uc0dd\uac01\uc774 \ub4e4\uac70\ub4e0 \ub2e4\uc74c\uc758 \ub300\uc548\uc744 \uace0\ub824\ud574\ubd10\ub77c. virtual \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud074\ub798\uc2a4 \ud0c0\uc785\uc5d0 \ub530\ub77c \ucf54\ub4dc \uc2e4\ud589\uc744 \ubc14\uafd4\uc8fc\ub294 \uc801\uc808\ud55c \ubc29\ubc95\uc774\ub2e4. \ub9cc\uc57d \ud504\ub85c\uadf8\ub7a8\uc758 \ub85c\uc9c1 \uc790\uccb4\uac00 \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\uc5d0 \ud558\uc704 \ud074\ub798\uc2a4\uc758 \uac1d\uccb4\uac00 \uc800\uc7a5\ub418\uc5c8\uc74c\uc744 \uc644\ubcbd\ud558\uac8c \ubcf4\uc7a5\ud55c\ub2e4\uba74, \uadf8\ub54c\ub294 \ucf54\ub4dc \ubd84\uc11d\uc774 \ubaa8\ud638\ud574\uc9c0\uc9c0 \uc54a\uc73c\ubbc0\ub85c dynamic_cast \ub97c \uc0ac\uc6a9\ud574\ub3c4 \uc0c1\uad00\uc5c6\ub2e4. \ud558\uc9c0\ub9cc \ub2f9\uc2e0\uc740 \uc774\ub7f0 \uacbd\uc6b0 \uc131\ub2a5 \ud5a5\uc0c1\uc744 \uc704\ud558\uc5ec static_cast \ub97c \uc0ac\uc6a9\ud558\uac8c \ub420 \uac83\uc774\ub2e4. Casting C \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uace0 C++ \uc2a4\ud0c0\uc77c\uc758 \ud615\ubcc0\ud658\uc744 \uc0ac\uc6a9\ud574\ub77c. Why: C \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uc740 \ub9e4\uc6b0 \ubaa8\ud638\ud558\ub2e4. \uc774\ub85c\uc368 \uc5ec\ub7ec\uac00\uc9c0 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud55c\ub2e4. \ub370\uc774\ud130\uac00 \uc190\uc2e4\ub418\ub294 \uac83\uc740 \ubb3c\ub860\uc774\uace0 \uc5b4\ub5a4 \uc758\ub3c4\ub85c \uc791\uc131\ub41c \ucf54\ub4dc\uc778\uc9c0 \uc774\ud574\ud558\uae30 \ud798\ub4e4 \uc218\ub3c4 \uc788\ub2e4. Example Do : \uac00\ub839 C++ \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uc740 static_cast<float>(double_value) \uc774\ub2e4. \ub610 int64 y = int64{1} << 42 \uc640 \uac19\uc740 brace initialization \ub3c4 C++ \ud615\ubcc0\ud658\uc774\ub2e4. \uc774\ub7ec\ud55c C++ \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uc744 \uc0ac\uc6a9\ud574\ub77c. Don't : \ud558\uc9c0\ub9cc (int)x \uac19\uc740 C \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \uc0b0\uc220 \ud0c0\uc785\uc758 \ub370\uc774\ud130\ub97c \ud615\ubcc0\ud658 \ud560 \ub54c int64{x} \uc640 \uac19\uc740 brace initialization \uc744 \uc0ac\uc6a9\ud574\ub77c. Why: brace initialization \uc740 \ub370\uc774\ud130 \uc190\uc2e4\uc774 \uc77c\uc5b4\ub098\uba74 \ucef4\ud30c\uc77c\uc774 \ub418\uc9c0 \uc54a\ub3c4\ub85d \ud574\uc8fc\uae30 \ub54c\ubb38\uc5d0 \uac00\uc7a5 \uc548\uc804\ud558\ub2e4. static_cast \ub294 \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\ub97c \ud558\uc704 \ud074\ub798\uc2a4\ub85c \ud615\ubcc0\ud658\ud560 \ub54c, \ub610\ub294 \ud558\uc704 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\ub97c \uc0c1\uc704 \ud074\ub798\uc2a4\ub85c \ud615\ubcc0\ud658\ud560 \ub54c \uc0ac\uc6a9\ud574\ub77c. \ub2e8, \uc774\ub54c \uc0c1\uc704 \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\ub97c \ud558\uc704 \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\ub85c \ud615\ubcc0\ud658 \ud55c\ub2e4\uba74 \uac1d\uccb4\uac00 \ubc18\ub4dc\uc2dc \ud558\uc704 \ud074\ub798\uc2a4\uc774\uc5b4\uc57c \ud55c\ub2e4. const \uc758 \uc758\ubbf8\ub97c \uc81c\uac70\ud574\uc57c \ud558\ub294 \uc0c1\ud669\uc5d0\uc11c const_case \ud615\ubcc0\ud658\uc744 \uc0ac\uc6a9\ud574\ub77c. \uc704\ud5d8\ud55c \ud615\ubcc0\ud658\uc774\ub098 int \ub97c \ud3ec\uc778\ud130\ub85c \ud615\ubcc0\ud658 \ud558\ub294 \ub4f1 \uac00\ub054 \ub9d0\ub3c4 \uc548 \ub418\ub294 \ud615\ubcc0\ud658\uc774 \ud544\uc694\ud560 \ub54c reinterpret_cast \ub97c \uc0ac\uc6a9\ud574\ub77c. \ub2e8, reinterpret_cast \ub294 \ub2f9\uc2e0\uc774 \uc9c0\uae08 \ud558\uace0 \uc788\ub294 \ud589\ub3d9\uc774 \ubb34\uc5c7\uc778\uc9c0 \uc644\ubcbd\ud558\uac8c \uc774\ud574\ud558\uace0 \uc788\uc744 \ub54c \uc0ac\uc6a9\ud574\ub77c. \ub610\ud55c reinterpret_cast \ub97c \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 absl::bit_cast \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc0c1\ud669\uc778\uc9c0 \uc810\uac80\ud574\ubd10\ub77c. \ube44\ud2b8\uc218\uc900\uc758 \ub370\uc774\ud130\ub97c \ub2e4\ub978 \ud0c0\uc785\uc73c\ub85c \ubc14\uafb8\uc5b4\uc57c \ud560 \ub54c absl::bit_cast \ub97c \uc0ac\uc6a9\ud574\ub77c. Example Do : double \ud0c0\uc785\uc758 \ub370\uc774\ud130\ub97c int64 \ub85c \ubc14\uafb8\uace0 \uc2f6\uc744 \ub54c absl::bit_cast \ub97c \uc0ac\uc6a9\ud574\ub77c. dynamic_cast \uc5d0 \ub300\ud55c \uac00\uc774\ub4dc\ub294 RTTI \uc139\uc158\uc744 \ubcf4\uc544\ub77c. Streams \uc0c1\ud669\uc5d0 \ub530\ub77c \uc2a4\ud2b8\ub9bc\uc744 \uc801\uc808\ud788 \uc0ac\uc6a9\ud574\ub77c. \uc2a4\ud2b8\ub9bc\uc774\ub780 <iostream> \ud5e4\ub354\ub85c \ucd94\uac00\ub418\ub294 C++ \uc758 \ud45c\uc900 I/O \uae30\ub2a5\uc774\ub2e4. \uad6c\uae00\uc758 \ub9ce\uc740 \ud504\ub85c\uc81d\ud2b8\uac00 \ub514\ubc84\uae45 \ub85c\uadf8\uc640 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc \uc9c4\ub2e8\uc744 \uc704\ud558\uc5ec \uc2a4\ud2b8\ub9bc\uc744 \uc0ac\uc6a9\ud55c\ub2e4. printf \ub97c \uc0ac\uc6a9\ud558\uc9c0\ub9d0\uace0 << \ub610\ub294 >> \ub97c \uc0ac\uc6a9\ud574\ub77c. Why: printf \ub294 \uc0ac\uc6a9\ud558\uae30 \uc5b4\ub835\uace0 \uc774\uc2dd\uc131\uc774 \ub9e4\uc6b0 \ub5a8\uc5b4\uc9c4\ub2e4. \uc2ec\uc9c0\uc5b4 std::string \uc744 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc5c6\uace0 user-defined \ud0c0\uc785\uc740 \ub2f9\uc5f0\ud788 \uc0ac\uc6a9 \ubd88\uac00\ub2a5\ud558\ub2e4. \uc2a4\ud2b8\ub9bc\uc740 \ucf58\uc194 I/O \ub97c \uc704\ud558\uc5ec std::cin , std::cout , std::cerr , std::clog \ub97c \uc81c\uacf5\ud558\ub294\ub370 \uc774\uac83\uc744 \uc0ac\uc6a9\ud574\ub77c. << \ub97c \uc624\ubc84\ub85c\ub529 \ud55c\ub2e4\uba74 \uc2a4\ud2b8\ub9bc\uc744 \uc704\ud558\uc5ec\uc11c\ub9cc \uc624\ubc84\ub85c\ub529\ud574\ub77c. \ud558\uc9c0\ub9cc std::cerr \ub098 std:clog \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\ubcf4\ub2e4 \ub85c\uadf8 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574\ub77c. \ub610\ud55c std::stringstream \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uace0 absl/strings \ub098 \uadf8\uc640 \ube44\uc2b7\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574\ub77c. end-user \ub97c \uc704\ud558\uc5ec I/O \uc2a4\ud2b8\ub9bc\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uace0 \uac1c\ubc1c\uc790\ub97c \uc704\ud558\uc5ec, \uc9c4\ub2e8\uc744 \uc704\ud558\uc5ec, \ud14c\uc2a4\ud2b8\ub97c \uc704\ud558\uc5ec \uc0ac\uc6a9\ud574\ub77c. Preincrement and Predecrement \ud6c4\uc704 \uc99d\uac10 \uc5f0\uc0b0\uc790( i++ , i-- )\uac00 \uaf2d \ud544\uc694\ud558\uc9c0 \uc54a\uc740 \uc774\uc0c1 \uc804\uc704 \uc99d\uac10 \uc5f0\uc0b0\uc790( ++i , --i ) \ub97c \uc0ac\uc6a9\ud574\ub77c. Why : \uc804\uc704 \uc99d\uac10 \uc5f0\uc0b0\uc790\uac00 \uc77c\ubc18\uc801\uc73c\ub85c \uac00\ub3c5\uc131\uc774 \ub354 \uc88b\uace0, \uc880 \ub354 \ud6a8\uc728\uc801\uc774\ub2e4. Use of const \uc758\ubbf8\uac00 \uc801\uc808\ud558\ub2e4\uba74 \uc5b8\uc81c \uc5b4\ub514\uc5d0\uc11c\ub098 const \ub97c \uc0ac\uc6a9\ud574\ub77c. \uc774\ub85c\uc368 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \ucf54\ub4dc\uc5d0\uc11c const \ubcc0\uc218\uc640 const \uba54\uc18c\ub4dc\ub97c \ub9cc\ub4e4\uc5b4\ub77c. Why : \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc774 \ubcc0\uc218\uac00 \uc5b4\ub5bb\uac8c \uc4f0\uc774\ub294\uc9c0 \uc27d\uac8c \uc774\ud574\ud560 \uc218 \uc788\ub2e4. \ucef4\ud30c\uc77c\ub7ec\uac00 \ub354 \ube60\ub974\uac8c \ucef4\ud30c\uc77c\uc744 \ud560 \uc218 \uc788\ub2e4. \uba40\ud2f0 \uc2a4\ub808\ub529\uc744 \ud574\uc57c \ud558\ub294 \uc0ac\ub78c\uc5d0\uac8c \uc5b4\ub5a4 \uba54\uc18c\ub4dc\ub97c lock \ud558\uc9c0 \uc54a\uace0\ub3c4 thread-safe \ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294\uc9c0 \uc54c\ub824\uc900\ub2e4. \uac00\ub054\uc740 constexpr \uac00 \ub354 \uc88b\uc740 \uc120\ud0dd\uc77c \uc218\ub3c4 \uc788\uc73c\ub2c8 \uace0\ub824\ud574\ubd10\ub77c. \uc6b0\ub9ac\ub294 \uc758\ubbf8\uac00 \uc801\uc808\ud558\ub2e4\uba74 \ubaa8\ub4e0 \ud568\uc218\uc758 \ud30c\ub77c\ubbf8\ud130, \ubaa8\ub4e0 \uba54\uc18c\ub4dc, \ubaa8\ub4e0 \uc804\uc5ed \ubcc0\uc218 \ub4f1\uc5d0 const \ub97c \uc4f0\ub294 \uac83\uc744 \uac15\ub825\ud558\uac8c \uad8c\uace0\ud55c\ub2e4. \ud568\uc218\uac00 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ub41c \ucc38\uc870\uc790\uc640 \ud3ec\uc778\ud130\uc758 \uac12\uc744 \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uac01\uac01 const T& \uc640 const T* \ub97c \uc0ac\uc6a9\ud574\ub77c. \uac12\uc73c\ub85c \ud30c\ub77c\ubbf8\ud130\ub97c \uc804\ub2ec\ud55c\ub2e4\uba74 const \ub97c \ubd99\uc774\ub294 \uac83\uc740 \uc758\ubbf8\uc5c6\uae30 \ub54c\ubb38\uc5d0 \uc774\uac83\uc740 \uad8c\uace0\ud558\uc9c0 \uc54a\ub294\ub2e4. Example \ub2e4\uc74c \ucf54\ub4dc\uc5d0\uc11c int b \ub294 \uac12\uc744 \uc804\ub2ec\ud558\ub294 \ud30c\ub77c\ubbf8\ud130\uc774\ubbc0\ub85c const int b \ub294 \uc758\ubbf8\uac00 \uc5c6\ub2e4. int add ( int a , const int b ) { return a + b } \ud074\ub798\uc2a4\uc758 \uba54\uc18c\ub4dc\uac00 \ud074\ub798\uc2a4\uc758 \ub370\uc774\ud130\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294 \ud55c \ubaa8\ub4e0 \uba54\uc18c\ub4dc\ub97c const \uba54\uc18c\ub4dc\ub85c \uc120\uc5b8\ud574\ub77c. \uc774\ub54c \ubaa8\ub4e0 \ud074\ub798\uc2a4\uc758 const \uba54\uc18c\ub4dc\ub294 thread-safe \ud574\uc57c \ud55c\ub2e4. \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \uc8fc\uc11d\uc774\ub098 API \uc5d0 \ubd84\uba85\ud558\uac8c thread-unsafe \ud558\ub2e4\uace0 \uba85\uc2dc\ud574\ub77c. \uc9c0\uc5ed\ubcc0\uc218\uc5d0 const \ud0a4\uc6cc\ub4dc\ub97c \ubd99\uc774\ub294 \uac83\uc740 \uad8c\uace0\ud558\uc9c0\ub3c4 \uc54a\uace0, \uad8c\uace0\ud558\uc9c0 \uc54a\uc9c0\ub3c4 \uc54a\ub294\ub2e4. Where to put the const (\uc77c\ub2e8 Pass) Use of constexpr \uc801\uc808\ud55c \uc0c1\ud669\uc774\ub77c\uba74 \ubaa8\ub4e0 \ucf54\ub4dc\uc5d0\uc11c constexpr \uc744 \ubc18\ub4dc\uc2dc \uc0ac\uc6a9\ud574\ub77c. Why : constexpr \uc744 \uc0ac\uc6a9\ud558\uba74 \ud504\ub85c\uc81d\ud2b8 \uc131\ub2a5\uc774 \ub9c9\ub300\ud558\uac8c \ud5a5\uc0c1\ub41c\ub2e4. constexpr \uc740 \uc2e4\ud589 \uacb0\uacfc\ub97c \ub7f0\ud0c0\uc784 \uc0c1\uc5d0\uc11c \uacc4\uc0b0\ud558\uac8c \ud558\uc9c0 \uc54a\uace0 \ucef4\ud30c\uc77c \uc0c1\uc5d0\uc11c \uacc4\uc0b0\ud558\uac8c \ub9cc\ub4e4\uae30 \ub54c\ubb38\uc774\ub2e4. \uac00\ub839 \ub2e4\uc74c\uc758 \ucf54\ub4dc\ub294 \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4\uc758 30 \ubc88\uc9f8 \uc218\ub97c \uad6c\ud558\ub294 \ucf54\ub4dc\uc774\ub2e4. constexpr long int fib ( int n ) { return ( n <= 1 ) ? n : fib ( n -1 ) + fib ( n -2 ); } int main () { // value of res is computed at compile time. const long int res = fib ( 30 ); cout << res ; return 0 ; } fib \ud568\uc218\uac00 constexpr \ub85c \uc120\uc5b8\ub418\uc5c8\ub2e4. \uc774 \ud504\ub85c\uadf8\ub7a8\uc758 \uc2e4\ud589\uc2dc\uac04\uc740 \ub2e8\uc9c0 0.003 \ucd08 \uc774\ub2e4. \uc131\ub2a5\uc774 \ubb34\uc9c0\ub9c9\uc9c0\ud558\uac8c \ud5a5\uc0c1\ub41c \uac83\uc774\ub2e4. \ub9cc\uc57d res \ub97c const \uac00 \uc544\ub2c8\ub77c long int res \ub85c \uc120\uc5b8\ud55c\ub2e4\uba74 \uc2e4\ud589\uc2dc\uac04\uc774 0.017 \ub85c \uc62c\ub77c\uac04\ub2e4. fib(5) \uac00 \ucef4\ud30c\uc77c \uc0c1\uc5d0\uc11c \uacc4\uc0b0\ub418\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc774\ub2e4. \ub530\ub77c\uc11c \ud568\uc218\uc5d0\uc11c, \uc0dd\uc131\uc790\uc5d0\uc11c, \uba54\uc18c\ub4dc\uc5d0\uc11c \uac00\ub2a5\ud558\ub2e4\uba74 \ubaa8\ub4e0 \uacf3\uc5d0\uc11c constexpr \uc744 \uc0ac\uc6a9\ud574\ub77c. \ub2e8, constexpr \uc740 \uba87 \uac00\uc9c0 \uc81c\uc57d\uc0ac\ud56d\uc774 \uc788\uc73c\ubbc0\ub85c \uc8fc\uc758\ud574\uc57c \ud55c\ub2e4. Integer Types \ub2f9\uc2e0\uc740 \ubcf4\ud1b5 int \ub97c \uc0ac\uc6a9\ud574\uc654\uc744 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098 \uc0c1\ud669\uc5d0 \ub530\ub77c\uc11c \uc815\ud655\ud55c \uc0ac\uc774\uc988\uc758 \uc815\uc218 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud574\ub77c. Example 16 \ube44\ud2b8\ub9cc \uc788\uc5b4\ub3c4 \ub41c\ub2e4\uba74 <stdint.h> \uc758 int16_t \ub97c \uc0ac\uc6a9\ud574\ub77c. \uc5b4\ub5a4 \ub370\uc774\ud130\uac00 \\(2 ^{31}\\) \uc640 \uac19\uac70\ub098 \ud070 \ub370\uc774\ud130\ub97c \ud45c\ud604\ud55c\ub2e4\uba74 int64_t \uac19\uc740 64 \ube44\ud2b8 \ubcc0\uc218\ud0c0\uc785\uc744 \uc0ac\uc6a9\ud574\ub77c. \ub2f9\uc2e0\uc774 \uc0ac\uc6a9\ud558\ub294 \ubcc0\uc218 \ud0c0\uc785\uc774 \ub108\ubb34 \ud06c\uc9c0 \uc54a\uc740\uc9c0 \ud56d\uc0c1 \ud655\uc778\ud574\ub77c. \ud558\uc9c0\ub9cc \ub9cc\uc57d \uc758\uc2ec\ub41c\ub2e4\uba74 \uadf8\ub0e5 \ud070 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud574\ub77c. \uc9c0\uae08\uae4c\uc9c0 \ub2f9\uc2e0\uc740 16 \ube44\ud2b8\ub97c \uc704\ud558\uc5ec short \ub97c \uc0ac\uc6a9\ud558\uace0, 32 \ube44\ud2b8\ub97c \uc704\ud558\uc5ec int \ub97c \uc0ac\uc6a9\ud558\uace0, 32 \ube44\ud2b8\ub97c \uc704\ud558\uc5ec long \uc744 \uc0ac\uc6a9\ud558\uace0, 64 \ube44\ud2b8\ub97c \uc704\ud558\uc5ec long long \uc744 \uc0ac\uc6a9\ud588\uc744 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uace0 <cstdint> \ub97c \ud1b5\ud558\uc5ec int16_t , uint32_t , int64_t \ub4f1\ub4f1\uc744 \uc0ac\uc6a9\ud574\ub77c. Why : int \ud0c0\uc785\uc744 \ubcf4\ud1b5 4 \ubc14\uc774\ud2b8\ub85c \uc0dd\uac01\ud558\uc9c0\ub9cc, \uc544\ud0a4\ud14d\uccd0\uc640 \ucef4\ud30c\uc77c\ub7ec\uc5d0 \ub530\ub77c\uc11c \uc0ac\uc774\uc988\uac00 \ub2ec\ub77c\uc9c8 \uc218\ub3c4 \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c <cstdint> \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc815\ud655\ud55c \uc0ac\uc774\uc988\uc758 \ubcc0\uc218 \ud0c0\uc785( int16_t , uint32_t , int64_t )\uc744 \uc0ac\uc6a9\ud574\ub77c. \uc0ac\uc774\uc988\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud558\uc5ec size_t \ub098 ptrdiff_t \ub97c \uc0ac\uc6a9\ud574\ub77c. \ubb3c\ub860 \uc6b0\ub9ac\ub3c4 for-loop \uac19\uc740 \uacf3\uc5d0\uc11c\ub294 \ubcc0\uc218\uac00 \ub108\ubb34 \ucee4\uc9c0\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc54c\uae30 \ub54c\ubb38\uc5d0 int \ub97c \uc790\uc8fc \uc0ac\uc6a9\ud55c\ub2e4. \uadf8\ub7f0 \uc0ac\uc18c\ud55c \ubd80\ubd84\uc5d0\uc11c\ub294 \uadf8\ub0e5 int \ub97c \uc0ac\uc6a9\ud574\ub77c. int \uac00 \ucd5c\uc18c\ud55c 4 \ubc14\uc774\ud2b8\uc77c \uac83\uc774\ub77c\uace0 \uc0dd\uac01\ud558\ub294 \uac83\uc740 \uc88b\ub2e4. \ud558\uc9c0\ub9cc int \uac00 4 \ubc14\uc774\ud2b8 \uc774\uc0c1\uc77c \uac83\uc774\ub77c\uace0 \uac00\uc815\ud558\uc9c0 \ub9c8\ub77c. 4 \ubc14\uc774\ud2b8 \uc774\uc0c1\uc758 \ubcc0\uc218\uac00 \ud544\uc694\ud558\ub2e4\uba74 int64_t \ub098 uint64_t \ub97c \uc368\ub77c. \ud569\ub9ac\uc801\uc778 \uc774\uc720\uac00 \uc5c6\ub294 \uc774\uc0c1 uint32_t \uac19\uc740 unsigned \uc815\uc218\ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \ud2b9\ud788, \uc22b\uc790\uac00 \uc74c\uc218\uac00 \ub418\uc9c0 \uc54a\ub294\ub2e4\ub294 \uc774\uc720\ub85c unsigned \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \uadf8 \ub300\uc2e0 assert \ub97c \uc0ac\uc6a9\ud574\ub77c. Why : \uc5ed\uc0ac\uc801\uc778 \uc0ac\uace0\ub85c \uc778\ud558\uc5ec C++ \ub3c4 unsigned \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\uae34 \ud558\uc9c0\ub9cc \ud45c\uc900 \uae30\uad6c\uc758 \uc5ec\ub7ec \uad6c\uc131\uc6d0\ub4e4\uc774 \uc774\uac83\uc744 \uc2e4\uc218\ub77c\uace0 \ubcf4\uace0 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc9c0\uae08 \uc774 \uc2dc\uc810\uc5d0\uc11c C++ \uc758 unsigned \ub97c \uace0\uce58\ub294 \uac83\uc740 \ubd88\uac00\ub2a5\ud558\ub2e4. \ub2f9\uc2e0\uc758 \ucf54\ub4dc\uac00 \uc0ac\uc774\uc988\ub97c \ubc18\ud658\ud55c\ub2e4\uba74 \ucc28\ub77c\ub9ac \ud070 \uc0ac\uc774\uc988\ub97c \uc368\uc11c \ubaa8\ub4e0 \uc0ac\uc774\uc988\ub97c \uc798 \ud45c\ud604\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\ub77c. \uc815\uc218\ud615 \ubcc0\uc218\ub97c \ubcc0\ud658\ud560 \ub54c \ub9e4\uc6b0 \uc2e0\uc911\ud558\ub3c4\ub85d \ud574\ub77c. Why : \uc815\uc218\ud615 \ubcc0\uc218\uc758 \ud615\ubcc0\ud658\uc744 \ud560 \ub54c \uc798\ubabb\ud558\uba74 \ucde8\uc57d\uc810\uacfc \ub2e4\ub978 \uc5ec\ud0c0 \ubb38\uc81c\uac00 \uc27d\uac8c \ubc1c\uc0dd\ud55c\ub2e4. 64-bit Portability \ucf54\ub4dc\ub294 \ud56d\uc0c1 64 \ube44\ud2b8\uc640 32 \ube44\ud2b8\uc5d0 \uce5c\ud654\uc801\uc774\uc5b4\uc57c \ud55c\ub2e4. printf \uacc4\uc5f4 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uace0 StrCat \uc774\ub098 Substitute \ub098 std::ostream \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 std::cout \ub4f1\uc744 \uc0ac\uc6a9\ud574\ub77c. Why : printf() \ud568\uc218\ub294 \uc77c\ubd80 \uc815\uc218 \ud0c0\uc785\uc5d0 \ub300\ud558\uc5ec \uc0ac\uc6a9\ud558\uae30 \uc5b4\ub835\uace0 \uc2dc\uc6a9\uc801\uc774\uc9c0 \uc54a\uc740 \ub9e4\ud06c\ub85c\ub97c \uc694\uad6c\ud55c\ub2e4. \ud569\ub9ac\uc801\uc778 \uc774\uc720\uac00 \uc5c6\ub2e4\uba74 printf \uacc4\uc5f4 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \uadf8 \ub300\uc2e0 typesafe \ud55c StrCat \uc774\ub098 Substitute \ub098 std::ostream \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 std::cout \ub4f1\uc744 \uc0ac\uc6a9\ud574\ub77c. sizeof(void *) != sizeof(int) \ub77c\ub294 \uac83\uc744 \uae30\uc5b5\ud574\ub77c. \ud3ec\uc778\ud130 \uc0ac\uc774\uc988 \uc815\uc218\ud615 \ubcc0\uc218\ub97c \uc6d0\ud55c\ub2e4\uba74 intptr_t \ub97c \uc0ac\uc6a9\ud574\ub77c. You may need to be careful with structure alignments, particularly for structures being stored on disk. Any class/structure with a int64_t/uint64_t member will by default end up being 8-byte aligned on a 64-bit system. If you have such structures being shared on disk between 32-bit and 64-bit code, you will need to ensure that they are packed the same on both architectures. Most compilers offer a way to alter structure alignment. For gcc, you can use attribute ((packed)). MSVC offers #pragma pack() and __declspec(align()). Help (\ub0b4\uc6a9\uc774 \uc774\ud574 \uc548\ub428) 64 \ube44\ud2b8 \uc0c1\uc218\ub97c \ub9cc\ub4e4\ub824\uba74 braced-initialization \uc744 \uc0ac\uc6a9\ud574\ub77c. Example Do : int64_t my_value { 0x123456789 }; uint64_t my_mask { 3ULL << 48 }; Preprocessor Macros \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \ud2b9\ud788 .h \ud30c\uc77c\uc5d0\uc11c \ub9e4\ud06c\ub85c\ub97c \uc808\ub300\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. C++ API \ub97c \ub9cc\ub4e4\ub77c\uace0 \uc808\ub300\ub85c \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Why : \ub2f9\uc2e0\uc774 \ubcf4\ub294 \ub9e4\ud06c\ub85c \ucf54\ub4dc\ub294 \ucef4\ud30c\uc77c\ub7ec\uac00 \ubcf4\ub294 \ucf54\ub4dc\uc640 \uc804\ud600 \ub2e4\ub974\ub2e4. \uc774\uac83\uc740 \uc608\uce21\ud558\uc9c0 \ubabb\ud558\ub294 \uc2e4\ud589\uacb0\uacfc\ub97c \ub0b3\uc744 \uc218\ub3c4 \uc788\ub2e4. \ud2b9\ud788 \ub9e4\ud06c\ub85c\uac00 \uc804\uc5ed scope \uc5d0\uc11c \uc120\uc5b8\ub418\uc5c8\uc744 \ub54c \uc608\uce21 \ubabb\ud558\ub294 \uacb0\uacfc\ub97c \ub0b3\ub294\ub2e4. C++ API \ub97c \ub9cc\ub4e4\uae30 \uc704\ud558\uc5ec \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\uba74 \ubb38\uc81c\ub294 \ub354 \uc2ec\uac01\ud574\uc9c4\ub2e4. \uac1c\ubc1c\uc790\uac00 API \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc798\ubabb \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \ucef4\ud30c\uc77c\ub7ec\ub85c\ubd80\ud130 \ub098\uc624\ub294 \ubaa8\ub4e0 \uc5d0\ub7ec\uba54\uc2dc\uc9c0\ub85c \ub9e4\ud06c\ub85c\uac00 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc5b4\ub5bb\uac8c \uad6c\uc131\ud558\uace0 \uc788\ub294\uc9c0 \uc124\uba85\ud574\uc57c \ud55c\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc740 \ud328\ud134\uc73c\ub85c \ucf54\ub529\ud558\uc9c0 \ub9c8\ub77c. Don't : class WOMBAT_TYPE ( Foo ) { ... public : EXPAND_PUBLIC_WOMBAT_API ( Foo ) EXPAND_WOMBAT_COMPARISONS ( Foo , == , < ) }; \ub9e4\ud06c\ub85c \ub300\uc2e0 inline \ud568\uc218, enums, const \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud574\ub77c. \ub9e4\ud06c\ub85c\ub85c \uc131\ub2a5\uc744 \ud5a5\uc0c1 \uc2dc\ud0a4\ub824 \ud558\uc9c0 \ub9d0\uace0 inline \ud568\uc218\ub97c \uc368\ub77c. \ub9e4\ud06c\ub85c\ub85c \uc0c1\uc218\ub97c \uc800\uc7a5\ud558\ub824\uace0 \ud558\uc9c0 \ub9d0\uace0 const \ubcc0\uc218\ub97c \uc120\uc5b8\ud574\ub77c. \ub9e4\ud06c\ub85c\ub85c \uc57d\uc5b4\ub97c \ub9cc\ub4e4\ub824\uace0 \ud558\uc9c0 \ub9d0\uace0 \ucc38\uc870\uc790\ub97c \uc0ac\uc6a9\ud574\ub77c. \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc6d0\ud558\ub294 \uae30\ub2a5\uc744 \uad6c\ud604\ud560 \uc218 \uc788\ub294\uc9c0 \uac80\ud1a0\ud574\ub77c. \uadf8\ub798\ub3c4 \uad73\uc774 \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\uace0 \ud310\ub2e8\uc774 \uc120\ub2e4\uba74 \ub2f9\uc2e0\uc758 \ud504\ub85c\uc81d\ud2b8 \ud300\uc7a5\uacfc \ub17c\uc758\ud574\ubd10\ub77c. \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud588\ub2e4\uba74 \uc0ac\uc6a9\ud55c \uc9c1\ud6c4 \ubc14\ub85c #undef \ub97c \ud574\ub77c. 0 and nullptr/NULL \ube48 \ud3ec\uc778\ud130\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud558\uc5ec NULL \uc774 \uc544\ub2c8\ub77c nullptr \uc744 \uc0ac\uc6a9\ud574\ub77c. \ube48 char \ub97c \ud45c\ud604\ud558\uae30 \uc704\ud558\uc5ec 0 \uc774 \uc544\ub2c8\ub77c '\\0' \uc744 \uc0ac\uc6a9\ud574\ub77c. sizeof sizeof(type) \uc774 \uc544\ub2cc sizeof(varname) \uc744 \uc0ac\uc6a9\ud574\ub77c. Why : sizeof(varname) \uc740 \ud2b9\uc815 \ubcc0\uc218\uc5d0 \ub300\ud55c \uc0ac\uc774\uc988\ub97c \ubc18\ud658\ud55c\ub2e4. \ub9cc\uc57d \uc774\ud6c4\uc5d0 \ub204\uad70\uac00 varname \uc744 \ub2e4\ub978 \ud0c0\uc785\uc73c\ub85c \ubc14\uafbc\ub2e4\uba74 sizeof(varname) \uc758 \uc0ac\uc774\uc988\ub294 \uc548\uc804\ud558\uac8c \uc5c5\ub370\uc774\ud2b8\ub41c\ub2e4. Example Do : MyStruct data ; memset ( & data , 0 , sizeof ( data )); \uc704\uc640 \uac19\uc774 \ucf54\ub529\ud574\ub77c. \uadf8\ub9ac\uace0 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub529\ud558\uc9c0 \ub9c8\ub77c. Don't : memset ( & data , 0 , sizeof ( MyStruct )); Type deduction \uac00\ub3c5\uc131\uc774 \uc88b\uc544\uc9c0\uac70\ub098 \uc131\ub2a5 \ud5a5\uc0c1\uc774 \uae30\ub300\ub420 \ub54c\uc5d0\ub9cc type deduction \uc744 \uc0ac\uc6a9\ud574\ub77c. \ub2e8\uc9c0 \ucf54\ub529\ud560 \ub54c \ub354 \ud3b8\ud558\ub2e4\ub294 \uc774\uc720\ub85c type deduction \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Example \ub2e4\uc74c\uacfc \uac19\uc740 \ud568\uc218 \ud15c\ud50c\ub9bf\uc5d0\uc11c \uba85\ud655\ud55c \ud0c0\uc785 \uc9c0\uc815\uc5c6\uc774 0 \ub9cc \uc804\ub2ec\ud558\uba74 \ucef4\ud30c\uc77c\ub7ec\uac00 type deduction \uc744 \ud55c\ub2e4. template < typename T > void f ( T t ); f ( 0 ); // Invokes f<int>(0) \ud568\uc218 \ud15c\ud50c\ub9bf\uc758 type deduction \uc740 \uac70\uc758 \ub300\ubd80\ubd84\uc758 \uc0c1\ud669\uc5d0\uc11c \ud574\ub3c4 \uc88b\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 auto \ub85c \ubcc0\uc218\ub97c \uc120\uc5b8\ud558\uba74 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc54c\uc544\uc11c type deduction \uc744 \ud574\uc900\ub2e4. auto a = 42 ; // a is an int auto & b = a ; // b is an int& auto c = b ; // c is an int auto d { 42 }; // d is an int, not a std::initializer_list<int> \ub2e4\uc74c\uc758 \ucf54\ub4dc\ub97c \ubcf4\uc790. std :: unique_ptr < WidgetWithBellsAndWhistles > widget_ptr = absl :: make_unique < WidgetWithBellsAndWhistles > ( arg1 , arg2 ); absl :: flat_hash_map < std :: string , std :: unique_ptr < WidgetWithBellsAndWhistles >>:: const_iterator it = my_map_ . find ( key ); std :: array < int , 6 > numbers = { 4 , 8 , 15 , 16 , 23 , 42 }; \uc704 \ucf54\ub4dc\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 type deduction \ud558\uba74 \ucf54\ub4dc\uac00 \ub354 \ubd84\uba85\ud574\uc9c0\uace0 \uac00\ub3c5\uc131\uc774 \uc88b\uc544\uc9c4\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \uc774\ub7f0 \uc2dd\uc758 type deduction \uc740 \ud574\ub3c4 \uc88b\ub2e4. auto widget_ptr = absl :: make_unique < WidgetWithBellsAndWhistles > ( arg1 , arg2 ); auto it = my_map_ . find ( key ); std :: array numbers = { 4 , 8 , 15 , 16 , 23 , 42 }; Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud568\uc218 \ubc18\ud658\ud615\uc5d0\ub3c4 type deduction \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. auto f () { return 0 ; } // The return type of f is int \ud568\uc218 \ubc18\ud658\ud615\uc758 type deduction \uc740 \ud568\uc218\uac00 \ub9e4\uc6b0 \uc791\uc744 \ub54c\uc5d0\ub9cc \uc0ac\uc6a9\ud574\ub77c. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc5d0\ub3c4 auto \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. // Sort `vec` in decreasing order std :: sort ( vec . begin (), vec . end (), []( auto lhs , auto rhs ) { return lhs > rhs ; }); \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc758 \ud30c\ub77c\ubbf8\ud130\uc5d0 type deduction \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud0c0\uc785 \uc5d0\ub7ec\uac00 \ub098\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758\ud574\ub77c. \uc774 \uaca8\uc6c5 \ub300\ubd80\ubd84\uc758 \uc0c1\ud669\uc5d0\uc11c type deduction \uc744 \ud558\uc9c0 \uc54a\uace0 \uadf8\ub0e5 \uc790\ub8cc\ud615\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc120\uc5b8\ud558\ub294 \uac83\uc774 \uc88b\ub2e4. Example \ub2e4\uc74c\uc740 Lambda capture \uc758 type deduction \uc608\uc2dc\uc774\ub2e4. [ x = 42 , y = \"foo\" ] { ... } // x is an int, and y is a const char* Example tuple , struct , array \ub098 map \uac19\uc740 \uac83\uc5d0\uc11c\ub3c4 auto \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. auto [ iter , success ] = my_map . insert ({ key , value }); if ( ! success ) { iter -> second = value ; } \uc774 \uacbd\uc6b0\uc758 type deduction \uc740 \uac00\ub3c5\uc131\uc744 \ub192\ud600\uc900\ub2e4. struct \uc5d0\uc11c\ub3c4 type deduction \uc744 \ud560 \uc218\ub3c4 \uc788\uc9c0\ub9cc \ub2e4\uc74c\uacfc \uac19\uc774 \uc5b4\ub5a4 \ud544\ub4dc\uc778\uc9c0 \uc8fc\uc11d\uc744 \ub2ec\uc544\uc918\ub77c. auto [ /*field_name1=*/ bound_name1 , /*field_name2=*/ bound_name2 ] = ... \ud558\uc9c0\ub9cc type deduction \uc740 \uc885\uc885 \ucf54\ub4dc\ub97c \ubaa8\ud638\ud558\uac8c \ub9cc\ub4e0\ub2e4. \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc740 type \uc744 \uacb0\uc815\ud558\ub294 \ucf54\ub4dc\uc640 \uc2e4\ud589 \ud750\ub984\uc744 \uc77c\uc77c\uc774 \ucc3e\uc544\ub0b4\uc57c\ub9cc \ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c type deduction \uc744 \uc0ac\uc6a9\ud558\uba74 \ucf54\ub4dc\uac00 \ub354 \uba85\ud655\ud574\uc9c0\uace0 \uc548\uc804\ud574\uc9c8 \ub54c\uc5d0\ub9cc \uc0ac\uc6a9\ud574\ub77c. \ub2e8\uc9c0 \ub354 \ud3b8\ud558\ub2e4\ub294 \uc774\uc720\ub85c type deduction \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Designated initializers Designated initializer \ub294 \uc624\uc9c1 C++20 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub9cc \uc368\ub77c. (\ucc38\uc870 : https://google.github.io/styleguide/cppguide.html#Designated_initializers ) Lambda expressions \uc801\uc808\ud55c \uc0c1\ud669\uc5d0\uc11c\ub9cc lambda \ud45c\ud604\uc2dd\uc744 \uc368\ub77c. \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc758 \ud30c\ub77c\ubbf8\ud130\uac00 scope \ub97c \ub118\uc5b4\uc120\ub2e4\uba74 \uc801\uc808\ud55c capture \ub97c \uc0ac\uc6a9\ud574\ub77c. \uaf2d \ud544\uc694\ud55c \ubcc0\uc218\ub9cc capture \ud574\ub77c. Why : \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc740 STL \uc758 \uc54c\uace0\ub9ac\uc998 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud560 \ub54c \uc720\uc6a9\ud558\uace0, \uac00\ub3c5\uc131\uc744 \ub192\ud600\uc900\ub2e4. capture \ub97c \uc801\uc808\ud788 \uc0ac\uc6a9\ud558\uba74 \ucf54\ub4dc \uc911\ubcf5\uc744 \uc904\uc77c \uc218 \uc788\ub2e4. \uadf8\ub7ec\ub098 capture \uc758 \ubb34\ubd84\ubcc4\ud55c \uc0ac\uc6a9\uc740 dangling-pointer \ucde8\uc57d\uc810\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4. \ud3ec\uc778\ud130\ub97c value \ub85c capture \ud558\ub294 \uac83\uc740 deep copy \ub97c \ud574\uc8fc\uc9c0 \uc54a\ub294\ub2e4. \ub610\ud55c \ub9e4\uc6b0 \uae34 \ud568\uc218\ub97c anonymous \ud568\uc218\ub85c \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc5d0 \uc804\ub2ec\ud558\ub294 \uac83\uc740 \uac00\ub3c5\uc131\uc744 \ub5a8\uc5b4\ub728\ub9b0\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub85c scope \ubc14\uae65\uc758 \ubaa8\ub4e0 \uac83\uc744 \ucc38\uc870\ud560 \uc218 \uc788\ub3c4\ub85d capture \ub97c \ud558\uc9c0\ub9c8\ub77c. Don't : Foo foo ; ... executor -> Schedule ([ & ] { Frobnicate ( foo ); }) \ub2e4\uc74c\uacfc \uac19\uc774 \ud544\uc694\ud55c \uac83\ub9cc capture \ud574\ub77c. Do : Foo foo ; ... executor -> Schedule ([ & foo ] { Frobnicate ( foo ); }) // BETTER - The compile will fail if `Frobnicate` is a member // function, and it's clearer that `foo` is dangerously captured by // reference. Info dangling-pointer \ub780 \uc774\ubbf8 \uba54\ubaa8\ub9ac \ud560\ub2f9 \ud574\uc81c\uac00 \ub41c \uac1d\uccb4\ub97c \ud3ec\uc778\ud305\ud558\uace0 \uc788\ub294 \ud3ec\uc778\ud130\uc785\ub2c8\ub2e4. Example \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 anonymous \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc57c\ud560 \ub54c \ud3b8\ud558\ub2e4. std :: sort ( v . begin (), v . end (), []( int x , int y ) { return Weight ( x ) < Weight ( y ); }); \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 capture [] \ub97c \ud1b5\ud558\uc5ec \ud604\uc7ac scope \ub97c \ub118\uc5b4\uc120 \ubcc0\uc218\uc758 \uc811\uadfc\ub3c4 \ud5c8\uc6a9\ud574\uc900\ub2e4. weight \ub294 value \ub864 capture \ud588\uace0, sum \uc740 \ucc38\uc870\uc790\ub85c capture \ud588\ub2e4. int weight = 3 ; int sum = 0 ; std :: for_each ( v . begin (), v . end (), [ weight , & sum ]( int x ) { sum += weight * x ; }); \ucea1\ucc98\ub97c [&] \ub85c \ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 scope \ubc14\uae65\uc758 \ubaa8\ub4e0 \uac83\uc744 \ucc38\uc870\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4. const std :: vector < int > lookup_table = ...; std :: vector < int > indices = ...; std :: sort ( indices . begin (), indices . end (), [ & ]( int a , int b ) { return lookup_table [ a ] < lookup_table [ b ]; }); Template metaprogramming \ud15c\ud50c\ub9bf\uc744 \ub108\ubb34 \ubcf5\uc7a1\ud558\uac8c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \ud15c\ud50c\ub9bf\uc744 low level \uc5d0 \uc874\uc7ac\ud558\ub294 \uc18c\uc218\uc758 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud558\uc5ec \uc0ac\uc6a9\ud574\ub77c. \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 \ub2f9\uc2e0\uc758 \ud300\uc6d0\uacfc \ud6c4\uc784 \uac1c\ubc1c\uc790\ub4e4\uc774 \ucf54\ub4dc\ub97c \uc798 \uc774\ud574\ud560 \uc218 \uc788\uace0 \uc720\uc9c0\ubcf4\uc218\ud558\uae30\uc5d0 \ud3b8\ud560\uc9c0 \ub450 \ubc88 \uc0dd\uac01\ud574\ub77c. Why : \ud15c\ud50c\ub9bf\uc740 \ub9e4\uc6b0 \uc720\uc5f0\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud574\uc900\ub2e4. Google C++ Test , std::tuple , std::function , Boost.Spirit \uac19\uc740 \uac83\ub4e4\uc740 \ud15c\ud50c\ub9bf \uc5c6\uc774 \uc874\uc7ac\ud560 \uc218 \uc5c6\uc5c8\uc744 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \ud15c\ud50c\ub9bf\uc744 \uacfc\ub3c4\ud558\uac8c \uc4f0\uba74 \ucf54\ub4dc\uc758 \uc758\ubbf8\uac00 \ubaa8\ud638\ud574\uc9c4\ub2e4. \ub610 \uc804\ubb38\uac00\uac00 \uc544\ub2cc \uc774\uc0c1 \ucf54\ub4dc\ub97c \uc27d\uac8c \uc774\ud574\ud560 \uc218 \uc5c6\uac8c \ub9cc\ub4e0\ub2e4. \ub610 \ud15c\ud50c\ub9bf\uc740 \uadf8 \uac1d\uccb4\uac00 \ub9e4\uc6b0 \ub2e8\uc21c\ud558\ub354\ub77c\ub3c4 \ucef4\ud30c\uc77c\uc744 \ub9e4\uc6b0 \ub290\ub9ac\uac8c \ub9cc\ub4e0\ub2e4. \ud15c\ud50c\ub9bf\uc744 Boost \ubc18\ub4dc\uc2dc \ub2e4\uc74c \ub9ac\uc2a4\ud2b8\uc5d0 \uc788\ub294 Boost library \ub9cc \uc0ac\uc6a9\ud574\ub77c. Info Boost library \ub294 C++ \uc758 STL \uc744 \ubcf4\uc644\ud558\uae30 \uc704\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. Boost library \ub294 C++ \uc758 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294 \ud30c\uc77c\uc2dc\uc2a4\ud15c \uae30\ub2a5, \uc120\ud615\ub300\uc218\ud559 \uae30\ub2a5, \ubb34\uc791\uc704 \uc22b\uc790 \uc0dd\uc131 \uae30\ub2a5, \uba40\ud2f0 \uc2a4\ub808\ub529, \uc815\uaddc\ud45c\ud604\uc2dd, \uc720\ub2db \ud14c\uc2a4\ud2b8, 64 \ube44\ud2b8\ub97c \ub118\uc5b4\uc11c\ub294 \ub370\uc774\ud130\ud0c0\uc785( 128 \ube44\ud2b8 \ubcc0\uc218, 256 \ube44\ud2b8 \ubcc0\uc218, 512 \ube44\ud2b8 \ubcc0\uc218, 1024 \ube44\ud2b8 \ubcc0\uc218), \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ub4f1\ub4f1\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. Call Traits from boost/call_traits.hpp Compressed Pair from boost/compressed_pair.hpp The Boost Graph Library (BGL) from boost/graph , except serialization ( adj_list_serialize.hpp ) and parallel/distributed algorithms and data structures ( boost/graph/parallel/* and boost/graph/distributed/* ). Property Map from boost/property_map , except parallel/distributed property maps ( boost/property_map/parallel/* ). Iterator from boost/iterator The part of Polygon that deals with Voronoi diagram construction and doesn't depend on the rest of Polygon: boost/polygon/voronoi_builder.hpp , boost/polygon/voronoi_diagram.hpp , and boost/polygon/voronoi_geometry_type.hpp Bimap from boost/bimap Statistical Distributions and Functions from boost/math/distributions Special Functions from boost/math/special_functions Root Finding Functions from boost/math/tools Multi-index from boost/multi_index Heap from boost/heap The flat containers from Container : boost/container/flat_map , and boost/container/flat_set Intrusive from boost/intrusive . The boost/sort library . Preprocessor from boost/preprocessor . Why : Boost library \ub294 \ub9e4\uc6b0 \uace0\ud03c\ub9ac\ud2f0\uc758 \uc77c\ubc18\ud654\ub41c \uc774\uc2dd\uac00\ub2a5\ud55c \uc5ec\ub7ec \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uba74\uc11c C++ \uc758 STL \uc774 \uc81c\uacf5\ud574\uc8fc\uc9c0 \ubabb\ud558\ub294 \uac2d\uc744 \ucc44\uc6cc\uc900\ub2e4. \ud558\uc9c0\ub9cc \uba87\uba87 Boost library \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub192\uc740 \ucf54\ub529 \uc2a4\ud0ac\uc744 \uc694\uad6c\ud558\uae30\ub3c4 \ud558\uace0 \uac00\ub3c5\uc131\uc744 \ub5a8\uc5b4\ub728\ub9b0\ub2e4. \uadf8\ub7ec\ub098 Boost library \ub97c \uc801\uc808\ud788 \uc0ac\uc6a9\ud558\uba74 \ucf54\ub529 \uc0dd\uc0b0\uc131\uc774 \ub9e4\uc6b0 \ub192\uc544\uc9c0\uace0, \uac1c\ubc1c\uc790\uac00 C++ \uc758 STL \uc774 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294 \uc720\ud2f8\ub9ac\ud2f0\ub97c \ub9cc\ub4dc\ub290\ub77c \uc2dc\uac04\ub0ad\ube44 \ud558\ub294 \uac83\uc744 \ubc29\uc9c0\ud574\uc8fc\uace0 \uc790\uc2e0\uc758 \ud504\ub85c\uc81d\ud2b8\uc758 \uae30\ub2a5\uc744 \uad6c\ud604\ud558\ub294 \uac83\uc5d0 \uc9d1\uc911\ud560 \uc218 \uc788\uac8c \ud574\uc900\ub2e4. Note \uc6b0\ub9ac\ub294 \uc704\uc758 \ud5c8\uac00\ub41c Boost library \ub9ac\uc2a4\ud2b8\ub97c \ucd94\uac00\ud558\uae30 \uc704\ud558\uc5ec \uacc4\uc18d \uac80\ud1a0\uc911\uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774\ud6c4\uc5d0 \uc774 \ub9ac\uc2a4\ud2b8\ub294 \uacc4\uc18d \ud655\uc7a5\ub420 \uc218 \uc788\ub2e4. std::hash std::hash \uc758 \ud2b9\uc218\ud654\ub97c \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c. (\ucc38\uace0 : https://google.github.io/styleguide/cppguide.html#Designated_initializers ) Other C++ Features Boost library \uac19\uc740 \ub2e4\ub978 C++ \uc758 \ucd5c\uc2e0 \ud655\uc7a5\ub4e4\uc744 \ubb34\ubd84\ubcc4\ud558\uac8c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uac00\ub3c5\uc131\uc744 \ub5a8\uc5b4\ub728\ub9b0\ub2e4. \ub2e4\ub978 C++ \ud655\uc7a5\uc740 \uae30\uc874\uc758 \uba54\ucee4\ub2c8\uc998\uacfc \uc911\ubcf5\ub418\ub294 \uac83\ub4e4\uc774 \uc788\uae30 \ub54c\ubb38\uc5d0 \ud63c\ub780\uc744 \ucd08\ub798\ud55c\ub2e4. Nonstandard Extensions \uc139\uc158\uc5d0\uc11c \ub354 \uc790\uc138\ud558\uac8c \ub17c\ud574\ubcf8\ub2e4. \ud55c\ud3b8 \ub2e4\uc74c\uc758 C++ \uae30\ub2a5\uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. <ratio> \uac00 \uc81c\uacf5\ud558\ub294 \ucef4\ud30c\uc77c \ud0c0\uc784 rational number. <cfenv> \uc640 <fenv.h> . \uc65c\ub0d0\uba74 \ub9ce\uc740 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc774 \uae30\ub2a5\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4. <filesystem> . \ud14c\uc2a4\ud2b8\uac00 \ucda9\ubd84\ud788 \ub418\uc9c0 \uc54a\uc558\uae30\uc5d0 \ucde8\uc57d\uc810\uc774 \uc874\uc7ac\ud55c\ub2e4. Nonstandard Extensions \uc704\uc5d0\uc11c \uc5b8\uae09\ud55c Boost library \uc758 \ud5c8\uac00 \ub9ac\uc2a4\ud2b8\ub97c \uc81c\uc678\ud558\uace0\ub294 \ube44\ud45c\uc900 \ud655\uc7a5\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Aliases alias \ub294 API \ub97c \uc0ac\uc6a9\ud558\ub294 \uc0ac\uc6a9\uc790\ub97c \ud3b8\ud558\uac8c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc758\ub3c4\uc640 \uc758\ubbf8\ub97c \ubd84\uba85\ud558\uac8c \ubb38\uc11c\ud654\ud558\ub77c. \uc774\ub54c typedef \ubcf4\ub2e4 using \uc744 \uc0ac\uc6a9\ud574\ub77c. Example \ub2e4\uc74c\uc758 \ucf54\ub4dc\ub97c \ubd10\ub77c. typedef \ubcf4\ub2e4 using \uc744 \uc368\ub77c. typedef Foo Bar ; using Bar = Foo ; using other_namespace :: Foo ; \uadf8\ub7ec\ub098 \ub2e8\uc9c0 \ud0c0\uc774\ud551\uc744 \ub35c \ud558\uae30 \uc704\ud558\uc5ec alias \ub97c \uacf5\uc6a9 API \uc5d0\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \ub9cc\uc57d alias \ub97c \uc815\uc758\ud588\ub2e4\uba74 \uadf8 \uc758\ub3c4\uc640 \uc758\ubbf8\ub97c \ubd84\uba85\ud558\uac8c \ubb38\uc11c\ud654\ub97c \ud574\ub77c. Example Do : namespace mynamespace { // Used to store field measurements. DataPoint may change from Bar* to some internal type. // Client code should treat it as an opaque pointer. using DataPoint = foo :: Bar * ; // A set of measurements. Just an alias for user convenience. using TimeSeries = std :: unordered_set < DataPoint , std :: hash < DataPoint > , DataPointComparator > ; } // namespace mynamespace \uc704\uc640 \uac19\uc740 \ucf54\ub4dc\ub294 alias \uc758 \uc758\ub3c4\uc640 \uc758\ubbf8\ub97c \ubd84\uba85\ud558\uac8c \ubb38\uc11c\ud654\ud574\ub480\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\uc74c\uc758 \ucf54\ub4dc\ub294 \uadf8 \uc758\ubbf8\uc640 \uc758\ub3c4\uac00 \ubb38\uc11c\ud654\ub418\uc9c0 \uc54a\uc544\uc11c \ucf54\ub4dc\uac00 \ubaa8\ud638\ud574\uc84c\ub2e4. Don't : namespace mynamespace { // Bad: none of these say how they should be used. using DataPoint = :: foo :: Bar * ; using :: std :: unordered_set ; // Bad: just for local convenience using :: std :: hash ; // Bad: just for local convenience typedef unordered_set < DataPoint , hash < DataPoint > , DataPointComparator > TimeSeries ; } // namespace mynamespace Naming \u00b6 \uac00\uc7a5 \uc911\uc694\ud55c \ucee8\ubca4\uc158\uc774 \ubc14\ub85c \ub124\uc774\ubc0d \ucee8\ubca4\uc158\uc774\ub2e4. \ub124\uc774\ubc0d \uc2a4\ud0c0\uc77c\ub85c\uc368 \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc740 \uace7\ubc14\ub85c \uc774\uac83\uc774 \ud0c0\uc785\uc778\uc9c0 \ubcc0\uc218\uc778\uc9c0 \ud568\uc218\uc778\uc9c0 \uc0c1\uc218\uc778\uc9c0 \ub9e4\ud06c\ub85c\uc778\uc9c0 \uc774\ud574\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \ub530\ub77c\uc11c \uac1c\uac1c\uc778\uc758 \ub124\uc774\ubc0d \uc120\ud638\uc5d0 \uc790\uc720\ub97c \uc8fc\ub294 \uac83\ubcf4\ub2e4 \ub124\uc774\ubc0d\uc744 \ud1b5\uc77c\ud558\ub294 \uac83\uc774 \uc555\ub3c4\uc801\uc73c\ub85c \ub354 \uc88b\ub2e4. Info Pascal case \ub294 \ub2e8\uc5b4\uac00 \ud569\uccd0\uc9c4 \ubd80\ubd84\ub9c8\ub2e4 \uccab\uae00\uc790\ub97c \ub300\ubb38\uc790\ub85c \ub098\uba38\uc9c0 \ubd80\ubd84\uc744 \uc18c\ubb38\uc790\ub85c \ub124\uc774\ubc0d\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uac00\ub839 PascalCaseNamingStyle . camel case \ub294 Pascal case \uc640 \ub611\uac19\uc740\ub370 \uc608\uc678\uc801\uc73c\ub85c \ub9e8 \uc55e \ubb38\uc790\ub97c \uc18c\ubb38\uc790\ub85c \ub124\uc774\ubc0d\ud569\ub2c8\ub2e4. \uac00\ub839 camelCaseNamingStyle . snake case \ub294 \ub2e8\uc5b4\uac00 \ud569\uccd0\uc9c4 \ubd80\ubd84\uc744 _ \ub85c \ubd99\uc774\uace0 \ubaa8\ub450 \uc18c\ubb38\uc790\ub85c \ub124\uc774\ubc0d\ud569\ub2c8\ub2e4. \uac00\ub839 snake_case_naming_style . General Naming Rules \uc77c\ubc18\uc801\uc778 \ub124\uc774\ubc0d \uaddc\uce59\uc740 \uadf8 \ubcc0\uc218\uc758 \uc758\ubbf8\ub97c \uc601\uc5b4\ub85c \uc791\uc131\ud55c \ud6c4 \uacf5\ubc31\uc744 \uc9c0\uc6b0\ub294 \uac83 \uc774\ub2e4. \uadf8\ub9ac\uace0 \uc544\ub798\uc5d0\uc11c \uc124\uba85\ud574\uc904 \ub124\uc774\ubc0d\uc758 \ud0c0\uc785\uc5d0 \ub530\ub77c\uc11c camel case \ub610\ub294 Pascal case \ub610\ub294 snake case \ub97c \uc0ac\uc6a9\ud574\ub77c. \ud6c4\uc784 \uac1c\ubc1c\uc790\uac00 \uc77d\uc5c8\uc744 \ub54c \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6b4 \uc57d\uce6d\uacfc \uc904\uc784\ub9d0\ub85c \ub124\uc774\ubc0d\uc744 \ud558\uc9c0 \ub9c8\ub77c. \ub9cc\uc57d Wikipedia \uc5d0 \uc874\uc7ac\ud558\ub294 \uc57d\uce6d\uc774\ub098 \uc904\uc784\ub9d0\uc774\ub77c\uba74 \uc368\ub3c4 \uc88b\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \ub124\uc774\ubc0d\uc758 \uc815\ud655\uc131\uc740 \uadf8 \ub124\uc774\ubc0d\uc774 \uc0ac\uc6a9\ub418\ub294 \uc2a4\ucf54\ud504\uc5d0 \ube44\ub840\ud558\uc5ec \uc9c0\uc5b4\uc838\uc57c \ud55c\ub2e4. Example 3 \uc904\uc758 \ucf54\ub4dc\uc5d0\uc11c \uc4f0\uc774\uace0 \ub9d0 \ubcc0\uc218\ub77c\uba74 n \uc774\ub77c\ub294 \uc774\ub984\uc744 \ubd99\ud600\ub3c4 \uc88b\ub2e4. \ud558\uc9c0\ub9cc \uc804\ubc18\uc801\uc778 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uacc4\uc18d \uc0ac\uc6a9\ub418\ub294 \ubcc0\uc218\ub77c\uba74 n \uc774\ub77c\ub294 \uc774\ub984\uc740 \ub108\ubb34 \ubaa8\ud638\ud558\uae30\uc5d0 \uc0ac\uc6a9\ud574\uc11c\ub294 \uc548\ub41c\ub2e4. \ubb3c\ub860 \ub110\ub9ac \uc54c\ub824\uc778 \uc57d\uce6d\uc73c\ub85c \ub124\uc774\ubc0d\uc744 \ud574\ub3c4 \ub41c\ub2e4. Example i \ub294 iteration \ubcc0\uc218\ub85c \ub110\ub9ac \uc54c\ub824\uc838 \uc788\uc73c\ub2c8 \uc368\ub3c4 \ub41c\ub2e4. T \ub294 \ud15c\ud50c\ub9bf \ubcc0\uc218\ub85c \ub110\ub9ac \uc54c\ub824\uc838 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc368\ub3c4 \uc88b\ub2e4. File Names C++ \ud30c\uc77c\uc740 \ubc18\ub4dc\uc2dc .cc \ub85c \ub05d\ub098\uc57c \ud558\uace0 \ud5e4\ub354 \ud30c\uc77c\uc740 \ubc18\ub4dc\uc2dc .h \ub85c \ub05d\ub098\uc57c \ud55c\ub2e4. \ud30c\uc77c \uc774\ub984\uc740 \ubc18\ub4dc\uc2dc \uc18c\ubb38\uc790\uc5ec\uc57c \ud55c\ub2e4. \uadf8\ub9ac\uace0 _ \uc640 - \ub97c \ud3ec\ud568\uc2dc\ud0ac \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc _ \ub97c \uc4f0\ub294 \uac8c \ub354 \uc88b\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud30c\uc77c \uc774\ub984\uc744 \uc9c0\uc5b4\ub77c. my_useful_class.cc my-useful-class.cc myusefulclass.cc myusefulclass_test.cc // _unittest and _regtest are deprecated. /usr/include \uc5d0 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \uc774\ub984\uc744 \uc808\ub300\ub85c \uc4f0\uc9c0 \ub9d0\uc544\ub77c. Example \uc720\ub2c9\uc2a4 \uc2dc\uc2a4\ud15c \ud5e4\ub354 \ud30c\uc77c\uc758 \ub514\ub809\ud1a0\ub9ac\uc778 /usr/include \uc5d0\ub294 db.h \uac00 \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc808\ub300\ub85c db.h \ub77c\ub294 \ud30c\uc77c \uc774\ub984\uc744 \uc9d3\uc9c0 \ub9d0\uc544\ub77c. \ud30c\uc77c \uc774\ub984\uc744 \ub9e4\uc6b0 \uc790\uc138\ud558\uac8c \uc9c0\uc5b4\ub77c. Example logs.h \uc774 \uc544\ub2c8\ub77c http_server_logs.h \uc73c\ub85c \ud30c\uc77c \uc774\ub984\uc744 \uc9c0\uc5b4\ub77c. \uc77c\ubc18\uc801\uc73c\ub85c \ub300\ud45c\uc801\uc778 \ud074\ub798\uc2a4\ub97c \ud30c\uc77c \uc774\ub984\uc73c\ub85c \uc9c0\uc5b4\ub77c. Example FooBar \ud074\ub798\uc2a4\ub97c \uc120\uc5b8\ud558\ub294 \ud5e4\ub354 \ud30c\uc77c\uc758 \uc774\ub984\uc744 foo_bar.h \ub85c \uc9d3\uace0 \uad6c\ud604\ud558\ub294 \ud30c\uc77c \uc774\ub984\uc744 foo_bar.cc \ub85c \uc9c0\uc5b4\ub77c. Type Names \ud0c0\uc785 \uc774\ub984\uc740 Pascal case \ub85c \uc9c0\uc5b4\ub77c. \ud0c0\uc785 \uc774\ub984\uc5d0\ub294 class , struct , type aliase , enum , template parameter \ub4f1\uc774 \uc788\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud0c0\uc785 \uc774\ub984\uc744 \uc9c0\uc5b4\ub77c. // classes and structs class UrlTable { ... class UrlTableTester { ... struct UrlTableProperties { ... // typedefs typedef hash_map < UrlTableProperties * , std :: string > PropertiesMap ; // using aliases using PropertiesMap = hash_map < UrlTableProperties * , std :: string > ; // enums enum class UrlTableError { ... Variable Names \ubcc0\uc218 \uc774\ub984\uc740 snake case \ub85c \uc9c0\uc5b4\ub77c. \ubcc0\uc218 \uc774\ub984\uc5d0\ub294 \ud568\uc218\uc758 \ubcc0\uc218, \ud568\uc218\uc758 \ud30c\ub77c\ubbf8\ud130, \ud074\ub798\uc2a4 \uba64\ubc84 \ubcc0\uc218 \ub4f1\uc774 \ud3ec\ud568\ub41c\ub2e4. Common Variable names Example Do : std :: string table_name ; // OK - lowercase with underscore.` \ubcc0\uc218 \uc774\ub984\uc744 \uc704\uc640 \uac19\uc774 \uc9d3\uace0 \ub2e4\uc74c\uacfc \uac19\uc774 \uc9d3\uc9c0 \ub9c8\ub77c. Don't : std :: string tableName ; // Bad - mixed case. Class Data Members \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ubcc0\uc218\uc758 \uc774\ub984\ub3c4 snake case \ub85c \uc9d3\ub418 \ub9c8\uc9c0\ub9c9\uc5d0 _ \ub97c \ud558\ub098 \ub354 \ubd99\ud600\ub77c. Example \ud074\ub798\uc2a4\uc758 \ub370\uc774\ud130 \uba64\ubc84\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774\ub984\uc744 \uc9c0\uc5b4\ub77c. \uc774\ub984\uc758 \ub05d\uc5d0 \uaf2d _ \ub97c \ubd99\ud600\ub77c. class TableInfo { ... private : std :: string table_name_ ; // OK - underscore at end. static Pool < TableInfo >* pool_ ; // OK. }; static \uc774\ub4e0 static \uc774 \uc544\ub2c8\ub4e0 \uc774\ub807\uac8c \uc9c0\uc5b4\ub77c. Struct Data Members Example struct \uc758 \uba64\ubc84 \ubcc0\uc218\uc758 \uc774\ub984\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \uc9c0\uc5b4\ub77c. struct UrlTableProperties { std :: string name ; int num_entries ; static Pool < UrlTableProperties >* pool ; }; Constant Names \uc0c1\uc218\ub85c \uc120\uc5b8\ub41c \ubcc0\uc218 \uc989, constexpr \uc774\ub098 const \ub85c \uc120\uc5b8\ub41c \ubcc0\uc218\uc758 \uc774\ub984\uc5d0\ub294 k \ub97c \ub9e8 \uc55e\uc5d0 \ubd99\uc774\uace0 Pascal case \ub85c \uc9c0\uc5b4\ub77c. \ubaa8\ub4e0 Static storage duration \uc744 \uac16\ub294 \ubcc0\uc218, \uc989 static \ubcc0\uc218\ub098 \uc804\uc5ed \ubcc0\uc218\ub97c \uc774\ub807\uac8c \ub124\uc774\ubc0d \ud574\ub77c. \ub2e8, \ub300\ubb38\uc790\ub85c \ub2e8\uc5b4\ub97c \uad6c\ubd84\ud560 \uc218 \uc5c6\ub294 \ubb38\uc790\ub77c\uba74 _ \ub97c \uc0ac\uc6a9\ud574\ub3c4 \uc88b\ub2e4. Example const int kDaysInAWeek = 7 ; const int kAndroid8_0_0 = 24 ; // Android 8.0.0 Function, Method Names \ud568\uc218\uc640 \uba54\uc18c\ub4dc\uc758 \uc774\ub984\uc740 camel case \ub85c \ub124\uc774\ubc0d\ud574\ub77c. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ud568\uc218 \uc774\ub984\uc744 \uc9c0\uc5b4\ub77c. addTableEntry () deleteUrl () openFileOrDie () \ub2e4\uc74c\uacfc \uac19\uc774 \uba54\uc18c\ub4dc \uc774\ub984\uc744 \uc9c0\uc5b4\ub77c. class MyAwesomeClass { ... void myAwesomeMethod { ... } ... } Namespace Names namespace \uc758 \uc774\ub984\uc740 snake case \ub85c \uc9c0\uc5b4\ub77c. \ud558\uc9c0\ub9cc namespace \uc758 \uc774\ub984\uc740 _ \uac00 \ud544\uc694\uc5c6\ub3c4\ub85d \uc9e7\uace0 \uac04\ub2e8\ud560\uc218\ub85d \uc88b\ub2e4. \uac00\uc7a5 \ucd5c\uc0c1\uc704 namespace \ub294 \ud504\ub85c\uc81d\ud2b8\uc758 \uc774\ub984\uc73c\ub85c \uc9c0\uc5b4\ub77c. \ud558\uc704 namespace \ub294 \uc138\ubd80 \ud504\ub85c\uc81d\ud2b8\uc758 \uc774\ub984\uc774\ub098 \ud300\uc758 \uc774\ub984\uc73c\ub85c \uc9c0\uc5b4\ub77c. Example websearch::index \uc774\ub098 websearch::index_util \uc640 \uac19\uc774 \ub124\uc774\ubc0d\ud574\ub77c. Enumerator Names Enumerator \ubcc0\uc218\uc758 \uc774\ub984\uc740 \uc0c1\uc218\uc640 \uac19\uc774 \ub124\uc774\ubc0d\ud574\ub77c. \uc989 k \ub97c \ub9e8 \uc55e\uc5d0 \uc4f0\uace0 Pascal case \ub85c \ub124\uc774\ubc0d\ud574\ub77c. Example enum class UrlTableError { kOk = 0 , kOutOfMemory , kMalformedInput , }; \uc704\uc640 \uac19\uc774 \ub124\uc774\ubc0d\ud558\uace0 \ub2e4\uc74c\uacfc \uac19\uc774 \ub124\uc774\ubc0d\ud558\uc9c0 \ub9c8\ub77c. enum class AlternateUrlTableError { OK = 0 , OUT_OF_MEMORY = 1 , MALFORMED_INPUT = 2 , }; Why: 2009\ub144 1\uc6d4\uae4c\uc9c0, enum \ubcc0\uc218\uc758 \uc774\ub984\uc740 \ub9e4\ud06c\ub85c\uc758 \ub124\uc774\ubc0d\uacfc \uac19\uc558\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ub124\uc774\ubc0d\uc740 \ucda9\ub3cc\uc744 \uc77c\uc73c\ucf30\uace0 \ub9c9\ub300\ud55c \ube44\uc6a9\uc774 \uc18c\ubaa8\ub418\uc5c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774\ub807\uac8c \ub124\uc774\ubc0d \ud558\ub77c\ub294 \uac83\uc774\ub2e4. Macro Names \uc77c\ubc18\uc801\uc73c\ub85c \ub9e4\ud06c\ub85c\ub294 \uc0ac\uc6a9\ub418\uc5b4\uc11c\ub294 \uc548\ub41c\ub2e4. \ud558\uc9c0\ub9cc \uc815\ub9d0\ub85c \ud544\uc694\ud55c \uacbd\uc6b0 \ub9e4\ud06c\ub85c\ub97c \ubaa8\ub450 \ub300\ubb38\uc790\ub85c \ub124\uc774\ubc0d\ud558\uace0 \ub2e8\uc5b4 \uc911\uac04\uc744 _ \ub85c \uad6c\ubd84\uc9c0\uc5b4\ub77c. Example \uc815\ub9d0\ub85c \ub9e4\ud06c\ub85c\uac00 \ud544\uc694\ud558\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ub124\uc774\ubc0d\ud574\ub77c. #define ROUND(x) ... #define PI_ROUNDED 3.0 Exceptions to Naming Rules \ub2f9\uc2e0\uc774 \uae30\uc874\uc758 C \uc640 C++ \uc5d0 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ube44\uc2b7\ud55c \ubb34\uc5b8\uac00\ub97c \ub124\uc774\ubc0d\ud55c\ub2e4\uba74 \uae30\uc874\uc758 C \uc640 C++ \uc5d0\uc11c \ub530\ub974\ub294 \ub124\uc774\ubc0d \ucee8\ubca4\uc158\uc744 \ub530\ub77c\ub3c4 \uc88b\ub2e4. Example bigopen() : function name, follows form of open() uint : typedef bigpos : struct or class, follows form of pos sparse_hash_map : STL-like entity; follows STL naming conventions LONGLONG_MAX : a constant, as in INT_MAX Comments \u00b6 \uc8fc\uc11d\uc740 \ucf54\ub4dc \uac00\ub3c5\uc131\uc5d0 \uc788\uc5b4\uc11c \ub9e4\uc6b0 \uc911\uc694\ud55c \uc5ed\ud560\uc744 \ud55c\ub2e4. \ubc18\ub4dc\uc2dc \uc544\ub798\uc758 \uaddc\uce59\uc744 \uae30\ubc18\uc73c\ub85c \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. \uadf8\ub7ec\ub098 \uae30\uc5b5\ud558\ub77c. \uac00\uc7a5 \uc88b\uc740 \uc8fc\uc11d\uc774\ub780 \uc8fc\uc11d \uc5c6\uc774 \ucf54\ub4dc \uadf8 \uc790\uccb4\ub85c \uc774\ud574\uac00 \ub418\ub294 \uac83\uc774\ub2e4. \uc8fc\uc11d\uc744 \ub2ec \ub54c \ud0c0\uac9f\uc744 \ubc18\ub4dc\uc2dc \ub2f9\uc2e0\uc758 \ud6c4\uc784 \uac1c\ubc1c\uc790\ub97c \ub300\uc0c1\uc73c\ub85c \ud558\ub77c. \uadf8\ub7ec\ub2c8 \uc8fc\uc11d\uc744 \uce5c\uc808\ud558\uac8c \ub2ec\uc544\ub77c. \uadf8 \ud6c4\uc784 \uac1c\ubc1c\uc790\uac00 \uc5b8\uc820\uac00 \ub2f9\uc2e0\uc774 \ub420 \uac83\uc774\ub2e4. Comment Style // \ub098 /* */ \uc2a4\ud0c0\uc77c\uc744 \ubaa8\ub450 \uc0ac\uc6a9\ud574\ub3c4 \uc88b\ub2e4. \uadf8\ub7ec\ub098 // \uac00 \uc880 \ub354 \uc77c\ubc18\uc801\uc774\ub2e4. \ub2f9\uc2e0\uc758 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uc8fc\uc11d\uc744 \ub2e4\ub294 \uc2a4\ud0c0\uc77c\uc758 \uc77c\uad00\uc131\uc744 \uc9c0\ud0a4\uba74 \ub41c\ub2e4. File Comments \ud30c\uc77c\uc758 \uc2dc\uc791\uc744 \ub77c\uc774\uc13c\uc2a4\ub97c \uba85\uc2dc\ud558\ub294 \uc8fc\uc11d\uc73c\ub85c \uc2dc\uc791\ud574\ub77c. Example Apache 2.0 \uc774\ub098 BSD \ub098 LGPL \uc774\ub098 GPL \uc774\ub098 MIT \ub4f1\uc758 \ub77c\uc774\uc13c\uc2a4\ub97c \uc120\ud0dd\ud558\uc5ec \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. \uadf8\ub9ac\uace0 \uc5b4\ub5a4 \ud30c\uc77c\uc778\uc9c0, \uc5b4\ub5a4 \uac83\uc744 \uad6c\ud604\ud558\ub294\uc9c0, \ud639\uc740 \uc5b4\ub5a4 \uac83\uc744 \ud14c\uc2a4\ud2b8\ud558\ub294\uc9c0 \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. \ubaa8\ub4e0 \ud30c\uc77c\uc5d0 \uc774 \uc8fc\uc11d\uc774 \ubc18\ub4dc\uc2dc \uc788\uc5b4\uc57c \ud55c\ub2e4. \ub9cc\uc57d .h \ud30c\uc77c\uc774 \ub2e4\uc911 \ucd94\uc0c1\ud654\ub97c \uc120\uc5b8\ud55c\ub2e4\uba74, \uadf8 \ucd94\uc0c1 \ud074\ub798\uc2a4\uc640 \uad6c\ud604 \ud074\ub798\uc2a4\ub4e4\uc758 \uc804\uccb4 \uad6c\uc870\uc5d0 \ub300\ud55c \uc8fc\uc11d\uc744 \ubc18\ub4dc\uc2dc \ub2ec\uc544\ub77c. \uac01\uac01\uc758 \uad6c\ud604\uc5d0 \ub300\ud55c \uc138\uc138\ud55c \uc124\uba85\uc740 \uadf8 \uad6c\ud604 \ucf54\ub4dc\uc5d0\uc11c \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. \uc774\ub54c .h \uc640 .cc \ud30c\uc77c\uc5d0 \uc8fc\uc11d\uc744 \uc911\ubcf5\uc73c\ub85c \ub2ec\uc9c0 \ub9c8\ub77c. Class Comments \ubaa8\ub4e0 class \uc640 struct \uc5d0 \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc774 \uc774\uac83\uc774 \ubb34\uc5c7\uc774\uace0, \uc5b8\uc81c \uc0ac\uc6a9\ud574\uc57c \ud558\uace0, \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud558\ub294\uc9c0 \ucda9\ubd84\ud788 \uc774\ud574\ud560 \uc218 \uc788\ub3c4\ub85d \ubc18\ub4dc\uc2dc \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. Example \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc5d0\uac8c \uc774\uac83\uc744 \uc5b8\uc81c \uc0ac\uc6a9\ud574\uc57c \ud558\uace0, \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud574\uc57c \ud558\ub294\uc9c0 \ubc18\ub4dc\uc2dc \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. Do : // Iterates over the contents of a GargantuanTable. // Example: // GargantuanTableIterator* iter = table->NewIterator(); // for (iter->Seek(\"foo\"); !iter->done(); iter->Next()) { // process(iter->key(), iter->value()); // } // delete iter; class GargantuanTableIterator { ... }; \ub9cc\uc57d class \uac00 \uba40\ud2f0\uc2a4\ub808\ub4dc\uc5d0 \uc758\ud558\uc5ec \ub2e4\ub904\uc9c8 \uc218 \uc788\ub2e4\uba74, \uc8fc\uc11d\uc744 \ub354\ub354\uc6b1 \uc0c1\uc138\ud558\uac8c \ub2ec\uc544\ub77c. \uc774\ub85c\uc368 thread-safe, blocking, race-condition \ub4f1\ub4f1\uc5d0 \uad00\ud55c \uc774 \uac1d\uccb4\uc5d0\uc11c \uc8fc\uc758\ud574\uc57c\ud558\ub294 \uba40\ud2f0\uc2a4\ub808\ub529 \uc815\ubcf4\ub97c \ucda9\ubd84\ud788 \uc81c\uacf5\ud574\ub77c. class \uc120\uc5b8\uc744 .h \uc5d0\uc11c \ud588\uace0 \uad6c\ud604\uc744 .cc \uc5d0\uc11c \ud588\ub2e4\uba74 class \uc5d0 \ub300\ud55c \uc8fc\uc11d\uc744 .h \uc5d0 \ub2ec\uc544\ub77c. \uadf8\ub9ac\uace0 class \uc758 \uc138\ubd80 \uc791\ub3d9\uacfc \uadf8 \uad6c\ud604\uc5d0 \uad00\ud55c \uc8fc\uc11d\uc744 .cc \uc5d0 \ub2ec\uc544\ub77c. Function Comments \ud568\uc218\uc640 \ud074\ub798\uc2a4\uc758 \uba54\uc18c\ub4dc\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. Function Declarations \ubaa8\ub4e0 \ud568\uc218\uc758 \uc120\uc5b8\ubd80\uc5d0\ub294 \ud568\uc218\ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud558\ub294\uc9c0 \ucda9\ubd84\ud788 \uc774\ud574\ud560 \uc218 \uc788\ub294 \uc8fc\uc11d\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4. \ud568\uc218\uac00 \ub9e4\uc6b0 \ub2e8\uc21c\uace0 \ub9e4\uc6b0 \uba85\ubc31\ud55c \uacbd\uc6b0\uc5d0\ub9cc \uc8fc\uc11d\uc744 \ub2ec\uc9c0 \uc54a\uc544\ub3c4 \ub41c\ub2e4. \ud568\uc218\uc758 \uc8fc\uc11d\uc5d0\ub294 \ub2e4\uc74c\uc758 \ub0b4\uc6a9\uc774 \uc788\uc5b4\uc57c\ub9cc \ud55c\ub2e4. \uc785\ub825\uacfc \ucd9c\ub825\uc774 \ubb34\uc5c7\uc778\uc9c0. \ud568\uc218\uac00 \ub3d9\uc801 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud560 \uacbd\uc6b0 \ud568\uc218\ub97c \ud638\ucd9c\ud55c \ucf54\ub4dc\uc5d0\uc11c \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud574\uc8fc\uc5b4\uc57c \ud558\ub294\uc9c0. \ud568\uc218\ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud574\uc57c \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub418\ub294\uc9c0. Example \ub2e4\uc74c\uacfc \uac19\uc774 \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. Do : // Returns an iterator for this table. It is the client's // responsibility to delete the iterator when it is done with it, // and it must not use the iterator once the GargantuanTable object // on which the iterator was created has been deleted. // // The iterator is initially positioned at the beginning of the table. // // This method is equivalent to: // Iterator* iter = table->NewIterator(); // iter->Seek(\"\"); // return iter; // If you are going to immediately seek to another place in the // returned iterator, it will be faster to use NewIterator() // and avoid the extra seek. Iterator * GetIterator () const ; \uadf8\ub7ec\ub098 \ubd88\ud544\uc694\ud558\uace0 \uc7a5\ud669\ud55c \uc124\uba85\uc740 \ud558\uc9c0 \ub9c8\ub77c. \uba54\uc18c\ub4dc\ub97c \uc624\ubc84\ub77c\uc774\ub529 \ud588\ub2e4\uba74 \uc0c1\uc704 \ud074\ub798\uc2a4 \uba54\uc18c\ub4dc\uc5d0 \uc774\ubbf8 \uc8fc\uc11d\uc774 \uc788\uc744 \uac83\uc774\ubbc0\ub85c, \uc124\uba85\uc744 \ubc18\ubcf5\ud558\uc9c0 \ub9d0\uace0 \uc624\ubc84\ub77c\uc774\ub529\uc5d0 \ucd08\uc810\uc744 \ub9de\ucdb0\uc11c \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uc5d0 \uc8fc\uc11d\uc744 \ub2ec \ub54c\ub294, \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uac00 \ubb34\uc5c7\uc744 \uc704\ud55c \uac83\uc778\uc9c0 \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. \ub2e8\uc9c0 // destorys this object \ub77c\uace0 \uc8fc\uc11d\uc744 \ub2e4\ub294 \uac83\uc740 \ubb34\uc758\ubbf8\ud558\ub2e4. \uc0dd\uc131\uc790\uac00 \uadf8 \ud30c\ub77c\ubbf8\ud130\ub85c \ubb34\uc2a8 \uc77c\uc744 \ud558\ub294\uc9c0, \uc18c\uba78\uc790\uac00 \ubb34\uc5c7\uc744 \uc18c\uba78\ud558\ub294\uc9c0 \uc124\uba85\ud574\ub77c. \ub9cc\uc57d \uc5b4\ub5a4 \uac83\uc774 \ub108\ubb34 trivial \ud558\uace0 \uba85\ubc31\ud558\ub2e4\uba74 \uc8fc\uc11d\uc744 \ub2ec\uc9c0 \uc54a\uc544\ub3c4 \ub41c\ub2e4. Function Definitions \ud568\uc218\uac00 tricky \ud55c \ucf54\ub4dc\ub97c \uac16\uace0 \uc788\ub2e4\uba74 \ub2f9\uc2e0\uc774 \uc65c \uc774\ub7f0 \uc2dd\uc73c\ub85c \ucf54\ub4dc\ub97c \uad6c\ud604\ud588\ub294\uc9c0 \ubc18\ub4dc\uc2dc \uc8fc\uc11d\uc73c\ub85c \uc124\uba85\ud574\ub77c. .h \uc5d0 \uc774\ubbf8 \uc788\ub294 \uc8fc\uc11d\uc744 \ubc18\ubcf5\ud558\uc9c0 \ub9c8\ub77c. \uadf8\ub7ec\ub098 \uac04\ub2e8\ud558\uac8c \uc694\uc57d\ud558\ub294 \uc8fc\uc11d\uc740 \ud5c8\uc6a9\ub41c\ub2e4. Variable Comments \uc77c\ubc18\uc801\uc73c\ub85c \ubcc0\uc218\uc758 \uc774\ub984\ub9cc \ubd10\ub3c4 \ubcc0\uc218\uc5d0 \ub300\ud55c \uc544\uc774\ub514\uc5b4\uac00 \ucda9\ubd84\ud788 \uc774\ud574\ub420 \uc218 \uc788\ub3c4\ub85d \uc774\ub984\uc744 \uc9c0\uc5b4\uc57c \ud55c\ub2e4. \uadf8\ub7ec\ub098 \ubd84\uba85 \uc8fc\uc11d\uc774 \ud544\uc694\ud55c \uacbd\uc6b0\uac00 \uc788\ub294\ub370, \uc774 \uacbd\uc6b0 \ub2e4\uc74c\uacfc \uac19\uc774 \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. Class Data Members class \uc758 \uba64\ubc84 \ubcc0\uc218\uc758 \ubaa9\uc801\uc740 \ubc18\ub4dc\uc2dc \uba85\ud655\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370\ub3c4 \uc5b4\ub5a4 \ubcc0\uc218\uac00 \uadf8 \ud0c0\uc785\uacfc \uc774\ub984\uc73c\ub85c \uadf8 \ubaa9\uc801\uc774 \uba85\ud655\ud558\uac8c \uc804\ub2ec\ub418\uc9c0 \uc54a\uc744 \uac83 \uac19\uc73c\uba74 \ubc18\ub4dc\uc2dc \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. \ud558\uc9c0\ub9cc int num_events_; \ucc98\ub7fc \ud0c0\uc785\uacfc \uc774\ub984\uc73c\ub85c \uadf8 \ubaa9\uc801\uc774 \ucda9\ubd84\ud788 \uc124\uba85\ub41c\ub2e4\uba74 \uc8fc\uc11d\uc744 \ub2ec\uc9c0 \ub9c8\ub77c. Example \ub2e4\uc74c\uc758 \ubcc0\uc218\ub294 \ud0c0\uc785\uacfc \uc774\ub984\ub9cc\uc73c\ub85c \ubcc0\uc218\uc758 \ubaa9\uc801\uc774 \ucda9\ubd84\ud788 \uc124\uba85\ub418\uc9c0 \uc54a\uae30\uc5d0 \uc8fc\uc11d\uc744 \ub2ec\uc544\uc57c \ud55c\ub2e4. Do : private : // Used to bounds-check table accesses. -1 means // that we don't yet know how many entries the table has. int num_total_entries_ ; Global Variables \ubaa8\ub4e0 \uc804\uc5ed \ubcc0\uc218\uc5d0 \uadf8 \ubaa9\uc801\uc5d0 \ub300\ud55c \uc8fc\uc11d\uc744 \ubc18\ub4dc\uc2dc \ub2ec\uc544\ub77c. Example Do : // The total number of tests cases that we run through in this regression test. const int kNumTestCases = 6 ; Implementation Comments \uc2e4\uc81c \ucf54\ub4dc \ubd80\ubd84\uc5d0\uc11c tricky \ud558\uace0 \uadf8 \uc758\ubbf8\uac00 \uba85\ubc31\ud558\uc9c0 \uc54a\uace0 \uc911\uc694\ud55c \ubd80\ubd84\uc5d0 \ubc18\ub4dc\uc2dc \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. Example \ub2e4\uc74c\uc758 \ucf54\ub4dc\ub294 \ub9e4\uc6b0 tricky \ud558\ub2e4. \uadf8\ub7ec\ub2c8 \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. Do : // Divide result by two, taking into account that x // contains the carry from the add. for ( int i = 0 ; i < result -> size (); ++ i ) { x = ( x << 8 ) + ( * result )[ i ]; ( * result )[ i ] = x >> 1 ; x &= 1 ; } \uc5b4\ub5a4 \ucf54\ub4dc \ud55c \uc904\uc774 tricky \ud558\uace0 \uadf8 \uc758\ubbf8\uac00 \uba85\ubc31\ud558\uc9c0 \uc54a\ub2e4\uba74 \ub77c\uc778\uc758 \ub05d\uc5d0 \uacf5\ubc31 2 \uac1c \uc774\ud6c4\uc5d0 \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. Example \ub2e4\uc74c \ucf54\ub4dc\uc5d0\uc11c return; \uc740 \uadf8 \uc758\ubbf8\uac00 \uba85\ubc31\ud558\uc9c0 \uc54a\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \uacf5\ubc31 2 \uac1c\ub97c \ub744\uc6b0\uace0 \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. Do : // If we have enough memory, mmap the data portion too. mmap_budget = max < int64 > ( 0 , mmap_budget - index_ -> length ()); if ( mmap_budget >= data_size_ && ! MmapData ( mmap_chunk_bytes , mlock )) return ; // Error already logged. Function Argument Comments \ud568\uc218 \ud30c\ub77c\ubbf8\ud130\uc758 \uc758\ubbf8\uac00 \uba85\ubc31\ud558\uc9c0 \uc54a\uac8c \ub418\uc5c8\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud558\ub77c. \ud568\uc218 \ud30c\ub77c\ubbf8\ud130\uac00 \uc0c1\uc218 literal \uc774\uace0 \uadf8\uac83\uc774 \uc5ec\ub7ec\uad70\ub370\uc5d0\uc11c \uc4f0\uc600\ub2e4\uba74 \uadf8\uac83\uc744 constant \ubcc0\uc218\ub85c \uc120\uc5b8\ud558\uc5ec \uc774\ub984\uc744 \ubd80\uc5ec\ud558\ub77c. \uadf8\ub9ac\uace0 \uadf8 \ubcc0\uc218 \uc774\ub984\uc73c\ub85c\uc368 \uadf8 literal \uc758 \uc758\ubbf8\ub97c \uc124\uba85\ud574\ub77c. \ud568\uc218 \ud30c\ub77c\ubbf8\ud130\uc5d0 bool \ud0c0\uc785 \ubcc0\uc218\uac00 \uc788\ub2e4\uba74 \uadf8\uac83\uc744 enum \uc73c\ub85c \ubc14\uafd4\uc11c \uadf8 \uc774\ub984\uc73c\ub85c\uc368 \uadf8 \uc758\ubbf8\ub97c \uc124\uba85\ud574\ub77c. \ud568\uc218\uc758 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc774 \ud568\uc218 \uae30\ub2a5\uc5d0 \ub300\ud55c \uc635\uc158\uc744 \uc124\uc815\ud55c\ub2e4\uba74, \uadf8 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \ud55c \uad70\ub370\ub85c \ubaa8\uc544\uc11c class \ub098 struct \ub85c \ub9cc\ub4dc\ub294 \uac83\uc744 \uace0\ub824\ud574\ubd10\ub77c. \uadf8\ub7ec\uace0 \ub098\uc11c \ud30c\ub77c\ubbf8\ud130\ub85c \uac1d\uccb4 \ud558\ub098\ub9cc \uc804\ub2ec\ud574\ub77c. Why : \uac1d\uccb4\uc758 \uc774\ub984 \uc790\uccb4\ub85c \uadf8 \uc758\ubbf8\uac00 \ubd84\uba85\ud574\uc9c4\ub2e4. \uadf8\ub9ac\uace0 \ud568\uc218\uc758 \ud30c\ub77c\ubbf8\ud130\uac00 \uc904\uc5b4\ub4e4\uc5b4\uc11c \ud568\uc218\ub97c \uc77d\uac70\ub098 \uc4f8 \ub54c \uc88b\ub2e4. Example \ub2e4\uc74c\uc758 \ucf54\ub4dc\ub294 \uc5ec\ub7ec \ud30c\ub77c\ubbf8\ud130\uac00 \ud568\uc218\uc758 \uae30\ub2a5\uc744 \uc124\uc815\ud55c\ub2e4. Don't : // What are these arguments? const DecimalNumber product = CalculateProduct ( values , 7 , false , nullptr ); \uadf8\ub7ec\ub098 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774 \ubcc0\uc218\ub4e4\uc744 \ud558\ub098\ub85c \ubb36\uc740 class \ub610\ub294 struct \ub97c \uc815\uc758\ud574\uc11c \uadf8 \uac1d\uccb4 \ud558\ub098\ub9cc\uc744 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ub2ec\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\ub77c. Do : ProductOptions options ; options . set_precision_decimals ( 7 ); options . set_use_cache ( ProductOptions :: kDontUseCache ); const DecimalNumber product = CalculateProduct ( values , options , /*completion_callback=*/ nullptr ); Don'ts \uba85\ubc31\ud55c \uac83\uc5d0 \ub300\ud55c \uc8fc\uc11d\uc744 \ub2ec\uc9c0 \ub9c8\ub77c. \ucf54\ub4dc\uac00 \ubb34\uc5c7\uc744 \ud558\ub294\uc9c0 \ubb38\uc790 \uadf8\ub300\ub85c \uc124\uba85\ud558\uc9c0 \ub9c8\ub77c. C++ \uc744 \uc798 \uc544\ub294 \uc0ac\ub78c\uc774 \ubd24\uc744 \ub54c\uc5d0\ub3c4 \uba85\ubc31\ud558\uc9c0 \uc54a\uc740 \ucf54\ub4dc\uc5d0 \ub300\ud55c higher level \uc778 \uc124\uba85\uc744 \ud574\ub77c. \uc989, \uc774 \ucf54\ub4dc\uac00 \uc65c \ud544\uc694\ud558\uace0 \uc774 \ucf54\ub4dc\uac00 \ubb34\uc5c7\uc744 \ud558\ub294\uc9c0 \uc8fc\uc11d\uc73c\ub85c \uc124\uba85\ud574\ub77c. Example \ub2e4\uc74c\uc758 \ucf54\ub4dc\ucc98\ub7fc \ucf54\ub4dc\uac00 \ubb34\uc5c7\uc744 \ud558\ub294 \uc77c\uc744 \ubb38\uc790 \uadf8\ub300\ub85c \uc124\uba85\ud558\uc9c0 \ub9c8\ub77c. Don't : // Find the element in the vector. <-- Bad: obvious! auto iter = std :: find ( v . begin (), v . end (), element ); if ( iter != v . end ()) { Process ( element ); } \ub2e4\uc74c \ucf54\ub4dc\ucc98\ub7fc higher level \uc758 \uc124\uba85\uc744 \ud574\ub77c. Do : // Process \"element\" unless it was already processed. auto iter = std :: find ( v . begin (), v . end (), element ); if ( iter != v . end ()) { Process ( element ); } \uadf8\ub7ec\ub098 \ub2e4\uc2dc \ub9d0\ud558\uc9c0\ub9cc, \uac00\uc7a5 \uc88b\uc740 \uc8fc\uc11d\uc740 \ucf54\ub4dc \uadf8 \uc790\uccb4\ub85c \uc124\uba85\uc774 \ub418\ub294 \ucf54\ub4dc\uc774\ub2e4. \uc704\uc758 \uc608\uc2dc\uc758 \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc \uadf8 \uc790\uccb4\ub85c \uc124\uba85\uc774 \ub418\ub294 \ucf54\ub4dc\ub85c \ubc14\uafc0 \uc218 \uc788\ub2e4. \uc774\uac83\uc774 \uac00\uc7a5 \uc88b\uc740 \ucf54\ub4dc\uc774\uace0 \uac00\uc7a5 \uc88b\uc740 \uc8fc\uc11d\uc774\ub2e4. Do : if ( ! IsAlreadyProcessed ( element )) { Process ( element ); } Punctuation, Spelling, and Grammar \ubb38\ubc95\uacfc \uc2a4\ud3a0\ub9c1\uc744 \ud2c0\ub9ac\uc9c0 \uc54a\ub3c4\ub85d \ud574\ub77c. Tip VSCode \uc758 \uc2a4\ud3a0\ub9c1 \uccb4\ud06c \ud655\uc7a5 \uc744 \uc4f0\uba74 \ub429\ub2c8\ub2e4. TODO Comments (\uc77c\ub2e8 pass) Formatting \u00b6 \uac1c\ubc1c\uc790\uc5d0\uac8c \ucf54\ub4dc \ud615\uc2dd\uc758 \uc790\uc720\ub97c \uc8fc\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ud504\ub85c\uc81d\ud2b8\uc758 \ucf54\ub4dc \ud615\uc2dd\uc744 \uc77c\uad00\ub418\uac8c \ud1b5\uc77c\ud558\ub294 \uac83\uc740 \ub9e4\uc6b0 \uc911\uc694\ud558\ub2e4. \uc774\ub85c\uc368 \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc774 \ucf54\ub4dc\ub97c \uc27d\uac8c \uc774\ud574\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \ucf54\ub4dc \ud3ec\ub9f7\ud305\uc744 \uc790\ub3d9\uc73c\ub85c \ud560 \uc218 \uc788\uac8c \ud558\uae30 \uc704\ud558\uc5ec emacs setting file \uc744 \ub9cc\ub4e4\uc5b4 \ub480\ub2e4. Line Length \ubaa8\ub4e0 \ucf54\ub4dc\uc758 \ub77c\uc778\uc740 80 \ubb38\uc790\ub97c \ub118\uc73c\uba74 \uc548\ub41c\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\uc74c\uc758 \uc608\uc678 \uc0c1\ud669\uc5d0\uc11c\ub294 \uc9c0\ud0a4\uc9c0 \uc54a\uc544\ub3c4 \ub41c\ub2e4. \uc8fc\uc11d\uc744 \ub2e4\uc74c \ub77c\uc778\uc73c\ub85c \ub118\uacbc\uc744 \ub54c \uac00\ub3c5\uc131\uc774 \ub5a8\uc5b4\uc9c4\ub2e4. raw-string \uc774 80 \ubb38\uc790\ub97c \ub118\uacbc\ub2e4. include \ud5e4\ub354 \uc120\uc5b8. \ud5e4\ub354 \uac00\ub4dc. using \ubb38\uc744 \uc0ac\uc6a9\ud560 \ub54c. Non-ASCII Characters Non-ASCII \ubb38\uc790\ub97c \uc0ac\uc6a9\ud560 \ub54c \ubc18\ub4dc\uc2dc UTF-8 \uc744 \uc0ac\uc6a9\ud574\ub77c. Spaces vs. Tabs \ud0ed\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uace0 \uacf5\ubc31\uc744 \uc0ac\uc6a9\ud558\uc5ec indentation \uc744 \ud574\ub77c. \uacf5\ubc31 2 \uac1c\ub97c \uc0ac\uc6a9\ud558\uc5ec indent \ud574\ub77c. Example \ub2e4\uc74c\uacfc \uac19\uc774 \uacf5\ubc31 2 \uac1c\ub97c \uc0ac\uc6a9\ud558\uc5ec indent \ud574\ub77c. Do : ReturnType ClassName :: FunctionName ( Type par_name1 , Type par_name2 ) { DoSomething (); ... } \ub2e4\uc74c\uc758 \ucf54\ub4dc\ub294 Tab \ub610\ub294 \uacf5\ubc31 4 \uac1c\ub97c \uc0ac\uc6a9\ud558\uc5ec indent \ud588\ub2e4. \uc774\ub807\uac8c \ud558\uc9c0 \ub9c8\ub77c. Don't : ReturnType ClassName :: FunctionName ( Type par_name1 , Type par_name2 ) { DoSomething (); ... } Info VSCode \uc5d0\uc11c Tab \uc744 \ub20c\ub800\uc744 \ub54c \uacf5\ubc31 2 \uac1c\uac00 \uc0dd\uae30\ub3c4\ub85d \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Function Declarations and Definitions \ud568\uc218\uc758 \uc120\uc5b8\uc5d0 \ubc18\ud658\ud615, \ud568\uc218 \uc774\ub984, \ud30c\ub77c\ubbf8\ud130\ub97c \uac19\uc740 \ub77c\uc778\uc5d0 \ub450\uc5b4\ub77c. Example Do : ReturnType ClassName :: FunctionName ( Type par_name1 , Type par_name2 ) { DoSomething (); ... } \ud55c \uc904\ub85c \ud568\uc218 \uc120\uc5b8\uc744 \ub2e4 \ud560 \uc218 \uc5c6\ub2e4\uba74 \ud30c\ub77c\ubbf8\ud130\ub97c \ub2e4\uc74c \ub77c\uc778\uc73c\ub85c \ub0b4\ub9ac\uace0 \uccab\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 indentation \uc5d0 \ub9de\ucdb0\ub77c. Example Do : ReturnType ClassName :: ReallyLongFunctionName ( Type par_name1 , Type par_name2 , Type par_name3 ) { DoSomething (); ... } \uccab\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc870\ucc28 \ud568\uc218 \uc120\uc5b8\uc5d0 \ub458 \uc218 \uc5c6\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uacf5\ubc31 4 \uac1c\ub85c \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 indent \ud574\ub77c. Example Do : ReturnType LongClassName :: ReallyReallyReallyLongFunctionName ( Type par_name1 , // 4 space indent Type par_name2 , Type par_name3 ) { DoSomething (); // 2 space indent ... } Lambda Expressions \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc740 \ud568\uc218\uc758 \ud3ec\ub9f7\ud305\uacfc \uac19\uc774 \ud3ec\ub9f7\ud305\ud574\ub77c. \uc774\ub54c capture \ub97c \ud45c\ud604\ud558\ub294 [] \uc5d0\ub294 \uacf5\ubc31\uc744 \ub0a8\uae30\uc9c0 \ub9c8\ub77c. Example Do : int x = 0 ; auto x_plus_n = [ & x ]( int n ) -> int { return x + n ; } \ud568\uc218\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \ub4e4\uc5b4\uac04 \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc740 \ud568\uc218 \ud30c\ub77c\ubbf8\ud130 \ud3ec\ub9f7\ud305\uacfc \uac19\uc774 \ud3ec\ub9f7\ud305\ud574\ub77c. Example Do : std :: set < int > blacklist = { 7 , 8 , 9 }; std :: vector < int > digits = { 3 , 9 , 1 , 8 , 4 , 7 , 1 }; digits . erase ( std :: remove_if ( digits . begin (), digits . end (), [ & blacklist ]( int i ) { return blacklist . find ( i ) != blacklist . end (); }), digits . end ()); Floating-point Literals \ubd80\ub3d9\uc18c\uc218\uc810 \ubcc0\uc218\ub294 \ubc18\ub4dc\uc2dc \uba85\ud655\ud55c \uc18c\uc218\uc810\uc744 \ubd80\uc5ec\ud574\ub77c. Example C++ \uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc18c\uc218\uc810\uc744 \uc0dd\ub7b5\ud574\ub3c4 \ub41c\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub807\uac8c \ud558\uc9c0 \ub9c8\ub77c. Don't : float f = 1.f ; long double ld = -.5L ; double d = 1248e6 ; \ub2e4\uc74c\uacfc \uac19\uc774 \uc18c\uc218\uc810\uc744 \uba85\ud655\ud558\uac8c \ud45c\uc2dc\ud558\ub77c. Do : float f = 1.0f ; float f2 = 1 ; // Also OK long double ld = -0.5L ; double d = 1248.0e6 ; Function Calls \ud568\uc218 \ud638\ucd9c\uc740 \ud558\ub098\uc758 \ub77c\uc778\uc5d0 \ud558\ub77c. Example Do : bool result = DoSomething ( argument1 , argument2 , argument3 ); \ud558\uc9c0\ub9cc 80 \ubb38\uc790\ub97c \ub118\uc5b4\uac04\ub2e4\uba74 \ud30c\ub77c\ubbf8\ud130\ub97c \ub2e4\uc74c \ub77c\uc778\uc73c\ub85c \ub0b4\ub9ac\uace0 \uccab\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\uc758 indentation \uc5d0 \ub9de\ucdb0\ub77c. Example Do : bool result = DoSomething ( averyveryveryverylongargument1 , argument2 , argument3 ); \uccab\ubc88\uc9f8 \ud30c\ub77c\ubbf8\ud130\ub3c4 \ud55c \uc904\uc5d0 \ud45c\ud604\ud560 \uc218 \uc5c6\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uacf5\ubc31 4 \uac1c\ub85c \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 indent \ud574\ub77c. Example Do : bool result = DoSomething ( argument1 , argument2 , // 4 space indent argument3 , argument4 ); \uc5b4\ub5a4 \ubcc0\uc218\uc758 \uc758\ubbf8\uac00 \uba85\ubc31\ud558\uc9c0 \uc54a\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc0c8\ub85c\uc6b4 \ubcc0\uc218\uc5d0 \uc800\uc7a5\ud558\uc5ec \uadf8 \uc758\ubbf8\ub97c \ubcc0\uc218 \uc774\ub984\uc73c\ub85c \ubcf4\uc5ec\uc918\ub77c. Example Do : int my_heuristic = scores [ x ] * y + bases [ x ]; bool result = DoSomething ( my_heuristic , x , y , z ); \ubcc0\uc218\uc758 \uad6c\uc870\uac00 \uc758\ubbf8\uc5d0 \uc601\ud5a5\uc744 \uc900\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\uc870\ub97c \ud45c\ud604\ud560 \uc218 \uc788\ub3c4\ub85d \uc790\uc720\ub86d\uac8c \ud3ec\ub9f7\ud305\uc744 \ud574\ub77c. Example Do : // Transform the widget by a 3x3 matrix. my_widget . Transform ( x1 , x2 , x3 , y1 , y2 , y3 , z1 , z2 , z3 ); Braced Initializer List Format (\uc77c\ub2e8 pass) Conditionals if-else \ubb38\uc744 \uc0ac\uc6a9\ud560 \ub54c if \ubb38 \ub2e4\uc74c\uc5d0 \uacf5\ubc31\uc744 \ud558\ub098 \ub46c\ub77c. else \ubb38\uc740 { \uc640 \uac19\uc740 \ub77c\uc778\uc5d0 \uc368\ub77c. Example Do : if ( condition ) { // no spaces inside parentheses ... // 2 space indent. } else if (...) { // The else goes on the same line as the closing brace. ... } else { ... } \uc870\uac74\uc744 \ud45c\ud604\ud558\ub294 (...) \uc5d0 \uacf5\ubc31\uc744 \ub450\uc9c0 \ub9c8\ub77c. Example Do : if ( condition ) { // Good - proper space after IF and before {. Don't : if ( condition ) { // Bad - space missing after IF. if ( condition ) { // Bad - space between the parentheses and the condition if ( condition ){ // Bad - space missing before {. if ( condition ){ // Doubly bad. \uc870\uac74\ubb38\uc774 \ub9e4\uc6b0 \uac04\ub2e8\ud558\uace0 else \ub97c \uc4f0\uc9c0 \uc54a\uc744 \ub54c\uc5d0\ub9cc \uc870\uac74\ubb38\uc744 \ud55c\uc904\uc5d0 \uc368\ub77c. Example Do : if ( x == kFoo ) return new Foo (); if ( x == kBar ) return new Bar (); \ub2e4\uc74c\uc758 \uc870\uac74\ubb38\uc740 else \uac00 \uc788\uc73c\ubbc0\ub85c \ud55c\uc904\ub85c \uc4f0\uba74 \uc548\ub41c\ub2e4. Don't : // Not allowed - IF statement on one line when there is an ELSE clause if ( x ) DoThis (); else DoThat (); \uc870\uac74\ubb38\uc758 \ucf54\ub4dc\uac00 1 \uc904\uc774\ub77c\uba74 \uc911\uad04\ud638 { ... } \ub97c \uc4f0\uc9c0 \uc54a\uc544\ub3c4 \ub41c\ub2e4. \ud558\uc9c0\ub9cc \uc5b4\ub5a4 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uc911\uad04\ud638\ub97c \uc4f0\uae30\ub85c \uc57d\uc18d\ud588\ub2e4\uba74 \uadf8\uac83\uc744 \uc9c0\ucf1c\ub77c. Example \ub2e4\uc74c \ub450 \ud615\ud0dc \ubaa8\ub450 \uac00\ub2a5\ud558\ub2e4. Do : if ( condition ) DoSomething (); // 2 space indent. if ( condition ) { DoSomething (); // 2 space indent. } \ud558\uc9c0\ub9cc if-else \uc911 \uc5b4\ub290 \ud558\ub098\ub77c\ub3c4 \uc911\uad04\ud638\ub97c \uc4f0\uba74 \ubaa8\ub450 \uc911\uad04\ud638\ub97c \ubd99\ud600\ub77c. Example Don't : // Not allowed - curly on IF but not ELSE if ( condition ) { foo ; } else bar ; // Not allowed - curly on ELSE but not IF if ( condition ) foo ; else { bar ; } Do : // Curly braces around both IF and ELSE required because // one of the clauses used braces. if ( condition ) { foo ; } else { bar ; } Loops and Switch Statements switch \ubb38\uc758 case \ub4e4\uc740 \uacf5\ubc31 2 \uac1c\ub85c indent \ud558\uace0 \ubaa8\ub450 \uc911\uad04\ud638\ub85c \ubb36\uc5b4\ub77c. case \uc758 \ucf54\ub4dc\ub294 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uacf5\ubc31 2 \uac1c\ub85c indent \ud558\uba74 \ub41c\ub2e4. switch-case \uc5d0\ub294 \ubc18\ub4dc\uc2dc default \ub97c \ub46c\ub77c. \ub9cc\uc57d default \uac00 \uc808\ub300\ub85c \uc874\uc7ac\ud574\uc11c\ub294 \uc548\ub41c\ub2e4\uba74 assert(false) \ub4f1\uc73c\ub85c \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\ub77c. Example Do : switch ( var ) { case 0 : { // 2 space indent ... // 4 space indent break ; } case 1 : { ... break ; } default : { assert ( false ); } } Pointer and Reference Expressions Boolean Expressions Return Values Variable and Array Initialization Preprocessor Directives Class Format Constructor Initializer Lists Namespace Formatting Horizontal Whitespace General Loops and Conditionals Operators Templates and Casts Vertical Whitespace Exceptions to the Rules \u00b6 Existing Non-conformant Code Windows Code Parting Words \u00b6 \ucd1d\ud3c9 \u00b6 Google C++ Style Guide \ub294 \ucf54\ub529 \uacbd\ud5d8\uc774 \ubd80\uc871\ud55c \uc6b0\ub9ac\uc5d0\uac8c \uc804 \uc138\uacc4 1\ud2f0\uc5b4 \uac1c\ubc1c\uc790\ub4e4\uc758 \uacbd\ud5d8\uc744 \ud761\uc218\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\uc5c8\ub2e4. \ub2e4\ub978 \uc5b8\uc5b4 \uac1c\ubc1c\uc790\ub3c4 \ud55c\ubc88\ucbe4 \uc77d\uc5b4\uc11c \uad6c\uae00 \uac1c\ubc1c\uc790\ub4e4\uc758 \uacbd\ud5d8\uc801 \uc0b0\ubb3c\uc744 \ubc30\uc6cc\uac08\ub9cc\ud55c \uc815\ub9d0 \uc88b\uc740 \uac00\uc774\ub4dc\uc774\ub2e4. \uc6b0\ub9ac\ub294 \uace7\ubc14\ub85c WICWIU \uc5d0 Google C++ Style Guide \ub97c \uc801\uc6a9\uc2dc\ud0a4\uace0 \uc2f6\ub2e4. \ud558\uc9c0\ub9cc Google C++ Style Guide \ub294 \uc774\ubbf8 \uc5b8\uae09\ud588\ub4ef\uc774 \ub108\ubb34 \ub2e8\uc21c\ud558\uace0 \ub2f9\uc5f0\ud574\uc11c \uad73\uc774 \uc5b8\uae09\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\ub294 \ucf54\ub529 \ucee8\ubca4\uc158\uc740 \uc815\ub9d0\ub85c \uc5b8\uae09\ud558\uc9c0 \uc54a\uc558\ub2e4. \uac00\ub839 goto \ubb38\uc774 \ub9e4\uc6b0 \uc548\uc88b\uc740 \ucf54\ub4dc\ub77c\ub294 \uac83\uc740 \ub110\ub9ac \uc54c\ub824\uc838 \uc788\uc73c\ubbc0\ub85c \uc5b8\uae09\ud558\uc9c0 \uc54a\uc558\ub2e4. \ud558\uc9c0\ub9cc goto \ubb38\uc744 \uc4f0\uc9c0 \ub9d0\ub77c\ub294 \uaddc\uce59\uc744 \uba85\uc2dc\ud574\ub450\uc5b4\uc57c \ud560 \uc815\ub3c4\ub85c \uc6b0\ub9ac \ud559\ubd80\uc0dd\ub4e4\uc740 \ucf54\ub529 \uacbd\ud5d8\uc774 \uadf9\ud788 \ubd80\uc871\ud558\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc18c\ud558\uace0 \ubd88\ud544\uc694\ud574 \ubcf4\uc5ec\ub3c4 \uc548\uc88b\uc740 \ucf54\ub4dc\ub97c \uc548\uc88b\uc740 \ucf54\ub4dc\ub77c\uace0 \uc54c\ub9ac\uae30 \uc704\ud558\uc5ec \uba87 \uac00\uc9c0 \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \ucd94\uac00\ud560 \ud544\uc694\uac00 \uc788\ub2e4. \ubcc0\uc218\ub97c \uc120\uc5b8\ud560 \ub54c \ubaa8\ub4e0 \ubcc0\uc218\ub97c mutable \ub85c \ud558\uace0 \uc608\uc678\uc801\uc73c\ub85c immutable \ub85c \uc120\uc5b8\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \ubaa8\ub4e0 \ubcc0\uc218\ub97c immutable \ub85c \uc120\uc5b8\ud558\uace0 \uc608\uc678\uc801\uc73c\ub85c mutable \ub85c \uc120\uc5b8\ud574\ub77c. \ud568\uc218\uc640 \uba54\uc18c\ub4dc\ub97c \uc120\uc5b8\ud560 \ub54c \ubaa8\ub4e0 \ud568\uc218\ub97c non-const \ub85c \uc120\uc5b8\ud558\uace0 \uc608\uc678\uc801\uc73c\ub85c const \ub97c \uc120\uc5b8\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ubaa8\ub4e0 \ud568\uc218\ub97c const \ub85c \uc120\uc5b8\ud558\uace0 \uc608\uc678\uc801\uc73c\ub85c non-const \ub97c \uc120\uc5b8\ud574\ub77c. \ud074\ub798\uc2a4\ub97c \uc120\uc5b8\ud560 \ub54c \ubaa8\ub4e0 \uba64\ubc84 \ubcc0\uc218\ub97c public \uc73c\ub85c \uc120\uc5b8\ud558\uace0 \uc608\uc678\uc801\uc73c\ub85c private \uc73c\ub85c \uc120\uc5b8\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ubaa8\ub4e0 \uac83\uc744 private \uc73c\ub85c \uc120\uc5b8\ud558\uace0 \uc608\uc678\uc801\uc73c\ub85c public \uc73c\ub85c \uc120\uc5b8\ud574\ub77c. \ucd94\uc0c1 \ud074\ub798\uc2a4\uc758 \ucd94\uc0c1 \uba54\uc18c\ub4dc\ub77c\uba74 = 0; \ub610\ub294 = delete; \ub610\ub294 = default; \ub85c\uc368 \ud074\ub798\uc2a4\ub97c \uc0dd\uc131 \ubd88\uac00\ub2a5\ud558\uac8c \ub9cc\ub4e4\uc5b4\ub77c. \ud558\ub098\uc758 \ud568\uc218\ub294 \ud558\ub098\uc758 \uae30\ub2a5\ub9cc \ud574\uc57c \ud55c\ub2e4. \ub9e4\uc9c1 \ub118\ubc84\ub97c \uc0ac\uc6a9\ud558\uba74 \uc548\ub41c\ub2e4. 0 \uc774\ub098 1 \uae4c\uc9c0\ub294 \ud5c8\uc6a9\ud55c\ub2e4. \ubb3c\ub860 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uc5d0\uc11c\ub294 \ub9e4\uc9c1 \ub118\ubc84\ub97c \uc0ac\uc6a9\ud574\ub3c4 \uc88b\ub2e4.","title":"(ABANDONED)Google C++ Style Guide"},{"location":"sync/convention/googlestyleguide/#bazel","text":"bazel \uc740 C++ , Java , Android , iOS , Go \ub4f1\uc758 \uc18c\ud504\ud2b8\uc6e8\uc5b4\uc758 \ube4c\ub4dc \ubc0f \ud14c\uc2a4\ud2b8\ub97c \uc790\ub3d9\ud654\uc2dc\ucf1c\uc8fc\ub294 \ud234\uc774\ub2e4.","title":"Bazel"},{"location":"sync/convention/googlestyleguide/#why-bazel","text":"bazel \uc740 Make , Ant , Gradle \ub4f1\uc758 \ud234\uacfc \ube44\uc2b7\ud558\ub2e4. \ud558\uc9c0\ub9cc bazel \uc740 \ub2e4\uc74c\uc758 \uc774\uc720 \ub54c\ubb38\uc5d0 \ud2b9\ubcc4\ud558\ub2e4. bazel \uc740 Google \uc758 \ube4c\ub4dc \uc2dc\uc2a4\ud15c\uc774\ub2e4. bazel \uc758 \ube4c\ub4dc \uba85\ub839\uc5b4\ub294 \ub9e4\uc6b0 \uc27d\uace0 \uac04\ub2e8\ud558\uace0 \uace0\uc218\uc900\uc774\ub2e4. \uac00\ub839 Make \ub85c \ube4c\ub4dc\ud558\uae30 \uc704\ud558\uc5ec Makefile \uc744 \ub9cc\ub4e4\uba74 \ubaa8\ub4e0 \ud30c\uc77c\uc744 \uc77c\uc77c\uc774 \ucef4\ud30c\uc77c\ub7ec\uc5d0\uac8c \uba85\uc2dc\ud574\uc8fc\uc5b4\uc57c\ub9cc \ud574\uc11c \ub108\ubb34 \uc5b4\ub835\ub2e4. \ub611\uac19\uc740 \ube4c\ub4dc \ud30c\uc77c\ub85c \uc5ec\ub7ec \ud50c\ub7ab\ud3fc\uacfc \uc544\ud0a4\ud14d\ucc98\ub85c \ucef4\ud30c\uc77c \ud560 \uc218 \uc788\ub2e4. Google \uc740 \uc2e4\uc81c\ub85c \ub370\uc774\ud130\uc13c\ud130 \uc11c\ubc84\uc5d0\uc11c \uc2e4\ud589\ub420 \uac70\ub300\ud55c \ud504\ub85c\uadf8\ub7a8\ubd80\ud130 \ud578\ub4dc\ud3f0\uc5d0\uc11c \uc2e4\ud589\ub420 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uae4c\uc9c0 \ubaa8\ub450 \ub2e4 bazel \uc744 \uc0ac\uc6a9\ud558\uc5ec \ucef4\ud30c\uc77c\ud55c\ub2e4. bazel \uc740 \ube4c\ub4dc \ud30c\uc77c\uc744 \ubd84\uc11d\ud574\uc11c \ub2e4\uc2dc \ucef4\ud30c\uc77c\ud574\uc57c\ud558\ub294 \ubd80\ubd84\ub9cc \ucef4\ud30c\uc77c\ud55c\ub2e4. Note Flutter \ub85c \uac1c\ubc1c \ud574\ubcf4\uc2e0 \ubd84\ub4e4\uc740 \uc218\uc815\ub41c \ucf54\ub4dc\ub9cc \ud0d0\uc9c0\ud574\uc11c \ube60\ub974\uac8c \ub9ac\ube4c\ub529\ud558\ub294 Hot reload \uae30\ub2a5\uc774 \ub5a0\uc624\ub974\uc2e4 \uac81\ub2c8\ub2e4. \uadf8\uac83\uc744 C++ \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub3c4 \ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc774\uc9c0\uc694. bazel \uc740 \ub9e4\uc6b0 \ud070 \ud504\ub85c\uadf8\ub7a8\ub3c4 \ub9e4\uc6b0 \ube60\ub974\uac8c \ube4c\ub4dc\ud55c\ub2e4. \uac00\ub839 \uc6b0\ub9ac Google \uc5d0\uc11c\ub294 \uc11c\ubc84\uc5d0\uc11c \uc2e4\ud589\ub420 \uc18c\uc2a4\ud30c\uc77c\ub9cc 10 \ub9cc\uac1c \uc815\ub3c4\uc778 \ud504\ub85c\uc81d\ud2b8\uac00 \uc788\ub294\ub370 \ud30c\uc77c\uc774 \ubcc0\uacbd\ub418\uc9c0 \uc54a\uc73c\uba74 \ube4c\ub4dc \uc2dc\uac04\uc774 \ub2e8\uc9c0 0.2 \ucd08\ubc16\uc5d0 \uc548\uac78\ub9b0\ub2e4. bazel \uc740 Linux, macOS, Windows \uc5d0\uc11c \uc2e4\ud589\uac00\ub2a5\ud558\uace0 \uc190\uc27d\uac8c cross-compile \uc744 \ud560 \uc218 \uc788\ub2e4. bazel \uc774 crash \uac00 \uac70\uc758 \ub098\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc6b0\ub9ac Google \uc774 \ubcf4\uc99d\ud55c\ub2e4. \uc6b0\ub9ac\ub3c4 bazel \ub85c Google \uc758 \ud504\ub85c\uc81d\ud2b8\ub97c \uad00\ub9ac\ud558\uace0 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc6b0\ub9ac Google \uc740 \uc65c \ub2e4\ub978 \ube4c\ub4dc \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\uac00? Make , Ninja : \uc774 \ud234\ub4e4\uc740 \ud0c0\uac9f\uc5d0 \ub300\ud55c \ub9e4\uc6b0 \uc815\ud655\ud55c \uba85\ub839\uc744 \uc81c\uacf5\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uadf8\uac83\uc744 \uc62c\ubc14\ub974\uac8c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc804\uc801\uc73c\ub85c \uac1c\ubc1c\uc790\uc758 \ubaab\uc774\ub2e4. \ubc18\uba74 bazel \uc758 \uc720\uc800 \uc778\ud130\ud398\uc774\uc2a4\ub294 \ub9e4\uc6b0 \uace0\uc218\uc900\uc774\ub2e4. Ant , Maven : \uc774\ub4e4\uc740 Java \ub9cc \uc9c0\uc6d0\ud558\ub294 \ubc18\uba74 bazel \uc740 \ub2e4\uc591\ud55c \uc5b8\uc5b4\ub97c \ubaa8\ub450 \ub2e4 \uc9c0\uc6d0\ud55c\ub2e4. Gradle : bazel \uc758 \ube4c\ub4dc \ud30c\uc77c\uc740 Gradle \ubcf4\ub2e4 \uad6c\uc870\ud654\ub418\uc5b4 \uc788\uc5b4\uc11c \ub354 \uc774\ud574\ud558\uae30 \uc27d\uace0 \uc7ac\uc0ac\uc6a9\ud558\uae30 \uc27d\ub2e4. \uc6b0\ub9ac Google \ub3c4 \uc6d0\ub798 Makefile \uc744 \uc0ac\uc6a9\ud574\uc654\ub2e4. \uadf8\ub7f0\ub370 \uc18c\ud504\ud2b8\uc6e8\uc5b4\uc758 \uaddc\ubaa8\uac00 \ucee4\uc9c0\uba74 \ucee4\uc9c8\uc218\ub85d Makefile \uc740 \ube4c\ub4dc \uc18d\ub3c4\ub97c \ub290\ub9ac\uac8c\ud588\ub2e4. \uadf8\ub9ac\uace0 Makefile \uc758 \ube4c\ub4dc\ub97c \uc2e0\ub8b0\ud560 \uc218\ub3c4 \uc5c6\uc5c8\ub2e4. \uacb0\uacfc\uc801\uc73c\ub85c Makefile \uc740 Google \uac1c\ubc1c\uc790\ub4e4\uc758 \uc0dd\uc0b0\uc131\uc5d0 \uc9c1\uaca9\ud0c0\ub97c \ub0a0\ub838\uace0 \uc6b0\ub9ac Google \uc758 \uae30\uc5c5\uc801\uc778 \ubbfc\ucca9\uc131\uc5d0\ub3c4 \uc601\ud5a5\uc744 \ubbf8\ucce4\ub2e4. bazel \uc740 \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud588\ub2e4. bazel \uc740 \ucc98\uc74c\uc5d0\ub294 Google \ub0b4\ubd80\uc758 \uc11c\ubc84 \ud504\ub85c\uadf8\ub7a8 \uac1c\ubc1c \ub3c4\uad6c\uc600\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc720\uc6a9\uc131\uc774 \uc785\uc99d\ub418\uc5b4 \uacc4\uc18d \ud655\uc7a5\ub418\uc5c8\ub2e4. \uadf8 \uacb0\uacfc \uc9c0\uae08\uc740 \uc2ec\uc9c0\uc5b4 \ud578\ub4dc\ud3f0 \uc5b4\ud50c\uc744 \uc704\ud55c iOS \uc640 Android \ube4c\ub4dc\uc5d0\ub3c4 \uc4f8 \uc218 \uc788\ub2e4. bazel \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \ube5b\uc744 \ubc1c\ud55c\ub2e4. \ub9e4\uc6b0 \ud070 \ud504\ub85c\uc81d\ud2b8. \uc5ec\ub7ec \uc5b8\uc5b4\ub85c \uc791\uc131\ub41c \ud504\ub85c\uc81d\ud2b8. \uc5ec\ub7ec \ud50c\ub7ab\ud3fc\uc5d0 \ubc30\ud3ec\ub418\uc5b4\uc57c \ud558\ub294 \ud504\ub85c\uc81d\ud2b8. \uc218\ub9ce\uc740 \ud14c\uc2a4\ud2b8\ub97c \ud574\uc57c \ud558\ub294 \ud504\ub85c\uc81d\ud2b8. Note \ubaa8\ub450 WICWIU \uc5d0 \uc720\uc6a9\ud55c \uae30\ub2a5\ub4e4 \uac19\ub124\uc694. \ubaa8\ub4e0 Google \ud504\ub85c\uc81d\ud2b8\uac00 bazel \ub85c \ube4c\ub4dc\ub418\uae30 \ub54c\ubb38\uc5d0 TensorFlow \ub3c4 bazel \ub85c \ube4c\ub4dc\ub429\ub2c8\ub2e4. \uc2ec\uc9c0\uc5b4 \uc6b0\ub9ac \uc5f0\uad6c\uc2e4\uc774 \uc88b\uc544\ud558\ub294 PyTorch \ub3c4 bazel \ub85c \ube4c\ub4dc\ub418\ub354\uad70\uc694. https://github.com/pytorch/pytorch/blob/master/BUILD.bazel \ub97c \ubcf4\uc138\uc694.","title":"Why Bazel?"},{"location":"sync/convention/googlestyleguide/#installation","text":"\uadf8\ub7ec\uba74 bazel \uc744 \uc27d\uac8c \ubc30\uc6b8 \uc218 \uc788\ub3c4\ub85d bazel \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0\uc11c \uac00\ubccd\uac8c \ubc30\uc6cc\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc758 \uba85\ub839\uc5b4\ub85c bazel \uc758 \uc2e4\ud589\ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uace0 bazel \uc744 \uba85\ub839\uc5b4 bazel \ub85c \uc2e4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \ud658\uacbd\ubcc0\uc218\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4. $ wget https://github.com/bazelbuild/bazel/releases/download/3.4.1/bazel-3.4.1-linux-x86_64 $ mkdir ~/bin $ mv bazel-3.4.1-linux-x86_64 ~/bin/bazel $ chmod +x ~/bin/bazel bash \uc258 \uc0ac\uc6a9\uc790 \uadf8\ub9ac\uace0 export PATH=\"$PATH:$HOME/bin\" \ub97c .bashrc \uc5d0 \ucd94\uac00\ud574\uc8fc\uc138\uc694. \ub2e4\uc74c\uc758 \uba85\ub839\uc5b4\ub85c \uac04\ub2e8\ud558\uac8c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. $ echo export PATH = \"\\$PATH:\\$HOME/bin\" >> ~/.bashrc \uadf8\ub9ac\uace0 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \ud1b5\ud574 rc \ud30c\uc77c\uc744 \uc258\uc5d0 \uc801\uc6a9\ud574\uc8fc\uac70\ub098 \uc258\uc744 \ub2e4\uc2dc \uc2dc\uc791\ud558\uc138\uc694. $ source ~/.bashrc zsh \uc258 \uc0ac\uc6a9\uc790 \uadf8\ub9ac\uace0 export PATH=\"$PATH:$HOME/bin\" \ub97c .zshrc \uc5d0 \ucd94\uac00\ud574\uc8fc\uc138\uc694. \ub2e4\uc74c\uc758 \uba85\ub839\uc5b4\ub85c \uac04\ub2e8\ud558\uac8c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. $ echo export PATH = \"\\$PATH:\\$HOME/bin\" >> ~/.zshrc \uadf8\ub9ac\uace0 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \ud1b5\ud574 rc \ud30c\uc77c\uc744 \uc258\uc5d0 \uc801\uc6a9\ud574\uc8fc\uac70\ub098 \uc258\uc744 \ub2e4\uc2dc \uc2dc\uc791\ud558\uc138\uc694. $ source ~/.zshrc \uc774\uc81c bazel \uc744 \uc2dc\ud5d8\uc0bc\uc544 \uc2e4\ud589\ud574\ubcf4\uc138\uc694. $ bazel","title":"Installation"},{"location":"sync/convention/googlestyleguide/#tutorial","text":"\ub2e4\uc74c\uc758 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ud1b5\ud558\uc5ec bazel \uc758 \uae30\ubcf8\uc801\uc778 \uc0ac\uc6a9\ubc95\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. Bazel C++ Simple Tutorial Bazel C++ Common Use Cases \uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ub9c8\ucce4\ub2e4\uba74 \ub2e4\uc74c\uc758 bazel \uc0ac\uc6a9\ubc95\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. bazel \ub85c \ud504\ub85c\uc81d\ud2b8\ub97c \ube4c\ub4dc\ud558\ub824\uba74 workspace \ub97c \uc124\uc815\ud574\uc57c \ud55c\ub2e4. workspace \ub780 \ud504\ub85c\uc81d\ud2b8\uc758 \uc18c\uc2a4\ud30c\uc77c\uacfc bazel \uc758 \ube4c\ub4dc\ub97c \uc800\uc7a5\ud558\ub294 \ub514\ub809\ud1a0\ub9ac\uc774\ub2e4. workspace \ub294 WORKSPACE \ud30c\uc77c\uc744 \uac16\uace0 \uc788\uc5b4\uc57c \ud558\uace0, \ud558\ub098 \uc774\uc0c1\uc758 BUILD \ud30c\uc77c\uc744 \uac16\uace0 \uc788\uc5b4\uc57c \ud55c\ub2e4. C++ \ube4c\ub4dc \uaddc\uce59\uc744 \uc120\uc5b8\ud558\uae30 \uc704\ud558\uc5ec BUILD \ud30c\uc77c\uc5d0 \uba3c\uc800 \ub2e4\uc74c\uc758 \uc120\uc5b8\uc744 \ud574\uc57c \ud55c\ub2e4. load ( \"@rules_cc//cc:defs.bzl\" , \"cc_binary\" , \"cc_library\" ) C++ \ud30c\uc77c\uc758 \ucef4\ud30c\uc77c\uc744 \uc704\ud558\uc5ec cc_binary \ube4c\ub4dc \uaddc\uce59\uc744 \ub9cc\ub4e4\uc5b4\uc57c \ud55c\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 name \uc5d0 \uc2e4\ud589\ud30c\uc77c\uc758 \uc774\ub984, srcs \uc5d0 \uc18c\uc2a4\ud30c\uc77c\uc744 \uba85\uc2dc\ud55c\ub2e4. cc_binary ( name = \"hello-world\" , srcs = [ \"hello-world.cc\" ], ) bazel \ub85c \ud504\ub85c\uc81d\ud2b8\ub97c \ube4c\ub4dc\ud558\uae30 \uc704\ud558\uc5ec \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub54c WORKSPACE \ud30c\uc77c\uc774 \uc788\ub294 \uacf3\uc5d0\uc11c \uc774 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\uc57c \ud55c\ub2e4. $ bazel build //path/to/package:target-name \ub2e4\uc74c \uba85\ub839\uc5b4\uc758 \ucd9c\ub825 \uacb0\uacfc\ub97c Graphviz \uc5d0 \uc785\ub825\ud558\uba74 \ud504\ub85c\uc81d\ud2b8 \uc758\uc874\uc131\uc744 \uadf8\ub798\ud504 \ud615\ud0dc\ub85c \ube44\uc96c\uc5bc\ud558\uac8c \ubcfc \uc218 \uc788\ub2e4. $ bazel query --notool_deps --noimplicit_deps \"deps(//main:hello-world)\" --output graph \ub2e4\uc74c\uacfc \uac19\uc774 \ube4c\ub4dc \uaddc\uce59\uc758 deps \uc5d0 \uc758\uc874\uc131\uc744 \ucd94\uac00\ud558\uba74 \ub41c\ub2e4. \uadf8\ub7ec\uba74 bazel \uc774 \uc758\uc874\uc131\uc744 \uba3c\uc800 \ube4c\ub4dc\ud574\uc900\ub2e4. cc_library ( name = \"hello-greet\" , srcs = [ \"hello-greet.cc\" ], hdrs = [ \"hello-greet.h\" ], ) cc_binary ( name = \"hello-world\" , srcs = [ \"hello-world.cc\" ], deps = [ \":hello-greet\" , ], ) \uc758\uc874\uc131\uc774 \ub2e4\ub978 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 //path/to/library:target-name \uc744 dets \uc5d0 \ucd94\uac00\ud558\uba74 \ub41c\ub2e4. cc_library ( name = \"hello-greet\" , srcs = [ \"hello-greet.cc\" ], hdrs = [ \"hello-greet.h\" ], ) cc_binary ( name = \"hello-world\" , srcs = [ \"hello-world.cc\" ], deps = [ \":hello-greet\" , \"//lib:hello-time\" , ], ) \uc774\ub54c hello-time \ube4c\ub4dc \uaddc\uce59\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc774 visibility \uc635\uc158\uc5d0 //path/to/target:__pkg__ \ub97c \ucd94\uac00\ud558\uc5ec \uac00\uc2dc\uc131 \uc124\uc815\uc744 \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4. cc_library ( name = \"hello-time\" , srcs = [ \"hello-time.cc\" ], hdrs = [ \"hello-time.h\" ], visibility = [ \"//main:__pkg__\" ], ) \uc5ec\ub7ec \ud30c\uc77c\uc744 \ud55c\uaebc\ubc88\uc5d0 \ucef4\ud30c\uc77c\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 glob \uc744 \uc0ac\uc6a9\ud55c\ub2e4. cc_library ( name = \"build-all-the-files\" , srcs = glob ([ \"*.cc\" ]), hdrs = glob ([ \"*.h\" ]), ) \ub2e4\uc74c\uc740 \uc758\uc874\uc131\uc5d0 \ub300\ud55c \uc608\uc2dc\uc774\ub2e4. sandwich.h \uac00 bread.h \uc5d0 \uc758\uc874\ud558\uace0, bread.h \uac00 flour.h \uc5d0 \uc758\uc874\ud55c\ub2e4\uba74 BUILD \ud30c\uc77c\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \uc124\uc815\ud558\uba74 \ub41c\ub2e4. cc_library ( name = \"sandwich\" , srcs = [ \"sandwich.cc\" ], hdrs = [ \"sandwich.h\" ], deps = [ \":bread\" ], ) cc_library ( name = \"bread\" , srcs = [ \"bread.cc\" ], hdrs = [ \"bread.h\" ], deps = [ \":flour\" ], ) cc_library ( name = \"flour\" , srcs = [ \"flour.cc\" ], hdrs = [ \"flour.h\" ], ) \ub2e4\ub978 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub294 \uc758\uc874\uc131\uc5d0 \ub300\ud55c \uc608\uc2dc\uc774\ub2e4. C++ \ud504\ub85c\uc81d\ud2b8\uac00 \ub2e4\uc74c\uacfc \uac19\uc740 \ud30c\uc77c \uad6c\uc870\ub97c \uac16\uace0 \uc788\ub2e4\uace0 \ud558\uc790. \u2514\u2500\u2500 my - project \u251c\u2500\u2500 legacy \u2502 \u2514\u2500\u2500 some_lib \u2502 \u251c\u2500\u2500 BUILD \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 some_lib . h \u2502 \u2514\u2500\u2500 some_lib . cc \u2514\u2500\u2500 WORKSPACE \uc774\ub54c some_lib.cc \uac00 some_lib.h \uc5d0 \uc758\uc874\ud558\uace0 \uc788\ub2e4. \uadf8\ub7f0\ub370 #include \"legacy/some_lib/include/some_lib.h \ub85c \ud5e4\ub354\ub97c \uc120\uc5b8\ud55c \uac83\uc774 \uc544\ub2c8\ub77c. #include \"some_lib.h \ub85c \ud5e4\ub354\ub97c \uc120\uc5b8\ud588\ub2e4\uace0 \ud558\uc790. \uadf8\ub7ec\uba74 bazel \uc774 some_lib.cc \ub97c \ube4c\ub4dc\ud558\uae30 \uc704\ud558\uc5ec \ud5e4\ub354 \ud30c\uc77c\uc744 \ud0d0\uc0c9\ud560 \uacbd\ub85c legacy/some_lib/include \ub97c \ucd94\uac00\ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4. cc_library ( name = \"some_lib\" , srcs = [ \"some_lib.cc\" ], hdrs = [ \"include/some_lib.h\" ], copts = [ \"-Ilegacy/some_lib/include\" ], ) C++ \ud504\ub85c\uc81d\ud2b8\uac00 \ub2e4\ub978 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub294 mylib.so \ub77c\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 mylib.h \ub77c\ub294 \ud5e4\ub354\uc5d0 \uc758\uc874\uc131\uc774 \uc788\ub2e4\uba74 cc_library \ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc120\uc5b8\ud558\uba74 \ub41c\ub2e4. cc_library ( name = \"mylib\" , srcs = [ \"mylib.so\" ], hdrs = [ \"mylib.h\" ], ) References : https://bazel.build/","title":"Tutorial"},{"location":"sync/convention/googlestyleguide/#abseil","text":"Abseil \uc740 Google \uc5d0\uc11c \uc81c\uc791\ud55c C++ \ud45c\uc900 STL \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ud655\uc7a5\uc774\ub2e4. Google \uc740 Abseil \uc744 \ud1b5\ud558\uc5ec STL \uc758 \ubd80\uc871\ud55c \ubd80\ubd84\uc744 \ubcf4\uc644\ud588\ub2e4. Abseil \uc740 Google \uc758 C++ \ud504\ub85c\uc81d\ud2b8\uc758 \uae30\ubc18\uc73c\ub85c \uad11\ubc94\uc704\ud558\uac8c \uc0ac\uc6a9\ub418\uace0 \uc788\ub2e4.","title":"Abseil"},{"location":"sync/convention/googlestyleguide/#why-abseil","text":"Google \uc740 C++ \ud504\ub85c\uc81d\ud2b8\uc5d0 Abseil \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \ucd94\ucc9c\ud55c\ub2e4. Why : Abseil \uc740 \ud56d\uc0c1 \ucd5c\uc2e0 C++ \ud45c\uc900\uacfc \ud638\ud658\ub41c\ub2e4. Google \uc758 \uc624\ud508\uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8\uc640 \ud638\ud658\ub41c\ub2e4. \uac00\ub839 TensorFlow , gRPC \ub4f1\ub4f1. Note TensorFlow \uc18c\uc2a4\ucf54\ub4dc \ubd84\uc11d\uc744 \ud574\uc57c \ud560 \ub54c\ub3c4 Abseil \uc744 \uc54c\uc544\uc57c \ud558\uaca0\ub124\uc694. Abseil \uc740 Google \uc774 C++ \uc81c\ud488\uc744 \ub9cc\ub4dc\ub294 \uc778\ud130\ud398\uc774\uc2a4\uc774\uae30 \ub54c\ubb38\uc5d0 Google \uc774 \uc5b4\ub5bb\uac8c C++ \ud504\ub85c\uc81d\ud2b8\ub97c \uac1c\ubc1c\ud558\ub294\uc9c0 \ubc30\uc6b8 \uc218 \uc788\ub2e4. Google \uc740 Abseil \uc744 \ub9e4\uc77c \ubc1c\uc804\uc2dc\ud0a4\uace0 \uc788\uace0 C++ \uac1c\ubc1c\uc790\ub4e4\uc758 \uc694\uad6c\ub97c \ub04a\uc784\uc5c6\uc774 Abseil \uc5d0 \uad6c\ud604\ud558\uace0 \uc788\ub2e4.","title":"Why Abseil?"},{"location":"sync/convention/googlestyleguide/#codemap","text":"Abseil \uc740 \ub2e4\uc74c\uc758 C++ \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4. base : \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ucd08\uae30\ud654 \ucf54\ub4dc\ub97c \ub2f4\uace0 \uc788\ub2e4. \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc774 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uc758\uc874\ud55c\ub2e4. algorithm : C++ STL \uc758 algorithm \uc758 \ud655\uc7a5\uc774\ub2e4. container : C++ STL \uc758 container \uc758 \ud655\uc7a5\uc774\ub2e4. debugging : \uba54\ubaa8\ub9ac \ub204\uc218 \uac80\uc99d, stacktrace \ub4f1\ub4f1 \uc744 \uc9c0\uc6d0\ud558\ub294 \ub514\ubc84\uae45 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. hash : hash \ud0c0\uc785\uacfc \uad00\ub828 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\ub294 \ud504\ub808\uc784\uc6cc\ud06c\uc774\ub2e4. memory : std::make_unique() \uc640 \ud638\ud658\ub418\ub294 \uba54\ubaa8\ub9ac \uad00\ub9ac \uad00\ub828 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. meta : \ud0c0\uc785 \uccb4\ud06c \uad00\ub828 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. numeric : 128 \ube44\ud2b8 \uc815\uc218\ud615 \uad00\ub828 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. strings : STL \uacfc \ud638\ud658\ub418\ub294 string \uad00\ub828 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. synchronization : std::mutex \ub97c \ub300\uccb4\ud558\ub294 absl:Mutex \ub4f1 \ubcd1\ub82c \uc2e4\ud589\uc5d0 \uad00\ud55c \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. time : \uc2dc\uac04\uacfc \uad00\ub828\ub41c \ub2e4\uc591\ud55c \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. types : non-container \ud0c0\uc785 \uad00\ub828 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. utility : \uc5ec\ub7ec \uc720\ud2f8\ub9ac\ud2f0\uc640 \ub3c4\uc6c0\uc774 \ub420\ub9cc\ud55c \ucf54\ub4dc\ub4e4\uc744 \uc81c\uacf5\ud55c\ub2e4. References : https://abseil.io","title":"Codemap"},{"location":"sync/convention/googlestyleguide/#c-version","text":"C++17 \uc744 \uc368\ub77c. \uc544\uc9c1 C++2x \ub294 \uc4f0\uc9c0 \ub9c8\ub77c. \ube44\ud45c\uc900 C++ \ud655\uc7a5\uc740 \uc4f0\uc9c0 \ub9c8\ub77c. \ube44\ud45c\uc900 C++ \ud655\uc7a5\uc5d0 \ub300\ud574\uc11c\ub294 \uc544\ub798\uc5d0\uc11c \ub354 \uc790\uc138\ud788 \uc124\uba85\ud55c\ub2e4. Note \uc544\ub798\uc758 \ub0b4\uc6a9\uc740 Google C++ Style Guide \uc744 \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4. \uc544\ub798\uc758 \ub0b4\uc6a9\uc5d0\uc11c \ub9d0\ud558\ub294 1\uc778\uce6d \"\ub098\" \ub610\ub294 \"\uc6b0\ub9ac\" \ub4f1\ub4f1\uc740 \uc81c\uac00 \uc544\ub2c8\ub77c Google \uc774\uba70, \ud0c0\uac9f \ub3c5\uc790\ub4e4\uc740 Google \uc758 \uac1c\ubc1c\uc790\uc785\ub2c8\ub2e4.","title":"C++ Version"},{"location":"sync/convention/googlestyleguide/#google-c-style-guide","text":"","title":"Google C++ Style Guide"},{"location":"sync/convention/googlestyleguide/#background","text":"\uad6c\uae00\uc758 \ub9ce\uc740 \ud504\ub85c\uc81d\ud2b8\uac00 C++ \ub85c \uc9c4\ud589\ub41c\ub2e4. \uc774\ub294 C++ \uc758 \uac15\ub825\ud568 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7ec\ub098 \uadf8 \uac15\ub825\ud568\uc774 \uc885\uc885 \ubcf5\uc7a1\ud568\uc744 \ub0b3\ub294\ub2e4. \ubcf5\uc7a1\ud568\uc740 \uace7\ubc14\ub85c \ubc84\uadf8\ub97c \ub0b3\uace0 \uac00\ub3c5\uc131\uacfc \uc720\uc9c0\ubcf4\uc218\uc131\uacfc \ud655\uc7a5\uc131\uc744 \ub5a8\uc5b4\ub728\ub9b0\ub2e4. \uc774 \uac00\uc774\ub4dc\ub294 \uadf8\ub7ec\ud55c C++ \uc758 \ubcf5\uc7a1\ud568\uc744 \ud1b5\uc81c\ud558\uae30 \uc704\ud558\uc5ec Do \ub4e4\uacfc Don't \ub4e4\uc744 \uc54c\ub824\uc904 \uac83\uc774\ub2e4. \uad6c\uae00\uc758 \ub300\ubd80\ubd84\uc758 C++ \ud504\ub85c\uc81d\ud2b8\uac00 \uc774 \ucee8\ubca4\uc158\uc744 \ub530\ub978\ub2e4.","title":"Background"},{"location":"sync/convention/googlestyleguide/#goals-of-the-style-guide","text":"\uc55e\uc73c\ub85c \uc18c\uac1c\ud560 \ucee8\ubca4\uc158\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ubaa9\ud45c\ub97c \ub2ec\uc131\ud558\uae30 \uc704\ud558\uc5ec \uc815\ub9bd\ub41c \uaddc\uce59\ub4e4\uc774\ub2e4. \uc65c \uc774\ub7f0 \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud574\uc57c \ud558\ub294\uc9c0 \uc758\ubb38\uc774 \ub4dc\ub294 \uc0ac\ub78c\uc5d0\uac8c \uc774\ub7ec\ud55c \ubaa9\ud45c\ub97c \ub2ec\uc131\ud558\uae30 \uc704\ud558\uc5ec \ub77c\uace0 \ub9d0\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. Style rules should pull their weight (\ucf54\ub529 \ucee8\ubca4\uc158\uc740 \uac00\uce58\uac00 \uc788\uc5b4\uc57c \ud55c\ub2e4.) \ucf54\ub529 \ucee8\ubca4\uc158\uc740 \ud574\ub2f9 \uacf5\ub3d9\uccb4\uc758 \ubaa8\ub4e0 \uac1c\ubc1c\uc790\uc5d0\uac8c \uc124\uba85\ub418\uace0 \uae30\uc5b5\ub418\uc5b4\uc57c \ud560\ub9cc\ud55c \uac00\uce58\uac00 \uc788\uc5b4\uc57c \ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub9e4\uc6b0 \uc548\uc88b\uc740 \ucf54\ub529 \ucee8\ubca4\uc158\uc740 \uc5b4\ucc28\ud53c \uc0ac\ub78c\ub4e4\uc774 \uadf8\ub807\uac8c \ucf54\ub529\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ubbc0\ub85c \uad73\uc774 \uc815\ub9bd\ud574\ub458 \ud544\uc694\uac00 \uc5c6\ub2e4. \uac00\ub839 goto \ubb38\uc774 \ub9e4\uc6b0 \uc548\uc88b\uc740 \ucf54\ub4dc\ub77c\ub294 \uac83\uc740 \uc774\ubbf8 \ub110\ub9ac \uc54c\ub824\uc84c\uae30 \ub54c\ubb38\uc5d0 \uc774\uac83\ub4e4\uc740 \uad73\uc774 \ucf54\ub529 \ucee8\ubca4\uc158\uc5d0 \uc5b8\uae09\ud558\uc9c0 \uc54a\uc558\ub2e4. Optimize for the reader, not the writer (writer \uac00 \uc544\ub2cc reader \ub97c \uc704\ud558\uc5ec \ucd5c\uc801\ud654\ud558\ub77c.) \uad6c\uae00\uc758 \ub300\ubd80\ubd84\uc758 \ud504\ub85c\uc81d\ud2b8\uc740 \ub2e8\uae30\uc131 \ud504\ub85c\uc81d\ud2b8\uac00 \uc544\ub2c8\ub77c \uc7a5\uae30 \ud504\ub85c\uc81d\ud2b8\uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ud504\ub85c\uc81d\ud2b8\ub294 \uacc4\uc18d\ud574\uc11c \ud6c4\uc784 \uac1c\ubc1c\uc790\uc5d0\uac8c \uc77d\ud78c\ub2e4. \uc774\ub294 \ud504\ub85c\uc81d\ud2b8\uc5d0 writing \uc2dc\uac04\ubcf4\ub2e4 reading \uc2dc\uac04\uc774 \ub354 \ub9ce\uc774 \uc18c\ubaa8\ub41c\ub2e4\ub294 \uac83\uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc6b0\ub9ac\ub294 \ucf54\ub4dc\ub97c writing \uc5d0 \ucd5c\uc801\ud654\uc2dc\ud0a8 \uac83\uc774 \uc544\ub2c8\ub77c \uac00\ub3c5\uc131, \uc720\uc9c0\ubcf4\uc218, \ub514\ubc84\uae45\uc5d0 \uc88b\ub3c4\ub85d \ucd5c\uc801\ud654\uc2dc\ucf30\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774 \ubaa9\ud45c\ub97c \uae30\ubc18\uc73c\ub85c \"Leave a trace for the reader\"(\ub3c5\uc790\uc5d0\uac8c \ud754\uc801\uc744 \ub0a8\uaca8\ub77c) \ub77c\ub294 \uc138\ubd80 \ubaa9\ud45c \ub4f1\uc774 \uc138\uc6cc\uc9c8 \uc218 \uc788\ub2e4. \uac00\ub839 \ud3ec\uc778\ud130\uc758 ownership \uc744 \uc62e\uae30\ub294 \ub4f1\uc758 \ub9e4\uc6b0 \ud754\uce58 \uc54a\uc740 \uc77c\uc774 \ubc1c\uc0dd\ud558\uba74 \uc65c \uc774\ub807\uac8c \ud588\ub294\uc9c0 \ud6c4\uc784 \uac1c\ubc1c\uc790\uac00 \uc54c \uc218 \uc788\ub3c4\ub85d \ud78c\ud2b8\ub97c \ub0a8\uaca8\uc57c \ud55c\ub2e4. Be consistent with existing code (\ucf54\ub529 \ucee8\ubca4\uc158\uc744 \uc9c0\ud0a4\uba74\uc11c \ucf54\ub529\ud574\ub77c.) \uc77c\uad00\ub41c \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \uc720\uc9c0\ud558\ub294 \uac83\uc740 \uc6b0\ub9ac\ub97c \ub2e4\ub978 \ub354 \uc911\uc694\ud55c \ubb38\uc81c\uc5d0 \uc9d1\uc911\ud560 \uc218 \uc788\uac8c \ud574\uc900\ub2e4. \ub300\ubd80\ubd84 Style \uc758 \ud1b5\uc77c\uc740 \uc790\ub3d9\ud654 \ub420 \uc218 \uc788\ub2e4. \"Be Consistent\" \ub77c\ub294 \ubaa9\ud45c\ub294 \ud56d\uc0c1 \"just pick one and stop worrying about it.\"(\ud558\ub098\ub97c \ud0dd\ud558\uace0 \ub354 \uc774\uc0c1 \uac71\uc815\ub9c8\uc138\uc694) \ub85c \uc694\uc57d\ub41c\ub2e4. \ucf54\ub529 \ucee8\ubca4\uc158\uc5d0 \uc790\uc720\ub97c \uc8fc\uba74 \uc624\ud788\ub824 \uc774 \uc2a4\ud0c0\uc77c\uc774 \ub354 \ub0ab\ub0d0 \uc800 \uc2a4\ud0c0\uc77c\uc774 \ub354 \ub0ab\ub0d0\uace0 \ud1a0\ub860\ud558\uba74\uc11c \ub354 \ub9ce\uc740 \ube44\uc6a9\uc774 \ubc1c\uc0dd\ud55c\ub2e4. Be consistent with the broader C++ community when appropriate (\uac00\ub2a5\ud558\uba74 \ub110\ub9ac \uc54c\ub824\uc9c4 C++ \ucf54\ub529 \ucee8\ubca4\uc158\ub3c4 \uc9c0\ucf1c\ub77c.) \ub2e4\ub978 C++ \ucee4\ubba4\ub2c8\ud2f0\uac00 \uc9c0\ud0a4\ub294 \ucf54\ub529 \ucee8\ubca4\uc158\uc5d0 \ub300\ud55c \uc801\uc808\ud55c \uc77c\uad00\uc131\uc744 \uc720\uc9c0\ud558\ub294 \uac83\ub3c4 \ubaa9\ud45c 3 \uacfc \uac19\uc740 \ub9e5\ub77d\uc5d0\uc11c \uc774\ud574\ub420 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \ub110\ub9ac \ud1b5\uc6a9\ub418\ub294 C++ \ucf54\ub529 \ucee8\ubca4\uc158\uc5d0\ub3c4 \uc7a5\uc810\uc774 \uc788\uace0 \ub2e8\uc810\uc774 \uc788\ub2e4. \uc7a5\uc810\uc740 \ubc1b\uc544\ub4e4\uc5ec\uc57c \ud558\uc9c0\ub9cc, \ub2e8\uc810\uc740 \ub110\ub9ac \ud1b5\uc6a9\ub418\ub294 C++ \ucf54\ub529 \ucee8\ubca4\uc158\uc774\ub77c\ub3c4 \uacfc\uac10\ud788 \ubc1b\uc544\ub4e4\uc774\uc9c0 \uc54a\ub294\ub2e4. Avoid surprising or dangerous constructs (\uc704\ud5d8\ud55c C++ \ubb38\ubc95\uc740 \ud53c\ud574\ub77c.) C++ \uc740 \ud55c \uc0ac\ub78c\uc774 \uc7a0\uae50 \uc0dd\uac01\ud558\uace0 \uc124\uacc4\ud55c \uac83\uacfc \ub2ec\ub9ac \uc0dd\uac01\ubcf4\ub2e4 \ub180\ub78d\uace0 \uc704\ud5d8\ud55c \uae30\ub2a5\ub4e4\uc744 \uac16\uace0 \uc788\ub2e4. \uc5b4\ub5a4 Style \uac00\uc774\ub4dc\ub294 \uc774\ub7f0 \ud568\uc815\uc5d0 \ube60\uc9c0\uc9c0 \uc54a\uae30 \uc704\ud558\uc5ec \uc815\ub9bd\ub418\uc5c8\ub2e4. Avoid constructs that our average C++ programmer would find tricky or hard to maintain (\ub300\ubd80\ubd84\uc758 \uac1c\ubc1c\uc790\ub4e4\uc774 \uc5b4\ub824\uc6cc\ud558\ub294 C++ \ubb38\ubc95\ub3c4 \ud53c\ud574\ub77c.) C++ \uc740 \uadf8 \ubcf5\uc7a1\ud568 \ub54c\ubb38\uc5d0 \ud504\ub85c\uc81d\ud2b8\uc5d0 \ucd94\uac00\ub418\uc5b4\uc11c\ub294 \uc548\ub418\ub294 \uae30\ub2a5\ub4e4\ub3c4 \uac16\uace0 \uc788\ub2e4. \uae4c\ub2e4\ub85c\uc6b4 \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \ud604 \uc2dc\uc810\uc5d0\uc11c \ub2f9\uc2e0\uc758 \ud300\uc6d0\uc774 \ub2e4 \uc774\ud574\ud558\uc600\uace0 \uadf8 \uc720\uc6a9\uc131\ub3c4 \uc798 \uc0ac\uc6a9\ud558\uac8c \ub418\uc5c8\ub2e4\uace0 \ud574\ub3c4, \uadf8 \ub2e4\uc74c \ud300, \ub610\ub294 \uadf8 \ub2e4\uc74c \ud300\uc758 \ud300\uc6d0\ub4e4\uc774 \uadf8 \uae4c\ub2e4\ub85c\uc6b4 \ubb38\ubc95\uc744 \uc774\ud574\ud560 \uc218 \uc788\uc744\uc9c0 \uc54c \uc218 \uc5c6\ub2e4. Be mindful of our scale (\ub2f9\uc2e0\uc758 \ucf54\ub4dc \ud55c \uc904\uc774 \uc5bc\ub9c8\ub098 \ud070 \ud30c\uae09\ub825\uc744 \ubbf8\uce60\uc9c0 \uacbd\uac01\uc2ec\uc744 \uac00\uc838\ub77c.) \ucf54\ub4dc\uac00 1\uc5b5 \uc904\uc774 \ub118\uc5b4\uac00\ub294 \ud504\ub85c\uc81d\ud2b8\uc5d0\ub294 \uc218\ucc9c\uba85\uc758 \uac1c\ubc1c\uc790\uac00 \ud568\uaed8 \uc791\uc5c5\ud558\uace0 \uc788\ub2e4. \uc774\ub7f0 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 \uc0ac\uc18c\ud55c \uc2e4\uc218\uac00 \ub9c9\ub300\ud558\uac8c \ud070 \ube44\uc6a9\uc744 \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. \uac00\ub839 \uac1c\uc778 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 namespace \uc758 \ucda9\ub3cc\uc774 \uc544\uc8fc \uc0ac\uc18c\ud55c \uc2e4\uc218\uc774\uc9c0\ub9cc, \ud070 \uaddc\ubaa8\uc758 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 \ub9e4\uc6b0 \ud070 \ube44\uc6a9\uc744 \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \ubb38\uc81c\uac00 \ub41c\ub2e4. Concede to optimization when necessary (\uac00\ub054 \uc131\ub2a5 \ucd5c\uc801\ud654\uac00 \ud544\uc694\ud558\ub2e4\uba74 \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \uc5b4\uaca8\ub3c4 \uc88b\ub2e4.) \uc131\ub2a5 \ucd5c\uc801\ud654\ub294 \uc885\uc885 \ud544\uc694\ud558\uace0 \uc801\uc808\ud558\ub2e4. \uc2ec\uc9c0\uc5b4 \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \uc5b4\uaca8\uc11c\ub77c\ub3c4 \uc131\ub2a5 \ucd5c\uc801\ud654\uac00 \uc774\ub8e8\uc5b4\uc9c8 \uc218 \uc788\ub2e4\uba74 \uc131\ub2a5 \ucd5c\uc801\ud654\ub41c \ucf54\ub4dc\ub97c \uacfc\uac10\ud788 \uc791\uc131\ud558\ub77c. \uc774 \ubb38\uc11c\ub294 \ubaa8\ub4e0 \ud569\ub9ac\uc801 \uc81c\uc57d\uc744 \uae30\uc220\ud558\ub3c4\ub85d \uc791\uc131\ub41c \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \ube44\ud310\uc801\uc778 \uc790\uc138\ub97c \uac00\uc838\ub77c. \uadf8\ub9ac\uace0 \ub2f9\uc2e0\uc5d0\uac8c \ud655\uc2e0\uc774 \uc548\uc120\ub2e4\uba74 \ud504\ub85c\uc81d\ud2b8 \ud300\uc7a5\uc5d0\uac8c \uc774 \uaddc\uce59\uc5d0 \ub300\ud558\uc5ec \ub2f9\uc2e0\uc758 \ube44\ud310\uc744 \ub9d0\ud558\ub77c.","title":"Goals of the Style Guide"},{"location":"sync/convention/googlestyleguide/#header-files","text":"\ubaa8\ub4e0 .cc \ud30c\uc77c\uc740 .h \ud5e4\ub354 \ud30c\uc77c\uacfc \uc5f0\uad00\ub418\uc5b4 \uc788\ub2e4. \uc544\uc8fc \uc608\uc678\uc801\uc73c\ub85c \uc720\ub2db \ud14c\uc2a4\ud2b8\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc791\uc740 .cc \ud30c\uc77c\ub4e4\uc740 \ub2e8\uc9c0 main() \ud568\uc218\ub9cc \uac16\uace0 \uc788\ub2e4. Note C++ \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uae30 \uc704\ud55c \ud30c\uc77c\uc758 \ud655\uc7a5\uc790\ub294 .cc , .cpp , .cxx , .c++ \ub4f1\uc774 \uc788\ub294\ub370 WICWIU \ub294 .cpp \ud655\uc7a5\uc790\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud5e4\ub354 \ud30c\uc77c\uc758 \uc62c\ubc14\ub978 \uc0ac\uc6a9\uc740 \uac00\ub3c5\uc131, \ud504\ub85c\uc81d\ud2b8 \ud06c\uae30, \ud504\ub85c\uc81d\ud2b8\uc758 \uc131\ub2a5\uc5d0 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4. \ub2e4\uc74c\uc758 \uaddc\uce59\ub4e4\uc740 \ud5e4\ub354 \ud30c\uc77c\uc744 \uc5b4\ub5bb\uac8c \uc62c\ubc14\ub974\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294\uc9c0 \uac00\uc774\ub4dc\ud574\uc900\ub2e4.","title":"Header Files"},{"location":"sync/convention/googlestyleguide/#scoping","text":"","title":"Scoping"},{"location":"sync/convention/googlestyleguide/#classes","text":"\uc6b0\ub9ac\ub294 \ud074\ub798\uc2a4\ub97c \uad11\ubc94\uc704\ud558\uac8c \uc0ac\uc6a9\ud55c\ub2e4. \uc774 \uc139\uc158\uc5d0\uc11c \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud560 \ub54c Do \ub4e4\uacfc Don't \ub4e4\uc744 \uc124\uba85\ud55c\ub2e4.","title":"Classes"},{"location":"sync/convention/googlestyleguide/#functions","text":"","title":"Functions"},{"location":"sync/convention/googlestyleguide/#google-specific-magic","text":"\uc6b0\ub9ac\ub294 \uc6b0\ub9ac\uc758 C++ \ud504\ub85c\uc81d\ud2b8\ub97c \ub354\uc6b1 \uacac\uace0\ud558\uac8c \ub9cc\ub4e4\uae30 \uc704\ud558\uc5ec \ub9ce\uc740 \ud2b8\ub9ad\uacfc \uc720\ud2f8\ub9ac\ud2f0\ub97c \uc0ac\uc6a9\ud55c\ub2e4.","title":"Google-Specific Magic"},{"location":"sync/convention/googlestyleguide/#other-c-features","text":"","title":"Other C++ Features"},{"location":"sync/convention/googlestyleguide/#naming","text":"\uac00\uc7a5 \uc911\uc694\ud55c \ucee8\ubca4\uc158\uc774 \ubc14\ub85c \ub124\uc774\ubc0d \ucee8\ubca4\uc158\uc774\ub2e4. \ub124\uc774\ubc0d \uc2a4\ud0c0\uc77c\ub85c\uc368 \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc740 \uace7\ubc14\ub85c \uc774\uac83\uc774 \ud0c0\uc785\uc778\uc9c0 \ubcc0\uc218\uc778\uc9c0 \ud568\uc218\uc778\uc9c0 \uc0c1\uc218\uc778\uc9c0 \ub9e4\ud06c\ub85c\uc778\uc9c0 \uc774\ud574\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \ub530\ub77c\uc11c \uac1c\uac1c\uc778\uc758 \ub124\uc774\ubc0d \uc120\ud638\uc5d0 \uc790\uc720\ub97c \uc8fc\ub294 \uac83\ubcf4\ub2e4 \ub124\uc774\ubc0d\uc744 \ud1b5\uc77c\ud558\ub294 \uac83\uc774 \uc555\ub3c4\uc801\uc73c\ub85c \ub354 \uc88b\ub2e4. Info Pascal case \ub294 \ub2e8\uc5b4\uac00 \ud569\uccd0\uc9c4 \ubd80\ubd84\ub9c8\ub2e4 \uccab\uae00\uc790\ub97c \ub300\ubb38\uc790\ub85c \ub098\uba38\uc9c0 \ubd80\ubd84\uc744 \uc18c\ubb38\uc790\ub85c \ub124\uc774\ubc0d\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uac00\ub839 PascalCaseNamingStyle . camel case \ub294 Pascal case \uc640 \ub611\uac19\uc740\ub370 \uc608\uc678\uc801\uc73c\ub85c \ub9e8 \uc55e \ubb38\uc790\ub97c \uc18c\ubb38\uc790\ub85c \ub124\uc774\ubc0d\ud569\ub2c8\ub2e4. \uac00\ub839 camelCaseNamingStyle . snake case \ub294 \ub2e8\uc5b4\uac00 \ud569\uccd0\uc9c4 \ubd80\ubd84\uc744 _ \ub85c \ubd99\uc774\uace0 \ubaa8\ub450 \uc18c\ubb38\uc790\ub85c \ub124\uc774\ubc0d\ud569\ub2c8\ub2e4. \uac00\ub839 snake_case_naming_style .","title":"Naming"},{"location":"sync/convention/googlestyleguide/#comments","text":"\uc8fc\uc11d\uc740 \ucf54\ub4dc \uac00\ub3c5\uc131\uc5d0 \uc788\uc5b4\uc11c \ub9e4\uc6b0 \uc911\uc694\ud55c \uc5ed\ud560\uc744 \ud55c\ub2e4. \ubc18\ub4dc\uc2dc \uc544\ub798\uc758 \uaddc\uce59\uc744 \uae30\ubc18\uc73c\ub85c \uc8fc\uc11d\uc744 \ub2ec\uc544\ub77c. \uadf8\ub7ec\ub098 \uae30\uc5b5\ud558\ub77c. \uac00\uc7a5 \uc88b\uc740 \uc8fc\uc11d\uc774\ub780 \uc8fc\uc11d \uc5c6\uc774 \ucf54\ub4dc \uadf8 \uc790\uccb4\ub85c \uc774\ud574\uac00 \ub418\ub294 \uac83\uc774\ub2e4. \uc8fc\uc11d\uc744 \ub2ec \ub54c \ud0c0\uac9f\uc744 \ubc18\ub4dc\uc2dc \ub2f9\uc2e0\uc758 \ud6c4\uc784 \uac1c\ubc1c\uc790\ub97c \ub300\uc0c1\uc73c\ub85c \ud558\ub77c. \uadf8\ub7ec\ub2c8 \uc8fc\uc11d\uc744 \uce5c\uc808\ud558\uac8c \ub2ec\uc544\ub77c. \uadf8 \ud6c4\uc784 \uac1c\ubc1c\uc790\uac00 \uc5b8\uc820\uac00 \ub2f9\uc2e0\uc774 \ub420 \uac83\uc774\ub2e4.","title":"Comments"},{"location":"sync/convention/googlestyleguide/#formatting","text":"\uac1c\ubc1c\uc790\uc5d0\uac8c \ucf54\ub4dc \ud615\uc2dd\uc758 \uc790\uc720\ub97c \uc8fc\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ud504\ub85c\uc81d\ud2b8\uc758 \ucf54\ub4dc \ud615\uc2dd\uc744 \uc77c\uad00\ub418\uac8c \ud1b5\uc77c\ud558\ub294 \uac83\uc740 \ub9e4\uc6b0 \uc911\uc694\ud558\ub2e4. \uc774\ub85c\uc368 \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc774 \ucf54\ub4dc\ub97c \uc27d\uac8c \uc774\ud574\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \ucf54\ub4dc \ud3ec\ub9f7\ud305\uc744 \uc790\ub3d9\uc73c\ub85c \ud560 \uc218 \uc788\uac8c \ud558\uae30 \uc704\ud558\uc5ec emacs setting file \uc744 \ub9cc\ub4e4\uc5b4 \ub480\ub2e4.","title":"Formatting"},{"location":"sync/convention/googlestyleguide/#exceptions-to-the-rules","text":"","title":"Exceptions to the Rules"},{"location":"sync/convention/googlestyleguide/#parting-words","text":"","title":"Parting Words"},{"location":"sync/convention/googlestyleguide/#_1","text":"Google C++ Style Guide \ub294 \ucf54\ub529 \uacbd\ud5d8\uc774 \ubd80\uc871\ud55c \uc6b0\ub9ac\uc5d0\uac8c \uc804 \uc138\uacc4 1\ud2f0\uc5b4 \uac1c\ubc1c\uc790\ub4e4\uc758 \uacbd\ud5d8\uc744 \ud761\uc218\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\uc5c8\ub2e4. \ub2e4\ub978 \uc5b8\uc5b4 \uac1c\ubc1c\uc790\ub3c4 \ud55c\ubc88\ucbe4 \uc77d\uc5b4\uc11c \uad6c\uae00 \uac1c\ubc1c\uc790\ub4e4\uc758 \uacbd\ud5d8\uc801 \uc0b0\ubb3c\uc744 \ubc30\uc6cc\uac08\ub9cc\ud55c \uc815\ub9d0 \uc88b\uc740 \uac00\uc774\ub4dc\uc774\ub2e4. \uc6b0\ub9ac\ub294 \uace7\ubc14\ub85c WICWIU \uc5d0 Google C++ Style Guide \ub97c \uc801\uc6a9\uc2dc\ud0a4\uace0 \uc2f6\ub2e4. \ud558\uc9c0\ub9cc Google C++ Style Guide \ub294 \uc774\ubbf8 \uc5b8\uae09\ud588\ub4ef\uc774 \ub108\ubb34 \ub2e8\uc21c\ud558\uace0 \ub2f9\uc5f0\ud574\uc11c \uad73\uc774 \uc5b8\uae09\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\ub294 \ucf54\ub529 \ucee8\ubca4\uc158\uc740 \uc815\ub9d0\ub85c \uc5b8\uae09\ud558\uc9c0 \uc54a\uc558\ub2e4. \uac00\ub839 goto \ubb38\uc774 \ub9e4\uc6b0 \uc548\uc88b\uc740 \ucf54\ub4dc\ub77c\ub294 \uac83\uc740 \ub110\ub9ac \uc54c\ub824\uc838 \uc788\uc73c\ubbc0\ub85c \uc5b8\uae09\ud558\uc9c0 \uc54a\uc558\ub2e4. \ud558\uc9c0\ub9cc goto \ubb38\uc744 \uc4f0\uc9c0 \ub9d0\ub77c\ub294 \uaddc\uce59\uc744 \uba85\uc2dc\ud574\ub450\uc5b4\uc57c \ud560 \uc815\ub3c4\ub85c \uc6b0\ub9ac \ud559\ubd80\uc0dd\ub4e4\uc740 \ucf54\ub529 \uacbd\ud5d8\uc774 \uadf9\ud788 \ubd80\uc871\ud558\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc18c\ud558\uace0 \ubd88\ud544\uc694\ud574 \ubcf4\uc5ec\ub3c4 \uc548\uc88b\uc740 \ucf54\ub4dc\ub97c \uc548\uc88b\uc740 \ucf54\ub4dc\ub77c\uace0 \uc54c\ub9ac\uae30 \uc704\ud558\uc5ec \uba87 \uac00\uc9c0 \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \ucd94\uac00\ud560 \ud544\uc694\uac00 \uc788\ub2e4. \ubcc0\uc218\ub97c \uc120\uc5b8\ud560 \ub54c \ubaa8\ub4e0 \ubcc0\uc218\ub97c mutable \ub85c \ud558\uace0 \uc608\uc678\uc801\uc73c\ub85c immutable \ub85c \uc120\uc5b8\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \ubaa8\ub4e0 \ubcc0\uc218\ub97c immutable \ub85c \uc120\uc5b8\ud558\uace0 \uc608\uc678\uc801\uc73c\ub85c mutable \ub85c \uc120\uc5b8\ud574\ub77c. \ud568\uc218\uc640 \uba54\uc18c\ub4dc\ub97c \uc120\uc5b8\ud560 \ub54c \ubaa8\ub4e0 \ud568\uc218\ub97c non-const \ub85c \uc120\uc5b8\ud558\uace0 \uc608\uc678\uc801\uc73c\ub85c const \ub97c \uc120\uc5b8\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ubaa8\ub4e0 \ud568\uc218\ub97c const \ub85c \uc120\uc5b8\ud558\uace0 \uc608\uc678\uc801\uc73c\ub85c non-const \ub97c \uc120\uc5b8\ud574\ub77c. \ud074\ub798\uc2a4\ub97c \uc120\uc5b8\ud560 \ub54c \ubaa8\ub4e0 \uba64\ubc84 \ubcc0\uc218\ub97c public \uc73c\ub85c \uc120\uc5b8\ud558\uace0 \uc608\uc678\uc801\uc73c\ub85c private \uc73c\ub85c \uc120\uc5b8\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ubaa8\ub4e0 \uac83\uc744 private \uc73c\ub85c \uc120\uc5b8\ud558\uace0 \uc608\uc678\uc801\uc73c\ub85c public \uc73c\ub85c \uc120\uc5b8\ud574\ub77c. \ucd94\uc0c1 \ud074\ub798\uc2a4\uc758 \ucd94\uc0c1 \uba54\uc18c\ub4dc\ub77c\uba74 = 0; \ub610\ub294 = delete; \ub610\ub294 = default; \ub85c\uc368 \ud074\ub798\uc2a4\ub97c \uc0dd\uc131 \ubd88\uac00\ub2a5\ud558\uac8c \ub9cc\ub4e4\uc5b4\ub77c. \ud558\ub098\uc758 \ud568\uc218\ub294 \ud558\ub098\uc758 \uae30\ub2a5\ub9cc \ud574\uc57c \ud55c\ub2e4. \ub9e4\uc9c1 \ub118\ubc84\ub97c \uc0ac\uc6a9\ud558\uba74 \uc548\ub41c\ub2e4. 0 \uc774\ub098 1 \uae4c\uc9c0\ub294 \ud5c8\uc6a9\ud55c\ub2e4. \ubb3c\ub860 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uc5d0\uc11c\ub294 \ub9e4\uc9c1 \ub118\ubc84\ub97c \uc0ac\uc6a9\ud574\ub3c4 \uc88b\ub2e4.","title":"\ucd1d\ud3c9"},{"location":"sync/convention/step0/","text":"","title":"Step0"},{"location":"sync/convention/step1-1/","text":"What? \u00b6 Coding Convention \uc774\ub780 indentation, comments, declarations, statements, white space, naming conventions, programming principles \ub4f1\ub4f1\uc5d0 \ub300\ud55c \ucf54\ub529 \uac00\uc774\ub4dc\ub77c\uc778\uc785\ub2c8\ub2e4. \uac1c\uc778\uc774 \uc9c4\ud589\ud558\ub294 \ud504\ub85c\uc81d\ud2b8\ub77c\uba74 \uad73\uc774 \ucee8\ubca4\uc158\uc744 \uc9c0\ucf1c\uc57c \ud560 \uc774\uc720\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\uc218\uac00 \uc9c4\ud589\ud558\ub294 \ud504\ub85c\uc81d\ud2b8\ub77c\uba74 \uac00\ub3c5\uc131\uacfc \uc720\uc9c0\ubcf4\uc218\ub97c \uc704\ud558\uc5ec \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \ud1b5\uc77c\ud558\uace0 \uc9c0\ucf1c\uc57c\ub9cc \ud569\ub2c8\ub2e4. \ucf54\ub529 \ucee8\ubca4\uc158\uc740 \ud504\ub85c\uadf8\ub7a8\uc758 \uae30\ub2a5\uacfc \uc131\ub2a5 \uc790\uccb4\uc5d0\ub294 \uc544\ubb34\ub7f0 \uc601\ud5a5\uc744 \ub07c\uce58\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc989, \ucf54\ub529 \ucee8\ubca4\uc158\uc740 \uc624\ub85c\uc9c0 \uac1c\ubc1c\uc790\ub97c \uc704\ud55c \uac83\uc785\ub2c8\ub2e4. \ud2b9\ud788 \ub0b4\uac00 \uc544\ub2cc \ub2e4\ub978 \uac1c\ubc1c\uc790\ub97c \uc704\ud55c \uac83 \uc785\ub2c8\ub2e4. Why? \u00b6 \ucf54\ub529 \ucee8\ubca4\uc158\uc774 \uc9c0\ucf1c\uc9c0\uc9c0 \uc54a\uc740 \ud504\ub85c\uc81d\ud2b8\ub294 \uac00\ub3c5\uc131\uc774 \ub5a8\uc5b4\uc9c0\uace0 \uc720\uc9c0\ubcf4\uc218\ub97c \ud558\uae30 \ud798\ub4e4\uc5b4\uc9c0\uba70 \ud655\uc7a5\uc131\uc774 \ub0ae\uc544\uc9d1\ub2c8\ub2e4. \uc989, \ud6c4\uc784 \uac1c\ubc1c\uc790\uac00 \ud504\ub85c\uc81d\ud2b8\ub97c \ubb3c\ub824\ubc1b\uc558\uc744 \ub54c \ub4a4\uc8fd\ubc15\uc8fd, \uc911\uad6c\ub09c\ubc29\uc778 \ucf54\ub4dc\ub97c \ud574\uc11d\ud558\uba74\uc11c \uc4f8\ubaa8\uc5c6\ub294 \ube44\uc6a9\uc774 \ucd94\uac00\ub85c \ubc1c\uc0dd\ud558\uac8c \ub418\ub294 \uac83\uc785\ub2c8\ub2e4. \ucf54\ub4dc\uac00 \ub4a4\uc8fd\ubc15\uc8fd\uc778 \uc815\ub3c4\uac00 \ub192\uc544\uc9c8\uc218\ub85d \ud504\ub85c\uc81d\ud2b8\ub97c \uc720\uc9c0\ubcf4\uc218\ud558\uace0 \ud655\uc7a5\ud558\ub294 \ube44\uc6a9\ub3c4 \ub192\uc544\uc9d1\ub2c8\ub2e4. \uadf8\ub7fc\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 \uc5b4\ub5bb\uac8c\ub4e0 \ud504\ub85c\uc81d\ud2b8\ub97c \ud655\uc7a5\ud588\ub2e4\uba74 \ucee8\ubca4\uc158\uc774 \ud1b5\uc77c\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc774\uae30 \ub54c\ubb38\uc5d0 \uc774\ub85c\uc778\ud558\uc5ec \ub610 \ub2e4\uc2dc \uc911\uad6c\ub09c\ubc29\uc778 \ucf54\ub4dc\uac00 \ucd94\uac00\ub429\ub2c8\ub2e4. \uc774\ub7f0 \uc77c\uc774 \ubc18\ubcf5\ub420\uc218\ub85d \ud504\ub85c\uc81d\ud2b8\ub97c \uac1c\ubc1c\ud558\ub294 \ube44\uc6a9\uc740 \uc810\ucc28 \ub298\uc5b4\ub098\uac8c \ub429\ub2c8\ub2e4. \ud504\ub85c\uc81d\ud2b8\ub97c \uac1c\ubc1c\ud558\ub294 \ube44\uc6a9\uc774 \ub298\uc5b4\ub098\uba74 \uc5ec\ub7ec\uac00\uc9c0 \ube44\uc0c1\uc0ac\ud0dc\uac00 \ucd08\ub798\ub418\ub294\ub370, \uadf8 \uc911 \uac00\uc7a5 \ud070 \ubb38\uc81c\ub294 \uae30\uc874\uc758 \ud504\ub85c\uc81d\ud2b8\ub97c \uc720\uc9c0\ubcf4\uc218\ud558\uace0 \ud655\uc7a5\ud558\ub294 \ube44\uc6a9\uc774 \ud504\ub85c\uc81d\ud2b8\ub97c \uc544\uc608 \ubc84\ub9ac\uace0 \ucc98\uc74c\ubd80\ud130 \ub2e4\uc2dc \uc2dc\uc791\ud558\ub294 \ube44\uc6a9\ubcf4\ub2e4 \ube44\uc2f8\uc9c8 \ub54c\uac00 \uc628\ub2e4\ub294 \uac83 \uc785\ub2c8\ub2e4. \uc989, \ub4a4\uc8fd\ubc15\uc8fd \uc911\uad6c\ub09c\ubc29\uc778 \ucf54\ub4dc\uac00 \ud504\ub85c\uc81d\ud2b8\uc5d0 \uacc4\uc18d \uc313\uc778\ub2e4\uba74 \uc5b8\uc820\uac00 \uadf8 \uc2e4\ud0c0\ub798\ub97c \ud478\ub294 \uac83\ubcf4\ub2e4 \uadf8\ub0e5 \ud504\ub85c\uc81d\ud2b8\uc5d0 \uc784\uc885\uc120\uace0\ub97c \ub0b4\ub9ac\uace0 \ucc98\uc74c\ubd80\ud130 \ub2e4\uc2dc \uc9dc\ub294 \ube44\uc6a9\uc774 \ub354 \uc2f8\uc9c0\ub294 \ub54c\uac00 \uc628\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ubd88\ud589\ud788\ub3c4 WICWIU \uc758 \ucf54\ub529 \ucee8\ubca4\uc158\uc740 \ud1b5\uc77c\ub418\uc5b4 \uc788\uc9c0 \uc54a\uace0, \uc720\uc9c0\ubcf4\uc218\uc640 \ud655\uc7a5\uc5d0 \ub300\ud55c \uba85\ub8cc\ud55c \uaddc\uce59\ub3c4 \uc815\ud574\uc838 \uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc6b0\ub9ac\ub294 \uc5b8\uc820\uac00 WICWIU \uc5d0 \uc784\uc885 \uc120\uace0\ub97c \ub0b4\ub9ac\uc9c0 \uc54a\uae30 \uc704\ud558\uc5ec WICWIU \uc758 Coding Convention \uc744 \ud1b5\uc77c\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. How? \u00b6 \uc88b\uc740 Coding Convention \uc740 \uc21c\uc804\ud788 \uc219\ub828\ub41c \uac1c\ubc1c\uc790\uc758 \uacbd\ud5d8\uc73c\ub85c\ubd80\ud130 \ub098\uc635\ub2c8\ub2e4. \uac01 \ucee4\ubba4\ub2c8\ud2f0\uc640 \ud68c\uc0ac\ub4e4\uc774 \uc790\uc2e0\ub4e4\ub9cc\uc758 \uacbd\ud5d8\uc744 \uae30\ubc18\uc73c\ub85c \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \ud1b5\uc77c\ud558\uace4 \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc WICWIU \uac1c\ubc1c\uc790\ub294 \ubcf4\ud1b5 \ud55c\ub3d9\ub300 \ud559\ubd80\uc0dd\uc774\ubbc0\ub85c \ucf54\ub529 \uacbd\ud5d8\uc774 \uadf9\ud788 \ubd80\uc871\ud55c \uacbd\uc6b0\uac00 \ub300\ubd80\ubd84\uc785\ub2c8\ub2e4. \uc989, \uc6b0\ub9ac\uc758 \ucf54\ub529 \uacbd\ud5d8\ub9cc\uc73c\ub85c \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \uc815\ub9bd\ud558\uae30\uc5d0\ub294 \ubb34\ub9ac\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc6b0\ub9ac\ub294 \uae30\uc874\uc758 \uc815\ub9bd\ub41c \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \ucc28\uc6a9\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec \ucee4\ubba4\ub2c8\ud2f0\uc640 \ud68c\uc0ac\ub4e4\uc774 \uc790\uc2e0\ub4e4\uc758 \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \uc815\ub9bd\ud574\ub450\uc5c8\uc2b5\ub2c8\ub2e4. \ub300\ud45c\uc801\uc73c\ub85c Linux kernel , GNU C++ Style , Microsoft C++ Style Conventions , Google C++ Style Guide , LLVM coding standards , Chromium\u2019s style guide , Mozilla\u2019s style guide , WebKit\u2019s style guide , Qt Coding Style , Unreal Engine Coding Standard , C++ Best Practices , Blender Coding Style , Blink Coding Style Guidelines , Inkscape Coding Style , CppCoreGuidelines \ub4f1\ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uadf8 \uc911\uc5d0\uc11c \uc77c\ub2e8 Google Style \uc774 \uc88b\uc9c0 \uc54a\uaca0\ub0d0\ub294 \uc758\uacac\uc774 \uc911\ub860\uc774\uc5b4\uc11c \uba3c\uc800 Google C++ Style Guide \uc744 \uc815\ub9ac\ud574 \ubcf4\uc558\uc2b5\ub2c8\ub2e4. Google C++ Style Guide \ub97c \uc815\ub9ac\ud558\ub2e4\uac00 \ubc1c\uacac\ud55c \uc5ec\ub7ec \ub17c\ub780 \u00b6 \uadf8\ub798\uc11c \uc815\ub9ac\ub97c \ud574\ubd24\ub294\ub370, \ub17c\ub780\uc774 \ub420 \ub9cc\ud55c \ubd80\ubd84\uc774 \uaf64 \ub9ce\uc558\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Google \uc758 \uad8c\uc704\ub97c \ubbff\uace0 \uafb9 \ucc38\uace0 \uacc4\uc18d \ubc88\uc5ed \ubc0f \uc815\ub9ac \uc791\uc5c5\uc744 \uacc4\uc18d \ud588\uc5c8\uc8e0. \uadf8\ub7f0\ub370 \ub108\ubb34 \ubbf8\uc2ec\uca4d\uc5b4\uc11c C++ \ucee4\ubba4\ub2c8\ud2f0\ub4e4\uc5d0 Google \uc758 C++ \ucf54\ub529 \ucee8\ubca4\uc158\uc5d0 \ub300\ud558\uc5ec \uac80\uc0c9\uc744 \ud574\ubcf4\ub2c8\uae4c C++ \ucee4\ubba4\ub2c8\ud2f0\uc5d0\uc11c\ub294 Google \uc758 Style Guide \uac00 Google \uac19\uc740 \ucf54\ub4dc\uac00 1\uc5b5\uc904\uc774 \ub118\ub294 \ud504\ub85c\uc81d\ud2b8\uc640 \uc218\ub9ce\uc740 legacy \ud504\ub85c\uc81d\ud2b8\ub97c \ub2e4\ub904\uc57c\ud558\ub294 \uacf3\uc5d0\uc11c\ub098 \uc801\ud569\ud558\uc9c0 \uc0c8\ub85c\uc6b4 C++ \ud504\ub85c\uc81d\ud2b8\uc5d0\ub294 \ub9e4\uc6b0 \ubd80\uc801\uc808\ud558\ub2e4\ub294 \ubaa9\uc18c\ub9ac\uac00 \ub9ce\uc558\uc2b5\ub2c8\ub2e4. \uc2ec\uc9c0\uc5b4 \uc808\ub300\ub85c Google \uc758 Style Guide \ub97c \ub530\ub974\uc9c0 \ub9d0\ub77c\ub294 \ub3c5\ub9bd\ub41c \ube14\ub85c\uadf8 \ud3ec\uc2a4\ud2b8\ub3c4 \uc788\uc5c8\uace0, C++ \ucee4\ubba4\ub2c8\ud2f0\uc5d0\uc11c Google Style Gudie \ub294 \uc4f0\ub808\uae30\ub2e4\ub294 \ub4f1\uc758 \ubd80\uc815\uc801\uc778 \uc5ec\ub860\uc774 \uc0c1\ub2f9\ud788 \ub9ce\uc558\uc2b5\ub2c8\ub2e4. \ubb3c\ub860 \uadf8 \ube14\ub85c\uadf8 \ud3ec\uc2a4\ud2b8\ub97c \ubc18\ubc15\ud558\ub294 \uc758\uacac\ub3c4 \uc0c1\ub2f9\ud788 \ub9ce\uc558\uc2b5\ub2c8\ub2e4. Google C++ Style Guide is No Good Hacker News Discussion: Google C++ Style Guide is No Good Reddit Discussion: Google C++ Style Guide is No Good Why isn\u2019t it good to follow Google's C++ style guide? Which C++ style guide do you follow? Why Google Style Guide for C++ is a deal-breaker Reddit Discussion: Why Google Style Guide for C++ is a deal-breaker Reddit Discussion2: Why Google Style Guide for C++ is a deal-breaker What programming style do you use? favorite C++ coding standards? Reddit Discussion: Do you adopt abseil? Choose C++ style guideline #5 \uc194\uc9c1\ud788 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4. \uc800\ub294 \uc804\ubb38 C++ \uac1c\ubc1c\uc790\uac00 \uc544\ub2c8\uace0 \uc544\uc9c1 \ub300\ud559\uad50 \ud559\ubd80\uc0dd\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c Google Style \uc774 \uc633\uc740\uc9c0 \ub2e4\ub978 Style \uc774 \uc633\uc740\uc9c0 \ud310\ub2e8\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \uc0ac\uc2e4 \uc774\ub807\uac8c \ub17c\ub780\uc774 \ub9ce\uc740 \uac83 \uc790\uccb4\ub85c Google C++ Style Guide \ub97c \uc800\ud3c9\uac00\ud560 \uc218\ubc16\uc5d0 \uc5c6\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 Google C++ Style Guide \ub85c \ub354 \uc774\uc0c1 \uc2dc\uac04\ub0ad\ube44\ub97c \ud558\uace0 \uc2f6\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc704\uc5d0 \uc62c\ub824\ub454 \ucee4\ubba4\ub2c8\ud2f0\ub4e4 \ub9c1\ud06c\uc5d0\uc11c \uc218\ub9ce\uc740 \ud1a0\ub860\uc774 \uc9c4\ud589\ub418\uc5c8\uc5c8\ub294\ub370 \uadf8 \uc640\uc911\uc5d0 CppCoreGuidelines \uc740 \ub17c\ub780 \uc5c6\uc774 \uc88b\ub2e4\ub294 \uc758\uacac\uc5d0 \ud569\uc758\ub418\uc5b4 \uc788\uc5c8\uc8e0. \uadf8\ub807\ub2e4\uba74 \uacf5\ud504\uae30/\ucea1\uc2a4\ud1a4 \ud558\ub290\ub77c \uc2dc\uac04\uc774 \uc5c6\ub294 \uc6b0\ub9ac \uc785\uc7a5\uc5d0\uc11c\ub294 Google C++ Style Guide \uac00 \uc88b\uc740\uc9c0 \ub098\uc05c\uc9c0 \ud310\ub2e8\ud558\ub294 \uac83\ubcf4\ub2e4 \ub17c\ub780\uc774 \uc5c6\ub294 CppCoreGuidelines \uc744 \ub530\ub974\ub294 \uac83\uc774 \ub354 \ub098\uc744 \uac83\uc785\ub2c8\ub2e4. \uc5b4\uca0c\ub4e0 Google \uc774 \ud558\ub294 \ub9d0\uc774\ub77c\uba74 \ubb34\uc5c7\uc774\ub4e0 \uc633\ub2e4\uace0 \uc0dd\uac01\ud588\ub358 \uac8c \uc2e4\uc218\uc600\ub358 \uac83 \uac19\ub124\uc694. Google \ub54c\ubb38\uc5d0 \uc2dc\uac04\ub0ad\ube44\ub97c \ub108\ubb34 \ub9ce\uc774\ud588\uc2b5\ub2c8\ub2e4. \uc55e\uc73c\ub85c\ub294 \uc2ec\uc9c0\uc5b4 Google \uc774\ub77c\uace0 \ud574\ub3c4 \ucee4\ubba4\ub2c8\ud2f0 \uac19\uc740 \uacf3\uc744 \ud1b5\ud574\uc11c \uc0ac\ub78c\ub4e4\uc758 \uc758\uacac\uc744 \ub2e4\ubc29\uba74\uc73c\ub85c \uc218\uc9d1\ud574\ubd10\uc57c\uaca0\uc2b5\ub2c8\ub2e4. \uc81c\uac00 \ubc88\uc5ed/\uc815\ub9ac \ud558\ub358 Google Style Guide \uc758 legacy \ubb38\uc11c\ub97c \ud655\uc778\ud558\ub824\uba74 Google C++ Style Guide \ubbf8\uc644\uc131 \ubb38\uc11c \ub97c \ud074\ub9ad\ud558\uc138\uc694. \ub2e8, \uba87\uba87 \uae30\uc5c5\uacfc \ucee4\ubba4\ub2c8\ud2f0\ub294 Google C++ Style Guide \uc758 \ub2e8\uc810\uc744 \uace0\uccd0\uc11c \uc798 \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uace0 \ud569\ub2c8\ub2e4. Google C++ Style Guide \uc758 \ucca0\ud559\uacfc \ubb38\uc11c \uad6c\uc870 \uc790\uccb4\uc640 \ub2e4\ub8e8\uace0 \uc788\ub294 \uc8fc\uc81c\ub4e4 \uc790\uccb4\ub294 \uc88b\uae30 \ub54c\ubb38\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. C++ \ucee4\ubba4\ub2c8\ud2f0\uc758 \uc911\ub860\uc740 clang-format \uc73c\ub85c C++ \uc758 \ud3ec\ub9f7\ud305\uc744 \uc790\ub3d9\ud654\ud558\uace0 \ucf54\ub529 \ucee8\ubca4\uc158\uc740 CppCoreGuidelines \uc744 \ub530\ub974\ub294 \uac83\uc774 \uc88b\ub2e4\ub294 \uc758\uacac\uc5d0 \ud569\uc758\ub418\uc5b4 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc9c0\uae08\ubd80\ud130 \uc774\uac83\uc744 \ubc88\uc5ed \ubc0f \uc815\ub9ac\ud574\uc57c\uaca0\ub124\uc694. Google C++ Style \uc774 \uc88b\uc740\uc9c0 \ub098\uc05c\uc9c0 \uc800\ub294 \ub354 \uc774\uc0c1 \uad00\uc2ec\uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\uac83\uc744 \ud310\ub2e8\ud558\uace0 \uc788\ub294 \uac83 \uc790\uccb4\uac00 \ubb34\uc758\ubbf8\ud558\uace0, \uc2dc\uac04\ub0ad\ube44\uc77c \ubfd0\uc785\ub2c8\ub2e4. CppCoreGuidelines \uc740 C++ \ucee4\ubba4\ub2c8\ud2f0\uc5d0\uc11c\ub3c4 \ub17c\ub780\uc774 \uc5c6\uc5c8\uae30 \ub54c\ubb38\uc5d0 \uc758\uc2ec\ud558\uc9c0 \uc54a\uace0 \uc4f8 \uc218 \uc788\uc744 \uac83 \uac19\ub124\uc694. \uadf8\ub798\uc11c CppCoreGuidelines \ub97c \ubc88\uc5ed\ud558\uace0 \uc815\ub9ac\ud558\uace0 \uc788\uc5c8\ub294\ub370, \uc774\ubc88\uc5d0\ub294 \uc6b0\ub9ac\ub098\ub77c C++ \ucee4\ubba4\ub2c8\ud2f0\uc778 C++ Korea \uc5d0\uc11c \uc774\ubbf8 CppCoreGuidelines \ud55c\uae00 \ubc88\uc5ed \ud504\ub85c\uc81d\ud2b8 \ub97c \uc644\ub8cc\ud588\ub2e4\ub294 \uac83\uc744 \uc54c\uac8c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub2c8\uae4c CppCoreGuidelines \ubc88\uc5ed \ubc0f \uc815\ub9ac \uc791\uc5c5\uc744 \uadf8\ub9cc \ub450\uace0 \uc6b0\ub9ac\ub098\ub77c C++ \uac1c\ubc1c\uc790 \ud615\ub4e4\uc774 \uc774\ubbf8 \uae54\ub054\ud558\uac8c \ubc88\uc5ed\ud574\ub450\uc2e0 CppCoreGuidelines \ud55c\uae00 \ubc88\uc5ed \ud504\ub85c\uc81d\ud2b8 \uc744 \uc77d\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. Note \uc0ac\uc2e4 \uc774\ub85c\uc368 CppCoreGuidelines \uc5d0 \ub300\ud55c \uc548\uc2ec\uc744 \ud55c \ubc88 \ub354 \ud558\uac8c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \uc6b0\ub9ac\ub098\ub77c C++ \ucee4\ubba4\ub2c8\ud2f0\uc5d0\uc11c\ub3c4 CppCoreGuidelines \uc744 \uc778\uc815\ud558\uace0 \uadf8\uac83\uc744 \ubc88\uc5ed \ubc0f \uc815\ub9ac\ud558\ub294 \ud504\ub85c\uc81d\ud2b8\ub97c \uc9c4\ud589\ud55c \uac83\uc774\uae30 \ub54c\ubb38\uc774\uc8e0. CppCoreGuidelines \uc740 \uc800\uc5d0\uac8c \ub354 \uc774\uc0c1 \uc2dc\uac04\ub0ad\ube44\ub97c \ud558\uc9c0 \uc54a\uac8c \ud574\uc904 \uac83 \uac19\ub124\uc694. \ud6c4... \uadf8\ub7f0\ub370 CppCoreGuidelines \ud55c\uae00 \ubc88\uc5ed \ud504\ub85c\uc81d\ud2b8 \ub294 CppCoreGuidelines \uc758 \uc6d0\ub798 \ub0b4\uc6a9 \uc21c\uc11c\ub97c \uc81c\ubaa9 \uc54c\ud30c\ubcb3 \uc21c\uc73c\ub85c \ubc14\uafb8\uc5b4\ub193\uc558\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c CppCoreGuidelines \uc758 \uc6d0\ubcf8 \uc21c\uc11c\ub300\ub85c \ubcfc \uc218 \uc788\ub3c4\ub85d CppCoreGuidelines \ud55c\uae00 \ubc88\uc5ed \ud504\ub85c\uc81d\ud2b8 \uc758 \ub0b4\uc6a9\uc744 \uc815\ub9ac\ud588\uc2b5\ub2c8\ub2e4. C++ Core Guidelines \uc0ac\uc804\uc9c0\uc2dd \u00b6 \ud558\uc9c0\ub9cc C++ Core Guidelines \uc740 C++ \ubb38\ubc95\uc11c\uac00 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 \uc5ec\ub7ec\uac00\uc9c0 \uace0\uae09 \ubb38\ubc95\uc744 \uc124\uba85 \uc5c6\uc774 \ub2e4\ub8e8\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uadf8\ub7ec\ud55c \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc804\uc5d0 \uc54c\uc544\ub450\uace0 \uc77d\uc5b4\uc57c \ud569\ub2c8\ub2e4. span gsl::index owner fopen, malloc, strdup \uc774 \ubc18\ud658\ud558\ub294 \ud3ec\uc778\ud130\ub294 \ud560\ub2f9 \ud574\uc81c\ub97c \ud574\uc8fc\uc5b4\uc57c \ud558\ubbc0\ub85c fopen \uc774 \uc544\ub2cc ifstream \uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\ub294 \uac83 https://www.cppkorea.org/CppCoreGuidelines/Philosophy/#example-bad_6 \uc5d0\uc11c \uc608\uc81c\uac00 \ubb34\uc5c7\uc744 \ub0ad\ube44\ud558\ub294\uc9c0 \ub3c5\uc790 \uc2a4\uc2a4\ub85c \ucc3e\uc544\ub77c \ud588\ub294\ub370 strlen \uc774 \ub9e4 \ub8e8\ud504\ub9c8\ub2e4 \uacc4\uc0b0\ub418\uace0 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. std::chrono \uc0ac\uc804\uc870\uac74 gsl::Expects() : if \ub098 assert \ub85c \ud560 \uc218 \uc788\uc9c0\ub9cc \uc774\uac8c \ub354 \uc88b\ub2e4\uace0\ud558\ub124. \uc65c? \uc0ac\ud6c4\uc870\uac74 gsl::Ensures() : if \ub098 assert \ub85c \ud560 \uc218 \uc788\uc9c0\ub9cc \uc774\uac8c \ub354 \uc88b\ub2e4\uace0\ud558\ub124. \uc65c? lock_guard, RAII constexpr template \uc5d0 \uc801\uc6a9\ub418\ub294 requires, Concept zstring std::strlen not_null czstring string_span extern \u3141\ub4e0\uac78 const \ub85c C\uc2a4\ud0c0\uc77c\ub85c\ucf54\ub518 \u3134\u3134\u3134 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 C++ Core Guidelines \u00b6 Abstraciton In: \uc18c\uac1c P: \ucca0\ud559 I: \uc778\ud130\ud398\uc774\uc2a4 F: \ud568\uc218 C: \ud074\ub798\uc2a4\uc640 \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870 Enum: \uc5f4\uac70\ud615 R: \ub9ac\uc18c\uc2a4 \uad00\ub9ac ES: \ud45c\ud604\uc2dd\uacfc \ubb38\uc7a5 Per: \uc131\ub2a5 CP: \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\ucc98\ub9ac E: \uc624\ub958 \ucc98\ub9ac Con: \uc0c1\uc218\uc640 \ubd88\ubcc0\uc131 T: \ud15c\ud50c\ub9bf\uacfc \uc81c\ub108\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d CPL: C \uc2a4\ud0c0\uc77c \ud504\ub85c\uadf8\ub798\ubc0d SF: \uc18c\uc2a4 \ud30c\uc77c SL: \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucc38\uace0\ud560 \ub9cc\ud55c \ub0b4\uc6a9: A: \uc124\uacc4 \uc544\uc774\ub514\uc5b4 NR: \uaddc\uce59\uc774 \uc544\ub2cc \uac83\ub4e4\uacfc \uadfc\uac70\uc5c6\ub294 \uc774\uc57c\uae30\ub4e4 RF: \ucc38\uace0 \uc790\ub8cc\ub4e4 Pro: \ud504\ub85c\ud30c\uc77c GSL: \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac NL: \uc774\ub984\uacfc \ub9cc\ub4e6\uc0c8 \uaddc\uce59\ub4e4 FAQ: \uc790\uc8fc \ubb3b\ub294 \uc9c8\ubb38\uc5d0 \ub300\ud55c \ub300\ub2f5 Appendix A: \ub77c\uc774\ube0c\ub7ec\ub9ac Appendix B: \ubaa8\ub358 C++ \ucf54\ub4dc Appendix C: \ud1a0\ub860 Appendix D: \uc720\uc6a9\ud55c \ub3c4\uad6c\ub4e4 \uc6a9\uc5b4 \ud574\uc124 To-do: \ubbf8\ubd84\ub958 \uaddc\uce59 clang-format \u00b6 clang-format \uc740 C , C++ , Objective-C \ucf54\ub4dc\ub97c \uc790\ub3d9\uc73c\ub85c \ud3ec\ub9f7\ud305\ud574\uc8fc\ub294 \ud234\uc785\ub2c8\ub2e4. clang-format \uc740 LLVM , Google , Chromium , Mozilla , WebKit \uc758 C++ \ucf54\ub529 \ucee8\ubca4\uc158\uc5d0\uc11c \ub9d0\ud558\ub294 \ucf54\ub4dc \ud3ec\ub9f7\ud305 \uae30\uc900\uc744 \uc790\ub3d9\uc73c\ub85c \ub9de\ucdb0\uc8fc\uae30 \ub54c\ubb38\uc5d0 \uc77c\uc77c\ud788 \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \ub9de\ucd94\ub290\ub77c \uc218\uace0\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\uac8c \ud574\uc90d\ub2c8\ub2e4. \ub610\ud55c \ucf54\ub4dc \uc2a4\ud0c0\uc77c\uc744 .clang-format \ud30c\uc77c\uc5d0 \uba85\uc2dc\ud558\uba74 \ucf54\ub4dc \uc2a4\ud0c0\uc77c\uc744 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5 \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. WICWIU \ub97c \ub9cc\ub4e4\uace0 commit \ud558\uae30 \uc804\uc5d0 clang-format \uc744 \ud55c\ubc88 \uc2e4\ud589\ud558\uae30\ub9cc \ud558\uba74 \ucf54\ub4dc \ud3ec\ub9f7\uc774 \uc790\ub3d9\uc73c\ub85c \ud1b5\uc77c\ub418\ub294 \uac83\uc785\ub2c8\ub2e4. clang-format \uc124\uce58 \u00b6 \uc2dc\uc2a4\ud15c \uc124\uce58 \uc77c\ubc18 \uc720\uc800\ub294 sudo \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uc2dc\uc2a4\ud15c\uc744 \ud574\ud0b9\ud558\uc9c0 \uc54a\ub294 \uc774\uc0c1 \uc2dc\uc2a4\ud15c \uad00\ub9ac\uc790\uc5d0\uac8c \ubb38\uc758\ud558\uc5ec \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c clang-format \uc744 \uc124\uce58\ud574\uc8fc\ub77c\uace0 \ubd80\ud0c1\ud558\uc138\uc694. $ sudo apt install clang-format \uc720\uc800 \uc124\uce58 \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c \uc800\uc758 standalone \ub808\ud3ec\uc9c0\ud1a0\ub9ac \ub97c clone \ud574\uc8fc\uc138\uc694. \uc774 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub294 \ud544\uc694\ud55c \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\uc5c6\uc774 standalone \ud558\uac8c \uc2e4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \ud544\uc694 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc758\uc874\uc131\uc744 \uc790\ub3d9\uc73c\ub85c \ud574\uacb0\ud574\uc8fc\uba74\uc11c \ubc14\uc774\ub108\ub9ac\uc5d0 alias \ub97c \uc9c0\uc815\ud574\uc8fc\ub294 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \ub2f4\uace0 \uc788\uc2b5\ub2c8\ub2e4. $ git clone --depth 1 https://github.com/ccss17/standalone \uadf8\ub9ac\uace0 \ub2e4\uc74c\uacfc \uac19\uc774 setup.sh \uc744 \uc2e4\ud589\ud558\uba74 \ub429\ub2c8\ub2e4. $ cd standalone $ ./setup.sh \uadf8\ub7ec\uba74 clang-format \ubfd0\ub9cc \uc544\ub2c8\ub77c zsh , bat , curl , gotop , nvtop \ub4f1\uc758 \ub525\ub7ec\ub2dd \uac1c\ubc1c \uc2dc \ub9e4\uc6b0 \uc720\uc6a9\ud55c \ud234\ub4e4\uc774 \uc790\ub3d9\uc73c\ub85c \uc124\uce58\ub429\ub2c8\ub2e4. \ud558\uc9c0\ub9cc clang-format \ub9cc\uc744 \uc124\uce58\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uba74 \ub429\ub2c8\ub2e4. $ cd standalone/clang-format $ ./setup.sh Note \ud558\uc9c0\ub9cc \uc774 \ubc29\uc2dd\uc740 \uc2e4\ud589 \ud30c\uc77c\ub4e4\uc744 standalone \ud558\uac8c \uc124\uce58\ud558\ub294 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \ubd88\ud544\uc694\ud55c \ucd94\uac00 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uacc4\uc18d \ub2e4\uc6b4\ub85c\ub4dc \ub418\uc5b4 \uc11c\ubc84\uc758 \uc800\uc7a5\uc6a9\ub7c9\uc744 \ub0ad\ube44 \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc11c\ubc84 \uad00\ub9ac\uc790\uac00 clang-format \uc744 \uc815\uc2dd\uc73c\ub85c \uc124\uce58\ud574\uc904 \ub54c\uae4c\uc9c0 \uc784\uc2dc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \uc11c\ubc84 \uad00\ub9ac\uc790\uac00 \uc11c\ubc84\uc5d0 clang-format \uc744 \uc815\uc2dd\uc73c\ub85c \uc124\uce58\ud574\uc8fc\uc5c8\ub2e4\uba74 \ubd88\ud544\uc694\ud574\uc9c4 \uc774 standalone \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc0ad\uc81c\ud558\uba74 \uc88b\uc744 \uac83\uc785\ub2c8\ub2e4. clang-format \uc0ac\uc6a9\ubc95 \u00b6 \ubbf8\ub9ac \uc815\uc758\ub41c \uc2a4\ud0c0\uc77c \ub9cc\uc57d test.cpp \uc744 Google \uc2a4\ud0c0\uc77c\ub85c \uc790\ub3d9\uc73c\ub85c \ud3ec\ub9f7\ud305\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc758 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud558\uba74 \ub429\ub2c8\ub2e4. $ clang-format --style = google -i test.cpp \ucee4\uc2a4\ud140 \uc2a4\ud0c0\uc77c \ub9cc\uc57d \ucee4\uc2a4\ud140 \uc2a4\ud0c0\uc77c\ub85c \ud3ec\ub9f7\ud305\uc744 \ud558\uace0 \uc2f6\ub2e4\uba74 .clang-format \ud30c\uc77c\uc5d0 Clang documentations \uc758 \ub0b4\uc6a9\uc744 \ucc38\uace0\ud558\uc5ec \uc2a4\ud0c0\uc77c\uc744 \ub9cc\ub4e0 \ud6c4 --style \uc635\uc158 \uba85\uc2dc \uc5c6\uc774 clang-format \uc744 \uc2e4\ud589\ud558\uba74 \ub429\ub2c8\ub2e4. \ubaa8\ub4e0 \ud30c\uc77c \ud3ec\ub9f7\ud305 \ubaa8\ub4e0 \ud30c\uc77c\uc744 \ud55c\uaebc\ubc88\uc5d0 \ud3ec\ub9f7\ud305\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc758 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud558\uba74 \ub429\ub2c8\ub2e4. $ find . -regex '.*\\.\\(cpp\\|hpp\\|cu\\|c\\|h\\)' -exec clang-format -style = file -i {} \\; VSCode \uc5f0\ub3d9 \uc790\ub3d9 \ud3ec\ub9f7\ud305 (\ucd94\ucc9c) \ud558\uc9c0\ub9cc \uc774\ub807\uac8c clang-format \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\ubcf4\ub2e4 \ud6e8\uc52c \ud3b8\ud558\uace0 \ud798\uc774 \ub35c\ub4e4\uc5b4\uac00\ub294 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ubc14\ub85c VSCode \uc640 \uc5f0\ub3d9\ud558\uc5ec clang-format \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc778\ub370\uc694. \ud30c\uc77c\uc744 \uc218\uc815\ud558\uace0 \uc800\uc7a5\ud558\ub294 \uac83\ub9cc\uc73c\ub85c \uc790\ub3d9\uc73c\ub85c \ud3ec\ub9f7\ud305\uc744 \ud574\uc90d\ub2c8\ub2e4. Note \uc544\uc9c1 \ub525\ub7ec\ub2dd \uc11c\ubc84\uc5d0 VSCode \ub97c \uc5f0\ub3d9\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74 VSCode \ub525\ub7ec\ub2dd \uc11c\ubc84 \uc5f0\ub3d9\ud558\uae30 \ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694. \uba3c\uc800 VSCode \uc758 clang-format \ud655\uc7a5 \uc744 \uc124\uce58\ud558\uc138\uc694. \uba85\ub839\ud314\ub808\ud2b8\uc758 Preferences: Open Settings (JSON) \uc744 \uc2e4\ud589\ud558\uc5ec settings.json \uc744 \uc5ec\uc138\uc694. \ud30c\uc77c\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 \"editor.formatOnSave\": true \uc744 \ucd94\uac00\ud558\uc138\uc694. { ... \"editor.formatOnSave\" : true ... } \ub9cc\uc57d clang-format \uc744 standalone \ub808\ud3ec\uc9c0\ud1a0\ub9ac \uc744 \ud1b5\ud558\uc5ec \uc124\uce58\ud588\ub2e4\uba74 \ud30c\uc77c\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 \"clang-format.executable\": \"/home/USER/.standalone/clang-format/standalone-clang-format.sh\" \uc744 \ucd94\uac00\ud574\uc8fc\uc138\uc694. /home/USER \ub97c \uaf2d \uc790\uc2e0\uc758 \ud648 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c\ub85c \ubc14\uafd4\uc8fc\uc5b4\uc57c \ud569\ub2c8\ub2e4! { ... ` \"clang-format.executable\" : \"/home/USER/.standalone/clang-format/standalone-clang-format.sh\" ` ... } clang-format \ud3ec\ub9f7\ud305 \ud1b5\uc77c \u00b6 \uc6b0\uc120 WICWIU \uc5d0\uc11c\uc758 clang-format \ud3ec\ub9f7\ud305\uc744 \ub110\ub9ac \uc54c\ub824\uc9c4 C++ \ud3ec\ub9f7\ud305\uc73c\ub85c \ud1b5\uc77c\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ud6c4\uc5d0 \ud3ec\ub9f7\ud305\uc744 \ubc14\uafb8\uace0 \uc2f6\ub2e4\uba74 WICWIU \ud300\uc6d0\ub4e4 \uac04\uc758 \ud611\uc758\ub97c \ud1b5\ud558\uc5ec \ubc14\uafc0 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud558\uc5ec \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c .clang-format \uc744 \ubc1b\uc544\uc11c .clang-format \ud30c\uc77c\uc5d0 \uc800\uc7a5\ud574\uc8fc\uc138\uc694. $ git clone https://gist.github.com/ccss17/48b6c29ba8cb72b02d5166e5bf6bfddd $ cp 48b6c29ba8cb72b02d5166e5bf6bfddd/.clang-format ~ \uc774\uc81c WICWIU \ub97c \uc790\ub3d9\uc73c\ub85c \ud3ec\ub9f7\uc744 \ud1b5\uc77c\ud560 \uc218 \uc788\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4.","title":"About Coding Convention"},{"location":"sync/convention/step1-1/#what","text":"Coding Convention \uc774\ub780 indentation, comments, declarations, statements, white space, naming conventions, programming principles \ub4f1\ub4f1\uc5d0 \ub300\ud55c \ucf54\ub529 \uac00\uc774\ub4dc\ub77c\uc778\uc785\ub2c8\ub2e4. \uac1c\uc778\uc774 \uc9c4\ud589\ud558\ub294 \ud504\ub85c\uc81d\ud2b8\ub77c\uba74 \uad73\uc774 \ucee8\ubca4\uc158\uc744 \uc9c0\ucf1c\uc57c \ud560 \uc774\uc720\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub2e4\uc218\uac00 \uc9c4\ud589\ud558\ub294 \ud504\ub85c\uc81d\ud2b8\ub77c\uba74 \uac00\ub3c5\uc131\uacfc \uc720\uc9c0\ubcf4\uc218\ub97c \uc704\ud558\uc5ec \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \ud1b5\uc77c\ud558\uace0 \uc9c0\ucf1c\uc57c\ub9cc \ud569\ub2c8\ub2e4. \ucf54\ub529 \ucee8\ubca4\uc158\uc740 \ud504\ub85c\uadf8\ub7a8\uc758 \uae30\ub2a5\uacfc \uc131\ub2a5 \uc790\uccb4\uc5d0\ub294 \uc544\ubb34\ub7f0 \uc601\ud5a5\uc744 \ub07c\uce58\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc989, \ucf54\ub529 \ucee8\ubca4\uc158\uc740 \uc624\ub85c\uc9c0 \uac1c\ubc1c\uc790\ub97c \uc704\ud55c \uac83\uc785\ub2c8\ub2e4. \ud2b9\ud788 \ub0b4\uac00 \uc544\ub2cc \ub2e4\ub978 \uac1c\ubc1c\uc790\ub97c \uc704\ud55c \uac83 \uc785\ub2c8\ub2e4.","title":"What?"},{"location":"sync/convention/step1-1/#why","text":"\ucf54\ub529 \ucee8\ubca4\uc158\uc774 \uc9c0\ucf1c\uc9c0\uc9c0 \uc54a\uc740 \ud504\ub85c\uc81d\ud2b8\ub294 \uac00\ub3c5\uc131\uc774 \ub5a8\uc5b4\uc9c0\uace0 \uc720\uc9c0\ubcf4\uc218\ub97c \ud558\uae30 \ud798\ub4e4\uc5b4\uc9c0\uba70 \ud655\uc7a5\uc131\uc774 \ub0ae\uc544\uc9d1\ub2c8\ub2e4. \uc989, \ud6c4\uc784 \uac1c\ubc1c\uc790\uac00 \ud504\ub85c\uc81d\ud2b8\ub97c \ubb3c\ub824\ubc1b\uc558\uc744 \ub54c \ub4a4\uc8fd\ubc15\uc8fd, \uc911\uad6c\ub09c\ubc29\uc778 \ucf54\ub4dc\ub97c \ud574\uc11d\ud558\uba74\uc11c \uc4f8\ubaa8\uc5c6\ub294 \ube44\uc6a9\uc774 \ucd94\uac00\ub85c \ubc1c\uc0dd\ud558\uac8c \ub418\ub294 \uac83\uc785\ub2c8\ub2e4. \ucf54\ub4dc\uac00 \ub4a4\uc8fd\ubc15\uc8fd\uc778 \uc815\ub3c4\uac00 \ub192\uc544\uc9c8\uc218\ub85d \ud504\ub85c\uc81d\ud2b8\ub97c \uc720\uc9c0\ubcf4\uc218\ud558\uace0 \ud655\uc7a5\ud558\ub294 \ube44\uc6a9\ub3c4 \ub192\uc544\uc9d1\ub2c8\ub2e4. \uadf8\ub7fc\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 \uc5b4\ub5bb\uac8c\ub4e0 \ud504\ub85c\uc81d\ud2b8\ub97c \ud655\uc7a5\ud588\ub2e4\uba74 \ucee8\ubca4\uc158\uc774 \ud1b5\uc77c\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc774\uae30 \ub54c\ubb38\uc5d0 \uc774\ub85c\uc778\ud558\uc5ec \ub610 \ub2e4\uc2dc \uc911\uad6c\ub09c\ubc29\uc778 \ucf54\ub4dc\uac00 \ucd94\uac00\ub429\ub2c8\ub2e4. \uc774\ub7f0 \uc77c\uc774 \ubc18\ubcf5\ub420\uc218\ub85d \ud504\ub85c\uc81d\ud2b8\ub97c \uac1c\ubc1c\ud558\ub294 \ube44\uc6a9\uc740 \uc810\ucc28 \ub298\uc5b4\ub098\uac8c \ub429\ub2c8\ub2e4. \ud504\ub85c\uc81d\ud2b8\ub97c \uac1c\ubc1c\ud558\ub294 \ube44\uc6a9\uc774 \ub298\uc5b4\ub098\uba74 \uc5ec\ub7ec\uac00\uc9c0 \ube44\uc0c1\uc0ac\ud0dc\uac00 \ucd08\ub798\ub418\ub294\ub370, \uadf8 \uc911 \uac00\uc7a5 \ud070 \ubb38\uc81c\ub294 \uae30\uc874\uc758 \ud504\ub85c\uc81d\ud2b8\ub97c \uc720\uc9c0\ubcf4\uc218\ud558\uace0 \ud655\uc7a5\ud558\ub294 \ube44\uc6a9\uc774 \ud504\ub85c\uc81d\ud2b8\ub97c \uc544\uc608 \ubc84\ub9ac\uace0 \ucc98\uc74c\ubd80\ud130 \ub2e4\uc2dc \uc2dc\uc791\ud558\ub294 \ube44\uc6a9\ubcf4\ub2e4 \ube44\uc2f8\uc9c8 \ub54c\uac00 \uc628\ub2e4\ub294 \uac83 \uc785\ub2c8\ub2e4. \uc989, \ub4a4\uc8fd\ubc15\uc8fd \uc911\uad6c\ub09c\ubc29\uc778 \ucf54\ub4dc\uac00 \ud504\ub85c\uc81d\ud2b8\uc5d0 \uacc4\uc18d \uc313\uc778\ub2e4\uba74 \uc5b8\uc820\uac00 \uadf8 \uc2e4\ud0c0\ub798\ub97c \ud478\ub294 \uac83\ubcf4\ub2e4 \uadf8\ub0e5 \ud504\ub85c\uc81d\ud2b8\uc5d0 \uc784\uc885\uc120\uace0\ub97c \ub0b4\ub9ac\uace0 \ucc98\uc74c\ubd80\ud130 \ub2e4\uc2dc \uc9dc\ub294 \ube44\uc6a9\uc774 \ub354 \uc2f8\uc9c0\ub294 \ub54c\uac00 \uc628\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ubd88\ud589\ud788\ub3c4 WICWIU \uc758 \ucf54\ub529 \ucee8\ubca4\uc158\uc740 \ud1b5\uc77c\ub418\uc5b4 \uc788\uc9c0 \uc54a\uace0, \uc720\uc9c0\ubcf4\uc218\uc640 \ud655\uc7a5\uc5d0 \ub300\ud55c \uba85\ub8cc\ud55c \uaddc\uce59\ub3c4 \uc815\ud574\uc838 \uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc6b0\ub9ac\ub294 \uc5b8\uc820\uac00 WICWIU \uc5d0 \uc784\uc885 \uc120\uace0\ub97c \ub0b4\ub9ac\uc9c0 \uc54a\uae30 \uc704\ud558\uc5ec WICWIU \uc758 Coding Convention \uc744 \ud1b5\uc77c\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4.","title":"Why?"},{"location":"sync/convention/step1-1/#how","text":"\uc88b\uc740 Coding Convention \uc740 \uc21c\uc804\ud788 \uc219\ub828\ub41c \uac1c\ubc1c\uc790\uc758 \uacbd\ud5d8\uc73c\ub85c\ubd80\ud130 \ub098\uc635\ub2c8\ub2e4. \uac01 \ucee4\ubba4\ub2c8\ud2f0\uc640 \ud68c\uc0ac\ub4e4\uc774 \uc790\uc2e0\ub4e4\ub9cc\uc758 \uacbd\ud5d8\uc744 \uae30\ubc18\uc73c\ub85c \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \ud1b5\uc77c\ud558\uace4 \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc WICWIU \uac1c\ubc1c\uc790\ub294 \ubcf4\ud1b5 \ud55c\ub3d9\ub300 \ud559\ubd80\uc0dd\uc774\ubbc0\ub85c \ucf54\ub529 \uacbd\ud5d8\uc774 \uadf9\ud788 \ubd80\uc871\ud55c \uacbd\uc6b0\uac00 \ub300\ubd80\ubd84\uc785\ub2c8\ub2e4. \uc989, \uc6b0\ub9ac\uc758 \ucf54\ub529 \uacbd\ud5d8\ub9cc\uc73c\ub85c \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \uc815\ub9bd\ud558\uae30\uc5d0\ub294 \ubb34\ub9ac\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc6b0\ub9ac\ub294 \uae30\uc874\uc758 \uc815\ub9bd\ub41c \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \ucc28\uc6a9\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec \ucee4\ubba4\ub2c8\ud2f0\uc640 \ud68c\uc0ac\ub4e4\uc774 \uc790\uc2e0\ub4e4\uc758 \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \uc815\ub9bd\ud574\ub450\uc5c8\uc2b5\ub2c8\ub2e4. \ub300\ud45c\uc801\uc73c\ub85c Linux kernel , GNU C++ Style , Microsoft C++ Style Conventions , Google C++ Style Guide , LLVM coding standards , Chromium\u2019s style guide , Mozilla\u2019s style guide , WebKit\u2019s style guide , Qt Coding Style , Unreal Engine Coding Standard , C++ Best Practices , Blender Coding Style , Blink Coding Style Guidelines , Inkscape Coding Style , CppCoreGuidelines \ub4f1\ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uadf8 \uc911\uc5d0\uc11c \uc77c\ub2e8 Google Style \uc774 \uc88b\uc9c0 \uc54a\uaca0\ub0d0\ub294 \uc758\uacac\uc774 \uc911\ub860\uc774\uc5b4\uc11c \uba3c\uc800 Google C++ Style Guide \uc744 \uc815\ub9ac\ud574 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.","title":"How?"},{"location":"sync/convention/step1-1/#google-c-style-guide","text":"\uadf8\ub798\uc11c \uc815\ub9ac\ub97c \ud574\ubd24\ub294\ub370, \ub17c\ub780\uc774 \ub420 \ub9cc\ud55c \ubd80\ubd84\uc774 \uaf64 \ub9ce\uc558\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Google \uc758 \uad8c\uc704\ub97c \ubbff\uace0 \uafb9 \ucc38\uace0 \uacc4\uc18d \ubc88\uc5ed \ubc0f \uc815\ub9ac \uc791\uc5c5\uc744 \uacc4\uc18d \ud588\uc5c8\uc8e0. \uadf8\ub7f0\ub370 \ub108\ubb34 \ubbf8\uc2ec\uca4d\uc5b4\uc11c C++ \ucee4\ubba4\ub2c8\ud2f0\ub4e4\uc5d0 Google \uc758 C++ \ucf54\ub529 \ucee8\ubca4\uc158\uc5d0 \ub300\ud558\uc5ec \uac80\uc0c9\uc744 \ud574\ubcf4\ub2c8\uae4c C++ \ucee4\ubba4\ub2c8\ud2f0\uc5d0\uc11c\ub294 Google \uc758 Style Guide \uac00 Google \uac19\uc740 \ucf54\ub4dc\uac00 1\uc5b5\uc904\uc774 \ub118\ub294 \ud504\ub85c\uc81d\ud2b8\uc640 \uc218\ub9ce\uc740 legacy \ud504\ub85c\uc81d\ud2b8\ub97c \ub2e4\ub904\uc57c\ud558\ub294 \uacf3\uc5d0\uc11c\ub098 \uc801\ud569\ud558\uc9c0 \uc0c8\ub85c\uc6b4 C++ \ud504\ub85c\uc81d\ud2b8\uc5d0\ub294 \ub9e4\uc6b0 \ubd80\uc801\uc808\ud558\ub2e4\ub294 \ubaa9\uc18c\ub9ac\uac00 \ub9ce\uc558\uc2b5\ub2c8\ub2e4. \uc2ec\uc9c0\uc5b4 \uc808\ub300\ub85c Google \uc758 Style Guide \ub97c \ub530\ub974\uc9c0 \ub9d0\ub77c\ub294 \ub3c5\ub9bd\ub41c \ube14\ub85c\uadf8 \ud3ec\uc2a4\ud2b8\ub3c4 \uc788\uc5c8\uace0, C++ \ucee4\ubba4\ub2c8\ud2f0\uc5d0\uc11c Google Style Gudie \ub294 \uc4f0\ub808\uae30\ub2e4\ub294 \ub4f1\uc758 \ubd80\uc815\uc801\uc778 \uc5ec\ub860\uc774 \uc0c1\ub2f9\ud788 \ub9ce\uc558\uc2b5\ub2c8\ub2e4. \ubb3c\ub860 \uadf8 \ube14\ub85c\uadf8 \ud3ec\uc2a4\ud2b8\ub97c \ubc18\ubc15\ud558\ub294 \uc758\uacac\ub3c4 \uc0c1\ub2f9\ud788 \ub9ce\uc558\uc2b5\ub2c8\ub2e4. Google C++ Style Guide is No Good Hacker News Discussion: Google C++ Style Guide is No Good Reddit Discussion: Google C++ Style Guide is No Good Why isn\u2019t it good to follow Google's C++ style guide? Which C++ style guide do you follow? Why Google Style Guide for C++ is a deal-breaker Reddit Discussion: Why Google Style Guide for C++ is a deal-breaker Reddit Discussion2: Why Google Style Guide for C++ is a deal-breaker What programming style do you use? favorite C++ coding standards? Reddit Discussion: Do you adopt abseil? Choose C++ style guideline #5 \uc194\uc9c1\ud788 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4. \uc800\ub294 \uc804\ubb38 C++ \uac1c\ubc1c\uc790\uac00 \uc544\ub2c8\uace0 \uc544\uc9c1 \ub300\ud559\uad50 \ud559\ubd80\uc0dd\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c Google Style \uc774 \uc633\uc740\uc9c0 \ub2e4\ub978 Style \uc774 \uc633\uc740\uc9c0 \ud310\ub2e8\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \uc0ac\uc2e4 \uc774\ub807\uac8c \ub17c\ub780\uc774 \ub9ce\uc740 \uac83 \uc790\uccb4\ub85c Google C++ Style Guide \ub97c \uc800\ud3c9\uac00\ud560 \uc218\ubc16\uc5d0 \uc5c6\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 Google C++ Style Guide \ub85c \ub354 \uc774\uc0c1 \uc2dc\uac04\ub0ad\ube44\ub97c \ud558\uace0 \uc2f6\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc704\uc5d0 \uc62c\ub824\ub454 \ucee4\ubba4\ub2c8\ud2f0\ub4e4 \ub9c1\ud06c\uc5d0\uc11c \uc218\ub9ce\uc740 \ud1a0\ub860\uc774 \uc9c4\ud589\ub418\uc5c8\uc5c8\ub294\ub370 \uadf8 \uc640\uc911\uc5d0 CppCoreGuidelines \uc740 \ub17c\ub780 \uc5c6\uc774 \uc88b\ub2e4\ub294 \uc758\uacac\uc5d0 \ud569\uc758\ub418\uc5b4 \uc788\uc5c8\uc8e0. \uadf8\ub807\ub2e4\uba74 \uacf5\ud504\uae30/\ucea1\uc2a4\ud1a4 \ud558\ub290\ub77c \uc2dc\uac04\uc774 \uc5c6\ub294 \uc6b0\ub9ac \uc785\uc7a5\uc5d0\uc11c\ub294 Google C++ Style Guide \uac00 \uc88b\uc740\uc9c0 \ub098\uc05c\uc9c0 \ud310\ub2e8\ud558\ub294 \uac83\ubcf4\ub2e4 \ub17c\ub780\uc774 \uc5c6\ub294 CppCoreGuidelines \uc744 \ub530\ub974\ub294 \uac83\uc774 \ub354 \ub098\uc744 \uac83\uc785\ub2c8\ub2e4. \uc5b4\uca0c\ub4e0 Google \uc774 \ud558\ub294 \ub9d0\uc774\ub77c\uba74 \ubb34\uc5c7\uc774\ub4e0 \uc633\ub2e4\uace0 \uc0dd\uac01\ud588\ub358 \uac8c \uc2e4\uc218\uc600\ub358 \uac83 \uac19\ub124\uc694. Google \ub54c\ubb38\uc5d0 \uc2dc\uac04\ub0ad\ube44\ub97c \ub108\ubb34 \ub9ce\uc774\ud588\uc2b5\ub2c8\ub2e4. \uc55e\uc73c\ub85c\ub294 \uc2ec\uc9c0\uc5b4 Google \uc774\ub77c\uace0 \ud574\ub3c4 \ucee4\ubba4\ub2c8\ud2f0 \uac19\uc740 \uacf3\uc744 \ud1b5\ud574\uc11c \uc0ac\ub78c\ub4e4\uc758 \uc758\uacac\uc744 \ub2e4\ubc29\uba74\uc73c\ub85c \uc218\uc9d1\ud574\ubd10\uc57c\uaca0\uc2b5\ub2c8\ub2e4. \uc81c\uac00 \ubc88\uc5ed/\uc815\ub9ac \ud558\ub358 Google Style Guide \uc758 legacy \ubb38\uc11c\ub97c \ud655\uc778\ud558\ub824\uba74 Google C++ Style Guide \ubbf8\uc644\uc131 \ubb38\uc11c \ub97c \ud074\ub9ad\ud558\uc138\uc694. \ub2e8, \uba87\uba87 \uae30\uc5c5\uacfc \ucee4\ubba4\ub2c8\ud2f0\ub294 Google C++ Style Guide \uc758 \ub2e8\uc810\uc744 \uace0\uccd0\uc11c \uc798 \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uace0 \ud569\ub2c8\ub2e4. Google C++ Style Guide \uc758 \ucca0\ud559\uacfc \ubb38\uc11c \uad6c\uc870 \uc790\uccb4\uc640 \ub2e4\ub8e8\uace0 \uc788\ub294 \uc8fc\uc81c\ub4e4 \uc790\uccb4\ub294 \uc88b\uae30 \ub54c\ubb38\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. C++ \ucee4\ubba4\ub2c8\ud2f0\uc758 \uc911\ub860\uc740 clang-format \uc73c\ub85c C++ \uc758 \ud3ec\ub9f7\ud305\uc744 \uc790\ub3d9\ud654\ud558\uace0 \ucf54\ub529 \ucee8\ubca4\uc158\uc740 CppCoreGuidelines \uc744 \ub530\ub974\ub294 \uac83\uc774 \uc88b\ub2e4\ub294 \uc758\uacac\uc5d0 \ud569\uc758\ub418\uc5b4 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc9c0\uae08\ubd80\ud130 \uc774\uac83\uc744 \ubc88\uc5ed \ubc0f \uc815\ub9ac\ud574\uc57c\uaca0\ub124\uc694. Google C++ Style \uc774 \uc88b\uc740\uc9c0 \ub098\uc05c\uc9c0 \uc800\ub294 \ub354 \uc774\uc0c1 \uad00\uc2ec\uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\uac83\uc744 \ud310\ub2e8\ud558\uace0 \uc788\ub294 \uac83 \uc790\uccb4\uac00 \ubb34\uc758\ubbf8\ud558\uace0, \uc2dc\uac04\ub0ad\ube44\uc77c \ubfd0\uc785\ub2c8\ub2e4. CppCoreGuidelines \uc740 C++ \ucee4\ubba4\ub2c8\ud2f0\uc5d0\uc11c\ub3c4 \ub17c\ub780\uc774 \uc5c6\uc5c8\uae30 \ub54c\ubb38\uc5d0 \uc758\uc2ec\ud558\uc9c0 \uc54a\uace0 \uc4f8 \uc218 \uc788\uc744 \uac83 \uac19\ub124\uc694. \uadf8\ub798\uc11c CppCoreGuidelines \ub97c \ubc88\uc5ed\ud558\uace0 \uc815\ub9ac\ud558\uace0 \uc788\uc5c8\ub294\ub370, \uc774\ubc88\uc5d0\ub294 \uc6b0\ub9ac\ub098\ub77c C++ \ucee4\ubba4\ub2c8\ud2f0\uc778 C++ Korea \uc5d0\uc11c \uc774\ubbf8 CppCoreGuidelines \ud55c\uae00 \ubc88\uc5ed \ud504\ub85c\uc81d\ud2b8 \ub97c \uc644\ub8cc\ud588\ub2e4\ub294 \uac83\uc744 \uc54c\uac8c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub2c8\uae4c CppCoreGuidelines \ubc88\uc5ed \ubc0f \uc815\ub9ac \uc791\uc5c5\uc744 \uadf8\ub9cc \ub450\uace0 \uc6b0\ub9ac\ub098\ub77c C++ \uac1c\ubc1c\uc790 \ud615\ub4e4\uc774 \uc774\ubbf8 \uae54\ub054\ud558\uac8c \ubc88\uc5ed\ud574\ub450\uc2e0 CppCoreGuidelines \ud55c\uae00 \ubc88\uc5ed \ud504\ub85c\uc81d\ud2b8 \uc744 \uc77d\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. Note \uc0ac\uc2e4 \uc774\ub85c\uc368 CppCoreGuidelines \uc5d0 \ub300\ud55c \uc548\uc2ec\uc744 \ud55c \ubc88 \ub354 \ud558\uac8c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \uc6b0\ub9ac\ub098\ub77c C++ \ucee4\ubba4\ub2c8\ud2f0\uc5d0\uc11c\ub3c4 CppCoreGuidelines \uc744 \uc778\uc815\ud558\uace0 \uadf8\uac83\uc744 \ubc88\uc5ed \ubc0f \uc815\ub9ac\ud558\ub294 \ud504\ub85c\uc81d\ud2b8\ub97c \uc9c4\ud589\ud55c \uac83\uc774\uae30 \ub54c\ubb38\uc774\uc8e0. CppCoreGuidelines \uc740 \uc800\uc5d0\uac8c \ub354 \uc774\uc0c1 \uc2dc\uac04\ub0ad\ube44\ub97c \ud558\uc9c0 \uc54a\uac8c \ud574\uc904 \uac83 \uac19\ub124\uc694. \ud6c4... \uadf8\ub7f0\ub370 CppCoreGuidelines \ud55c\uae00 \ubc88\uc5ed \ud504\ub85c\uc81d\ud2b8 \ub294 CppCoreGuidelines \uc758 \uc6d0\ub798 \ub0b4\uc6a9 \uc21c\uc11c\ub97c \uc81c\ubaa9 \uc54c\ud30c\ubcb3 \uc21c\uc73c\ub85c \ubc14\uafb8\uc5b4\ub193\uc558\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c CppCoreGuidelines \uc758 \uc6d0\ubcf8 \uc21c\uc11c\ub300\ub85c \ubcfc \uc218 \uc788\ub3c4\ub85d CppCoreGuidelines \ud55c\uae00 \ubc88\uc5ed \ud504\ub85c\uc81d\ud2b8 \uc758 \ub0b4\uc6a9\uc744 \uc815\ub9ac\ud588\uc2b5\ub2c8\ub2e4.","title":"Google C++ Style Guide \ub97c \uc815\ub9ac\ud558\ub2e4\uac00 \ubc1c\uacac\ud55c \uc5ec\ub7ec \ub17c\ub780"},{"location":"sync/convention/step1-1/#c-core-guidelines","text":"\ud558\uc9c0\ub9cc C++ Core Guidelines \uc740 C++ \ubb38\ubc95\uc11c\uac00 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 \uc5ec\ub7ec\uac00\uc9c0 \uace0\uae09 \ubb38\ubc95\uc744 \uc124\uba85 \uc5c6\uc774 \ub2e4\ub8e8\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uadf8\ub7ec\ud55c \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc804\uc5d0 \uc54c\uc544\ub450\uace0 \uc77d\uc5b4\uc57c \ud569\ub2c8\ub2e4. span gsl::index owner fopen, malloc, strdup \uc774 \ubc18\ud658\ud558\ub294 \ud3ec\uc778\ud130\ub294 \ud560\ub2f9 \ud574\uc81c\ub97c \ud574\uc8fc\uc5b4\uc57c \ud558\ubbc0\ub85c fopen \uc774 \uc544\ub2cc ifstream \uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\ub294 \uac83 https://www.cppkorea.org/CppCoreGuidelines/Philosophy/#example-bad_6 \uc5d0\uc11c \uc608\uc81c\uac00 \ubb34\uc5c7\uc744 \ub0ad\ube44\ud558\ub294\uc9c0 \ub3c5\uc790 \uc2a4\uc2a4\ub85c \ucc3e\uc544\ub77c \ud588\ub294\ub370 strlen \uc774 \ub9e4 \ub8e8\ud504\ub9c8\ub2e4 \uacc4\uc0b0\ub418\uace0 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. std::chrono \uc0ac\uc804\uc870\uac74 gsl::Expects() : if \ub098 assert \ub85c \ud560 \uc218 \uc788\uc9c0\ub9cc \uc774\uac8c \ub354 \uc88b\ub2e4\uace0\ud558\ub124. \uc65c? \uc0ac\ud6c4\uc870\uac74 gsl::Ensures() : if \ub098 assert \ub85c \ud560 \uc218 \uc788\uc9c0\ub9cc \uc774\uac8c \ub354 \uc88b\ub2e4\uace0\ud558\ub124. \uc65c? lock_guard, RAII constexpr template \uc5d0 \uc801\uc6a9\ub418\ub294 requires, Concept zstring std::strlen not_null czstring string_span extern \u3141\ub4e0\uac78 const \ub85c C\uc2a4\ud0c0\uc77c\ub85c\ucf54\ub518 \u3134\u3134\u3134 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130","title":"C++ Core Guidelines \uc0ac\uc804\uc9c0\uc2dd"},{"location":"sync/convention/step1-1/#c-core-guidelines_1","text":"Abstraciton In: \uc18c\uac1c P: \ucca0\ud559 I: \uc778\ud130\ud398\uc774\uc2a4 F: \ud568\uc218 C: \ud074\ub798\uc2a4\uc640 \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870 Enum: \uc5f4\uac70\ud615 R: \ub9ac\uc18c\uc2a4 \uad00\ub9ac ES: \ud45c\ud604\uc2dd\uacfc \ubb38\uc7a5 Per: \uc131\ub2a5 CP: \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\ucc98\ub9ac E: \uc624\ub958 \ucc98\ub9ac Con: \uc0c1\uc218\uc640 \ubd88\ubcc0\uc131 T: \ud15c\ud50c\ub9bf\uacfc \uc81c\ub108\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d CPL: C \uc2a4\ud0c0\uc77c \ud504\ub85c\uadf8\ub798\ubc0d SF: \uc18c\uc2a4 \ud30c\uc77c SL: \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucc38\uace0\ud560 \ub9cc\ud55c \ub0b4\uc6a9: A: \uc124\uacc4 \uc544\uc774\ub514\uc5b4 NR: \uaddc\uce59\uc774 \uc544\ub2cc \uac83\ub4e4\uacfc \uadfc\uac70\uc5c6\ub294 \uc774\uc57c\uae30\ub4e4 RF: \ucc38\uace0 \uc790\ub8cc\ub4e4 Pro: \ud504\ub85c\ud30c\uc77c GSL: \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac NL: \uc774\ub984\uacfc \ub9cc\ub4e6\uc0c8 \uaddc\uce59\ub4e4 FAQ: \uc790\uc8fc \ubb3b\ub294 \uc9c8\ubb38\uc5d0 \ub300\ud55c \ub300\ub2f5 Appendix A: \ub77c\uc774\ube0c\ub7ec\ub9ac Appendix B: \ubaa8\ub358 C++ \ucf54\ub4dc Appendix C: \ud1a0\ub860 Appendix D: \uc720\uc6a9\ud55c \ub3c4\uad6c\ub4e4 \uc6a9\uc5b4 \ud574\uc124 To-do: \ubbf8\ubd84\ub958 \uaddc\uce59","title":"C++ Core Guidelines"},{"location":"sync/convention/step1-1/#clang-format","text":"clang-format \uc740 C , C++ , Objective-C \ucf54\ub4dc\ub97c \uc790\ub3d9\uc73c\ub85c \ud3ec\ub9f7\ud305\ud574\uc8fc\ub294 \ud234\uc785\ub2c8\ub2e4. clang-format \uc740 LLVM , Google , Chromium , Mozilla , WebKit \uc758 C++ \ucf54\ub529 \ucee8\ubca4\uc158\uc5d0\uc11c \ub9d0\ud558\ub294 \ucf54\ub4dc \ud3ec\ub9f7\ud305 \uae30\uc900\uc744 \uc790\ub3d9\uc73c\ub85c \ub9de\ucdb0\uc8fc\uae30 \ub54c\ubb38\uc5d0 \uc77c\uc77c\ud788 \ucf54\ub529 \ucee8\ubca4\uc158\uc744 \ub9de\ucd94\ub290\ub77c \uc218\uace0\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\uac8c \ud574\uc90d\ub2c8\ub2e4. \ub610\ud55c \ucf54\ub4dc \uc2a4\ud0c0\uc77c\uc744 .clang-format \ud30c\uc77c\uc5d0 \uba85\uc2dc\ud558\uba74 \ucf54\ub4dc \uc2a4\ud0c0\uc77c\uc744 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5 \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. WICWIU \ub97c \ub9cc\ub4e4\uace0 commit \ud558\uae30 \uc804\uc5d0 clang-format \uc744 \ud55c\ubc88 \uc2e4\ud589\ud558\uae30\ub9cc \ud558\uba74 \ucf54\ub4dc \ud3ec\ub9f7\uc774 \uc790\ub3d9\uc73c\ub85c \ud1b5\uc77c\ub418\ub294 \uac83\uc785\ub2c8\ub2e4.","title":"clang-format"},{"location":"sync/convention/step1-1/#clang-format_1","text":"\uc2dc\uc2a4\ud15c \uc124\uce58 \uc77c\ubc18 \uc720\uc800\ub294 sudo \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uc2dc\uc2a4\ud15c\uc744 \ud574\ud0b9\ud558\uc9c0 \uc54a\ub294 \uc774\uc0c1 \uc2dc\uc2a4\ud15c \uad00\ub9ac\uc790\uc5d0\uac8c \ubb38\uc758\ud558\uc5ec \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c clang-format \uc744 \uc124\uce58\ud574\uc8fc\ub77c\uace0 \ubd80\ud0c1\ud558\uc138\uc694. $ sudo apt install clang-format \uc720\uc800 \uc124\uce58 \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c \uc800\uc758 standalone \ub808\ud3ec\uc9c0\ud1a0\ub9ac \ub97c clone \ud574\uc8fc\uc138\uc694. \uc774 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub294 \ud544\uc694\ud55c \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\uc5c6\uc774 standalone \ud558\uac8c \uc2e4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \ud544\uc694 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc758\uc874\uc131\uc744 \uc790\ub3d9\uc73c\ub85c \ud574\uacb0\ud574\uc8fc\uba74\uc11c \ubc14\uc774\ub108\ub9ac\uc5d0 alias \ub97c \uc9c0\uc815\ud574\uc8fc\ub294 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \ub2f4\uace0 \uc788\uc2b5\ub2c8\ub2e4. $ git clone --depth 1 https://github.com/ccss17/standalone \uadf8\ub9ac\uace0 \ub2e4\uc74c\uacfc \uac19\uc774 setup.sh \uc744 \uc2e4\ud589\ud558\uba74 \ub429\ub2c8\ub2e4. $ cd standalone $ ./setup.sh \uadf8\ub7ec\uba74 clang-format \ubfd0\ub9cc \uc544\ub2c8\ub77c zsh , bat , curl , gotop , nvtop \ub4f1\uc758 \ub525\ub7ec\ub2dd \uac1c\ubc1c \uc2dc \ub9e4\uc6b0 \uc720\uc6a9\ud55c \ud234\ub4e4\uc774 \uc790\ub3d9\uc73c\ub85c \uc124\uce58\ub429\ub2c8\ub2e4. \ud558\uc9c0\ub9cc clang-format \ub9cc\uc744 \uc124\uce58\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uba74 \ub429\ub2c8\ub2e4. $ cd standalone/clang-format $ ./setup.sh Note \ud558\uc9c0\ub9cc \uc774 \ubc29\uc2dd\uc740 \uc2e4\ud589 \ud30c\uc77c\ub4e4\uc744 standalone \ud558\uac8c \uc124\uce58\ud558\ub294 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \ubd88\ud544\uc694\ud55c \ucd94\uac00 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uacc4\uc18d \ub2e4\uc6b4\ub85c\ub4dc \ub418\uc5b4 \uc11c\ubc84\uc758 \uc800\uc7a5\uc6a9\ub7c9\uc744 \ub0ad\ube44 \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc11c\ubc84 \uad00\ub9ac\uc790\uac00 clang-format \uc744 \uc815\uc2dd\uc73c\ub85c \uc124\uce58\ud574\uc904 \ub54c\uae4c\uc9c0 \uc784\uc2dc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \uc11c\ubc84 \uad00\ub9ac\uc790\uac00 \uc11c\ubc84\uc5d0 clang-format \uc744 \uc815\uc2dd\uc73c\ub85c \uc124\uce58\ud574\uc8fc\uc5c8\ub2e4\uba74 \ubd88\ud544\uc694\ud574\uc9c4 \uc774 standalone \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc0ad\uc81c\ud558\uba74 \uc88b\uc744 \uac83\uc785\ub2c8\ub2e4.","title":"clang-format \uc124\uce58"},{"location":"sync/convention/step1-1/#clang-format_2","text":"","title":"clang-format \uc0ac\uc6a9\ubc95"},{"location":"sync/convention/step1-1/#clang-format_3","text":"\uc6b0\uc120 WICWIU \uc5d0\uc11c\uc758 clang-format \ud3ec\ub9f7\ud305\uc744 \ub110\ub9ac \uc54c\ub824\uc9c4 C++ \ud3ec\ub9f7\ud305\uc73c\ub85c \ud1b5\uc77c\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ud6c4\uc5d0 \ud3ec\ub9f7\ud305\uc744 \ubc14\uafb8\uace0 \uc2f6\ub2e4\uba74 WICWIU \ud300\uc6d0\ub4e4 \uac04\uc758 \ud611\uc758\ub97c \ud1b5\ud558\uc5ec \ubc14\uafc0 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud558\uc5ec \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c .clang-format \uc744 \ubc1b\uc544\uc11c .clang-format \ud30c\uc77c\uc5d0 \uc800\uc7a5\ud574\uc8fc\uc138\uc694. $ git clone https://gist.github.com/ccss17/48b6c29ba8cb72b02d5166e5bf6bfddd $ cp 48b6c29ba8cb72b02d5166e5bf6bfddd/.clang-format ~ \uc774\uc81c WICWIU \ub97c \uc790\ub3d9\uc73c\ub85c \ud3ec\ub9f7\uc744 \ud1b5\uc77c\ud560 \uc218 \uc788\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4.","title":"clang-format \ud3ec\ub9f7\ud305 \ud1b5\uc77c"},{"location":"sync/fewshot/step0/","text":"\ubc29\ubc95\ub860 \u00b6 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c \ubc29\ubc95\ub860 (\uc560\uc790\uc77c) Plan \u00b6 \uacc4\ud68d Tasklist \u00b6 \u2605 Gr1nder chy0428 joyfulbean ccss17 DataSampling Qudruplet Loss \uad6c\ud604 Data2Tensor \uad6c\ud604 DataTensor \uad6c\ud604 BlockSampling Transform(Horizontal flip, Random Crop) \uad6c\ud604 FaceNet \ub17c\ubb38 step 3. \uc5ed\uc804\ud30c Normalization \uad6c\ud604 createImageList \uad6c\ud604 ImageProcess \ud074\ub798\uc2a4 \uad6c\ud604 image2imgWrp \uad6c\ud604 allocateImageBuffer \ud568\uc218 \uad6c\ud604 test_transform \ud568\uc218 \uad6c\ud604 Tensor2Image \uad6c\ud604","title":"\ubc29\ubc95\ub860"},{"location":"sync/fewshot/step0/#_1","text":"\uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c \ubc29\ubc95\ub860 (\uc560\uc790\uc77c)","title":"\ubc29\ubc95\ub860"},{"location":"sync/fewshot/step0/#plan","text":"\uacc4\ud68d","title":"Plan"},{"location":"sync/fewshot/step0/#tasklist","text":"\u2605 Gr1nder chy0428 joyfulbean ccss17 DataSampling Qudruplet Loss \uad6c\ud604 Data2Tensor \uad6c\ud604 DataTensor \uad6c\ud604 BlockSampling Transform(Horizontal flip, Random Crop) \uad6c\ud604 FaceNet \ub17c\ubb38 step 3. \uc5ed\uc804\ud30c Normalization \uad6c\ud604 createImageList \uad6c\ud604 ImageProcess \ud074\ub798\uc2a4 \uad6c\ud604 image2imgWrp \uad6c\ud604 allocateImageBuffer \ud568\uc218 \uad6c\ud604 test_transform \ud568\uc218 \uad6c\ud604 Tensor2Image \uad6c\ud604","title":"Tasklist"},{"location":"sync/fewshot/step1-1/","text":"Info \uc774\uacf3\uc740 fewshot-learning \uc744 \uad6c\ud604\ud558\uae30 \uc704\ud55c WICWIU \uac1c\ubc1c\ud300\uc758 WICWIU \ubd84\uc11d/\ucf54\ub529 \uacfc\uc815\uc744 \uae30\ub85d\ud574\ub450\ub294 \uacf3\uc785\ub2c8\ub2e4. WICWIU \uc758 \ud559\uc2b5 \uacfc\uc815\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774\ub8e8\uc5b4\uc84c\ub2e4\ub294 \uac83\uc744 \uc774\ubbf8 \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4. Step 1. \ud559\uc2b5 \ub370\uc774\ud130 \u2192 Tensor Step 2. \uc21c\uc804\ud30c Step 3. \uc5ed\uc804\ud30c Step 4. Weight \ud30c\ub77c\ubbf8\ud130 \uac31\uc2e0 \uc5ec\uae30\ub294 fewshot \ud300\uc774 \" Step 1. \ud559\uc2b5 \ub370\uc774\ud130 \u2192 Tensor \" \uc744 \uad6c\ud604\ud558\uae30 \uc704\ud55c \uacfc\uc815\uc744 \uae30\ub85d\ud574\ub450\ub294 \uacf3\uc785\ub2c8\ub2e4. Coding: CasiaWebFace Image to vector \u00b6 \uc6b0\ub9ac fewshot \ud300\uc740 WICWIU \uac1c\ubc1c \uac00\uc774\ub4dc\uc758 WICWIU \ub85c \ud559\uc2b5\ud558\uae30 \uc758 \uccab\ubc88\uc9f8 \uacfc\uc815\uc778 \" Step 1. \ud559\uc2b5 \ub370\uc774\ud130 \u2192 Tensor \" \uc744 \uc644\uc218\ud558\uae30 \uc704\ud558\uc5ec \ud559\uc2b5\uc2dc\ucf1c\uc57c\ud560 \ub370\uc774\ud130\uc14b\uc778 Casia Web Face \ub97c Tensor \ub85c \ubcc0\ud658\ud574\uc57c \ud55c\ub2e4. getDirList \ud568\uc218 \u00b6 \uba3c\uc800 CasiaWebFace \uc774\ubbf8\uc9c0\ub97c \uc790\ub3d9\uc73c\ub85c \uc77d\uc5b4\uc624\uae30 \uc704\ud558\uc5ec \ub514\ub809\ud1a0\ub9ac \ub9ac\uc2a4\ud2b8\ub97c \uc5bb\uc744 \uc218 \uc788\ub294 \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uc5b4 \ubd24\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <string> #include <iostream> #include <fstream> #include <iterator> #include <vector> #include <dirent.h> #include <sys/types.h> DIR * getDirList ( const char * dirName ) { DIR * dir ; if (( dir = opendir ( dirName )) == NULL ) throw std :: invalid_argument ( \"could not open directory\" ); return dir ; } 11~14 : getDirList \ud568\uc218\uc5d0 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c\ub97c \uc785\ub825\ud558\uba74 \ub514\ub809\ud1a0\ub9ac \ub0b4\ubd80 \ud30c\uc77c \uc815\ubcf4\ub97c \uac16\uace0 \uc788\ub294 DIR \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 CasiaWebFace \uc774\ubbf8\uc9c0\uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 /tmp/casia_train \ub514\ub809\ud1a0\ub9ac\uc758 \ub0b4\ubd80 \ud30c\uc77c\uc744 \ubc18\ud658\ubc1b\ub294 \ucf54\ub4dc\ub97c \uc9e4 \uc218 \uc788\ub2e4. test_getDirList \ud568\uc218 \u00b6 Info test_getDirList \ud568\uc218\uc758 test_ \ub294 camel case \uac00 \uc544\ub2cc snake case \ub85c \ub418\uc5b4\uc788\ub294\ub370, \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uc784\uc744 \uac15\uc870\ud558\uace0 \uc2e4\uc81c\ub85c \uc0ac\uc6a9\ub418\uba74 \uc548\ub418\ub294 \ud568\uc218\uc784\uc744 \uac15\uc870\ud558\uae30 \uc704\ud558\uc5ec \uadf8\ub807\uac8c \ud55c \uac83\uc774\ub2e4. \ub098\uba38\uc9c0 \ucf54\ub4dc\ub294 \ubaa8\ub450 camel case \ub85c \ucf54\ub529\ub418\uc5b4 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 void test_getDirList ( bool error = false ); int main ( int argc , char const * argv []) { test_getDirList (); return EXIT_SUCCESS ; } void test_getDirList ( bool error ) { DIR * dir ; try { dir = ( error ) ? \\ getDirList ( \"aweoifjaowief\" ) : \\ getDirList ( \"/tmp/casia_train\" ); struct dirent * ent ; while (( ent = readdir ( dir )) != NULL ) { std :: cout << ent -> d_name << std :: endl ; } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } } 1 : test_getDirList \ub294 error \uc778\uc790\ub97c \ubc1b\ub294\ub370 false \uac00 \uae30\ubcf8\uac12\uc73c\ub85c \uc124\uc815\ub418\uc5b4 \uc788\ub2e4. 14~21 : error = false \uc778 \uacbd\uc6b0 /tmp/casia_train \ub514\ub809\ud1a0\ub9ac \ub0b4\ubd80 \ud30c\uc77c\ub4e4\uc744 \ucd9c\ub825\ud55c\ub2e4. 14~21 : error \ub97c true \ub85c \uc124\uc815\ud55c\ub2e4\uba74 \uc758\ub3c4\uc801\uc73c\ub85c \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \ucf54\ub4dc\uac00 \ub41c\ub2e4. \uc989, \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \ud30c\uc77c \uacbd\ub85c\ub97c getDirList \ud568\uc218\uc5d0 \uc785\ub825\ud558\uc5ec \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\uc11c \uc5d0\ub7ec \ucc98\ub9ac \ucf54\ub4dc( try~catch ) \uac00 \uc798 \uc791\ub3d9\ud558\ub294\uc9c0 \uac80\uc99d\ud55c\ub2e4. test_getFirstCasiaImage \ud568\uc218 \u00b6 \uc774\ud6c4 getDirList \ud568\uc218\ub97c \ud65c\uc6a9\ud558\uc5ec /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\ubcf4\ub294 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uc5b4 \ubd24\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 void test_getFirstCasiaTrainImage (); int main ( int argc , char const * argv []) { test_getFirstCasiaTrainImage (); return EXIT_SUCCESS ; } void test_getFirstCasiaTrainImage () { DIR * dir ; std :: string casiaTrainDirPath = \"/tmp/casia_train\" ; std :: string casiaTrainFirstDirPath ; std :: string casiaTrainFirstImagePath ; // // Get first directory of casia_train // try { dir = getDirList ( casiaTrainDirPath . c_str ()); if ( dir == nullptr ) throw ; struct dirent * ent ; for ( int idx = 0 ; ( ent = readdir ( dir )) != NULL ; idx ++ ) { if ( idx == 2 ) // first index (because: 0 -> . 1 -> .. 2 -> first path) { casiaTrainFirstDirPath = casiaTrainDirPath + \"/\" + std :: string ( ent -> d_name ); } } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } // // Get first image of first directory // try { dir = getDirList ( casiaTrainFirstDirPath . c_str ()); if ( dir == nullptr ) throw ; struct dirent * ent ; for ( int idx = 0 ; ( ent = readdir ( dir )) != NULL ; idx ++ ) { if ( idx == 2 ) // first index (because: 0 -> . 1 -> .. 2 -> first path) { casiaTrainFirstImagePath = casiaTrainFirstDirPath + \"/\" + std :: string ( ent -> d_name ); } } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } // // Convert image to vector<unsigned char> // std :: ifstream casiaTrainFirstImage ( casiaTrainFirstImagePath , std :: ios :: binary ); std :: vector < unsigned char > casiaTrainFirstImageBuffer ( std :: istreambuf_iterator < char > ( casiaTrainFirstImage ), {}); // // Show result and converted image // std :: cout << \"First image of first caisa_train sub directory:\" << std :: endl ; std :: cout << '\\t' << casiaTrainFirstImagePath << std :: endl ; std :: cout << \"casiaTrainFirstImageBuffer size: \" << std :: endl ; std :: cout << '\\t' << casiaTrainFirstImageBuffer . size () << std :: endl ; std :: cout << \"First 10 bytes:\" << std :: endl ; std :: cout << \" \\t \" ; int ct = 0 ; for ( const auto byte : casiaTrainFirstImageBuffer ) { if ( ct < 10 ) std :: cout << static_cast < int > ( byte ) << ' ' ; ct ++ ; } std :: cout << std :: endl ; } 19~39 : /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c\ub97c casiaTrainFirstDirPath \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 42~61 : /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0 \uacbd\ub85c\ub97c casiaTrainFirstImagePath \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 66~67 : /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0\ub97c \ubc14\uc774\ub108\ub9ac\ub85c \uc77d\uace0 unsigned char \uc790\ub8cc\ud615\uc744 \uac16\ub294 vector \ub85c \ubcc0\ud658\ud55c\ub2e4. 82~87 : \uc774\ubbf8\uc9c0\uc758 \uccab 10 \ubc14\uc774\ud2b8\ub97c \uc77d\uace0 int \ub85c \ud615\ubcc0\ud658\ud558\uc5ec \ucd9c\ub825\ud574\ubcf8\ub2e4. \uadf8\ub0e5 \uc798 \uc77d\ud614\ub294\uc9c0 \ud655\uc778\ud558\ub294 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uc774\ub2e4. Info WICWIU \ub294 C++ \ud504\ub85c\uc81d\ud2b8\uc774\uae30 \ub54c\ubb38\uc5d0 C \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c C++ \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\ub824\uace0 \ub178\ub825\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\uc11c \ub2e4\uc74c \ucf54\ub4dc\ub294 C \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uc785\ub2c8\ub2e4. for ( const auto byte : casiaTrainFirstImageBuffer ) { std :: cout << ( int )( byte ) << ' ' ; } \ub2e4\uc74c \ucf54\ub4dc\ub294 C++ \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uc785\ub2c8\ub2e4. for ( const auto byte : casiaTrainFirstImageBuffer ) { std :: cout << static_cast < int > ( byte ) << ' ' ; } C++ \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c C \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\uba74 \ud504\ub85c\uc81d\ud2b8 \uc548\uc815\uc131\uc5d0 \ubb38\uc81c\uac00 \uc0dd\uae38 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc8fc\uc758\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ub9c1\ud06c\ub97c \ucc38\uc870\ud558\uba74 C++ \ucf54\ub529 \uc2a4\ud0c0\uc77c \ub4f1\uc5d0 \ub300\ud55c \uc88b\uc740 \uc815\ubcf4\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. https://github.com/AnthonyCalandra/modern-cpp-features https://github.com/isocpp/CppCoreGuidelines https://github.com/lefticus/cppbestpractices Analysis: Dataset to Tensor \u00b6 \uc6b0\ub9ac\ub294 \uc131\uacf5\uc801\uc73c\ub85c Casia Web Face \uc758 \ub514\ub809\ud1a0\ub9ac \ub9ac\uc2a4\ud2b8\ub97c \uc77d\uc5b4\ubcf4\uc558\uace0 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\uc11c \ubca1\ud130\ub85c \ubcc0\ud658\ud574\ubcf4\uc558\ub2e4. \ud558\uc9c0\ub9cc \uc5ec\uae30\uc5d0\uc11c \ub354 \uc774\uc0c1 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub529\uc744 \ud560 \uc218 \uc5c6\uc5c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \uc7a0\uc2dc \ucf54\ub529\uc744 \uba48\ucd94\uace0 \uae30\uc874\uc758 WICWIU \ucf54\ub4dc\ub97c \ubd84\uc11d\ud558\uae30\ub85c \ud588\ub2e4. \uc6b0\ub9ac fewshot \ud300\uc740 LFW \ud300\uc774 \uac1c\ubc1c\ud574\ub454 \ucf54\ub4dc\ub97c \ucc38\uace0\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 LFW \ucf54\ub4dc\ub97c \ubd84\uc11d\ud574\ubcf4\uc558\ub2e4. \uc9c0\uae08\uc758 \uad00\uc2ec\uc0ac\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 LFW \ud300\uc758 \ucf54\ub4dc\uc5d0\uc11c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub4dc \ud750\ub984\uc744 \uc911\uc810\uc73c\ub85c \ubd84\uc11d\uc744 \uc2dc\ub3c4\ud574\ubcf4\uc558\ub2e4. Note tutorials/LFW/ \uacbd\ub85c\ub97c LFW/ \ub85c \ucd95\uc57d\ud558\uc5ec \uc0ac\uc6a9\ud558\uc600\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 LFW \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud558\uace0 \ud14c\uc2a4\ud2b8\ud558\ub294 main \ud568\uc218\ub97c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\uc5ec \uc778\uacf5\uc2e0\uacbd\ub9dd\uc5d0 \uc785\ub825\ud558\ub294 \uac83\uc744 \uc911\uc2ec\uc73c\ub85c \ubd84\uc11d \ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/main.cpp : main \ud568\uc218 \u00b6 \ubd84\uc11d \ubaa9\ud45c LFW \ub97c \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc744 \uac00\uc838\uc628 \ud6c4 \ud559\uc2b5\ud558\uace0 \ud14c\uc2a4\ud2b8\ud558\ub294 main \ud568\uc218\uc5d0\uc11c \uc5b4\ub5bb\uac8c \ub370\uc774\ud130\uc14b\uc744 \uac00\uc838\uc624\uace0 Tensor \ub85c \ubcc0\ud658\ud558\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 #define NUMBER_OF_CLASS 5749 // for lfw_funneled ... int main ( int argc , char const * argv []) { ... // ======================= Select net =================== NeuralNetwork < float > * net = new my_FaceNet < float > ( x , label , NUMBER_OF_CLASS ); ... vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); DataLoader < float > * train_dataloader = new LFWSampler < float > ( NUMBER_OF_CLASS , train_dataset , BATCH , TRUE , 1 , FALSE ); 9 : Compose \uac1d\uccb4\ub97c Resize(224) \uc640 Centercrop(220) \ud30c\ub77c\ubbf8\ud130\ub85c \uc0dd\uc131\ud55c\ub2e4. 10-11 : LFWDataset \uc744 \uc0dd\uc131\ud558\uace0 LFWSampler \ub97c \ub9cc\ub4e0\ub2e4. 1 2 3 4 5 6 // ======================= Train ======================= net -> SetModeTrain (); for ( int j = 0 ; j < loop_for_train ; j ++ ) { std :: vector < Tensor < float > *> * temp = train_dataloader -> GetDataFromGlobalBuffer (); ... net -> FeedInputTensor ( 2 , ( * temp )[ 0 ], ( * temp )[ 1 ]); 4 : \ud559\uc2b5\uc744 \uc2dc\uc791\ud560 \ub54c LFWSampler::GetDataFromGlobalBuffer \ub97c \ud1b5\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc744 Tensor<float> \ud3ec\uc778\ud130\ud615 \ubca1\ud130 \ud3ec\uc778\ud130\uc5d0 \uc800\uc7a5\ud55c\ub2e4. 6 : Tensor \ub85c \ubcc0\ud658\ub41c \ub370\uc774\ud130\uc14b\uc744 \uc2e0\uacbd\ub9dd\uc5d0 \uc785\ub825\ud574\uc900\ub2e4. 1 2 3 4 5 6 // ======================= Test ====================== ... for ( int i = 0 ; i < curBatch ; i ++ ){ dataset . CopyData ( batchIdx * BATCH + i , vTestSample [ i ]); } net -> InputToFeature ( INPUT_DIM , vTestSample . size (), & vTestSample [ 0 ], FEATURE_DIM , & vTestFeature [ 0 ], BATCH ); 4 : \ud14c\uc2a4\ud2b8\ub97c \ud560 \ub54c\uc5d0\ub294 LFWDataset::CopyData \ub97c \ud1b5\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc744 float \ud3ec\uc778\ud130\ud615 \ubca1\ud130\uc5d0 \uc800\uc7a5\ud55c\ub2e4. 6 : \uc5ec\uae30\uc5d0\uc11c \uc2e0\uacbd\ub9dd\uc5d0 \ub370\uc774\ud130\uc14b\uc744 \uc785\ub825\ud574\uc8fc\ub294 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 main \ud568\uc218\uc5d0\uc11c\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud55c \ud6c4 \ud559\uc2b5 \uc2dc\uc5d0\ub294 LFWSampler::GetDataFromGlobalBuffer \uc73c\ub85c \ub370\uc774\ud130\uc14b\uc744 \ub9c8\ub828\ud558\uace0 \ud14c\uc2a4\ud2b8 \uc2dc\uc5d0\ub294 LFWDataset::CopyData \ub85c \ub370\uc774\ud130\uc14b\uc744 \ub9c8\ub828\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uadf8\ub7ec\ubbc0\ub85c LFWSampler::GetDataFromGlobalBuffer \uc640 LFWDataset::CopyData \ub97c \ubd84\uc11d\ud558\uba74 \ub370\uc774\ud130\uc14b\uc744 \uc5b4\ub5bb\uac8c Tensor \ub85c \ubc14\uafb8\uc5b4 \uc2e0\uacbd\ub9dd\uc5d0 \uc785\ub825\ud560 \uc218 \uc788\ub294\uc9c0 \ucc38\uace0\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7f0\ub370 LFWSampler \uac00 LFWDataset \uc5d0 \uc758\uc874\ud558\uae30 \ub54c\ubb38\uc5d0 LFWDataset \uc744 \ubd84\uc11d\ud558\uace0 LFWSampler \uc744 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 LFWDataset \uc740 LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); \uc73c\ub85c \uc0dd\uc131\ub418\uba70 vision::Compose *transform \uac00 \uc778\uc790\ub85c \uc804\ub2ec\ub418\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); \ubd80\ud130 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 Compose \ub294 \uc0dd\uc131\uc790\uc5d0\uc11c {new vision::Resize(224), new vision::CenterCrop(220)} \uc744 \uc804\ub2ec\ubc1b\uae30 \ub54c\ubb38\uc5d0 \uc774\uac83\ub4e4\ubd80\ud130 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 Resize \uc640 CenterCrop \ud074\ub798\uc2a4\ub294 Transform \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\ub294\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uba3c\uc800 Transform \ud074\ub798\uc2a4\ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c Transform \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 namespace vision { class Transform { private : public : Transform () { } virtual ~ Transform () {} virtual void DoTransform ( ImageWrapper & imgWrp ) { } }; ... } 1-2 : Transform \ud074\ub798\uc2a4\ub294 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc120\uc5b8\ub41c \ud074\ub798\uc2a4\uc774\ub2e4. 5-7 : \uc0dd\uc131\uc790\uc640 \uba54\uc18c\ub4dc\ub4e4\uc774 \uad6c\ud604\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4. \uc774\ub85c\uc368 \ud074\ub798\uc2a4 \uad6c\uc870 \uc720\uc9c0\ub97c \uc704\ud55c \ucd94\uc0c1 \ud074\ub798\uc2a4\uc784\uc744 \uc54c \uc218 \uc788\ub2e4. Danger \uadf8\ub807\ub2e4\uba74 \uc774 \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uac83\uc744 \ub9c9\uae30 \uc704\ud558\uc5ec \ub098\uc911\uc5d0 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub85c \uc120\uc5b8\ud560 \ud544\uc694\uac00 \uc788\uc744 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 Transform \uc740 DoTransform \uba54\uc18c\ub4dc \uad6c\uc870\ub9cc \uac16\uace0 \uc788\ub294 \ucd94\uc0c1\ud074\ub798\uc2a4\uc774\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c Resize \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::Resize(224) ) \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 namespace vision { ... class Resize : public Transform { private : int newHeight ; int newWidth ; public : Resize ( int heigth , int width ) : newHeight ( heigth ), newWidth ( width ) { } Resize ( int size ) : newHeight ( size ), newWidth ( size ) { } virtual ~ Resize () {} virtual void DoTransform ( ImageWrapper & imgWrp ) { ... } }; ... } 1-3 : Resize \ub294 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc815\uc758\ub41c Transform \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc774\ub2e4. 12 : 224 \ub97c \uc804\ub2ec\ubc1b\uc544 newHeight \uc640 newWidth \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 Resize \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::Resize(224) ) \uc740 224 \ub97c \uc804\ub2ec\ubc1b\uc544 newHeight \uc640 newWidth \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c CenterCrop \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::CenterCrop(220) ) \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 namespace vision { ... class CenterCrop : public Transform { private : int m_heigth ; int m_width ; public : CenterCrop ( int heigth , int width ) : m_heigth ( heigth ), m_width ( width ) { } CenterCrop ( int size ) : m_heigth ( size ), m_width ( size ) { } virtual ~ CenterCrop () {} virtual void DoTransform ( ImageWrapper & imgWrp ) { ... } }; ... } 1-3 : CenterCrop \uc740 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc815\uc758\ub41c Transform \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc774\ub2e4. 11 : 220 \ub97c \uc804\ub2ec\ubc1b\uc544 m_height \uc640 m_width \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger Naming Convention \uc774 \ud1b5\uc77c\uc774 \uc548\ub418\uc5b4\uc788\uae30 \ub54c\ubb38\uc5d0 \ub098\uc911\uc5d0 \ud1b5\uc77c\ud574\uc57c\ud560 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 CenterCrop \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::CenterCrop(220) ) \uc740 220 \ub97c \uc804\ub2ec\ubc1b\uc544 m_height \uc640 m_width \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c Compose \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 namespace vision { ... class Compose : public Transform { private : std :: vector < Transform *> m_listOfTransform ; int m_size ; public : Compose ( std :: initializer_list < Transform *> lvalue ) : m_listOfTransform ( lvalue ) { m_size = m_listOfTransform . size (); } virtual ~ Compose () { ... } virtual void DoTransform ( ImageWrapper & imgWrp ) { ... } }; ... } 1-3 : Compose \uc740 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc815\uc758\ub41c Transform \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc774\ub2e4. 9-11 : {new vision::Resize(224), new vision::CenterCrop(220)} \ub97c \uc804\ub2ec\ubc1b\uc544 std::vector<Transform *> m_listOfTransform \uc5d0 \uc800\uc7a5\ud558\uace0 std::vector<Transform *> m_listOfTransform \uc758 \uc0ac\uc774\uc988\ub97c int m_size \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 Compose \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); \uc740 {new vision::Resize(224), new vision::CenterCrop(220)} \uc744 \uc804\ub2ec\ubc1b\uc544 std::vector<Transform *> m_listOfTransform \uc5d0 \uc800\uc7a5\ud558\uace0, std::vector<Transform *> m_listOfTransform \uc758 \uc0ac\uc774\uc988\ub97c int m_size \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uc774\uc81c LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); \uc744 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 LFWDataset \uc740 Dataset \uc758 \ud558\uc704\ud074\ub798\uc2a4\uc774\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 Dataset \ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c Dataset \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 template < typename DTYPE > class Dataset { // [] operator override private : /* data */ char m_dataPath [ 256 ]; std :: vector < char *> imageName ; std :: vector < int > label ; std :: vector < int > m_vPosIndex ; std :: vector < int > m_vNegIndex ; public : Dataset (); virtual ~ Dataset (); virtual void Alloc (); virtual void Dealloc (); virtual std :: vector < Tensor < DTYPE > *>* GetData ( int idx ); virtual std :: vector < Tensor < DTYPE > *>* GetDataOfPositiveLabel ( int anchorIdx , int * pPosIdx = NULL ); virtual std :: vector < Tensor < DTYPE > *>* GetDataOfNegativeLabel ( int anchorIdx , int * pNegIdx = NULL ); void SetLabel ( const int * pLabel , int noLabel ); void SetLabel ( const unsigned char * pLabel , int noLabel ); virtual int GetLabel ( int idx ) { ... } virtual int GetLength () { return label . size (); } int GetNumOfDatasetMember (); virtual void CopyData ( int idx , DTYPE * pDest ) { // copy i-th iamge into pDest. (designed for k-NN) ... } virtual void SetPosNegIndices ( std :: vector < int > * pvPosIndex , std :: vector < int > * pvNegIndex ){ // registers indices fo positive and negative samples for each sample ... } std :: vector < int > & GetPositiveIndices () { return m_vPosIndex ; } std :: vector < int > & GetNegativeIndices () { return m_vNegIndex ; } virtual int GetPositiveIndex ( int idx ){ // for triplet loss ... } virtual int GetNegativeIndex ( int idx ){ // for triplet loss ... } }; ... template < typename DTYPE > Dataset < DTYPE >:: Dataset () { } 1 : Dataset \uc740 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc73c\ub85c \uc815\uc758\ub41c \ud074\ub798\uc2a4\uc774\ub2e4. Danger API \uc5d0\ub3c4 Dataset \ud074\ub798\uc2a4\uc758 \uc124\uba85\uc774 \ub098\uc640\uc788\uc9c0 \uc54a\uae30\uc5d0 \uc77c\uc77c\uc774 \uc18c\uc2a4\ucf54\ub4dc\ub97c \ubd84\uc11d\ud568\uc73c\ub85c\uc368 \ud074\ub798\uc2a4\ub97c \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \ub098\uc911\uc5d0 API \uc5d0 \uc124\uba85\uc744 \ucd94\uac00\ud558\uba74 \uc88b\uc744 \uac83 \uac19\ub2e4. 30-40 : Danger \uadf8\ub7f0\ub370 \uc774 \uba54\uc18c\ub4dc\ub4e4\uc774 Dataset \ucd94\uc0c1 \ud074\ub798\uc2a4\uc5d0 \uc788\uc5b4\uc57c\ud558\ub294\uc9c0 \ubaa8\ub974\uaca0\ub2e4. \ub098\uc911\uc5d0 \ud074\ub798\uc2a4 \uc0c1\uc18d\uad00\uacc4\ub97c \ubd84\uc11d\ud574\uc11c \uc815\ub9ac\ub97c \ud55c\ubc88 \ud560 \ud544\uc694\uac00 \uc788\uc744 \uac83 \uac19\ub2e4. 43-44 : Dataset \uc0dd\uc131\uc790\ub294 \uad6c\ud604\ub418\uc5b4\uc788\uc9c0 \uc54a\ub2e4. Danger \uc774\ub294 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc758 \uac1d\uccb4 \uad6c\uc870\ub97c \uc720\uc9c0\ud558\uae30 \uc704\ud55c \ucd94\uc0c1 \uba54\uc18c\ub4dc\uc774\uae30 \ub54c\ubb38\uc5d0 \uc21c\uc218 \ucd94\uc0c1 \uba54\uc18c\ub4dc\ub85c \uc120\uc5b8\ud574\uc11c Dataset \uc758 \uc0dd\uc131\uc744 \ubc29\uc9c0\ud560 \ud544\uc694\uac00 \uc788\uc744 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 Dataset \uac1d\uccb4\ub294 \uad6c\ud604\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc740 \ucd94\uc0c1 \ud074\ub798\uc2a4\uc774\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c LFWDataset \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 template < typename DTYPE > class LFWDataset : public Dataset < DTYPE > { private : ... void CheckClassList (); void CreateImageListOfEachClass (); ... Tensor < DTYPE >* Image2Tensor ( ImageWrapper & imgWrp , int doValueScaling ); public : LFWDataset ( std :: string rootPath , std :: string dataPath , int useClassNum , vision :: Compose * transform ) { m_rootPath = rootPath ; m_dataPath = dataPath ; m_useClasNum = useClassNum ; m_numOfImg = 0 ; trigger = 0 ; m_transform = transform ; assert ( m_transform != NULL ); Alloc (); CheckClassList (); CreateImageListOfEachClass (); LogMessageF ( \"lfw_funneled_label.txt\" , TRUE , \"%d samples \\n \" , this -> GetLength ()); CountSamplePerClass (); } ... virtual void Alloc (); ... }; 1-2 : Dataset<DTYPE> \uc744 \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc73c\ub85c \uc120\uc5b8\ub418\uc5b4 \uc788\ub2e4. 11~16 Danger \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc131\ub2a5\uc774 \ub354 \uc88b\uc544\uc9c0\ub2c8\uae4c \ub098\uc911\uc5d0 \ubc14\uafd4\uc57c \ud560 \ub4ef\ud558\ub2e4. 16 : vision::Compose * m_transform \uc5d0 vision::Compose *transform = new vision::Compose({new vision::Resize(224), new vision::CenterCrop(220)}); \uc744 \uc800\uc7a5\ud55c\ub2e4. 19 : Alloc \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub2e8\ud788 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. template < typename DTYPE > void LFWDataset < DTYPE >:: Alloc () { sem_init ( & sem , 0 , 1 );} Alloc \uc740 \ub2e8\uc21c\ud788 \uc138\ub9c8\ud3ec\ub97c \ucd08\uae30\ud654\ud574\uc900\ub2e4. 20 : CheckClassList \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. template < typename DTYPE > void LFWDataset < DTYPE >:: CheckClassList () { // mnt/ssd/Data/ImageNet/synset_words.txt std :: string filePath = m_rootPath + \"/\" + m_dataPath + \".txt\" ; const char * cstr = filePath . c_str (); FILE * pFile = NULL ; pFile = fopen ( cstr , \"r\" ); ... char realValue [ 100 ]; for ( int i = 0 ; i < m_useClasNum ; i ++ ) { if ( fscanf ( pFile , \"%s\" , realValue )) { m_className . push_back (( std :: string ) realValue ); while ( fgetc ( pFile ) != '\\n' ) ; ... } \ub2e8\uc21c\ud788 std::string filePath = m_rootPath + \"/\" + m_dataPath + \".txt\"; \ub97c \uc77d\uc5b4\uc11c \ud55c\uc904\uc529 std::vector<std::string> m_className \ubca1\ud130\uc5d0 \uc800\uc7a5\ud558\uace0 \uc788\ub2e4. Danger C \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ub41c \uac83\uc774 \ub9ce\uc544\uc11c \ub098\uc911\uc5d0 C++ \uc2a4\ud0c0\uc77c\ub85c \uace0\uccd0\uc57c\ud560 \uac83 \uac19\ub2e4. 37 : CreateImageListOfEachClass() \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 template < typename DTYPE > void LFWDataset < DTYPE >:: CreateImageListOfEachClass () { std :: vector < int > vTmpLabel ; vTmpLabel . reserve ( 2048 ); for ( int classNum = 0 ; classNum < m_useClasNum ; classNum ++ ) { std :: string filePath = m_rootPath + '/' + m_dataPath + '/' + m_className [ classNum ] + \"/list.txt\" ; // check with printf const char * cstr = filePath . c_str (); FILE * pFile = NULL ; pFile = fopen ( cstr , \"r\" ); char realValue [ 100 ]; int numOfImageOfClass = 0 ; ... if ( fscanf ( pFile , \"%s\" , realValue )) { // first realValue is already readed above numOfImageOfClass = atoi ( realValue ); for ( int imageNum = 0 ; imageNum < numOfImageOfClass ; imageNum ++ ) { if ( fscanf ( pFile , \"%s\" , realValue )) { m_aImagePath . push_back (( std :: string )( m_className [ classNum ] + '/' + realValue )); vTmpLabel . push_back ( classNum ); ... fclose ( pFile ); } m_numOfImg = m_aImagePath . size (); this -> SetLabel ( & vTmpLabel [ 0 ], m_numOfImg ); assert ( m_numOfImg > 0 ); } 3 : Note https://en.cppreference.com/w/cpp/container/vector/reserve \uc5d0 std::vector<T,Allocator>::reserve \ub0b4\uc6a9\uc774 \uc788\ub294\ub370 \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e4\uc5b4\uac00\ub294 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud544\uc694\ud55c \ub9cc\ud07c \ud558\ub3c4\ub85d \ud574\uc11c \uc18d\ub3c4\ub3c4 \ub192\uc774\uace0, \uba54\ubaa8\ub9ac \ud6a8\uc728\ub3c4 \ucc59\uae30\ub294 \uc88b\uc740 \ucf54\ub4dc\uc778 \uac83 \uac19\ub2e4. 6~9 : std::string filePath = m_rootPath + '/' + m_dataPath + '/' + m_className[classNum] + \"/list.txt\"; \ub97c \uc77d\uc5b4\uc11c pFile \ub85c \ud30c\uc77c\uc744 \uc5f0\ub2e4. 13-16 : pFile \uc758 \ud55c\uc904\uc744 realValue \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc774\uac83\uc744 atoi \ud568\uc218\ub85c int \ub85c \ubcc0\ud658\ud558\uc5ec numOfImageOfClass \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 16~19 : numOfImageOfClass \ub9cc\ud07c for \ubb38\uc744 \ub3cc\uba74\uc11c pFile \ub2e4\uc74c \ub77c\uc778\uc744 realValue \uc5d0 \uc77d\uace0 (std::string)(m_className[classNum] + '/' + realValue) \uc744 std::vecotr<std::string> m_aImagePath \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger \ud558\uc9c0\ub9cc C \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uacfc C \uc2a4\ud0c0\uc77c \uc5d0\ub7ec \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 C++ \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uacfc try-catch \ubb38\uc73c\ub85c \ubc14\uafb8\uc5b4\uc57c \ud560 \uac83 \uac19\ub2e4. 19 : \uadf8\ub9ac\uace0 std::vector<int> vTmpLabel; \uc5d0 classNum \uc744 \uc800\uc7a5\ud55c\ub2e4. classNum \uc740 0 \ubd80\ud130 m_useClasNum \uae4c\uc9c0\uc758 int \uc774\ub2e4. 23-24 : \ub9c8\uc9c0\ub9c9\uc73c\ub85c m_aImagePath \ubca1\ud130 \uc0ac\uc774\uc988\ub97c \uac16\uace0 \uc640\uc11c m_numOfImg \uc5d0 \uc800\uc7a5\ud558\uace0 SetLabel \ud568\uc218\uc5d0 vTmpLabel \uc758 \uc8fc\uc18c\uac12\uacfc \ud568\uaed8 \uc804\ub2ec\ud574\uc900\ub2e4. \uc774\ub85c\uc368 CreateImageListOfEachClass \ub294 \uc774\ubbf8\uc9c0 \uacbd\ub85c\uc640 \ud074\ub798\uc2a4 \ub77c\ubca8\uc744 \ubca1\ud130\uc5d0 \uc798 \uc800\uc7a5\ud574\uc8fc\ub294 \ud568\uc218\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 LFWDataset \uc740 std::string filePath = m_rootPath + \"/\" + m_dataPath + \".txt\"; \ub97c \uc77d\uc5b4\uc11c \ud074\ub798\uc2a4 \ub9ac\uc2a4\ud2b8\ub97c std::vector<std::string> m_className \uc5d0 \uc800\uc7a5\ud558\uace0, std::string filePath = m_rootPath + '/' + m_dataPath + '/' + m_className[classNum] + \"/list.txt\"; \ub97c \uc77d\uc5b4\uc11c \uc774\ubbf8\uc9c0 \uacbd\ub85c\ub97c std::vecotr<std::string> m_aImagePath \uc5d0 \uc800\uc7a5\ud558\uace0, this->SetLabel(&vTmpLabel[0], m_numOfImg); \uc744 \ud638\ucd9c\ud558\uba74\uc11c \uc0dd\uc131\ub41c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uc774\uc81c LFWDataset::CopyData \uba54\uc18c\ub4dc\ub97c \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc804\uc5d0 Dataset::SetLabel \uba54\uc18c\ub4dc\uac00 \uc815\ud655\ud788 \ubb34\uc5c7\uc744 \ud558\ub294\uc9c0 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c this->SetLabel(&vTmpLabel[0], m_numOfImg); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 template < typename DTYPE > void Dataset < DTYPE >:: SetLabel ( const unsigned char * pLabel , int noLabel ) { try { label . resize ( noLabel ); ... for ( int i = 0 ; i < noLabel ; i ++ ) label [ i ] = ( int ) pLabel [ i ]; } 1 : std::vector<int> \uc758 \uccab\ubc88\uc9f8 \uc6d0\uc18c\uc758 \uc8fc\uc18c\uac12\uc744 const unsigned char * \ub85c \ubc1b\ub294\ub2e4. Danger \ub17c\uc758\uac00 \ud544\uc694\ud55c \ucf54\ub4dc\uc774\ub2e4. \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc774 \uc77c\uc5b4\ub098\uae30 \ub54c\ubb38\uc774\ub2e4. 4 : std::vector<int> label; \uc758 \ud06c\uae30\ub97c noLabel \ub85c \uc870\uc815\ud55c\ub2e4. 6-7 : std::vector<int> label; \uc5d0 pLabel[i] \ub97c \uc800\uc7a5\ud55c\ub2e4. \ub530\ub77c\uc11c 0 \ubd80\ud130 m_useClasNum \uae4c\uc9c0\uc758 int \uac00 \uc800\uc7a5\ub41c\ub2e4. \ubd84\uc11d \uacb0\ub860 this->SetLabel(&vTmpLabel[0], m_numOfImg); \ub294 Dataset \uc758 std::vector<int> label; \uc5d0 vTmpLabel \uc758 \ub0b4\uc6a9\uc744 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c dataset.CopyData(batchIdx * BATCH + i, vTestSample[i]); \ub85c \uc5b4\ub5bb\uac8c \ub370\uc774\ud130\uac00 Tensor \ub85c \ubcc0\ud658\ub418\uc5b4 \uc2e0\uacbd\ub9dd\uc73c\ub85c \uc785\ub825\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 template < typename DTYPE > void LFWDataset < DTYPE >:: CopyData ( int idx , DTYPE * pDest ) { Tensor < DTYPE > * image = NULL ; ImageWrapper imgWrp ; // image load this -> AllocImageBuffer ( idx , imgWrp ); m_transform -> DoTransform ( imgWrp ); image = this -> Image2Tensor ( imgWrp , TRUE ); memcpy ( pDest , & ( * image )[ 0 ], INPUT_DIM * sizeof ( DTYPE )); delete image ; } 7 : AllocImageBuffer \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 template < typename DTYPE > void LFWDataset < DTYPE >:: AllocImageBuffer ( int idx , ImageWrapper & imgWrp ) { int width , height ; FILE * jpegFile = NULL ; unsigned char * jpegBuf = NULL ; int pixelFormat = TJPF_RGB ; tjhandle tjInstance = NULL ; long size ; int inSubsamp , inColorspace ; unsigned long jpegSize ; // create file address std :: string filePath = m_rootPath + '/' + m_dataPath + '/' + m_aImagePath [ idx ]; // check with printf const char * cstr = filePath . c_str (); // Load image (no throw and catch) /* Read the JPEG file into memory. */ jpegFile = fopen ( cstr , \"rb\" ); fseek ( jpegFile , 0 , SEEK_END ); size = ftell ( jpegFile ); fseek ( jpegFile , 0 , SEEK_SET ); jpegSize = ( unsigned long ) size ; jpegBuf = ( unsigned char * ) tjAlloc ( jpegSize ); if ( fread ( jpegBuf , jpegSize , 1 , jpegFile ) < 1 ) exit ( -1 ); fclose ( jpegFile ); jpegFile = NULL ; tjInstance = tjInitDecompress (); tjDecompressHeader3 ( tjInstance , jpegBuf , jpegSize , & width , & height , & inSubsamp , & inColorspace ); imgWrp . imgBuf = ( unsigned char * ) tjAlloc ( width * height * tjPixelSize [ pixelFormat ]); tjDecompress2 ( tjInstance , jpegBuf , jpegSize , imgWrp . imgBuf , width , 0 , height , pixelFormat , 0 ); imgWrp . imgShape = new Shape ( tjPixelSize [ pixelFormat ], height , width ); tjFree ( jpegBuf ); jpegBuf = NULL ; tjDestroy ( tjInstance ); tjInstance = NULL ; } 12-21 : std::string filePath = m_rootPath + '/' + m_dataPath + '/' + m_aImagePath[idx]; // check with printf \ub97c jpegFile \ub85c \uc5f4\uace0 \ud30c\uc77c \uc0ac\uc774\uc988\ub97c size \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger libjpeg-turbo \uc640\uc758 \ud638\ud658\uc131\uc744 \uc720\uc9c0\ud558\uba74\uc11c C \uc2a4\ud0c0\uc77c\uc744 C++ \uc2a4\ud0c0\uc77c\ub85c \ubc14\uafb8\ub294 \ubc29\ubc95\uc5d0 \ub300\ud55c \ub17c\uc758\uac00 \ud544\uc694\ud558\ub2e4. 23-34 : libjpeg-turbo \ub97c \uc0ac\uc6a9\ud558\uc5ec .jpeg \ud30c\uc77c\uc758 \uc555\ucd95\uc744 \ud480\uace0 imgWrp.imgBuf \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 36 : \uadf8\ub9ac\uace0 imgWrp.imgShape \uc5d0 \\(\\text{tjPixelSize[pixelFormat]} \\times \\text{height } \\times \\text{width}\\) \ud615\uc0c1\uc744 Shape \ub85c \ub9cc\ub4e4\uc5b4\uc11c \uc800\uc7a5\ud55c\ub2e4. Danger \ud558\uc9c0\ub9cc \uc774 \ud568\uc218\ub294 \uc774\ubbf8\uc9c0\ub97c \uc77d\uace0 \uc555\ucd95\uc744 \ud478\ub294 \uacfc\uc815\uc5d0\uc11c \uc5d0\ub7ec\ucc98\ub9ac\ub97c \ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc704\ud5d8\ud55c \ucf54\ub4dc\uc774\ub2e4. \uadf8\ub9ac\uace0 \ud568\uc218 \uc774\ub984 AllocImageBuffer \ub9cc \ubcf4\uc558\uc744 \ub54c\ub294 \uba54\ubaa8\ub9ac \uacf5\uac04\ub9cc \ud560\ub2f9\ud560 \uac83 \uac19\uc740\ub370 \uc2e4\uc81c\ub85c .jpeg \ud30c\uc77c\uc758 \uc555\ucd95\uc744 \ud480\uace0 Shape \ud615\uc0c1\uae4c\uc9c0 \ub9cc\ub4e4\uc5b4\uc900\ub2e4. \uc5b4\uca0c\ub4e0 \uacb0\uacfc\uc801\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \uc77d\uace0 \uc555\ucd95\uc744 \ud480\uc5b4\uc11c imgWrp.imgBuf \uc5d0 \uc800\uc7a5\ud558\uace0 Shape \ud074\ub798\uc2a4\ub85c \ud615\uc0c1\uc744 \ub9cc\ub4e4\uc5b4\uc11c imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 8 : \uc555\ucd95\uc774 \ud574\uc81c\ub41c .jpeg \uc774\ubbf8\uc9c0\uc640 \uadf8 \ud615\uc0c1\uc774 \uc800\uc7a5\ub41c imgWrp \uc744 vision:Compose::DoTransform \uc5d0 \uc804\ub2ec\ud55c\ub2e4. Note \uc774\uac83\uc740 LFW/main.cpp \uc758 main \ud568\uc218\uc5d0\uc11c vision::Compose *transform = new vision::Compose({new vision::Resize(224), new vision::CenterCrop(220)}); \ub85c \uc0dd\uc131\ub41c Compose \uac1d\uccb4\uc774\uc5c8\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc790. 9 : imgWrp \uc744 LFWDataset<DTYPE>::Image2Tensor(ImageWrapper& imgWrp, int doValueScaling) \uc5d0 \uc804\ub2ec\ud558\uace0 Tensor<DTYPE> * image \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc774 \ucf54\ub4dc\uac00 \uc2e4\uc9c8\uc801\uc73c\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub4dc\uc778 \uac83 \uac19\ub2e4. 10 : DTYPE * pDest \uc5d0 (*image)[0] \uc758 \uc8fc\uc18c\uac12\uc744 \uae30\uc810\uc73c\ub85c INPUT_DIM * sizeof(DTYPE) \ubc14\uc774\ud2b8\ub97c \ubcf5\uc0ac\ud55c\ub2e4. Danger \uc774 \ucf54\ub4dc\uc758 \uc548\uc815\uc131\uc5d0 \ub300\ud55c \ub17c\uc758\uac00 \ud544\uc694\ud558\ub2e4. \uc65c\ub0d0\ud558\uba74 memcpy \ub294 \ub0b4\ubd80\uc801\uc73c\ub85c \ud3ec\uc778\ud130 \ud0c0\uc785\uc744 \uac80\uc99d\ud558\uc9c0 \uc54a\uace0 \ub2e8\uc21c\ud788 \uc8fc\uc5b4\uc9c4 \ubc14\uc774\ud2b8 \ub9cc\ud07c\uc744 \uc8fc\uc5b4\uc9c4 \uc8fc\uc18c\uac12\uc73c\ub85c \ubcf5\uc0ac\ud560 \ubfd0\uc774\uae30 \ub54c\ubb38\uc774\ub2e4.( https://stackoverflow.com/a/19439770/11218888 ) \ubd84\uc11d \uacb0\ub860 LFWDataset::CopyData \uba54\uc18c\ub4dc\ub294 \uadf8 \uc774\ub984\uacfc \ub2e4\ub974\uac8c AllocImageBuffer \ub97c \ud1b5\ud558\uc5ec \uc774\ubbf8\uc9c0 \uc555\ucd95\uc744 \ud574\uc81c\ud558\uc5ec imgWrp \uc5d0 \uc800\uc7a5\ud558\uace0 \uc774\ubbf8\uc9c0 \ud615\uc0c1\uc744 new Shape(tjPixelSize[pixelFormat], height, width); \ub85c \ub9cc\ub4e4\uc5b4\uc11c imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud558\uace0, DoTransform \uc744 \ud1b5\ud574 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0, Image2Tensor \ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud574\uc900\ub2e4. Danger \ud544\uc694\ud55c \ucc98\ub9ac\ub4e4\uc744 \uc0dd\uc131\uc790 \ub610\ub294 StartProcess \uc5d0\uc11c \ud574\uc8fc\uace0 CopyData \uc5d0\uc11c\ub294 \ub370\uc774\ud130 \ubcf5\uc0ac \uae30\ub2a5\ub9cc \ud574\uc57c \ud560 \uac83 \uac19\ub2e4. \uc65c\ub0d0\ud558\uba74 CopyData \uba54\uc18c\ub4dc\uac00 \ud638\ucd9c\ub420 \ub54c\ub9c8\ub2e4 \uc774\ubbf8\uc9c0 \uc555\ucd95 \ud574\uc81c\uc640 \ub370\uc774\ud130 \ucc98\ub9ac, \uadf8\ub9ac\uace0 Tensor \ubcc0\ud658\uc774 \uc774\ub8e8\uc5b4\uc9c0\ub294\ub370 \ub9cc\uc57d \ud55c\ubc88 \uc774\ub8e8\uc5b4\uc84c\ub2e4\uba74 \uc774\ud6c4\uc5d0 \ubd88\ud544\uc694\ud55c \uc5f0\uc0b0\uc774 \ub05d\uc5c6\uc774 \ubc18\ubcf5\ub418\uae30 \ub54c\ubb38\uc774\ub2e4. \ub610\ud55c \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c\uc758 \ud45c\uc900\uc73c\ub85c \ub110\ub9ac \uc54c\ub824\uc9c4 \uc720\ub2c9\uc2a4 \ucca0\ud559 \uc5d0 \ub530\ub974\uba74 \ud558\ub098\uc758 \ud568\uc218\ub294 \ud558\ub098\uc758 \uae30\ub2a5\ub9cc \ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uc774\uc81c \uc2e4\uc9c8\uc801\uc73c\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud574\uc8fc\ub294 LFWDataset<DTYPE>::Image2Tensor \ub97c \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 \uadf8\uc5d0 \uc55e\uc11c \uc774\ubbf8\uc9c0\uc758 \ud615\uc0c1\uc744 Shape \ub85c \ub9cc\ub4e4\uc5b4\uc11c imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc5b4\ub5a4 \uac83\uc778\uc9c0, \uadf8\ub9ac\uace0 \ub370\uc774\ud130\uc14b\uc744 vision:Compose::DoTransform \uc5d0 \uc804\ub2ec\ud558\uc5ec \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\ub294\uc9c0 \uc774\ud574\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 \uc774 \uba54\uc18c\ub4dc\ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \uc774\ud574\ud558\uae30 \uba3c\uc800 API \uc5d0 Shape \uc5d0 \ub300\ud55c \uc124\uba85\uc774 \uc788\uc73c\ubbc0\ub85c \uc774\ubc88\uc5d0\ub294 \ucf54\ub4dc \ubd84\uc11d\uc5d0 \uc55e\uc11c API \uc758 \uc124\uba85\uc744 \uc0b4\ud3b4\ubcf8\ub2e4. API \uc5d0 \ub530\ub974\uba74 Shape \ub294 Tensor \uc758 \ucc28\uc6d0\uc815\ubcf4\ub97c \uc800\uc7a5\ud558\uace0 \uc788\ub294 \uac1d\uccb4\uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \uc774 \ub370\uc774\ud130\uc14b\uc758 \ucc28\uc6d0\uc815\ubcf4\ub97c \uc800\uc7a5\ud55c\ub2e4\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4. API \uc5d0 \ub530\ub974\uba74 public Shape(int pSize0,int pSize1,int pSize2) \ub294 3\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790\uc774\ub2e4. \ub610 pSize0 \ub294 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30, pSize1 \ub450 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30, pSize2 \uc138 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30\uc774\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Shape { private : int m_Rank ; ///< Shape \ud074\ub798\uc2a4\ub97c \uad6c\uc131\ud558\ub294 Rank \uba64\ubc84\ubcc0\uc218, \ud150\uc11c\ub97c \uad6c\uc131\ud558\ub294 \ucd95\uc758 \uac1c\uc218 int * m_aDim ; ///< Shape \ud074\ub798\uc2a4\ub97c \uad6c\uc131\ud558\ub294 Dimension \uba64\ubc84\ubcc0\uc218, \uac01 \ucd95\uc758 \ucc28\uc6d0 Device m_Device ; ///< \uc7a5\uce58 \uc0ac\uc6a9 \uad6c\ubd84\uc790, CPU \ub610\ub294 GPU, Device \ucc38\uace0 int m_idOfDevice ; ///< GPU \uc0ac\uc6a9 \uc2dc, \uc0ac\uc6a9\ud558\ub824\ub294 GPU\uc758 \ubc88\ud638. CPU\uc758 \uacbd\uc6b0 -1 #ifdef __CUDNN__ cudnnTensorDescriptor_t m_desc ; ///< cudnn\uc758 Tensor Descriptor, GPU \uc5f0\uc0b0\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 Tensor\uc758 shape \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ud3ec\uc778\ud130 \ubcc0\uc218 #endif // if __CUDNN__ int Alloc ( int pRank , ...); int Alloc ( Shape * pShape ); ... public : Shape ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 ); Shape ( int pSize0 , int pSize1 , int pSize2 , int pSize3 ); Shape ( int pSize0 , int pSize1 , int pSize2 ); Shape ( int pSize0 , int pSize1 ); Shape ( int pSize0 ); Shape ( Shape * pShape ); // Copy Constructor virtual ~ Shape (); int GetRank (); int GetDim ( int pRanknum ); int & operator []( int pRanknum ); // operator[] overload ... }; 16 : \uc9c0\uae08 \ubd84\uc11d \ubaa9\ud45c\uac00 imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \ub97c \uc774\ud574\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uc774 \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. 1 2 3 4 5 6 7 8 9 Shape :: Shape ( int pSize0 , int pSize1 , int pSize2 ) { m_Rank = 0 ; m_aDim = NULL ; m_idOfDevice = -1 ; #ifdef __CUDNN__ m_desc = NULL ; #endif // if __CUDNN__ Alloc ( 3 , pSize0 , pSize1 , pSize2 ); } 2-4 : Danger \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc88b\uc744 \uac83 \uac19\ub2e4. 8 : Alloc \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 int Shape :: Alloc ( int pRank , ...) { try { if ( pRank > 0 ) m_Rank = pRank ; else throw pRank ; } catch ( int e ) { printf ( \"Receive invalid rank value %d in %s (%s %d) \\n \" , e , __FUNCTION__ , __FILE__ , __LINE__ ); return FALSE ; } try { m_aDim = new int [ m_Rank ]; } catch (...) { printf ( \"Failed to allcate memory in %s (%s %d) \\n \" , __FUNCTION__ , __FILE__ , __LINE__ ); return FALSE ; } va_list ap ; va_start ( ap , pRank ); // need to check compare between pRank value and number of another parameter for ( int i = 0 ; i < pRank ; i ++ ) { // need to check whether int or not m_aDim [ i ] = va_arg ( ap , int ); } va_end ( ap ); m_Device = CPU ; return TRUE ; } 2-15 : Danger try-catch \ubb38\uc744 \ud1b5\uc77c\ud558\uba74 \ucf54\ub4dc\ub97c \ucd95\uc57d\uc2dc\ud0ac \uc218 \uc788\ub2e4. \ub610 \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \ud45c\uc900\ucd9c\ub825\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ubcf4\ub0b4\uace0 \uc788\ub2e4. \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub294 fprintf(stderr,...) \ub610\ub294 std::cerr << ... \uc640 \uac19\uc774 \uc5d0\ub7ec\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ubcf4\ub0b4\uc57c \ud55c\ub2e4. m_Rank = 3 \uc73c\ub85c int * m_aDim = new int[3] \uc73c\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. 17-25 : \uac00\ubcc0\uc778\uc790\ub97c \uac00\uc838\uc640\uc11c int * m_aDim \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uac00\ubcc0\uc778\uc790\ub294 tjPixelSize[pixelFormat], height, width \uc774\ubbc0\ub85c \uc774 \uac12\ub4e4\uc774 m_aDim[i] \uc5d0 \uac01\uac01 \uc800\uc7a5\ub41c\ub2e4. Danger \uac00\ubcc0\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 C \uc5d0\uc11c #include <stdarg.h> \uac00 \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc C++ \uc5d0\uc11c\ub294 \ud638\ud658\uc131\uc744 \uc704\ud558\uc5ec #include <cstdarg> \uc774 \uc120\uc5b8\ub418\uc5b4\uc57c\ub9cc \ud55c\ub2e4. \uc774 \uc120\uc5b8\uc740 src/Common.h \uc5d0 \uc120\uc5b8\ub418\uc5b4 \uc788\ub294\ub370 \uc774\uacf3\uc5d0\ub294 \ub300\ub7c9\uc758 C \uc5b8\uc5b4\uc758 \ud5e4\ub354 \uc120\uc5b8\ubb38 #include <....h> \uac00 \uc120\uc5b8\ub418\uc5b4 \uc788\uc5c8\ub2e4. \ubaa8\ub450 \ub2e4 C++ \uc2a4\ud0c0\uc77c \ud5e4\ub354 \uc120\uc5b8\uc73c\ub85c \ubc14\uafc0 \ud544\uc694\uac00 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 Shape \ub294 \ub370\uc774\ud130\uc14b\uc758 \ucc28\uc6d0\uc815\ubcf4\ub97c int * m_aDim \uc5d0 \uc800\uc7a5\ud558\uace0, \ucd95\uc758 \uac1c\uc218\ub97c m_Rank \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \ub294 \ub370\uc774\ud130\uc14b\uc758 \ucc28\uc6d0\uc815\ubcf4 \\[\\text{tjPixelSize[pixelFormat]} \\times \\text{height } \\times \\text{width}\\] \ub97c Shape \uac1d\uccb4\ub85c \uc0dd\uc131\ud558\uc5ec imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c m_transform->DoTransform(imgWrp); \ub85c \ub370\uc774\ud130\uc14b\uc774 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 class Compose : public Transform { private : std :: vector < Transform *> m_listOfTransform ; int m_size ; ... virtual void DoTransform ( ImageWrapper & imgWrp ) { for ( int i = 0 ; i < m_size ; i ++ ) { m_listOfTransform [ i ] -> DoTransform ( imgWrp ); } } }; 5 : std::vector<Transform *> m_listOfTransform; \uc758 \uc6d0\uc18c\ub4e4\uc758 DoTransform \uba54\uc18c\ub4dc\ub97c imgWrp \uc744 \uc785\ub825\ud558\uc5ec \ud638\ucd9c\ud55c\ub2e4. m_listOfTransform \ub294 {new vision::Resize(224), new vision::CenterCrop(220)} \ub85c \ucd08\uae30\ud654\ub418\uc5c8\uc73c\ubbc0\ub85c vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uc774 \ud638\ucd9c\ub420 \uac83\uc774\ub2e4. \ubd84\uc11d \uacb0\ub860 vision::Compose::DoTransform \uba54\uc18c\ub4dc\ub294 m_listOfTransform \uc758 DoTransform \uba54\uc18c\ub4dc\uc5d0 imgWrp \uc744 \uc785\ub825\ud558\uba70 \ud638\ucd9c\ud574\uc900\ub2e4. m_listOfTransform \ub294 {new vision::Resize(224), new vision::CenterCrop(220)} \ub85c \ucd08\uae30\ud654\ub418\uc5c8\uc73c\ubbc0\ub85c vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uc774 \ud638\ucd9c\ub41c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uac00 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud558\ub294\uc9c0 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"Analysis&#58; LFW 1"},{"location":"sync/fewshot/step1-1/#coding-casiawebface-image-to-vector","text":"\uc6b0\ub9ac fewshot \ud300\uc740 WICWIU \uac1c\ubc1c \uac00\uc774\ub4dc\uc758 WICWIU \ub85c \ud559\uc2b5\ud558\uae30 \uc758 \uccab\ubc88\uc9f8 \uacfc\uc815\uc778 \" Step 1. \ud559\uc2b5 \ub370\uc774\ud130 \u2192 Tensor \" \uc744 \uc644\uc218\ud558\uae30 \uc704\ud558\uc5ec \ud559\uc2b5\uc2dc\ucf1c\uc57c\ud560 \ub370\uc774\ud130\uc14b\uc778 Casia Web Face \ub97c Tensor \ub85c \ubcc0\ud658\ud574\uc57c \ud55c\ub2e4.","title":"Coding: CasiaWebFace Image to vector"},{"location":"sync/fewshot/step1-1/#getdirlist","text":"\uba3c\uc800 CasiaWebFace \uc774\ubbf8\uc9c0\ub97c \uc790\ub3d9\uc73c\ub85c \uc77d\uc5b4\uc624\uae30 \uc704\ud558\uc5ec \ub514\ub809\ud1a0\ub9ac \ub9ac\uc2a4\ud2b8\ub97c \uc5bb\uc744 \uc218 \uc788\ub294 \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uc5b4 \ubd24\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <string> #include <iostream> #include <fstream> #include <iterator> #include <vector> #include <dirent.h> #include <sys/types.h> DIR * getDirList ( const char * dirName ) { DIR * dir ; if (( dir = opendir ( dirName )) == NULL ) throw std :: invalid_argument ( \"could not open directory\" ); return dir ; } 11~14 : getDirList \ud568\uc218\uc5d0 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c\ub97c \uc785\ub825\ud558\uba74 \ub514\ub809\ud1a0\ub9ac \ub0b4\ubd80 \ud30c\uc77c \uc815\ubcf4\ub97c \uac16\uace0 \uc788\ub294 DIR \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud55c\ub2e4. \uc774 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 CasiaWebFace \uc774\ubbf8\uc9c0\uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 /tmp/casia_train \ub514\ub809\ud1a0\ub9ac\uc758 \ub0b4\ubd80 \ud30c\uc77c\uc744 \ubc18\ud658\ubc1b\ub294 \ucf54\ub4dc\ub97c \uc9e4 \uc218 \uc788\ub2e4.","title":"getDirList \ud568\uc218"},{"location":"sync/fewshot/step1-1/#test_getdirlist","text":"Info test_getDirList \ud568\uc218\uc758 test_ \ub294 camel case \uac00 \uc544\ub2cc snake case \ub85c \ub418\uc5b4\uc788\ub294\ub370, \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uc784\uc744 \uac15\uc870\ud558\uace0 \uc2e4\uc81c\ub85c \uc0ac\uc6a9\ub418\uba74 \uc548\ub418\ub294 \ud568\uc218\uc784\uc744 \uac15\uc870\ud558\uae30 \uc704\ud558\uc5ec \uadf8\ub807\uac8c \ud55c \uac83\uc774\ub2e4. \ub098\uba38\uc9c0 \ucf54\ub4dc\ub294 \ubaa8\ub450 camel case \ub85c \ucf54\ub529\ub418\uc5b4 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 void test_getDirList ( bool error = false ); int main ( int argc , char const * argv []) { test_getDirList (); return EXIT_SUCCESS ; } void test_getDirList ( bool error ) { DIR * dir ; try { dir = ( error ) ? \\ getDirList ( \"aweoifjaowief\" ) : \\ getDirList ( \"/tmp/casia_train\" ); struct dirent * ent ; while (( ent = readdir ( dir )) != NULL ) { std :: cout << ent -> d_name << std :: endl ; } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } } 1 : test_getDirList \ub294 error \uc778\uc790\ub97c \ubc1b\ub294\ub370 false \uac00 \uae30\ubcf8\uac12\uc73c\ub85c \uc124\uc815\ub418\uc5b4 \uc788\ub2e4. 14~21 : error = false \uc778 \uacbd\uc6b0 /tmp/casia_train \ub514\ub809\ud1a0\ub9ac \ub0b4\ubd80 \ud30c\uc77c\ub4e4\uc744 \ucd9c\ub825\ud55c\ub2e4. 14~21 : error \ub97c true \ub85c \uc124\uc815\ud55c\ub2e4\uba74 \uc758\ub3c4\uc801\uc73c\ub85c \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \ucf54\ub4dc\uac00 \ub41c\ub2e4. \uc989, \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \ud30c\uc77c \uacbd\ub85c\ub97c getDirList \ud568\uc218\uc5d0 \uc785\ub825\ud558\uc5ec \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\uc11c \uc5d0\ub7ec \ucc98\ub9ac \ucf54\ub4dc( try~catch ) \uac00 \uc798 \uc791\ub3d9\ud558\ub294\uc9c0 \uac80\uc99d\ud55c\ub2e4.","title":"test_getDirList \ud568\uc218"},{"location":"sync/fewshot/step1-1/#test_getfirstcasiaimage","text":"\uc774\ud6c4 getDirList \ud568\uc218\ub97c \ud65c\uc6a9\ud558\uc5ec /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\ubcf4\ub294 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uc5b4 \ubd24\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 void test_getFirstCasiaTrainImage (); int main ( int argc , char const * argv []) { test_getFirstCasiaTrainImage (); return EXIT_SUCCESS ; } void test_getFirstCasiaTrainImage () { DIR * dir ; std :: string casiaTrainDirPath = \"/tmp/casia_train\" ; std :: string casiaTrainFirstDirPath ; std :: string casiaTrainFirstImagePath ; // // Get first directory of casia_train // try { dir = getDirList ( casiaTrainDirPath . c_str ()); if ( dir == nullptr ) throw ; struct dirent * ent ; for ( int idx = 0 ; ( ent = readdir ( dir )) != NULL ; idx ++ ) { if ( idx == 2 ) // first index (because: 0 -> . 1 -> .. 2 -> first path) { casiaTrainFirstDirPath = casiaTrainDirPath + \"/\" + std :: string ( ent -> d_name ); } } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } // // Get first image of first directory // try { dir = getDirList ( casiaTrainFirstDirPath . c_str ()); if ( dir == nullptr ) throw ; struct dirent * ent ; for ( int idx = 0 ; ( ent = readdir ( dir )) != NULL ; idx ++ ) { if ( idx == 2 ) // first index (because: 0 -> . 1 -> .. 2 -> first path) { casiaTrainFirstImagePath = casiaTrainFirstDirPath + \"/\" + std :: string ( ent -> d_name ); } } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } // // Convert image to vector<unsigned char> // std :: ifstream casiaTrainFirstImage ( casiaTrainFirstImagePath , std :: ios :: binary ); std :: vector < unsigned char > casiaTrainFirstImageBuffer ( std :: istreambuf_iterator < char > ( casiaTrainFirstImage ), {}); // // Show result and converted image // std :: cout << \"First image of first caisa_train sub directory:\" << std :: endl ; std :: cout << '\\t' << casiaTrainFirstImagePath << std :: endl ; std :: cout << \"casiaTrainFirstImageBuffer size: \" << std :: endl ; std :: cout << '\\t' << casiaTrainFirstImageBuffer . size () << std :: endl ; std :: cout << \"First 10 bytes:\" << std :: endl ; std :: cout << \" \\t \" ; int ct = 0 ; for ( const auto byte : casiaTrainFirstImageBuffer ) { if ( ct < 10 ) std :: cout << static_cast < int > ( byte ) << ' ' ; ct ++ ; } std :: cout << std :: endl ; } 19~39 : /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac \uacbd\ub85c\ub97c casiaTrainFirstDirPath \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 42~61 : /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0 \uacbd\ub85c\ub97c casiaTrainFirstImagePath \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 66~67 : /tmp/casia_train \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0\ub97c \ubc14\uc774\ub108\ub9ac\ub85c \uc77d\uace0 unsigned char \uc790\ub8cc\ud615\uc744 \uac16\ub294 vector \ub85c \ubcc0\ud658\ud55c\ub2e4. 82~87 : \uc774\ubbf8\uc9c0\uc758 \uccab 10 \ubc14\uc774\ud2b8\ub97c \uc77d\uace0 int \ub85c \ud615\ubcc0\ud658\ud558\uc5ec \ucd9c\ub825\ud574\ubcf8\ub2e4. \uadf8\ub0e5 \uc798 \uc77d\ud614\ub294\uc9c0 \ud655\uc778\ud558\ub294 \ud14c\uc2a4\ud2b8 \ucf54\ub4dc\uc774\ub2e4. Info WICWIU \ub294 C++ \ud504\ub85c\uc81d\ud2b8\uc774\uae30 \ub54c\ubb38\uc5d0 C \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c C++ \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\ub824\uace0 \ub178\ub825\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\uc11c \ub2e4\uc74c \ucf54\ub4dc\ub294 C \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uc785\ub2c8\ub2e4. for ( const auto byte : casiaTrainFirstImageBuffer ) { std :: cout << ( int )( byte ) << ' ' ; } \ub2e4\uc74c \ucf54\ub4dc\ub294 C++ \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uc785\ub2c8\ub2e4. for ( const auto byte : casiaTrainFirstImageBuffer ) { std :: cout << static_cast < int > ( byte ) << ' ' ; } C++ \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c C \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\uba74 \ud504\ub85c\uc81d\ud2b8 \uc548\uc815\uc131\uc5d0 \ubb38\uc81c\uac00 \uc0dd\uae38 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc8fc\uc758\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ub9c1\ud06c\ub97c \ucc38\uc870\ud558\uba74 C++ \ucf54\ub529 \uc2a4\ud0c0\uc77c \ub4f1\uc5d0 \ub300\ud55c \uc88b\uc740 \uc815\ubcf4\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. https://github.com/AnthonyCalandra/modern-cpp-features https://github.com/isocpp/CppCoreGuidelines https://github.com/lefticus/cppbestpractices","title":"test_getFirstCasiaImage \ud568\uc218"},{"location":"sync/fewshot/step1-1/#analysis-dataset-to-tensor","text":"\uc6b0\ub9ac\ub294 \uc131\uacf5\uc801\uc73c\ub85c Casia Web Face \uc758 \ub514\ub809\ud1a0\ub9ac \ub9ac\uc2a4\ud2b8\ub97c \uc77d\uc5b4\ubcf4\uc558\uace0 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 \uc774\ubbf8\uc9c0\ub97c \uc77d\uc5b4\uc11c \ubca1\ud130\ub85c \ubcc0\ud658\ud574\ubcf4\uc558\ub2e4. \ud558\uc9c0\ub9cc \uc5ec\uae30\uc5d0\uc11c \ub354 \uc774\uc0c1 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub529\uc744 \ud560 \uc218 \uc5c6\uc5c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \uc7a0\uc2dc \ucf54\ub529\uc744 \uba48\ucd94\uace0 \uae30\uc874\uc758 WICWIU \ucf54\ub4dc\ub97c \ubd84\uc11d\ud558\uae30\ub85c \ud588\ub2e4. \uc6b0\ub9ac fewshot \ud300\uc740 LFW \ud300\uc774 \uac1c\ubc1c\ud574\ub454 \ucf54\ub4dc\ub97c \ucc38\uace0\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 LFW \ucf54\ub4dc\ub97c \ubd84\uc11d\ud574\ubcf4\uc558\ub2e4. \uc9c0\uae08\uc758 \uad00\uc2ec\uc0ac\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 LFW \ud300\uc758 \ucf54\ub4dc\uc5d0\uc11c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub4dc \ud750\ub984\uc744 \uc911\uc810\uc73c\ub85c \ubd84\uc11d\uc744 \uc2dc\ub3c4\ud574\ubcf4\uc558\ub2e4. Note tutorials/LFW/ \uacbd\ub85c\ub97c LFW/ \ub85c \ucd95\uc57d\ud558\uc5ec \uc0ac\uc6a9\ud558\uc600\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 LFW \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ud559\uc2b5\ud558\uace0 \ud14c\uc2a4\ud2b8\ud558\ub294 main \ud568\uc218\ub97c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\uc5ec \uc778\uacf5\uc2e0\uacbd\ub9dd\uc5d0 \uc785\ub825\ud558\ub294 \uac83\uc744 \uc911\uc2ec\uc73c\ub85c \ubd84\uc11d \ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218","title":"Analysis: Dataset to Tensor"},{"location":"sync/fewshot/step1-1/#lfwmaincpp-main","text":"\ubd84\uc11d \ubaa9\ud45c LFW \ub97c \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc744 \uac00\uc838\uc628 \ud6c4 \ud559\uc2b5\ud558\uace0 \ud14c\uc2a4\ud2b8\ud558\ub294 main \ud568\uc218\uc5d0\uc11c \uc5b4\ub5bb\uac8c \ub370\uc774\ud130\uc14b\uc744 \uac00\uc838\uc624\uace0 Tensor \ub85c \ubcc0\ud658\ud558\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 #define NUMBER_OF_CLASS 5749 // for lfw_funneled ... int main ( int argc , char const * argv []) { ... // ======================= Select net =================== NeuralNetwork < float > * net = new my_FaceNet < float > ( x , label , NUMBER_OF_CLASS ); ... vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); DataLoader < float > * train_dataloader = new LFWSampler < float > ( NUMBER_OF_CLASS , train_dataset , BATCH , TRUE , 1 , FALSE ); 9 : Compose \uac1d\uccb4\ub97c Resize(224) \uc640 Centercrop(220) \ud30c\ub77c\ubbf8\ud130\ub85c \uc0dd\uc131\ud55c\ub2e4. 10-11 : LFWDataset \uc744 \uc0dd\uc131\ud558\uace0 LFWSampler \ub97c \ub9cc\ub4e0\ub2e4. 1 2 3 4 5 6 // ======================= Train ======================= net -> SetModeTrain (); for ( int j = 0 ; j < loop_for_train ; j ++ ) { std :: vector < Tensor < float > *> * temp = train_dataloader -> GetDataFromGlobalBuffer (); ... net -> FeedInputTensor ( 2 , ( * temp )[ 0 ], ( * temp )[ 1 ]); 4 : \ud559\uc2b5\uc744 \uc2dc\uc791\ud560 \ub54c LFWSampler::GetDataFromGlobalBuffer \ub97c \ud1b5\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc744 Tensor<float> \ud3ec\uc778\ud130\ud615 \ubca1\ud130 \ud3ec\uc778\ud130\uc5d0 \uc800\uc7a5\ud55c\ub2e4. 6 : Tensor \ub85c \ubcc0\ud658\ub41c \ub370\uc774\ud130\uc14b\uc744 \uc2e0\uacbd\ub9dd\uc5d0 \uc785\ub825\ud574\uc900\ub2e4. 1 2 3 4 5 6 // ======================= Test ====================== ... for ( int i = 0 ; i < curBatch ; i ++ ){ dataset . CopyData ( batchIdx * BATCH + i , vTestSample [ i ]); } net -> InputToFeature ( INPUT_DIM , vTestSample . size (), & vTestSample [ 0 ], FEATURE_DIM , & vTestFeature [ 0 ], BATCH ); 4 : \ud14c\uc2a4\ud2b8\ub97c \ud560 \ub54c\uc5d0\ub294 LFWDataset::CopyData \ub97c \ud1b5\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc744 float \ud3ec\uc778\ud130\ud615 \ubca1\ud130\uc5d0 \uc800\uc7a5\ud55c\ub2e4. 6 : \uc5ec\uae30\uc5d0\uc11c \uc2e0\uacbd\ub9dd\uc5d0 \ub370\uc774\ud130\uc14b\uc744 \uc785\ub825\ud574\uc8fc\ub294 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 main \ud568\uc218\uc5d0\uc11c\ub294 \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud55c \ud6c4 \ud559\uc2b5 \uc2dc\uc5d0\ub294 LFWSampler::GetDataFromGlobalBuffer \uc73c\ub85c \ub370\uc774\ud130\uc14b\uc744 \ub9c8\ub828\ud558\uace0 \ud14c\uc2a4\ud2b8 \uc2dc\uc5d0\ub294 LFWDataset::CopyData \ub85c \ub370\uc774\ud130\uc14b\uc744 \ub9c8\ub828\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uadf8\ub7ec\ubbc0\ub85c LFWSampler::GetDataFromGlobalBuffer \uc640 LFWDataset::CopyData \ub97c \ubd84\uc11d\ud558\uba74 \ub370\uc774\ud130\uc14b\uc744 \uc5b4\ub5bb\uac8c Tensor \ub85c \ubc14\uafb8\uc5b4 \uc2e0\uacbd\ub9dd\uc5d0 \uc785\ub825\ud560 \uc218 \uc788\ub294\uc9c0 \ucc38\uace0\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7f0\ub370 LFWSampler \uac00 LFWDataset \uc5d0 \uc758\uc874\ud558\uae30 \ub54c\ubb38\uc5d0 LFWDataset \uc744 \ubd84\uc11d\ud558\uace0 LFWSampler \uc744 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 LFWDataset \uc740 LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); \uc73c\ub85c \uc0dd\uc131\ub418\uba70 vision::Compose *transform \uac00 \uc778\uc790\ub85c \uc804\ub2ec\ub418\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); \ubd80\ud130 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 Compose \ub294 \uc0dd\uc131\uc790\uc5d0\uc11c {new vision::Resize(224), new vision::CenterCrop(220)} \uc744 \uc804\ub2ec\ubc1b\uae30 \ub54c\ubb38\uc5d0 \uc774\uac83\ub4e4\ubd80\ud130 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 Resize \uc640 CenterCrop \ud074\ub798\uc2a4\ub294 Transform \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\ub294\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uba3c\uc800 Transform \ud074\ub798\uc2a4\ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/main.cpp: main \ud568\uc218"},{"location":"sync/fewshot/step1-1/#lfwimageprocesshpp-transform","text":"\ubd84\uc11d \ubaa9\ud45c Transform \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 namespace vision { class Transform { private : public : Transform () { } virtual ~ Transform () {} virtual void DoTransform ( ImageWrapper & imgWrp ) { } }; ... } 1-2 : Transform \ud074\ub798\uc2a4\ub294 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc120\uc5b8\ub41c \ud074\ub798\uc2a4\uc774\ub2e4. 5-7 : \uc0dd\uc131\uc790\uc640 \uba54\uc18c\ub4dc\ub4e4\uc774 \uad6c\ud604\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4. \uc774\ub85c\uc368 \ud074\ub798\uc2a4 \uad6c\uc870 \uc720\uc9c0\ub97c \uc704\ud55c \ucd94\uc0c1 \ud074\ub798\uc2a4\uc784\uc744 \uc54c \uc218 \uc788\ub2e4. Danger \uadf8\ub807\ub2e4\uba74 \uc774 \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uac83\uc744 \ub9c9\uae30 \uc704\ud558\uc5ec \ub098\uc911\uc5d0 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub85c \uc120\uc5b8\ud560 \ud544\uc694\uac00 \uc788\uc744 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 Transform \uc740 DoTransform \uba54\uc18c\ub4dc \uad6c\uc870\ub9cc \uac16\uace0 \uc788\ub294 \ucd94\uc0c1\ud074\ub798\uc2a4\uc774\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: Transform \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step1-1/#lfwimageprocesshpp-resize","text":"\ubd84\uc11d \ubaa9\ud45c Resize \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::Resize(224) ) \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 namespace vision { ... class Resize : public Transform { private : int newHeight ; int newWidth ; public : Resize ( int heigth , int width ) : newHeight ( heigth ), newWidth ( width ) { } Resize ( int size ) : newHeight ( size ), newWidth ( size ) { } virtual ~ Resize () {} virtual void DoTransform ( ImageWrapper & imgWrp ) { ... } }; ... } 1-3 : Resize \ub294 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc815\uc758\ub41c Transform \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc774\ub2e4. 12 : 224 \ub97c \uc804\ub2ec\ubc1b\uc544 newHeight \uc640 newWidth \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 Resize \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::Resize(224) ) \uc740 224 \ub97c \uc804\ub2ec\ubc1b\uc544 newHeight \uc640 newWidth \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: Resize \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step1-1/#lfwimageprocesshpp-centercrop","text":"\ubd84\uc11d \ubaa9\ud45c CenterCrop \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::CenterCrop(220) ) \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 namespace vision { ... class CenterCrop : public Transform { private : int m_heigth ; int m_width ; public : CenterCrop ( int heigth , int width ) : m_heigth ( heigth ), m_width ( width ) { } CenterCrop ( int size ) : m_heigth ( size ), m_width ( size ) { } virtual ~ CenterCrop () {} virtual void DoTransform ( ImageWrapper & imgWrp ) { ... } }; ... } 1-3 : CenterCrop \uc740 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc815\uc758\ub41c Transform \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc774\ub2e4. 11 : 220 \ub97c \uc804\ub2ec\ubc1b\uc544 m_height \uc640 m_width \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger Naming Convention \uc774 \ud1b5\uc77c\uc774 \uc548\ub418\uc5b4\uc788\uae30 \ub54c\ubb38\uc5d0 \ub098\uc911\uc5d0 \ud1b5\uc77c\ud574\uc57c\ud560 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 CenterCrop \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815( new vision::CenterCrop(220) ) \uc740 220 \ub97c \uc804\ub2ec\ubc1b\uc544 m_height \uc640 m_width \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: CenterCrop \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step1-1/#lfwimageprocesshpp-compose","text":"\ubd84\uc11d \ubaa9\ud45c Compose \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 namespace vision { ... class Compose : public Transform { private : std :: vector < Transform *> m_listOfTransform ; int m_size ; public : Compose ( std :: initializer_list < Transform *> lvalue ) : m_listOfTransform ( lvalue ) { m_size = m_listOfTransform . size (); } virtual ~ Compose () { ... } virtual void DoTransform ( ImageWrapper & imgWrp ) { ... } }; ... } 1-3 : Compose \uc740 \uc774\ub984\uacf5\uac04 vision \uc5d0 \uc815\uc758\ub41c Transform \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc774\ub2e4. 9-11 : {new vision::Resize(224), new vision::CenterCrop(220)} \ub97c \uc804\ub2ec\ubc1b\uc544 std::vector<Transform *> m_listOfTransform \uc5d0 \uc800\uc7a5\ud558\uace0 std::vector<Transform *> m_listOfTransform \uc758 \uc0ac\uc774\uc988\ub97c int m_size \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 Compose \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 vision :: Compose * transform = new vision :: Compose ({ new vision :: Resize ( 224 ), new vision :: CenterCrop ( 220 )}); \uc740 {new vision::Resize(224), new vision::CenterCrop(220)} \uc744 \uc804\ub2ec\ubc1b\uc544 std::vector<Transform *> m_listOfTransform \uc5d0 \uc800\uc7a5\ud558\uace0, std::vector<Transform *> m_listOfTransform \uc758 \uc0ac\uc774\uc988\ub97c int m_size \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uc774\uc81c LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); \uc744 \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 LFWDataset \uc740 Dataset \uc758 \ud558\uc704\ud074\ub798\uc2a4\uc774\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 Dataset \ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: Compose \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step1-1/#srcdatasethpp-dataset","text":"\ubd84\uc11d \ubaa9\ud45c Dataset \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 template < typename DTYPE > class Dataset { // [] operator override private : /* data */ char m_dataPath [ 256 ]; std :: vector < char *> imageName ; std :: vector < int > label ; std :: vector < int > m_vPosIndex ; std :: vector < int > m_vNegIndex ; public : Dataset (); virtual ~ Dataset (); virtual void Alloc (); virtual void Dealloc (); virtual std :: vector < Tensor < DTYPE > *>* GetData ( int idx ); virtual std :: vector < Tensor < DTYPE > *>* GetDataOfPositiveLabel ( int anchorIdx , int * pPosIdx = NULL ); virtual std :: vector < Tensor < DTYPE > *>* GetDataOfNegativeLabel ( int anchorIdx , int * pNegIdx = NULL ); void SetLabel ( const int * pLabel , int noLabel ); void SetLabel ( const unsigned char * pLabel , int noLabel ); virtual int GetLabel ( int idx ) { ... } virtual int GetLength () { return label . size (); } int GetNumOfDatasetMember (); virtual void CopyData ( int idx , DTYPE * pDest ) { // copy i-th iamge into pDest. (designed for k-NN) ... } virtual void SetPosNegIndices ( std :: vector < int > * pvPosIndex , std :: vector < int > * pvNegIndex ){ // registers indices fo positive and negative samples for each sample ... } std :: vector < int > & GetPositiveIndices () { return m_vPosIndex ; } std :: vector < int > & GetNegativeIndices () { return m_vNegIndex ; } virtual int GetPositiveIndex ( int idx ){ // for triplet loss ... } virtual int GetNegativeIndex ( int idx ){ // for triplet loss ... } }; ... template < typename DTYPE > Dataset < DTYPE >:: Dataset () { } 1 : Dataset \uc740 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc73c\ub85c \uc815\uc758\ub41c \ud074\ub798\uc2a4\uc774\ub2e4. Danger API \uc5d0\ub3c4 Dataset \ud074\ub798\uc2a4\uc758 \uc124\uba85\uc774 \ub098\uc640\uc788\uc9c0 \uc54a\uae30\uc5d0 \uc77c\uc77c\uc774 \uc18c\uc2a4\ucf54\ub4dc\ub97c \ubd84\uc11d\ud568\uc73c\ub85c\uc368 \ud074\ub798\uc2a4\ub97c \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \ub098\uc911\uc5d0 API \uc5d0 \uc124\uba85\uc744 \ucd94\uac00\ud558\uba74 \uc88b\uc744 \uac83 \uac19\ub2e4. 30-40 : Danger \uadf8\ub7f0\ub370 \uc774 \uba54\uc18c\ub4dc\ub4e4\uc774 Dataset \ucd94\uc0c1 \ud074\ub798\uc2a4\uc5d0 \uc788\uc5b4\uc57c\ud558\ub294\uc9c0 \ubaa8\ub974\uaca0\ub2e4. \ub098\uc911\uc5d0 \ud074\ub798\uc2a4 \uc0c1\uc18d\uad00\uacc4\ub97c \ubd84\uc11d\ud574\uc11c \uc815\ub9ac\ub97c \ud55c\ubc88 \ud560 \ud544\uc694\uac00 \uc788\uc744 \uac83 \uac19\ub2e4. 43-44 : Dataset \uc0dd\uc131\uc790\ub294 \uad6c\ud604\ub418\uc5b4\uc788\uc9c0 \uc54a\ub2e4. Danger \uc774\ub294 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc758 \uac1d\uccb4 \uad6c\uc870\ub97c \uc720\uc9c0\ud558\uae30 \uc704\ud55c \ucd94\uc0c1 \uba54\uc18c\ub4dc\uc774\uae30 \ub54c\ubb38\uc5d0 \uc21c\uc218 \ucd94\uc0c1 \uba54\uc18c\ub4dc\ub85c \uc120\uc5b8\ud574\uc11c Dataset \uc758 \uc0dd\uc131\uc744 \ubc29\uc9c0\ud560 \ud544\uc694\uac00 \uc788\uc744 \uac83 \uac19\ub2e4. \ubd84\uc11d \uacb0\ub860 Dataset \uac1d\uccb4\ub294 \uad6c\ud604\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc740 \ucd94\uc0c1 \ud074\ub798\uc2a4\uc774\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/Dataset.hpp: Dataset \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step1-1/#lfwlfwdatasethpp-lfwdataset","text":"\ubd84\uc11d \ubaa9\ud45c LFWDataset \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815 LFWDataset < float > * train_dataset = new LFWDataset < float > ( \"./data\" , \"lfw_funneled\" , NUMBER_OF_CLASS , transform ); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 template < typename DTYPE > class LFWDataset : public Dataset < DTYPE > { private : ... void CheckClassList (); void CreateImageListOfEachClass (); ... Tensor < DTYPE >* Image2Tensor ( ImageWrapper & imgWrp , int doValueScaling ); public : LFWDataset ( std :: string rootPath , std :: string dataPath , int useClassNum , vision :: Compose * transform ) { m_rootPath = rootPath ; m_dataPath = dataPath ; m_useClasNum = useClassNum ; m_numOfImg = 0 ; trigger = 0 ; m_transform = transform ; assert ( m_transform != NULL ); Alloc (); CheckClassList (); CreateImageListOfEachClass (); LogMessageF ( \"lfw_funneled_label.txt\" , TRUE , \"%d samples \\n \" , this -> GetLength ()); CountSamplePerClass (); } ... virtual void Alloc (); ... }; 1-2 : Dataset<DTYPE> \uc744 \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc73c\ub85c \uc120\uc5b8\ub418\uc5b4 \uc788\ub2e4. 11~16 Danger \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc131\ub2a5\uc774 \ub354 \uc88b\uc544\uc9c0\ub2c8\uae4c \ub098\uc911\uc5d0 \ubc14\uafd4\uc57c \ud560 \ub4ef\ud558\ub2e4. 16 : vision::Compose * m_transform \uc5d0 vision::Compose *transform = new vision::Compose({new vision::Resize(224), new vision::CenterCrop(220)}); \uc744 \uc800\uc7a5\ud55c\ub2e4. 19 : Alloc \uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub2e8\ud788 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. template < typename DTYPE > void LFWDataset < DTYPE >:: Alloc () { sem_init ( & sem , 0 , 1 );} Alloc \uc740 \ub2e8\uc21c\ud788 \uc138\ub9c8\ud3ec\ub97c \ucd08\uae30\ud654\ud574\uc900\ub2e4. 20 : CheckClassList \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. template < typename DTYPE > void LFWDataset < DTYPE >:: CheckClassList () { // mnt/ssd/Data/ImageNet/synset_words.txt std :: string filePath = m_rootPath + \"/\" + m_dataPath + \".txt\" ; const char * cstr = filePath . c_str (); FILE * pFile = NULL ; pFile = fopen ( cstr , \"r\" ); ... char realValue [ 100 ]; for ( int i = 0 ; i < m_useClasNum ; i ++ ) { if ( fscanf ( pFile , \"%s\" , realValue )) { m_className . push_back (( std :: string ) realValue ); while ( fgetc ( pFile ) != '\\n' ) ; ... } \ub2e8\uc21c\ud788 std::string filePath = m_rootPath + \"/\" + m_dataPath + \".txt\"; \ub97c \uc77d\uc5b4\uc11c \ud55c\uc904\uc529 std::vector<std::string> m_className \ubca1\ud130\uc5d0 \uc800\uc7a5\ud558\uace0 \uc788\ub2e4. Danger C \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ub41c \uac83\uc774 \ub9ce\uc544\uc11c \ub098\uc911\uc5d0 C++ \uc2a4\ud0c0\uc77c\ub85c \uace0\uccd0\uc57c\ud560 \uac83 \uac19\ub2e4. 37 : CreateImageListOfEachClass() \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 template < typename DTYPE > void LFWDataset < DTYPE >:: CreateImageListOfEachClass () { std :: vector < int > vTmpLabel ; vTmpLabel . reserve ( 2048 ); for ( int classNum = 0 ; classNum < m_useClasNum ; classNum ++ ) { std :: string filePath = m_rootPath + '/' + m_dataPath + '/' + m_className [ classNum ] + \"/list.txt\" ; // check with printf const char * cstr = filePath . c_str (); FILE * pFile = NULL ; pFile = fopen ( cstr , \"r\" ); char realValue [ 100 ]; int numOfImageOfClass = 0 ; ... if ( fscanf ( pFile , \"%s\" , realValue )) { // first realValue is already readed above numOfImageOfClass = atoi ( realValue ); for ( int imageNum = 0 ; imageNum < numOfImageOfClass ; imageNum ++ ) { if ( fscanf ( pFile , \"%s\" , realValue )) { m_aImagePath . push_back (( std :: string )( m_className [ classNum ] + '/' + realValue )); vTmpLabel . push_back ( classNum ); ... fclose ( pFile ); } m_numOfImg = m_aImagePath . size (); this -> SetLabel ( & vTmpLabel [ 0 ], m_numOfImg ); assert ( m_numOfImg > 0 ); } 3 : Note https://en.cppreference.com/w/cpp/container/vector/reserve \uc5d0 std::vector<T,Allocator>::reserve \ub0b4\uc6a9\uc774 \uc788\ub294\ub370 \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e4\uc5b4\uac00\ub294 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud544\uc694\ud55c \ub9cc\ud07c \ud558\ub3c4\ub85d \ud574\uc11c \uc18d\ub3c4\ub3c4 \ub192\uc774\uace0, \uba54\ubaa8\ub9ac \ud6a8\uc728\ub3c4 \ucc59\uae30\ub294 \uc88b\uc740 \ucf54\ub4dc\uc778 \uac83 \uac19\ub2e4. 6~9 : std::string filePath = m_rootPath + '/' + m_dataPath + '/' + m_className[classNum] + \"/list.txt\"; \ub97c \uc77d\uc5b4\uc11c pFile \ub85c \ud30c\uc77c\uc744 \uc5f0\ub2e4. 13-16 : pFile \uc758 \ud55c\uc904\uc744 realValue \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc774\uac83\uc744 atoi \ud568\uc218\ub85c int \ub85c \ubcc0\ud658\ud558\uc5ec numOfImageOfClass \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 16~19 : numOfImageOfClass \ub9cc\ud07c for \ubb38\uc744 \ub3cc\uba74\uc11c pFile \ub2e4\uc74c \ub77c\uc778\uc744 realValue \uc5d0 \uc77d\uace0 (std::string)(m_className[classNum] + '/' + realValue) \uc744 std::vecotr<std::string> m_aImagePath \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger \ud558\uc9c0\ub9cc C \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uacfc C \uc2a4\ud0c0\uc77c \uc5d0\ub7ec \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 C++ \uc2a4\ud0c0\uc77c \ud615\ubcc0\ud658\uacfc try-catch \ubb38\uc73c\ub85c \ubc14\uafb8\uc5b4\uc57c \ud560 \uac83 \uac19\ub2e4. 19 : \uadf8\ub9ac\uace0 std::vector<int> vTmpLabel; \uc5d0 classNum \uc744 \uc800\uc7a5\ud55c\ub2e4. classNum \uc740 0 \ubd80\ud130 m_useClasNum \uae4c\uc9c0\uc758 int \uc774\ub2e4. 23-24 : \ub9c8\uc9c0\ub9c9\uc73c\ub85c m_aImagePath \ubca1\ud130 \uc0ac\uc774\uc988\ub97c \uac16\uace0 \uc640\uc11c m_numOfImg \uc5d0 \uc800\uc7a5\ud558\uace0 SetLabel \ud568\uc218\uc5d0 vTmpLabel \uc758 \uc8fc\uc18c\uac12\uacfc \ud568\uaed8 \uc804\ub2ec\ud574\uc900\ub2e4. \uc774\ub85c\uc368 CreateImageListOfEachClass \ub294 \uc774\ubbf8\uc9c0 \uacbd\ub85c\uc640 \ud074\ub798\uc2a4 \ub77c\ubca8\uc744 \ubca1\ud130\uc5d0 \uc798 \uc800\uc7a5\ud574\uc8fc\ub294 \ud568\uc218\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 LFWDataset \uc740 std::string filePath = m_rootPath + \"/\" + m_dataPath + \".txt\"; \ub97c \uc77d\uc5b4\uc11c \ud074\ub798\uc2a4 \ub9ac\uc2a4\ud2b8\ub97c std::vector<std::string> m_className \uc5d0 \uc800\uc7a5\ud558\uace0, std::string filePath = m_rootPath + '/' + m_dataPath + '/' + m_className[classNum] + \"/list.txt\"; \ub97c \uc77d\uc5b4\uc11c \uc774\ubbf8\uc9c0 \uacbd\ub85c\ub97c std::vecotr<std::string> m_aImagePath \uc5d0 \uc800\uc7a5\ud558\uace0, this->SetLabel(&vTmpLabel[0], m_numOfImg); \uc744 \ud638\ucd9c\ud558\uba74\uc11c \uc0dd\uc131\ub41c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uc774\uc81c LFWDataset::CopyData \uba54\uc18c\ub4dc\ub97c \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc804\uc5d0 Dataset::SetLabel \uba54\uc18c\ub4dc\uac00 \uc815\ud655\ud788 \ubb34\uc5c7\uc744 \ud558\ub294\uc9c0 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/LFWDataset.hpp: LFWDataset \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step1-1/#srcdatasethpp-datasetsetlabel","text":"\ubd84\uc11d \ubaa9\ud45c this->SetLabel(&vTmpLabel[0], m_numOfImg); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 template < typename DTYPE > void Dataset < DTYPE >:: SetLabel ( const unsigned char * pLabel , int noLabel ) { try { label . resize ( noLabel ); ... for ( int i = 0 ; i < noLabel ; i ++ ) label [ i ] = ( int ) pLabel [ i ]; } 1 : std::vector<int> \uc758 \uccab\ubc88\uc9f8 \uc6d0\uc18c\uc758 \uc8fc\uc18c\uac12\uc744 const unsigned char * \ub85c \ubc1b\ub294\ub2e4. Danger \ub17c\uc758\uac00 \ud544\uc694\ud55c \ucf54\ub4dc\uc774\ub2e4. \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc774 \uc77c\uc5b4\ub098\uae30 \ub54c\ubb38\uc774\ub2e4. 4 : std::vector<int> label; \uc758 \ud06c\uae30\ub97c noLabel \ub85c \uc870\uc815\ud55c\ub2e4. 6-7 : std::vector<int> label; \uc5d0 pLabel[i] \ub97c \uc800\uc7a5\ud55c\ub2e4. \ub530\ub77c\uc11c 0 \ubd80\ud130 m_useClasNum \uae4c\uc9c0\uc758 int \uac00 \uc800\uc7a5\ub41c\ub2e4. \ubd84\uc11d \uacb0\ub860 this->SetLabel(&vTmpLabel[0], m_numOfImg); \ub294 Dataset \uc758 std::vector<int> label; \uc5d0 vTmpLabel \uc758 \ub0b4\uc6a9\uc744 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/Dataset.hpp: Dataset::SetLabel \uba54\uc18c\ub4dc"},{"location":"sync/fewshot/step1-1/#lfwlfwdatasethpp-lfwdatasetcopydata","text":"\ubd84\uc11d \ubaa9\ud45c dataset.CopyData(batchIdx * BATCH + i, vTestSample[i]); \ub85c \uc5b4\ub5bb\uac8c \ub370\uc774\ud130\uac00 Tensor \ub85c \ubcc0\ud658\ub418\uc5b4 \uc2e0\uacbd\ub9dd\uc73c\ub85c \uc785\ub825\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 template < typename DTYPE > void LFWDataset < DTYPE >:: CopyData ( int idx , DTYPE * pDest ) { Tensor < DTYPE > * image = NULL ; ImageWrapper imgWrp ; // image load this -> AllocImageBuffer ( idx , imgWrp ); m_transform -> DoTransform ( imgWrp ); image = this -> Image2Tensor ( imgWrp , TRUE ); memcpy ( pDest , & ( * image )[ 0 ], INPUT_DIM * sizeof ( DTYPE )); delete image ; } 7 : AllocImageBuffer \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 template < typename DTYPE > void LFWDataset < DTYPE >:: AllocImageBuffer ( int idx , ImageWrapper & imgWrp ) { int width , height ; FILE * jpegFile = NULL ; unsigned char * jpegBuf = NULL ; int pixelFormat = TJPF_RGB ; tjhandle tjInstance = NULL ; long size ; int inSubsamp , inColorspace ; unsigned long jpegSize ; // create file address std :: string filePath = m_rootPath + '/' + m_dataPath + '/' + m_aImagePath [ idx ]; // check with printf const char * cstr = filePath . c_str (); // Load image (no throw and catch) /* Read the JPEG file into memory. */ jpegFile = fopen ( cstr , \"rb\" ); fseek ( jpegFile , 0 , SEEK_END ); size = ftell ( jpegFile ); fseek ( jpegFile , 0 , SEEK_SET ); jpegSize = ( unsigned long ) size ; jpegBuf = ( unsigned char * ) tjAlloc ( jpegSize ); if ( fread ( jpegBuf , jpegSize , 1 , jpegFile ) < 1 ) exit ( -1 ); fclose ( jpegFile ); jpegFile = NULL ; tjInstance = tjInitDecompress (); tjDecompressHeader3 ( tjInstance , jpegBuf , jpegSize , & width , & height , & inSubsamp , & inColorspace ); imgWrp . imgBuf = ( unsigned char * ) tjAlloc ( width * height * tjPixelSize [ pixelFormat ]); tjDecompress2 ( tjInstance , jpegBuf , jpegSize , imgWrp . imgBuf , width , 0 , height , pixelFormat , 0 ); imgWrp . imgShape = new Shape ( tjPixelSize [ pixelFormat ], height , width ); tjFree ( jpegBuf ); jpegBuf = NULL ; tjDestroy ( tjInstance ); tjInstance = NULL ; } 12-21 : std::string filePath = m_rootPath + '/' + m_dataPath + '/' + m_aImagePath[idx]; // check with printf \ub97c jpegFile \ub85c \uc5f4\uace0 \ud30c\uc77c \uc0ac\uc774\uc988\ub97c size \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger libjpeg-turbo \uc640\uc758 \ud638\ud658\uc131\uc744 \uc720\uc9c0\ud558\uba74\uc11c C \uc2a4\ud0c0\uc77c\uc744 C++ \uc2a4\ud0c0\uc77c\ub85c \ubc14\uafb8\ub294 \ubc29\ubc95\uc5d0 \ub300\ud55c \ub17c\uc758\uac00 \ud544\uc694\ud558\ub2e4. 23-34 : libjpeg-turbo \ub97c \uc0ac\uc6a9\ud558\uc5ec .jpeg \ud30c\uc77c\uc758 \uc555\ucd95\uc744 \ud480\uace0 imgWrp.imgBuf \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 36 : \uadf8\ub9ac\uace0 imgWrp.imgShape \uc5d0 \\(\\text{tjPixelSize[pixelFormat]} \\times \\text{height } \\times \\text{width}\\) \ud615\uc0c1\uc744 Shape \ub85c \ub9cc\ub4e4\uc5b4\uc11c \uc800\uc7a5\ud55c\ub2e4. Danger \ud558\uc9c0\ub9cc \uc774 \ud568\uc218\ub294 \uc774\ubbf8\uc9c0\ub97c \uc77d\uace0 \uc555\ucd95\uc744 \ud478\ub294 \uacfc\uc815\uc5d0\uc11c \uc5d0\ub7ec\ucc98\ub9ac\ub97c \ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc704\ud5d8\ud55c \ucf54\ub4dc\uc774\ub2e4. \uadf8\ub9ac\uace0 \ud568\uc218 \uc774\ub984 AllocImageBuffer \ub9cc \ubcf4\uc558\uc744 \ub54c\ub294 \uba54\ubaa8\ub9ac \uacf5\uac04\ub9cc \ud560\ub2f9\ud560 \uac83 \uac19\uc740\ub370 \uc2e4\uc81c\ub85c .jpeg \ud30c\uc77c\uc758 \uc555\ucd95\uc744 \ud480\uace0 Shape \ud615\uc0c1\uae4c\uc9c0 \ub9cc\ub4e4\uc5b4\uc900\ub2e4. \uc5b4\uca0c\ub4e0 \uacb0\uacfc\uc801\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \uc77d\uace0 \uc555\ucd95\uc744 \ud480\uc5b4\uc11c imgWrp.imgBuf \uc5d0 \uc800\uc7a5\ud558\uace0 Shape \ud074\ub798\uc2a4\ub85c \ud615\uc0c1\uc744 \ub9cc\ub4e4\uc5b4\uc11c imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 8 : \uc555\ucd95\uc774 \ud574\uc81c\ub41c .jpeg \uc774\ubbf8\uc9c0\uc640 \uadf8 \ud615\uc0c1\uc774 \uc800\uc7a5\ub41c imgWrp \uc744 vision:Compose::DoTransform \uc5d0 \uc804\ub2ec\ud55c\ub2e4. Note \uc774\uac83\uc740 LFW/main.cpp \uc758 main \ud568\uc218\uc5d0\uc11c vision::Compose *transform = new vision::Compose({new vision::Resize(224), new vision::CenterCrop(220)}); \ub85c \uc0dd\uc131\ub41c Compose \uac1d\uccb4\uc774\uc5c8\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc790. 9 : imgWrp \uc744 LFWDataset<DTYPE>::Image2Tensor(ImageWrapper& imgWrp, int doValueScaling) \uc5d0 \uc804\ub2ec\ud558\uace0 Tensor<DTYPE> * image \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc774 \ucf54\ub4dc\uac00 \uc2e4\uc9c8\uc801\uc73c\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub4dc\uc778 \uac83 \uac19\ub2e4. 10 : DTYPE * pDest \uc5d0 (*image)[0] \uc758 \uc8fc\uc18c\uac12\uc744 \uae30\uc810\uc73c\ub85c INPUT_DIM * sizeof(DTYPE) \ubc14\uc774\ud2b8\ub97c \ubcf5\uc0ac\ud55c\ub2e4. Danger \uc774 \ucf54\ub4dc\uc758 \uc548\uc815\uc131\uc5d0 \ub300\ud55c \ub17c\uc758\uac00 \ud544\uc694\ud558\ub2e4. \uc65c\ub0d0\ud558\uba74 memcpy \ub294 \ub0b4\ubd80\uc801\uc73c\ub85c \ud3ec\uc778\ud130 \ud0c0\uc785\uc744 \uac80\uc99d\ud558\uc9c0 \uc54a\uace0 \ub2e8\uc21c\ud788 \uc8fc\uc5b4\uc9c4 \ubc14\uc774\ud2b8 \ub9cc\ud07c\uc744 \uc8fc\uc5b4\uc9c4 \uc8fc\uc18c\uac12\uc73c\ub85c \ubcf5\uc0ac\ud560 \ubfd0\uc774\uae30 \ub54c\ubb38\uc774\ub2e4.( https://stackoverflow.com/a/19439770/11218888 ) \ubd84\uc11d \uacb0\ub860 LFWDataset::CopyData \uba54\uc18c\ub4dc\ub294 \uadf8 \uc774\ub984\uacfc \ub2e4\ub974\uac8c AllocImageBuffer \ub97c \ud1b5\ud558\uc5ec \uc774\ubbf8\uc9c0 \uc555\ucd95\uc744 \ud574\uc81c\ud558\uc5ec imgWrp \uc5d0 \uc800\uc7a5\ud558\uace0 \uc774\ubbf8\uc9c0 \ud615\uc0c1\uc744 new Shape(tjPixelSize[pixelFormat], height, width); \ub85c \ub9cc\ub4e4\uc5b4\uc11c imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud558\uace0, DoTransform \uc744 \ud1b5\ud574 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0, Image2Tensor \ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud574\uc900\ub2e4. Danger \ud544\uc694\ud55c \ucc98\ub9ac\ub4e4\uc744 \uc0dd\uc131\uc790 \ub610\ub294 StartProcess \uc5d0\uc11c \ud574\uc8fc\uace0 CopyData \uc5d0\uc11c\ub294 \ub370\uc774\ud130 \ubcf5\uc0ac \uae30\ub2a5\ub9cc \ud574\uc57c \ud560 \uac83 \uac19\ub2e4. \uc65c\ub0d0\ud558\uba74 CopyData \uba54\uc18c\ub4dc\uac00 \ud638\ucd9c\ub420 \ub54c\ub9c8\ub2e4 \uc774\ubbf8\uc9c0 \uc555\ucd95 \ud574\uc81c\uc640 \ub370\uc774\ud130 \ucc98\ub9ac, \uadf8\ub9ac\uace0 Tensor \ubcc0\ud658\uc774 \uc774\ub8e8\uc5b4\uc9c0\ub294\ub370 \ub9cc\uc57d \ud55c\ubc88 \uc774\ub8e8\uc5b4\uc84c\ub2e4\uba74 \uc774\ud6c4\uc5d0 \ubd88\ud544\uc694\ud55c \uc5f0\uc0b0\uc774 \ub05d\uc5c6\uc774 \ubc18\ubcf5\ub418\uae30 \ub54c\ubb38\uc774\ub2e4. \ub610\ud55c \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c\uc758 \ud45c\uc900\uc73c\ub85c \ub110\ub9ac \uc54c\ub824\uc9c4 \uc720\ub2c9\uc2a4 \ucca0\ud559 \uc5d0 \ub530\ub974\uba74 \ud558\ub098\uc758 \ud568\uc218\ub294 \ud558\ub098\uc758 \uae30\ub2a5\ub9cc \ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \uc774\uc81c \uc2e4\uc9c8\uc801\uc73c\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud574\uc8fc\ub294 LFWDataset<DTYPE>::Image2Tensor \ub97c \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 \uadf8\uc5d0 \uc55e\uc11c \uc774\ubbf8\uc9c0\uc758 \ud615\uc0c1\uc744 Shape \ub85c \ub9cc\ub4e4\uc5b4\uc11c imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc5b4\ub5a4 \uac83\uc778\uc9c0, \uadf8\ub9ac\uace0 \ub370\uc774\ud130\uc14b\uc744 vision:Compose::DoTransform \uc5d0 \uc804\ub2ec\ud558\uc5ec \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\ub294\uc9c0 \uc774\ud574\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 \uc774 \uba54\uc18c\ub4dc\ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/LFWDataset.hpp: LFWDataset::CopyData \uba54\uc18c\ub4dc"},{"location":"sync/fewshot/step1-1/#srcshapehpp-shape","text":"\ubd84\uc11d \ubaa9\ud45c imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \uc774\ud574\ud558\uae30 \uba3c\uc800 API \uc5d0 Shape \uc5d0 \ub300\ud55c \uc124\uba85\uc774 \uc788\uc73c\ubbc0\ub85c \uc774\ubc88\uc5d0\ub294 \ucf54\ub4dc \ubd84\uc11d\uc5d0 \uc55e\uc11c API \uc758 \uc124\uba85\uc744 \uc0b4\ud3b4\ubcf8\ub2e4. API \uc5d0 \ub530\ub974\uba74 Shape \ub294 Tensor \uc758 \ucc28\uc6d0\uc815\ubcf4\ub97c \uc800\uc7a5\ud558\uace0 \uc788\ub294 \uac1d\uccb4\uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \uc774 \ub370\uc774\ud130\uc14b\uc758 \ucc28\uc6d0\uc815\ubcf4\ub97c \uc800\uc7a5\ud55c\ub2e4\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4. API \uc5d0 \ub530\ub974\uba74 public Shape(int pSize0,int pSize1,int pSize2) \ub294 3\uac1c\uc758 \ucd95\uc758 Dimension\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 Shape \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\ub294 \uc0dd\uc131\uc790\uc774\ub2e4. \ub610 pSize0 \ub294 \uccab \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30, pSize1 \ub450 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30, pSize2 \uc138 \ubc88\uc9f8 \ucd95\uc758 Dimension \ud06c\uae30\uc774\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Shape { private : int m_Rank ; ///< Shape \ud074\ub798\uc2a4\ub97c \uad6c\uc131\ud558\ub294 Rank \uba64\ubc84\ubcc0\uc218, \ud150\uc11c\ub97c \uad6c\uc131\ud558\ub294 \ucd95\uc758 \uac1c\uc218 int * m_aDim ; ///< Shape \ud074\ub798\uc2a4\ub97c \uad6c\uc131\ud558\ub294 Dimension \uba64\ubc84\ubcc0\uc218, \uac01 \ucd95\uc758 \ucc28\uc6d0 Device m_Device ; ///< \uc7a5\uce58 \uc0ac\uc6a9 \uad6c\ubd84\uc790, CPU \ub610\ub294 GPU, Device \ucc38\uace0 int m_idOfDevice ; ///< GPU \uc0ac\uc6a9 \uc2dc, \uc0ac\uc6a9\ud558\ub824\ub294 GPU\uc758 \ubc88\ud638. CPU\uc758 \uacbd\uc6b0 -1 #ifdef __CUDNN__ cudnnTensorDescriptor_t m_desc ; ///< cudnn\uc758 Tensor Descriptor, GPU \uc5f0\uc0b0\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 Tensor\uc758 shape \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub294 \ud3ec\uc778\ud130 \ubcc0\uc218 #endif // if __CUDNN__ int Alloc ( int pRank , ...); int Alloc ( Shape * pShape ); ... public : Shape ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 ); Shape ( int pSize0 , int pSize1 , int pSize2 , int pSize3 ); Shape ( int pSize0 , int pSize1 , int pSize2 ); Shape ( int pSize0 , int pSize1 ); Shape ( int pSize0 ); Shape ( Shape * pShape ); // Copy Constructor virtual ~ Shape (); int GetRank (); int GetDim ( int pRanknum ); int & operator []( int pRanknum ); // operator[] overload ... }; 16 : \uc9c0\uae08 \ubd84\uc11d \ubaa9\ud45c\uac00 imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \ub97c \uc774\ud574\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uc774 \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud574\uc57c \ud55c\ub2e4. 1 2 3 4 5 6 7 8 9 Shape :: Shape ( int pSize0 , int pSize1 , int pSize2 ) { m_Rank = 0 ; m_aDim = NULL ; m_idOfDevice = -1 ; #ifdef __CUDNN__ m_desc = NULL ; #endif // if __CUDNN__ Alloc ( 3 , pSize0 , pSize1 , pSize2 ); } 2-4 : Danger \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc88b\uc744 \uac83 \uac19\ub2e4. 8 : Alloc \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 int Shape :: Alloc ( int pRank , ...) { try { if ( pRank > 0 ) m_Rank = pRank ; else throw pRank ; } catch ( int e ) { printf ( \"Receive invalid rank value %d in %s (%s %d) \\n \" , e , __FUNCTION__ , __FILE__ , __LINE__ ); return FALSE ; } try { m_aDim = new int [ m_Rank ]; } catch (...) { printf ( \"Failed to allcate memory in %s (%s %d) \\n \" , __FUNCTION__ , __FILE__ , __LINE__ ); return FALSE ; } va_list ap ; va_start ( ap , pRank ); // need to check compare between pRank value and number of another parameter for ( int i = 0 ; i < pRank ; i ++ ) { // need to check whether int or not m_aDim [ i ] = va_arg ( ap , int ); } va_end ( ap ); m_Device = CPU ; return TRUE ; } 2-15 : Danger try-catch \ubb38\uc744 \ud1b5\uc77c\ud558\uba74 \ucf54\ub4dc\ub97c \ucd95\uc57d\uc2dc\ud0ac \uc218 \uc788\ub2e4. \ub610 \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \ud45c\uc900\ucd9c\ub825\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ubcf4\ub0b4\uace0 \uc788\ub2e4. \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub294 fprintf(stderr,...) \ub610\ub294 std::cerr << ... \uc640 \uac19\uc774 \uc5d0\ub7ec\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ubcf4\ub0b4\uc57c \ud55c\ub2e4. m_Rank = 3 \uc73c\ub85c int * m_aDim = new int[3] \uc73c\ub85c \ucd08\uae30\ud654\ud55c\ub2e4. 17-25 : \uac00\ubcc0\uc778\uc790\ub97c \uac00\uc838\uc640\uc11c int * m_aDim \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uac00\ubcc0\uc778\uc790\ub294 tjPixelSize[pixelFormat], height, width \uc774\ubbc0\ub85c \uc774 \uac12\ub4e4\uc774 m_aDim[i] \uc5d0 \uac01\uac01 \uc800\uc7a5\ub41c\ub2e4. Danger \uac00\ubcc0\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 C \uc5d0\uc11c #include <stdarg.h> \uac00 \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc C++ \uc5d0\uc11c\ub294 \ud638\ud658\uc131\uc744 \uc704\ud558\uc5ec #include <cstdarg> \uc774 \uc120\uc5b8\ub418\uc5b4\uc57c\ub9cc \ud55c\ub2e4. \uc774 \uc120\uc5b8\uc740 src/Common.h \uc5d0 \uc120\uc5b8\ub418\uc5b4 \uc788\ub294\ub370 \uc774\uacf3\uc5d0\ub294 \ub300\ub7c9\uc758 C \uc5b8\uc5b4\uc758 \ud5e4\ub354 \uc120\uc5b8\ubb38 #include <....h> \uac00 \uc120\uc5b8\ub418\uc5b4 \uc788\uc5c8\ub2e4. \ubaa8\ub450 \ub2e4 C++ \uc2a4\ud0c0\uc77c \ud5e4\ub354 \uc120\uc5b8\uc73c\ub85c \ubc14\uafc0 \ud544\uc694\uac00 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 Shape \ub294 \ub370\uc774\ud130\uc14b\uc758 \ucc28\uc6d0\uc815\ubcf4\ub97c int * m_aDim \uc5d0 \uc800\uc7a5\ud558\uace0, \ucd95\uc758 \uac1c\uc218\ub97c m_Rank \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c imgWrp.imgShape = new Shape(tjPixelSize[pixelFormat], height, width); \ub294 \ub370\uc774\ud130\uc14b\uc758 \ucc28\uc6d0\uc815\ubcf4 \\[\\text{tjPixelSize[pixelFormat]} \\times \\text{height } \\times \\text{width}\\] \ub97c Shape \uac1d\uccb4\ub85c \uc0dd\uc131\ud558\uc5ec imgWrp.imgShape \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/Shape.hpp: Shape \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step1-1/#lfwimageprocesshpp-visioncomposedotransform","text":"\ubd84\uc11d \ubaa9\ud45c m_transform->DoTransform(imgWrp); \ub85c \ub370\uc774\ud130\uc14b\uc774 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 class Compose : public Transform { private : std :: vector < Transform *> m_listOfTransform ; int m_size ; ... virtual void DoTransform ( ImageWrapper & imgWrp ) { for ( int i = 0 ; i < m_size ; i ++ ) { m_listOfTransform [ i ] -> DoTransform ( imgWrp ); } } }; 5 : std::vector<Transform *> m_listOfTransform; \uc758 \uc6d0\uc18c\ub4e4\uc758 DoTransform \uba54\uc18c\ub4dc\ub97c imgWrp \uc744 \uc785\ub825\ud558\uc5ec \ud638\ucd9c\ud55c\ub2e4. m_listOfTransform \ub294 {new vision::Resize(224), new vision::CenterCrop(220)} \ub85c \ucd08\uae30\ud654\ub418\uc5c8\uc73c\ubbc0\ub85c vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uc774 \ud638\ucd9c\ub420 \uac83\uc774\ub2e4. \ubd84\uc11d \uacb0\ub860 vision::Compose::DoTransform \uba54\uc18c\ub4dc\ub294 m_listOfTransform \uc758 DoTransform \uba54\uc18c\ub4dc\uc5d0 imgWrp \uc744 \uc785\ub825\ud558\uba70 \ud638\ucd9c\ud574\uc900\ub2e4. m_listOfTransform \ub294 {new vision::Resize(224), new vision::CenterCrop(220)} \ub85c \ucd08\uae30\ud654\ub418\uc5c8\uc73c\ubbc0\ub85c vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uc774 \ud638\ucd9c\ub41c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uac00 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud558\ub294\uc9c0 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: vision::Compose::DoTransform \uba54\uc18c\ub4dc"},{"location":"sync/fewshot/step1-2/","text":"Analysis: Dataset to Tensor \u00b6 Note tutorials/LFW/ \uacbd\ub85c\ub97c LFW/ \ub85c \ucd95\uc57d\ud558\uc5ec \uc0ac\uc6a9\ud558\uc600\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uac00 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud558\ub294\uc9c0 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c m_transform->DoTransform(imgWrp); \ub85c \ub370\uc774\ud130\uc14b\uc774 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Resize : public Transform { ... public : ... virtual void DoTransform ( ImageWrapper & imgWrp ) { unsigned char * oldImgBuf = imgWrp . imgBuf ; Shape * oldImgShape = imgWrp . imgShape ; int oldWidth = oldImgShape -> GetDim ( 2 ); int oldHeight = oldImgShape -> GetDim ( 1 ); int channel = oldImgShape -> GetDim ( 0 ); unsigned char * newImgBuf = new unsigned char [ newWidth * newHeight * channel ]; Shape * NewImgShape = new Shape ( channel , newHeight , newWidth ); for ( int newy = 0 ; newy < newHeight ; newy ++ ) { int oldy = newy * oldHeight / newHeight ; for ( int newx = 0 ; newx < newWidth ; newx ++ ) { int oldx = newx * oldWidth / newWidth ; for ( int c = 0 ; c < channel ; c ++ ) { newImgBuf [ newy * newWidth * channel + newx * channel + c ] = oldImgBuf [ oldy * oldWidth * channel + oldx * channel + c ]; } } } delete [] oldImgBuf ; oldImgBuf = NULL ; delete oldImgShape ; oldImgShape = NULL ; imgWrp . imgBuf = newImgBuf ; imgWrp . imgShape = NewImgShape ; } }; 13-14 : newWidth \uc640 newHeight \ub85c \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c \ub9cc\ub4e4\uace0 \uc0c8\ub85c\uc6b4 Shape \ub97c \ub9cc\ub4e0\ub2e4. \uac1d\uccb4\uac00 new vision::Resize(224) \ub85c \uc0dd\uc131\ub418\uc5c8\uc5c8\uae30\uc5d0 newWidth \uc640 newHeight \uc5d0\ub294 224 \uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\ub2e4. 17-28 : \uc774\uc804 \uc774\ubbf8\uc9c0 \ubc84\ud37c\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc90c\uacfc \ub3d9\uc2dc\uc5d0 \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c \ub9cc\ub4e0\ub2e4. \ud558\uc9c0\ub9cc \uc8fc\uc11d\ub3c4 \uc5c6\uace0 API \ub3c4 \uc5c6\uc744 \ubfd0\ub354\ub7ec \uc9c0\uae08\uc758 \ubaa9\ud45c\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uadf8 \ucc98\ub9ac\ub97c \uc815\ud655\ud788 \uc774\ud574\ud558\ub294 \uac83\uc740 \uc9c0\uae08\uc740 \ubd88\ud544\uc694\ud558\ub2e4. \ub530\ub77c\uc11c \uc790\uc138\ud788 \ubd84\uc11d\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. 35-36 : \uc0c8\ub85c\uc6b4 \ucc28\uc6d0\uacfc \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c imgWrp \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 m_transform->DoTransform(imgWrp); \uc740 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0 \ub2e4\uc2dc \ub370\uc774\ud130\uc14b\uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub97c \ubcc0\ud658\ud558\ub294 \uc9c1\uc811\uc801\uc778 \ucf54\ub4dc\ub294 \uc544\ub2c8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c m_transform->DoTransform(imgWrp); \ub85c \ub370\uc774\ud130\uc14b\uc774 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class CenterCrop : public Transform { ... public : ... virtual void DoTransform ( ImageWrapper & imgWrp ) { unsigned char * imgBuf = imgWrp . imgBuf ; Shape * imgShape = imgWrp . imgShape ; int width = imgShape -> GetDim ( 2 ); // assert(height >= m_heigth); int channel = imgShape -> GetDim ( 0 ); unsigned char * newImgBuf = new unsigned char [ m_width * m_heigth * channel ]; Shape * NewImgShape = new Shape ( channel , m_heigth , m_width ); int start_h = ( height - m_heigth ) / 2 ; int start_w = ( width - m_width ) / 2 ; for ( int h = 0 ; h < m_heigth ; h ++ ) { int oldh = start_h + h ; for ( int w = 0 ; w < m_width ; w ++ ) { int oldw = start_w + w ; for ( int ch = 0 ; ch < channel ; ch ++ ) { newImgBuf [ h * m_width * channel + w * channel + ch ] = imgBuf [ oldh * width * channel + oldw * channel + ch ]; } } } delete [] imgBuf ; imgBuf = NULL ; delete imgShape ; imgShape = NULL ; imgWrp . imgBuf = newImgBuf ; imgWrp . imgShape = NewImgShape ; } }; 13-37 : \uc774\uc804 \uc774\ubbf8\uc9c0 \ubc84\ud37c\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc90c\uacfc \ub3d9\uc2dc\uc5d0 \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c \ub9cc\ub4e0\ub2e4. \uadf8\ub9ac\uace0 \uc0c8\ub85c\uc6b4 \ucc28\uc6d0\uacfc \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c imgWrp \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc8fc\uc11d\ub3c4 \uc5c6\uace0 API \ub3c4 \uc5c6\uc744 \ubfd0\ub354\ub7ec \uc9c0\uae08\uc758 \ubaa9\ud45c\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uadf8 \ucc98\ub9ac\ub97c \uc815\ud655\ud788 \uc774\ud574\ud558\ub294 \uac83\uc740 \uc9c0\uae08\uc740 \ubd88\ud544\uc694\ud558\ub2e4. \ub530\ub77c\uc11c \uc790\uc138\ud788 \ubd84\uc11d\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. \ubd84\uc11d \uacb0\ub860 m_transform->DoTransform(imgWrp); \uc740 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0 \ub2e4\uc2dc \ub370\uc774\ud130\uc14b\uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub97c \ubcc0\ud658\ud558\ub294 \uc9c1\uc811\uc801\uc778 \ucf54\ub4dc\ub294 \uc544\ub2c8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c Tensor<DTYPE> * image = this->Image2Tensor(imgWrp, TRUE); \ub85c \ub370\uc774\ud130\uc14b\uc744 \uc5b4\ub5bb\uac8c Tensor \ub85c \ubcc0\ud658\ud558\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename DTYPE > Tensor < DTYPE > * LFWDataset < DTYPE >:: Image2Tensor ( ImageWrapper & imgWrp , int doValueScaling ) { unsigned char * imgBuf = imgWrp . imgBuf ; Shape * imgShape = imgWrp . imgShape ; int width = imgShape -> GetDim ( 2 ); int height = imgShape -> GetDim ( 1 ); int channel = imgShape -> GetDim ( 0 ); Tensor < DTYPE > * result = Tensor < DTYPE >:: Zeros ( 1 , 1 , channel , height , width ); if ( doValueScaling ) { for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = imgBuf [ ro * width * channel + co * channel + ch ] / 255.0 ; } } } } else { for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = imgBuf [ ro * width * channel + co * channel + ch ]; } } } } return result ; } 1-11 : imgWrp \ucc38\uc870\uc790\uc640 doValueScaling \uc744 \uc778\uc790\ub85c \ubc1b\ub294\ub2e4. Danger doValuerScaling \uc740 true \uc640 false \ub97c \uad6c\ubd84\ud558\ub294 \uc6a9\ub3c4\ub85c \uc4f0\uc774\uae30 \ub54c\ubb38\uc5d0 4 \ubc14\uc774\ud2b8\ub098 \ub418\ub294 int \ud0c0\uc785\uc774 \uc544\ub2cc 1 \ubc14\uc774\ud2b8 bool \ud0c0\uc785\uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\uc544 \ubcf4\uc778\ub2e4. 5-7 : \ucc28\uc6d0 \uc815\ubcf4\ub97c \uac00\uc838\uc628\ub2e4. 9 : Tensor::Zeros \uc5d0 \ucc28\uc6d0\uc815\ubcf4\ub97c \uc804\ub2ec\ud558\uc5ec Tensor \uac1d\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. Danger \uadf8\ub7f0\ub370 LFW \ub370\uc774\ud130\uc14b\uc740 .jpeg \ud30c\uc77c\ub85c\uc368 \uc2e4\uc81c\ub85c\ub294 3 \ucc28\uc6d0 \ud150\uc800( \\(\\text{RGB} \\times \\text{width} \\times \\text{height}\\) ) \ub85c \ub418\uc5b4 \uc788\ub2e4. \uadf8\ub7f0\ub370\ub3c4 \uc65c \uad73\uc774 \ubd88\ud544\uc694\ud55c \uc5f0\uc0b0\uc774 \ucd94\uac00\ub418\ub294 5 \ucc28\uc6d0 \ud150\uc800\ub97c \uc0ac\uc6a9\ud588\ub294\uc9c0 \ubaa8\ub974\uaca0\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc911\uc5d0 \uc0b4\ud3b4\ubcf4\uaca0\uc9c0\ub9cc Tensor::Zeros \ub294 \ub0b4\ubd80\uc801\uc73c\ub85c Shape \uac1d\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub3d9\uc77c\ud55c \ub370\uc774\ud130\uc14b\uc744 \ud45c\ud604\ud558\ub294 Shape \uac1d\uccb4\uac00 \\(2\\) \ubc88\uc774\ub098 \ubd88\ud544\uc694\ud558\uac8c \uc0dd\uc131\ub41c \uac83\uc774\ub2e4. 12-15 : doValuerScaling \uc774 TRUE \uc774\ubbc0\ub85c \uc774 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub41c\ub2e4. imgBuf \uc758 ro * width * channel + co * channel + ch \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uc5ec 255.0 \ub85c \ub098\ub208\ub2e4. \ub2e8\uc9c0 \\(1\\) \ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 \\(3\\) \ucc28\uc6d0 \ub370\uc774\ud130\ub97c \ucc38\uc870\ud558\ub294 \ubc29\uc2dd\uc774\ub2e4. Note \uc774\uac83\uc740 libjpeg-turbo \uac00 \uc555\ucd95 \ud574\uc81c\ud55c \ub370\uc774\ud130\uc14b\uc774\ubbc0\ub85c \\(3\\) \ucc28\uc6d0 \ub370\uc774\ud130\uc14b\uc778 \uc774\ubbf8\uc9c0\uc758 \uc2e4\uc81c \ub370\uc774\ud130\ub97c \ucc38\uc870\ud560 \ub54c \uc65c ro * width * channel + co * channel + ch \ub85c \ucc38\uc870\ud558\ub294\uc9c0\ub294 libjpeg-turbo \ub97c \ucc38\uc870\ud574\uc57c \ud560 \uac83 \uac19\ub2e4. \uc774\ub294 \ub9cc\uc57d \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c(\uac00\ub839 CImg ) \ub370\uc774\ud130\uc14b\uc744 \\(1\\) \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e4\uace0 \uadf8\uac83\uc744 \ub2e4\uc2dc Tensor \ub85c \ubcc0\ud658\ud55c\ub2e4\uba74 \ub610 \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \\(1\\) \ucc28\uc6d0 \ubc30\uc5f4\uc758 \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. Danger (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ud558\uc9c0\ub9cc \uc774\ub807\uac8c \ud558\uba74 \ub370\uc774\ud130 \ucc38\uc870 \uacfc\uc815\uc774 \ubc88\uac70\ub86d\uace0 \ubd88\ud544\uc694\ud55c \uacfc\uc815\uc774 \ub418\uc9c0 \uc54a\ub098 \uc2f6\ub2e4. \uc65c\ub0d0\ud558\uba74 Index5D \uba54\uc18c\ub4dc\ub97c Tensor \ud074\ub798\uc2a4 \ub0b4\ubd80\uc5d0\uc11c \ucc98\ub9ac\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub807\uac8c \ud55c\ub2e4\uba74 \uc0ac\uc6a9\uc790\uc758 \ud3b8\uc758\ub97c \ub192\uc77c \uc218 \uc788\ub2e4. Danger imgBuf \ub294 unsigned char \ud615 \ubc30\uc5f4\uc778\ub370 \uc774\uac83\uc758 \uc6d0\uc18c\ub97c \uba85\uc2dc\uc801 \ud615\ubcc0\ud658 \uc5c6\uc774 double \ud615\uc73c\ub85c \ub098\ub204\uace0 \uc788\uc73c\ubbc0\ub85c \uc774 \ucf54\ub4dc\ub294 \uc554\uc2dc\uc801 \ud615\ubcc0\ud658 \uc744 \uc77c\uc73c\ud0a8\ub2e4. \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \ud504\ub85c\uc81d\ud2b8\uc758 \uc548\uc815\uc131\uacfc \uc2e0\ub8b0\uc131\uc744 \ud30c\uad34\ud558\ub294 \uc8fc\ub41c \uc6d0\uc778 \uc911 \ud558\ub098\uc774\ubbc0\ub85c \uace0\uce60 \ud544\uc694\uac00 \uc788\uc5b4 \ubcf4\uc778\ub2e4. \uc800\uc7a5 \ub300\uc0c1\uc778 LongArray \uc758 DTYPE ** m_aaHostLongArray \uc758 \ucd94\uc0c1\uc790\ub8cc\ud615 DTYPE \uc740 Tensor \uac00 \uacb0\uc815\ud558\uace0, Tensor \uc758 \ucd94\uc0c1\uc790\ub8cc\ud615\uc740 LFWDataset \uc774 \uacb0\uc815\ud558\uace0, LFWDataset \uc758 \ucd94\uc0c1\uc790\ub8cc\ud615\uc740 LFW/main.cpp \uc758 main \ud568\uc218\uc758 \ud638\ucd9c\ud615\ud0dc\uc5d0\uc11c \uacb0\uc815\ub41c\ub2e4. \uadf8\ub7f0\ub370 \uc2ec\uc9c0\uc5b4 \uadf8 LFWDataset \ud638\ucd9c\ud615\ud0dc\uac00 LFWDataset<float> *train_dataset = new LFWDataset<float>(\"./data\", \"lfw_funneled\", NUMBER_OF_CLASS, transform); \uc774\uc5c8\ub358 \uac83\uc744 \uae30\uc5b5\ud558\uc790. \uadf8\ub7ec\ubbc0\ub85c double \uc5d0\uc11c float \ub85c \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc774 \uc77c\uc5b4\ub098\uba74\uc11c \ub370\uc774\ud130 \uc190\uc2e4\uae4c\uc9c0 \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc880 \ub354 \ud070 \uc790\ub8cc\ud615\uc5d0 \ub300\ud55c \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \ub370\uc774\ud130 \uc190\uc2e4\uc774 \uc5c6\uc73c\ubbc0\ub85c \uc560\uad50\ub85c \ubd10\uc904\ub9cc \ud558\uc9c0\ub9cc \ub354 \uc791\uc740 \uc790\ub8cc\ud615\uc5d0 \ub300\ud55c \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \ub370\uc774\ud130 \uc190\uc2e4\uc774 \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\uc73c\ubbc0\ub85c \ud504\ub85c\uc81d\ud2b8\uc758 \uc548\uc815\uc131\uc744 \uc2ec\uac01\ud558\uac8c \ud574\uce5c\ub2e4. \uc5b4\uca0c\ub4e0 .jpeg \uc758 \ud53d\uc140\uac12 \ud558\ub098\ud558\ub098\ub97c 255.0 \ub85c \ub098\ub214\uc73c\ub85c\uc368 \ub370\uc774\ud130\ub97c \uc2a4\ucf00\uc77c\ub9c1\ud55c \ud6c4 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uc5d0 \ud558\ub098\ud558\ub098\uc529 \uc800\uc7a5\ud55c\ub2e4. Danger \uc65c \uc774\ub7f0 \ucf54\ub4dc\ub294 GPU Acceleration \uc774 \ub418\uc9c0 \uc54a\uc558\uc744\uae4c? \ubd84\uc11d \uacb0\ub860 Tensor<DTYPE> * image = this->Image2Tensor(imgWrp, TRUE); \uc740 Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub97c \ub9cc\ub4e4\uace0 \\(3\\) \ucc28\uc6d0 \ub370\uc774\ud130\uc14b\uc758 \uc6d0\uc18c \ud558\ub098 \ud558\ub098\ub97c \uac00\uc838\uc640\uc11c (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc804\uc5d0 Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub85c\uc368 Tensor::Zeros \uba54\uc18c\ub4dc\ub85c Tensor \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uc600\uc73c\ubbc0\ub85c \uc774\uac83\ubd80\ud130 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub85c\uc368 Tensor \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\ub294 \uacfc\uc815 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 enum IsUseTime { UseTime , NoUseTime }; ... template < typename DTYPE > class Tensor { private : Shape * m_aShape ; ///< Tensor\ub97c \uad6c\uc131\ud558\ub294 Shape \ud074\ub798\uc2a4, \ud150\uc11c\uc758 \ucc28\uc6d0\uc744 \uc815\uc758 LongArray < DTYPE > * m_aLongArray ; ///< Tensor\ub97c \uad6c\uc131\ud558\ub294 LongArray \ud074\ub798\uc2a4, \ud150\uc11c\uc758 \uc6d0\uc18c\ub4e4\uc758 \uac12\uc744 \uc800\uc7a5 ... IsUseTime m_IsUseTime ; ///< time \ucd95 \uc0ac\uc6a9 \uc720\ubb34, IsUseTime \ucc38\uace0 int Alloc ( Shape * pShape , IsUseTime pAnswer ); ... public : Tensor ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 , IsUseTime pAnswer = UseTime ); // For 5D-Tensor ... Tensor ( Shape * pShape , IsUseTime pAnswer = UseTime ); ... static Tensor < DTYPE >* Zeros ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 , IsUseTime pAnswer = UseTime ); static Tensor < DTYPE >* Zeros ( Shape * pShape , IsUseTime pAnswer = UseTime ); ... }; 19 : Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub294 \uc774 \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. \uac1d\uccb4\uac00 \uc0dd\uc131\ub418\uae30 \uc804\uc5d0 \ud638\ucd9c\ub418\uc5b4\uc57c \ud558\ubbc0\ub85c static \uc73c\ub85c \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. \ub610\ud55c IsUseTime pAnswer = UseTime \uc758 \ub514\ud3f4\ud2b8 \ud30c\ub77c\ubbf8\ud130\ub97c \uc0ac\uc6a9\ud55c\ub2e4. 1 2 3 4 5 6 7 8 9 10 template < typename DTYPE > Tensor < DTYPE > * Tensor < DTYPE >:: Zeros ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 , IsUseTime pAnswer ) { return Tensor < DTYPE >:: Zeros ( new Shape ( pSize0 , pSize1 , pSize2 , pSize3 , pSize4 ), pAnswer ); } 8-9 : \ud30c\ub77c\ubbf8\ud130 (1, 1, channel, height, width) \ub97c \ubc1b\uc544\uc11c \uc624\ubc84\ub85c\ub529\ub41c Tensor::Zeros \ub97c \ud638\ucd9c\ud55c\ub2e4. 1 2 3 template < typename DTYPE > Tensor < DTYPE > * Tensor < DTYPE >:: Zeros ( Shape * pShape , IsUseTime pAnswer ) { return new Tensor < DTYPE > ( pShape , pAnswer ); } 2 : \ud30c\ub77c\ubbf8\ud130 new Shape(pSize0, pSize1, pSize2, pSize3, pSize4), pAnswer \ub97c \ubc1b\uc544\uc11c \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud55c\ub2e4. Danger \uc774\ub7f4\uac70\uba74 Tensor<DTYPE>::Zeros(int pSize0, int pSize1, int pSize2, int pSize3, int pSize4, IsUseTime pAnswer) \uc5d0\uc11c \ubc14\ub85c \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc774 \ub354 \ube60\ub97c \uac83\uc774\ub2e4. 1 2 3 4 5 6 7 template < typename DTYPE > Tensor < DTYPE >:: Tensor ( Shape * pShape , IsUseTime pAnswer ) { m_aShape = NULL ; m_aLongArray = NULL ; m_Device = CPU ; m_idOfDevice = -1 ; Alloc ( pShape , pAnswer ); } 2-5 : \uba64\ubc84 \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud574\uc900\ub2e4. Danger \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc4f0\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uae30\ub300\ud560 \uc218 \uc788\uc744 \uac83 \uac19\ub2e4. 6 : \ud30c\ub77c\ubbf8\ud130\ub97c \uadf8\ub300\ub85c Tensor::Alloc \uba54\uc18c\ub4dc\ub85c \uc804\ub2ec\ud55c\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename DTYPE > int Tensor < DTYPE >:: Alloc ( Shape * pShape , IsUseTime pAnswer ) { if ( pShape == NULL ) { printf ( \"Receive NULL pointer of Shape class in %s (%s %d) \\n \" , __FUNCTION__ , __FILE__ , __LINE__ ); return FALSE ; } else { m_aShape = pShape ; m_IsUseTime = pAnswer ; int rank = pShape -> GetRank (); int pTime = 1 ; int pCapacityPerTime = 1 ; if ( m_IsUseTime == UseTime ) { pTime = ( * pShape )[ 0 ]; for ( int i = 1 ; i < rank ; i ++ ) { pCapacityPerTime *= ( * pShape )[ i ]; } } else if ( m_IsUseTime == NoUseTime ) { for ( int i = 0 ; i < rank ; i ++ ) { pCapacityPerTime *= ( * pShape )[ i ]; } } else return FALSE ; m_aLongArray = new LongArray < DTYPE > ( pTime , pCapacityPerTime ); } m_Device = CPU ; return TRUE ; } 2-5 : Danger \uc5d0\ub7ec\ub97c \ucc98\ub9ac\ud574\uc8fc\ub294\ub370 C++ \ud504\ub85c\uc81d\ud2b8\uc774\ubbc0\ub85c try-catch \ubb38\uc744 \uc0ac\uc6a9\ud558\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uacfc \uac00\ub3c5\uc131\uc744 \uae30\ub300\ud560 \uc218 \uc788\ub2e4. \ub610\ud55c printf \ub294 \ud45c\uc900\ucd9c\ub825\uc778\ub370 \uc5d0\ub7ec \ucc98\ub9ac \uba54\uc2dc\uc9c0\uc774\ubbc0\ub85c \ud45c\uc900\uc5d0\ub7ec\uc2a4\ud2b8\ub9bc\uc73c\ub85c \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\uba74 \uc5d0\ub7ec \ub85c\uadf8\ub97c \ubd84\ub958\ud560 \uc218 \uc788\ub2e4. \uac00\ub839 fprintf(stderr, ...) \uc774\ub098 std::cerr << ... \ub85c \ud45c\uc900\uc5d0\ub7ec\uc2a4\ud2b8\ub9bc\uc73c\ub85c \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\ub294 \uac83\uc774\ub2e4. 6-7 : Danger \uba64\ubc84\ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud558\ub294\ub370 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uae30\ub300\ud560 \uc218 \uc788\ub2e4. 14-24 : Danger \uc5d0\ub7ec\ub97c \ucc98\ub9ac\ud574\uc8fc\ub294\ub370 C++ \ud504\ub85c\uc81d\ud2b8\uc774\ubbc0\ub85c try-catch \ubb38\uc744 \uc0ac\uc6a9\ud558\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uacfc \uac00\ub3c5\uc131\uc744 \uae30\ub300\ud560 \uc218 \uc788\ub2e4. 15-19 : pAnswer = UseTime \uc774\ubbc0\ub85c \uc774 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub41c\ub2e4. 15 : Shape::operator[] \uc5d0 0 \uc744 \uc804\ub2ec\ud558\uc5ec pTime \uc744 \ucd08\uae30\ud654\ud55c\ub2e4. Shape::operator[] \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 int & Shape :: operator []( int pRanknum ) { try { if ( pRanknum >= 0 ) return m_aDim [ pRanknum ]; else throw ; } catch (...) { printf ( \"Receive invalid pRanknum value in %s (%s %d) \\n \" , __FUNCTION__ , __FILE__ , __LINE__ ); exit ( 0 ); // return FALSE; } } 3 : \ub2e8\uc21c\ud788 int * m_aDim \ub97c pRanknum \uc778\ub371\uc2a4\ub85c \ucc38\uc870\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4. 6-8 : Danger \uc5d0\ub7ec \ucc98\ub9ac\ub97c try-catch \ub85c \ud588\uc9c0\ub9cc \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \ud45c\uc900\ucd9c\ub825\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ubcf4\ub0b4\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc5d0\ub7ec\uba54\uc2dc\uc9c0 \uc218\uc9d1\uc774 \uc5b4\ub824\uc6cc \ud504\ub85c\uc81d\ud2b8 \uc2e0\ub8b0\uc131\uacfc \ud3b8\uc758\uc131\uc774 \ub5a8\uc5b4\uc9c4\ub2e4. \ub610\ud55c \uc5d0\ub7ec\ucf54\ub4dc\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c exit(0) \uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc744 \uac15\uc81c\ub85c \uc885\ub8cc\ud574\ubc84\ub9ac\ubbc0\ub85c \uc0ac\uc6a9\uc790\uac00 \uc5d0\ub7ec\ub97c \ud578\ub4e4\ub9c1\ud560 \uc218 \uc788\ub294 \uae30\ud68c\uac00 \ubc15\ud0c8\ub2f9\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774 \ucf54\ub4dc\ub294 \ub370\uc774\ud130\uc14b\uc758 0 \ubc88\uc9f8 \ucd95\uc758 \ud06c\uae30\ub97c pTime \uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774\ub2e4. 18 : Shape \uc5d0 operator[] \ub85c i \uc778\ub371\uc2a4\ub97c \uac00\uc838\uc640\uc11c pCapacityPerTime \uc5d0 \ub204\uc801\uc73c\ub85c \uacf1\ud574\uc900\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774 \ucf54\ub4dc\ub294 \ub370\uc774\ud130\uc14b\uc758 1 \ubc88\uc9f8 \ucd95\uc758 \ud06c\uae30\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0 pCapacityPerTime \uc5d0 \uc800\uc7a5\ud558\uace0 \uc788\ub2e4. 26 : pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc73c\ub85c LongArray \ub97c \ub9cc\ub4e4\uace0 m_aLongArray \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 29 : Danger \uba54\uc18c\ub4dc\uac00 \uc131\uacf5\uc801\uc73c\ub85c \ub05d\ub0ac\uc744 \ub54c TRUE \ub97c \ubc18\ud658\ud558\ub294\ub370 4 \ubc14\uc774\ud2b8 int \ud615\uc774 \uc544\ub2c8\ub77c 1 \ubc14\uc774\ud2b8 bool \ud615 true \ub97c \uc0ac\uc6a9\ud558\uba74 \uba54\ubaa8\ub9ac \ud6a8\uc728\uc744 \ub192\uc77c \uc218 \uc788\uc5b4 \ubcf4\uc778\ub2e4. \ubd84\uc11d \uacb0\ub860 Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub294 \ud30c\ub77c\ubbf8\ud130\ub97c \ubc1b\uc544\uc11c \uc790\ub3d9\uc73c\ub85c Shape \ub97c \uc0dd\uc131\ud574\uc900 \ub2e4\uc74c \ud544\uc694\ud55c \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\uc2dc\ud0a4\uace0 LongArray \ub97c \ub9cc\ub4e4\uc5b4\uc11c LongArray<DTYPE> * m_aLongArray \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7f0\ub370 Tensor::Zeros \uac00 \ud150\uc800\uac12\ub4e4\uc744 \\(0\\) \uc73c\ub85c \ucd08\uae30\ud654\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc\ub77c\uace0 \ud588\ub294\ub370 \uc5b4\ub514\uc5d0\uc11c \\(0\\) \uc73c\ub85c \ucd08\uae30\ud654\ub418\uc5c8\ub294\uc9c0 \ubcf4\uc774\uc9c0 \uc544\uc9c1 \uc54a\ub294\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \ubd84\uc11d\ud558\uae30 \uc704\ud558\uc5ec Tensor::operator[] \ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \uadf8\ub7f0\ub370 Index5D \uac00 Tensor::operator[] \uc5d0 \uc778\uc790\ub85c \uc804\ub2ec\ub418\uc5c8\uc73c\ubbc0\ub85c Index5D \ubd80\ud130 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 \u00b6 \ubd84\uc11d \ubaa9\ud45c Index5D(result->GetShape(), 0, 0, ch, ro, co) \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \uc774\ud574\ud558\uae30 \uc8fc\uc11d\uc5d0 \ub530\ub974\uba74 Index5D \ub294 5\ucc28\uc6d0\uc73c\ub85c \uc815\uc758\ub41c Tensor \uc758 LongArray \uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud558\ub294 \uba54\uc18c\ub4dc\uc774\ub2e4. \uc989 Index5D \ub294 5\ucc28\uc6d0\uc73c\ub85c \uc815\uc758\ub41c Tensor \uc5d0 \ub300\ud574, pShape \uacfc \uac01 \ucd95\uc758 \uc778\ub371\uc2a4\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 \uc774\uc5d0 \ub300\uc751\ub418\ub294 LongArray \uc758 \uc6d0\uc18c\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4 \ubc88\ud638\ub97c \uacc4\uc0b0\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4. 1 2 3 inline unsigned int Index5D ( Shape * pShape , int ti , int ba , int ch , int ro , int co ) { return ((( ti * ( * pShape )[ 1 ] + ba ) * ( * pShape )[ 2 ] + ch ) * ( * pShape )[ 3 ] + ro ) * ( * pShape )[ 4 ] + co ; } 2 : \uc774 \ucf54\ub4dc\ub97c \uc774\ud574\ud558\uae30 \uc704\ud558\uc5ec \uac00\uc7a5 \ub2e8\uc21c\ud55c \ud615\ud0dc\uc758 Index2D \ud568\uc218\ub97c \uc0b4\ud3b4\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 inline unsigned int Index2D ( Shape * pShape , int ro , int co ) { return ro * ( * pShape )[ 1 ] + co ; } \uc774\uac83\uc740 2 \ucc28\uc6d0 \ubc30\uc5f4\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e0 \uac83\uc744 \ucc38\uc870\ud558\uae30 \uc704\ud55c \ucf54\ub4dc\uc774\ub2e4. \ub2e4\uc74c\uc740 \\((n+1) \\times 8\\) \ud615\uc0c1\uc758 \ud589\ub82c\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e0 \uac83\uc774\ub2e4. \uc704 \uadf8\ub9bc\uc744 \ubcf4\uba74 2 \ucc28\uc6d0 \ubc30\uc5f4\uc774 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ub418\uc5c8\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uac01\uac01\uc758 \uc778\ub371\uc2a4\ub294 2 \ucc28\uc6d0 \ubc30\uc5f4\uc77c \ub54c \\((0,0)\\) \ubd80\ud130 \\((n, 7)\\) \uae4c\uc9c0 \uc600\ub2e4. \ud558\uc9c0\ub9cc 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ub418\uc5c8\uc73c\ubbc0\ub85c \uc778\ub371\uc2a4\ub97c \\(i \\in \\{0, 1, \\dots, n\\}, j \\in \\{0, 1, \\dots, 7\\}\\) \uc778 \\(i, j\\) \uc5d0 \ub300\ud558\uc5ec \\(i \\times 8 + j\\) \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4. \uc774\uac83\uc744 \uc77c\ubc18\ud654\ud558\uba74 \\(n \\in \\mathbb{N}, m \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \ud589\ub82c\uc744 \\(1 \\times nm\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\(i \\in \\{0, 1, \\dots, n-1\\}, j \\in \\{0, 1, \\dots, m-1\\}\\) \uc778 \\(i, j\\) \uc5d0 \ub300\ud558\uc5ec \\(\\boxed{ i \\times m + j}\\) \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uadc0\ub0a9\uc801\uc73c\ub85c \uc54c \uc218 \uc788\ub2e4. \uc774\uac83\uc744 \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\uba74 \uc704\uc640 \uac19\uc740 Index2D \ud568\uc218\uac00 \ub418\ub294 \uac83\uc774\ub2e4. Note \uc5f0\uc5ed\uc801\uc778 \uc99d\uba85\uc740 \uc0dd\ub7b5\ud55c\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c 3 \ucc28\uc6d0 \ubc30\uc5f4\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc800\uc7a5\ud55c \ub2e4\uc74c \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud55c Index3D \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 inline unsigned int Index3D ( Shape * pShape , int ch , int ro , int co ) { return ( ch * ( * pShape )[ 1 ] + ro ) * ( * pShape )[ 2 ] + co ; } \uc774\uac83\uc740 3 \ucc28\uc6d0 \ubc30\uc5f4\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e0 \uac83\uc744 \ucc38\uc870\ud558\uae30 \uc704\ud55c \ucf54\ub4dc\uc774\ub2e4. \ub2e4\uc74c\uc740 \\((n+1) \\times 3 \\times 4\\) \ud615\uc0c1\uc758 \ud150\uc800\ub97c 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ud55c \uac83\uc774\ub2e4. \uc774 \ud150\uc800\uc758 \uc778\ub371\uc2a4\ub294 \\((0, 0, 0)\\) \ubd80\ud130 \\((n,2,3)\\) \uae4c\uc9c0\uc600\ub2e4. \ud558\uc9c0\ub9cc 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ub418\uc5c8\uc73c\ubbc0\ub85c \uc778\ub371\uc2a4\ub97c \\(i \\in \\{0, 1, \\dots, n\\}, j \\in \\{0, 1, 2\\}, k \\in \\{0,1,2,3\\}\\) \uc5d0 \ub300\ud558\uc5ec \\(i \\times 3 \\times 4 + j \\times 4 + k = (i \\times 3 + j) \\times 4 + k\\) \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4. \uc774\uac83\uc744 \uc77c\ubc18\ud654\ud558\uba74 \\(t_1 \\in \\mathbb{N}, t_2 \\in \\mathbb{N}, t_3 \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(t_1 \\times t_2 \\times t_3\\) \ud150\uc800\ub97c \\(1 \\times t_1t_2t_3\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\(i_1 \\in \\{0, 1, \\dots, t_1-1\\}, i_2 \\in \\{0, 1, \\dots, t_2-1\\}, i_3 \\in \\{0, 1, \\dots, t_3-1\\}\\) \uc778 \\(i_1, i_2, i_3\\) \uc5d0 \ub300\ud558\uc5ec \\[\\boxed{i_1t_2t_3 + i_2t_3 + i_3 = (i_1t_2 + i_2)t_3 + i_3} \\] \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uadc0\ub0a9\uc801\uc73c\ub85c \uc54c \uc218 \uc788\ub2e4. \uc774\uac83\uc744 \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\uba74 \uc704\uc640 \uac19\uc740 Index3D \ud568\uc218\uac00 \ub41c\ub2e4. \uadf8\ub807\ub2e4\uba74 \ub9c8\ucc2c\uac00\uc9c0\ub85c \\(t_1 \\in \\mathbb{N}, t_2 \\in \\mathbb{N}, t_3 \\in \\mathbb{N}, t_4 \\in \\mathbb{N}, t_5 \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(t_1 \\times t_2 \\times t_3 \\times t_4 \\times t_5\\) \ud150\uc800\ub97c \\(1 \\times t_1t_2t_3t_4t_5\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\[i_1 \\in \\{0, 1, \\dots, t_1-1\\}\\] \\[i_2 \\in \\{0, 1, \\dots, t_2-1\\}\\] \\[i_3 \\in \\{0, 1, \\dots, t_3-1\\}\\] \\[i_4 \\in \\{0,1,\\dots,t_4-1\\}\\] \\[i_5 \\in \\{0, 1, \\dots, t_5-1\\}\\] \uc778 \\(i_1, i_2, i_3, i_4, i_5\\) \uc5d0 \ub300\ud558\uc5ec \\[\\boxed{i_1t_5t_4t_3t_2+i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5 = (((i_1t_2+i_2)t_3+i_3)t_4+i_4)t_5 + i_5} \\] \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uadc0\ub0a9\uc801\uc73c\ub85c \uc54c \uc218 \uc788\ub2e4. \uc774\uac83\uc744 \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\uba74 \uc704\uc640 \uac19\uc740 Index5D \ud568\uc218\uac00 \ub41c\ub2e4. Bug \uadf8\ub7f0\ub370 \uc774\uc5d0 \ub530\ub974\uba74 LFWDataset::Image2Tensor \uba54\uc18c\ub4dc\uc758 \ub2e4\uc74c\uc758 \ucf54\ub4dc\ub294 \uc880 \uc774\uc0c1\ud558\ub2e4. 1 2 3 4 5 6 7 Tensor < DTYPE > * result = Tensor < DTYPE >:: Zeros ( 1 , 1 , channel , height , width ); ... for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = imgBuf [ ro * width * channel + co * channel + ch ] / 255.0 ; ... \uc65c\ub0d0\ud558\uba74 Tensor \uc758 \ud615\uc0c1\uc744 \uc815\ud574\uc904 \ub54c \\(\\text{channel} \\times \\text{height} \\times \\text{width}\\) \ub85c \uc815\ud574\uc92c\ub294\ub370\ub3c4 Tensor \uc5d0 3 \ucc28\uc6d0 \ud150\uc800\uac00 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \uc800\uc7a5\ub41c imgBuf \uc758 \uc6d0\uc18c\ub97c \uc800\uc7a5\ud560 \ub54c\uc758 \uc778\ub371\uc2f1 \ubc29\uc2dd \\[\\boxed{i_1t_2t_3 + i_2t_3 + i_3 = (i_1t_2 + i_2)t_3 + i_3} \\] \uc5d0 \ub530\ub77c ch * height * width + ro * width + co \ub85c \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uc5ec \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c ro * width * channel + co * channel + ch \ub85c \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uc5ec \ubc14\uc774\ud2b8\ub4e4\uc744 \uc800\uc7a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \ub9cc\uc57d ro * width * channel + co * channel + ch \ub300\ub85c \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud55c\ub2e4\uba74 1 \ucc28\uc6d0 \ubc30\uc5f4 imgBuf \uac00 \uc6d0\ub798\ub294 3 \ucc28\uc6d0 \ud150\uc800 \\(\\text{height} \\times \\text{width} \\times \\text{channel}\\) \uc600\ub2e4\ub294 \uc758\ubbf8\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uc815\ub9d0 \uadf8\ub807\ub2e4\uba74 \ud615\uc0c1\uc744 Tensor<DTYPE>::Zeros(1, 1, height, width, channel); \ub85c \uc815\ud574\uc8fc\uc5c8\uc5b4\uc57c \ud55c\ub2e4. \ub0b4\uac00 \uc798\ubabb \ud310\ub2e8\ud55c \uac83\uc77c \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub17c\uc758\uac00 \ud544\uc694\ud558\ub2e4. \ucd94\uce21\uc744 \ud574\ubcf4\uac74\ub370 \uc544\ubb34\ub798\ub3c4, Reshape \ub97c \ub3d9\uc2dc\uc5d0 \ud574\uc8fc\ub294 \ucf54\ub4dc\uc778 \uac83 \uac19\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub7f0 \uc2dd\uc73c\ub85c Reshape \uc744 \ud55c\ub2e4\uba74 \ubcf4\ud1b5\uc758 \uacbd\uc6b0\uc5d0 \uc54c\uc544\ubcf4\uae30\uac00 \ub9e4\uc6b0 \ud798\ub4e4\uae30 \ub54c\ubb38\uc5d0 \ub2e4\ub978 \uac1c\ubc1c\uc790\uc640\uc758 \ud611\ub825\uc774 \uc804\ud600 \uc774\ub8e8\uc5b4\uc9c0\uc9c0 \ubabb\ud560 \uc218\ub3c4 \uc788\ub294 \uc548 \uc88b\uc740 \ucf54\ub4dc\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 Index5D \ub294 Shape \uc640 \ub370\uc774\ud130\uc14b \uac01 \ucd95\uc758 \uc778\ub371\uc2a4\uac00 \uc804\ub2ec\ub418\uba74 \uadf8\uac83\uc5d0 \ub300\uc751\ub418\ub294 LongArray \uc758 \uc6d0\uc18c\uc758 \uc778\ub371\uc2a4\ub97c \ubc18\ud658\ud574\uc900\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 template < typename DTYPE > class Tensor { ... DTYPE & operator []( unsigned int index ); ... }; 3 : [] \uc5f0\uc0b0\uc790\ub294 Tensor \ud074\ub798\uc2a4\uc5d0\uc11c \uc774\ub807\uac8c \uc624\ubc84\ub85c\ub529 \ub418\uc5b4 \uc788\ub2e4. \uba54\uc18c\ub4dc\uc758 \uad6c\ud604\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 template < typename DTYPE > DTYPE & Tensor < DTYPE >:: operator []( unsigned int index ) { #ifdef __CUDNN__ if ( m_Device == GPU ) { this -> SetDeviceCPU (); } #endif // __CUDNN__ return ( * m_aLongArray )[ index ]; } 2-3 : Danger \uc5b4\ucc28\ud53c if (m_Device == GPU) \ub85c GPU \uc778\uc9c0 \uac80\uc99d\ud574\uc8fc\ub294\ub370 \uc65c #ifdef __CUDNN__ \uac00 \ud544\uc694\ud55c\uc9c0 \ubaa8\ub974\uaca0\ub2e4. 7 : LongArray<DTYPE> * m_aLongArray \uc758 operator[] \uc5d0 index \ub97c \uc804\ub2ec\ud574\uc8fc\uace0 \ubc18\ud658\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ub97c \uc774\ud574\ud574\ubcf4\ub824 \ud588\ub294\ub370 Tensor::operator[] \uba54\uc18c\ub4dc\uac00 \uc778\ub371\uc2a4\ub97c \uadf8\uc800 LongArray::operator[] \ub85c \uc804\ub2ec\ud574\uc900\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 LongArray::operator[] \uc744 \ubd84\uc11d\ud568\uc73c\ub85c\uc368 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ub97c \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 LongArray::operator[] \uc744 \ubd84\uc11d\ud558\ub824\uba74 \uba3c\uc800 LongArray \uac1d\uccb4\uc758 \uc0dd\uc131\uc744 \uc774\ud574\ud574\uc57c \ud55c\ub2e4. LongArray \uac1d\uccb4\ub294 Tensor::Zeros \uba54\uc18c\ub4dc \ubd84\uc11d \uacfc\uc815\uc5d0\uc11c pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \ubcc0\uc218\ub85c LongArray<DTYPE> * m_aLongArray = new LongArray<DTYPE>(pTime, pCapacityPerTime); \uc640 \uac19\uc774 \uc0dd\uc131\ub418\uc5c8\uc74c\uc744 \uae30\uc5b5\ud558\uc790. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c LongArray \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815\uc778 LongArray<DTYPE> * m_aLongArray = new LongArray<DTYPE>(pTime, pCapacityPerTime); \uc744 \uc774\ud574\ud558\uae30 \ud30c\ub77c\ubbf8\ud130\uc758 \uc758\ubbf8\ub294 pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc774\uc5c8\uc74c\uc744 \uae30\uc5b5\ud558\uc790. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 template < typename DTYPE > class LongArray { private : DTYPE ** m_aaHostLongArray ; ///< \uba54\ubaa8\ub9ac\uc5d0 \uc62c\ub77c\uac00 \uc788\ub294 \ub370\uc774\ud130\uc758 \uc8fc\uc18c \uac12. int m_CapacityOfLongArray ; ///< LongArray\uc758 \ucd1d \uc6a9\ub7c9. int m_TimeSize ; ///< Tensor\uc758 TimeSize int m_CapacityPerTime ; ///< Time\uc73c\ub85c \ub098\ub204\uc5b4\uc9c4 data\uc758 Capacity Device m_Device ; ///< \uc7a5\uce58 \uc0ac\uc6a9 \uad6c\ubd84\uc790 (CPU or GPU) int m_idOfDevice ; ///< GPU\uc0ac\uc6a9 \uc2dc, \uc0ac\uc6a9\ud558\ub824\ub294 GPU\uc758 \ubc88\ud638. #ifdef __CUDNN__ DTYPE ** m_aaDevLongArray ; ///< GPU\uba54\ubaa8\ub9ac\uc5d0 \uc62c\ub77c\uac00\uc788\ub294 \ub370\uc774\ud130\uc758 \uc8fc\uc18c \uac12. m_aaHostLongArray\uc640 \ube44\uc2b7\ud55c \uc5ed\ud560\uc744 \ud55c\ub2e4. #endif // __CUDNN int Alloc ( unsigned int pTimeSize , unsigned int pCapacityPerTime ); int Alloc ( LongArray * pLongArray ); void Delete (); ... public : LongArray ( unsigned int pCapacity ); LongArray ( unsigned int pTimeSize , unsigned int pCapacityPerTime ); LongArray ( LongArray * pLongArray ); // Copy Constructor ... DTYPE & operator []( unsigned int index ); ... }; 18 : \uc774 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. 19 : Danger \ub610\ud55c LongArray(unsigned int pCapacity); \ub85c \uc120\uc5b8\ub41c \uc0dd\uc131\uc790\ub294 \uc0ac\uc6a9\ub418\uace0 \uc788\uc9c0 \uc54a\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 template < typename DTYPE > LongArray < DTYPE >:: LongArray ( unsigned int pTimeSize , unsigned int pCapacity ) { m_TimeSize = 0 ; m_CapacityPerTime = 0 ; m_aaHostLongArray = NULL ; m_Device = CPU ; m_idOfDevice = -1 ; #ifdef __CUDNN__ m_aaDevLongArray = NULL ; #endif // __CUDNN Alloc ( pTimeSize , pCapacity ); } 10 : \ud30c\ub77c\ubbf8\ud130\ub97c \uadf8\ub300\ub85c Alloc \uba54\uc18c\ub4dc\ub85c \ubcf4\ub0b4\uc900\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 template < typename DTYPE > int LongArray < DTYPE >:: Alloc ( unsigned int pTimeSize , unsigned int pCapacityPerTime ) { m_TimeSize = pTimeSize ; m_CapacityPerTime = pCapacityPerTime ; m_aaHostLongArray = new DTYPE * [ m_TimeSize ]; for ( int i = 0 ; i < m_TimeSize ; i ++ ) { m_aaHostLongArray [ i ] = new DTYPE [ m_CapacityPerTime ]; for ( int j = 0 ; j < m_CapacityPerTime ; j ++ ) { m_aaHostLongArray [ i ][ j ] = 0.f ; } } m_CapacityOfLongArray = m_TimeSize * m_CapacityPerTime ; m_Device = CPU ; return TRUE ; } 2-3 : \ud30c\ub77c\ubbf8\ud130( pTime : 0 \ubc88\uc9f8 \ucd95, pCapacityPerTime : 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \ub97c \uba64\ubc84\ubcc0\uc218 m_TimeSize , m_CapacityPerTime \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger \uadf8\ub7ec\ub098 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc131\ub2a5\uc774 \ub354 \uc88b\uc544\uc9c4\ub2e4. 6-7 : m_TimeSize \ub9cc\ud07c for \ubb38\uc744 \ub3cc\uba74\uc11c DTYPE ** m_aaHostLongArray \ub354\ube14\ud3ec\uc778\ud130\ub97c m_CapacityPerTime \ud06c\uae30\uc758 DTYPE \ubc30\uc5f4\uc758 \ubc30\uc5f4\ub85c \ucd08\uae30\ud654\ud574\uc900\ub2e4. Danger \uc65c LongArray \ub97c \uc774\ub807\uac8c 2 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e4\uc5c8\uc744\uae4c? 9-10 : m_aaHostLongArray \ub97c 0 \uc73c\ub85c \ucd08\uae30\ud654\ud574\uc900\ub2e4. Danger \uadf8\ub7ec\ub098 \uc774\ub807\uac8c for \ubb38\uc73c\ub85c \uba54\ubaa8\ub9ac\ub97c 0 \uc73c\ub85c \ucd08\uae30\ud654\ud558\ub294 \uac83\uc740 \uc2dc\uac04\uc774 \uc624\ub798\uac78\ub9ac\ubbc0\ub85c memset \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \ube60\ub974\ub2e4. \ud558\uc9c0\ub9cc C++ \uc5d0\uc11c\ub294 memset \ubcf4\ub2e4 std:fill \uc774 \uad8c\uc7a5\ub41c\ub2e4. \ud55c\ud3b8 LongArray \uc0dd\uc131\uc790\uac00 \ubc18\ub4dc\uc2dc Alloc() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\ub294\ub370 \uc774 \uba54\uc18c\ub4dc\uac00 \ud56d\uc0c1 \uba54\ubaa8\ub9ac\ub97c 0 \uc73c\ub85c \ucd08\uae30\ud654\uc2dc\ud0a4\ubbc0\ub85c Tensor::Zeros \uba54\uc18c\ub4dc\uc758 \uc758\ubbf8\uac00 \ubb34\uc5c7\uc778\uc9c0 \uc54c \uc218 \uc5c6\ub2e4. \uc65c\ub0d0\ud558\uba74 \ub2e4\ub978 Tensor \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud574\ub3c4 \ubc18\ub4dc\uc2dc 0 \uc73c\ub85c \ucd08\uae30\ud654 \ub418\uae30 \ub54c\ubb38\uc774\ub2e4. 13 : m_CapacityOfLongArray \uc5d0 LongArray \uc758 \ucd1d \ud06c\uae30\ub97c \uc800\uc7a5\ud574\uc900\ub2e4. pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc774 m_TimeSize \uc640 m_CapacityPerTime \uc774 \ub418\uc5c8\uc73c\ubbc0\ub85c \ub370\uc774\ud130\uc14b\uc758 \ud615\uc0c1\uc744 \ubaa8\ub450 \uacf1\ud55c \uac12\uc744 \uc800\uc7a5\ud574\uc8fc\ub294 \uac83\uc774\ub2e4. 15 : Danger 1 \ubc14\uc774\ud2b8 bool \uc774 \uc544\ub2c8\ub77c 4 \ubc14\uc774\ud2b8 int \ud615\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c \uba54\ubaa8\ub9ac\uac00 \ub0ad\ube44\ub41c\ub2e4. \ub610\ud55c \uba54\uc18c\ub4dc\uc5d0\uc11c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud588\uc744 \uacbd\uc6b0 return FALSE \ud574\uc8fc\ub294 \ucf54\ub4dc\uac00 \uc5c6\uc73c\ubbc0\ub85c \ube44\ub300\uce6d\uc801\uc778 \uba54\uc18c\ub4dc\ub85c \ubcfc \uc218 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 m_TimeSize \\(\\times\\) m_CapacityPerTime \ud615\uc0c1\uc758 \ubc30\uc5f4\uc744 \ub9cc\ub4e4\uc5b4\uc11c DTYPE ** m_aaHostLongArray \uc5d0 \uc800\uc7a5\ud574\uc8fc\uace0 0 \uc73c\ub85c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc774 m_TimeSize \uc640 m_CapacityPerTime \uc774 \ub418\uc5c8\uc73c\ubbc0\ub85c \"\uccab\ubc88\uc9f8 \ucd95\uc758 \ud06c\uae30 X \ub450\ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uae4c\uc9c0\uc758 \uacf1\" \uc758 \ubc30\uc5f4\uc774 \uc0dd\uc131\ub418\uace0 0 \uc73c\ub85c \ucd08\uae30\ud654\ub41c \uac83\uc774\ub2e4. \uc774 m_aaHostLongArray \uac00 LongArray \uc758 \uc2e4\uccb4\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc \u00b6 \ubd84\uc11d \ubaa9\ud45c LongArray::operator[] \uc744 \ubd84\uc11d\ud568\uc73c\ub85c\uc368 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ub97c \uc774\ud574\ud558\uae30 1 2 3 4 5 template < typename DTYPE > class LongArray { ... DTYPE & operator []( unsigned int index ); ... }; 3 : [] \uc5f0\uc0b0\uc790\ub294 \uc774\ub807\uac8c \uc120\uc5b8\ub418\uc5b4 \uc788\ub2e4. 1 2 3 4 5 6 7 8 template < typename DTYPE > DTYPE & LongArray < DTYPE >:: operator []( unsigned int index ) { #ifdef __CUDNN__ if ( m_Device == GPU ) { this -> SetDeviceCPU (); } #endif // __CUDNN__ return m_aaHostLongArray [ index / m_CapacityPerTime ][ index % m_CapacityPerTime ]; } 1 : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc\uc758 for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = \\ imgBuf [ ro * width * channel + co * channel + ch ] / 255.0 ; \uc5d0\uc11c Index5D(result->GetShape(), 0, 0, ch, ro, co) \uac00 index \ub85c \uc804\ub2ec\ub418\uc5c8\uc74c\uc744 \uae30\uc5b5\ud558\uc790. 7 : \uacb0\uad6d LFWDataset::Image2Tensor \ub780 Index5D(result->GetShape(), 0, 0, ch, ro, co) \uc73c\ub85c \uc804\ub2ec\ub41c index \ub85c\uc368 2 \ucc28\uc6d0 \ubc30\uc5f4 m_aaHostLongArray[index / m_CapacityPerTime][index % m_CapacityPerTime] \uc5d0 \ub370\uc774\ud130\uc14b imgBuf \uc758 \uc6d0\uc18c\ub97c \ud558\ub098\ud558\ub098 \ubcf5\uc0ac\ud558\uace0 \uc788\ub294 \uac83\uc774\ub2e4. Note \uc774\ub54c \\(t_1 \\in \\mathbb{N}, t_2 \\in \\mathbb{N}, t_3 \\in \\mathbb{N}, t_4 \\in \\mathbb{N}, t_5 \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(t_1 \\times t_2 \\times t_3 \\times t_4 \\times t_5\\) \ud150\uc800\ub97c \\(1 \\times t_1t_2t_3t_4t_5\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\[i_1 \\in \\{0, 1, \\dots, t_1-1\\}\\] \\[i_2 \\in \\{0, 1, \\dots, t_2-1\\}\\] \\[i_3 \\in \\{0, 1, \\dots, t_3-1\\}\\] \\[i_4 \\in \\{0,1,\\dots,t_4-1\\}\\] \\[i_5 \\in \\{0, 1, \\dots, t_5-1\\}\\] \uc778 \\(i_1, i_2, i_3, i_4, i_5\\) \uc5d0 \ub300\ud558\uc5ec \\[\\boxed{i_1t_5t_4t_3t_2+i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5 = (((i_1t_2+i_2)t_3+i_3)t_4+i_4)t_5 + i_5} \\] \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc5d0\uc11c index \uac00 \\(i_1t_5t_4t_3t_2+i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5\\) \uc774\uace0, m_CapacityPerTime \uc774 \\(t_2t_3t_4t_5\\) \uc774\ub2e4. \uc774\ub54c index \ub97c m_CapacityPerTime \uc73c\ub85c \ub098\ub204\uba74 \uadf8 \ubaab\uc774 \\(i_1\\) \uc774\ubbc0\ub85c [index / m_CapacityPerTime] \ub294 \uccab\ubc88\uc9f8 \ucd95\uc744 \ucc38\uc870\ud560 \uc218 \uc788\ub294 \uc88c\ud45c \\(i_1\\) \uac00 \ub41c\ub2e4. \uadf8\ub807\ub2e4\uba74 \uadf8 \ub098\uba38\uc9c0\ub294 \\(i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5\\) \uc778\ub370 \uc774\uac83\uc740 \ub450\ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uae4c\uc9c0\uc758 4 \ucc28\uc6d0 \ud150\uc11c\ub97c 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \uc778\ub371\uc2f1\ud558\uae30 \uc704\ud55c \uc218\uc2dd\uacfc \uac19\uae30 \ub54c\ubb38\uc5d0 [index % m_CapacityPerTime] \uac00 \uc815\ud655\ud788 \uc778\ub371\uc2f1\uc744 \ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc740 \\(i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5\\) \uac00 \ubc18\ub4dc\uc2dc \\(t_2t_3t_4t_5\\) \ubcf4\ub2e4 \uc791\ub2e4\ub294 \uac00\uc815\uc774 \ud544\uc694\ud558\ub2e4. \uc65c\ub0d0\ud558\uba74 \\(i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5\\) \uc774 \ubc18\ub4dc\uc2dc \\(t_2t_3t_4t_5\\) \uc73c\ub85c \ub098\ub208 \ub098\uba38\uc9c0\uac00 \ub418\uc5b4\uc57c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7f0\ub370 \\(k \\in \\{1,2,3,4,5\\}\\) \uc5d0 \ub300\ud55c \\(i_k\\) \ub4e4\uc758 \uc0c1\uacc4\ub294 \\(t_{k} - 1\\) \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\[i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5\\] \\[ = (t_2 - 1)t_5t_4t_3+(t_3 - 1)t_5t_4+(t_4 - 1) t_5+ t_5 - 1\\] \\[ = t_2t_5t_4t_3 - t_5t_4t_3 +t_3t_5t_4- t_5t_4+t_4t_5 - t_5+ t_5 - 1\\] \\[ = t_2t_3t_4t_5 - 1\\] \uc774\ub2e4. \uc989, \\(i_2, i_3, i_4, i_5\\) \uac00 \uc544\ubb34\ub9ac \ucee4\ub3c4 \\(i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5\\) \ub294 \\(t_2t_3t_4t_5\\) \uc744 \ub118\uc9c0 \ubabb\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c [index / m_CapacityPerTime][index % m_CapacityPerTime] \ub77c\ub294 \ubc29\uc2dd\uc73c\ub85c \uc778\ub371\uc2f1\uc744 \ud558\ub294 \ubc29\uc2dd\uc740 \ud56d\uc0c1 \uc720\ud6a8\ud558\ub2e4. Success \uc774\ub85c\uc368 \uc6b0\ub9ac\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc744 \uc774\ud574\ud588\ub2e4. \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc774\ub780 (1) \ub370\uc774\ud130\uc14b\uc744 \uc801\uc808\ud55c \ubc29\uc2dd\uc73c\ub85c \uc77d\uace0 (2) \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud55c \ub2e4\uc74c (3) Tensor \uac1d\uccb4\ub97c \ub370\uc774\ud130\uc14b \ud615\uc0c1\uc5d0 \ub9de\ucdb0\uc11c \uc801\uc808\ud788 \ub9cc\ub4e4\uace0 (4) \uadf8\ub0e5 Tensor[Index5D(i1, i2, i3, i4, i5)] \ub77c\ub294 \uc2dd\uc73c\ub85c \ubcf5\uc0ac\ud558\uba74 \ub05d\uc774\ub2e4. \ubd84\uc11d \uacb0\ub860 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc774\ub780 (1) \ub370\uc774\ud130\uc14b\uc744 \uc801\uc808\ud55c \ubc29\uc2dd\uc73c\ub85c \uc77d\uace0 (2) \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud55c \ub2e4\uc74c (3) Tensor \uac1d\uccb4\ub97c \ub370\uc774\ud130\uc14b \ud615\uc0c1\uc5d0 \ub9de\ucdb0\uc11c \uc801\uc808\ud788 \ub9cc\ub4e4\uace0 (4) \uadf8\ub0e5 Tensor[Index5D(i1, i2, i3, i4, i5)] \ub77c\ub294 \uc2dd\uc73c\ub85c \ubcf5\uc0ac\ud558\uba74 \ub05d\uc774\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \ubd84\uc11d \uc9c0\ub3c4\uc5d0 \ub530\ub974\uba74 \uc544\uc9c1 LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc \uc744 \ubd84\uc11d\ud558\uc9c0 \uc54a\uc558\uc9c0\ub9cc \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uacfc\uc815\uc744 \ucda9\ubd84\ud788 \uc774\ud574\ud588\uc73c\ubbc0\ub85c \uc774\ucbe4\uc5d0\uc11c \ub2e4\ub978 \ucf54\ub4dc \ubd84\uc11d\uc744 \uadf8\ub9cc\ub450\uace0, \ucf54\ub529\uc744 \uc2dc\uc791\ud574\ubcf8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ud6c4\uc5d0 \ubb3c\ub860 DataLoader \ub97c \uc815\uc758\ud574\uc57c \ud560 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098 \ubaa8\ub4e0 \uac74 \uc778\uacf5\uc2e0\uacbd\ub9dd \uad6c\ud604\uc744 \uc704\ud55c \uac83\uc774\uc5c8\uc73c\ubbc0\ub85c \ucf54\ub529\uc744 \uc2dc\uc791\ud560 \uae30\ubcf8\uc801\uc778 \uc900\ube44\ub77c\ub3c4 \ub05d\ub098\uba74 \uc77c\ub2e8 \ud560 \uc218 \uc788\ub294 \uc218\uc900\uae4c\uc9c0\uc758 \ucf54\ub529\uc740 \ud574\ub450\ub294 \uac83\uc774 \uc633\uc740 \ubc29\ud5a5\uc778 \uac83 \uac19\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"Analysis&#58; LFW 2"},{"location":"sync/fewshot/step1-2/#analysis-dataset-to-tensor","text":"Note tutorials/LFW/ \uacbd\ub85c\ub97c LFW/ \ub85c \ucd95\uc57d\ud558\uc5ec \uc0ac\uc6a9\ud558\uc600\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 vision::Resize::DoTransform \uacfc vision::CenterCrop::DoTransform \uac00 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud558\ub294\uc9c0 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"Analysis: Dataset to Tensor"},{"location":"sync/fewshot/step1-2/#lfwimageprocesshpp-visionresizedotransform","text":"\ubd84\uc11d \ubaa9\ud45c m_transform->DoTransform(imgWrp); \ub85c \ub370\uc774\ud130\uc14b\uc774 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Resize : public Transform { ... public : ... virtual void DoTransform ( ImageWrapper & imgWrp ) { unsigned char * oldImgBuf = imgWrp . imgBuf ; Shape * oldImgShape = imgWrp . imgShape ; int oldWidth = oldImgShape -> GetDim ( 2 ); int oldHeight = oldImgShape -> GetDim ( 1 ); int channel = oldImgShape -> GetDim ( 0 ); unsigned char * newImgBuf = new unsigned char [ newWidth * newHeight * channel ]; Shape * NewImgShape = new Shape ( channel , newHeight , newWidth ); for ( int newy = 0 ; newy < newHeight ; newy ++ ) { int oldy = newy * oldHeight / newHeight ; for ( int newx = 0 ; newx < newWidth ; newx ++ ) { int oldx = newx * oldWidth / newWidth ; for ( int c = 0 ; c < channel ; c ++ ) { newImgBuf [ newy * newWidth * channel + newx * channel + c ] = oldImgBuf [ oldy * oldWidth * channel + oldx * channel + c ]; } } } delete [] oldImgBuf ; oldImgBuf = NULL ; delete oldImgShape ; oldImgShape = NULL ; imgWrp . imgBuf = newImgBuf ; imgWrp . imgShape = NewImgShape ; } }; 13-14 : newWidth \uc640 newHeight \ub85c \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c \ub9cc\ub4e4\uace0 \uc0c8\ub85c\uc6b4 Shape \ub97c \ub9cc\ub4e0\ub2e4. \uac1d\uccb4\uac00 new vision::Resize(224) \ub85c \uc0dd\uc131\ub418\uc5c8\uc5c8\uae30\uc5d0 newWidth \uc640 newHeight \uc5d0\ub294 224 \uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\ub2e4. 17-28 : \uc774\uc804 \uc774\ubbf8\uc9c0 \ubc84\ud37c\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc90c\uacfc \ub3d9\uc2dc\uc5d0 \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c \ub9cc\ub4e0\ub2e4. \ud558\uc9c0\ub9cc \uc8fc\uc11d\ub3c4 \uc5c6\uace0 API \ub3c4 \uc5c6\uc744 \ubfd0\ub354\ub7ec \uc9c0\uae08\uc758 \ubaa9\ud45c\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uadf8 \ucc98\ub9ac\ub97c \uc815\ud655\ud788 \uc774\ud574\ud558\ub294 \uac83\uc740 \uc9c0\uae08\uc740 \ubd88\ud544\uc694\ud558\ub2e4. \ub530\ub77c\uc11c \uc790\uc138\ud788 \ubd84\uc11d\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. 35-36 : \uc0c8\ub85c\uc6b4 \ucc28\uc6d0\uacfc \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c imgWrp \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 m_transform->DoTransform(imgWrp); \uc740 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0 \ub2e4\uc2dc \ub370\uc774\ud130\uc14b\uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub97c \ubcc0\ud658\ud558\ub294 \uc9c1\uc811\uc801\uc778 \ucf54\ub4dc\ub294 \uc544\ub2c8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: vision::Resize::DoTransform \uba54\uc18c\ub4dc"},{"location":"sync/fewshot/step1-2/#lfwimageprocesshpp-visioncentercropdotransform","text":"\ubd84\uc11d \ubaa9\ud45c m_transform->DoTransform(imgWrp); \ub85c \ub370\uc774\ud130\uc14b\uc774 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class CenterCrop : public Transform { ... public : ... virtual void DoTransform ( ImageWrapper & imgWrp ) { unsigned char * imgBuf = imgWrp . imgBuf ; Shape * imgShape = imgWrp . imgShape ; int width = imgShape -> GetDim ( 2 ); // assert(height >= m_heigth); int channel = imgShape -> GetDim ( 0 ); unsigned char * newImgBuf = new unsigned char [ m_width * m_heigth * channel ]; Shape * NewImgShape = new Shape ( channel , m_heigth , m_width ); int start_h = ( height - m_heigth ) / 2 ; int start_w = ( width - m_width ) / 2 ; for ( int h = 0 ; h < m_heigth ; h ++ ) { int oldh = start_h + h ; for ( int w = 0 ; w < m_width ; w ++ ) { int oldw = start_w + w ; for ( int ch = 0 ; ch < channel ; ch ++ ) { newImgBuf [ h * m_width * channel + w * channel + ch ] = imgBuf [ oldh * width * channel + oldw * channel + ch ]; } } } delete [] imgBuf ; imgBuf = NULL ; delete imgShape ; imgShape = NULL ; imgWrp . imgBuf = newImgBuf ; imgWrp . imgShape = NewImgShape ; } }; 13-37 : \uc774\uc804 \uc774\ubbf8\uc9c0 \ubc84\ud37c\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc90c\uacfc \ub3d9\uc2dc\uc5d0 \uc0c8\ub85c\uc6b4 \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c \ub9cc\ub4e0\ub2e4. \uadf8\ub9ac\uace0 \uc0c8\ub85c\uc6b4 \ucc28\uc6d0\uacfc \uc774\ubbf8\uc9c0 \ubc84\ud37c\ub97c imgWrp \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc8fc\uc11d\ub3c4 \uc5c6\uace0 API \ub3c4 \uc5c6\uc744 \ubfd0\ub354\ub7ec \uc9c0\uae08\uc758 \ubaa9\ud45c\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uadf8 \ucc98\ub9ac\ub97c \uc815\ud655\ud788 \uc774\ud574\ud558\ub294 \uac83\uc740 \uc9c0\uae08\uc740 \ubd88\ud544\uc694\ud558\ub2e4. \ub530\ub77c\uc11c \uc790\uc138\ud788 \ubd84\uc11d\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. \ubd84\uc11d \uacb0\ub860 m_transform->DoTransform(imgWrp); \uc740 \ub370\uc774\ud130\uc14b\uc5d0 \uc5b4\ub5a4 \ucc98\ub9ac\ub97c \ud574\uc8fc\uace0 \ub2e4\uc2dc \ub370\uc774\ud130\uc14b\uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub370\uc774\ud130\uc14b\uc744 Tensor \ub97c \ubcc0\ud658\ud558\ub294 \uc9c1\uc811\uc801\uc778 \ucf54\ub4dc\ub294 \uc544\ub2c8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/ImageProcess.hpp: vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc"},{"location":"sync/fewshot/step1-2/#lfwlfwdatasethpp-lfwdatasetimage2tensor","text":"\ubd84\uc11d \ubaa9\ud45c Tensor<DTYPE> * image = this->Image2Tensor(imgWrp, TRUE); \ub85c \ub370\uc774\ud130\uc14b\uc744 \uc5b4\ub5bb\uac8c Tensor \ub85c \ubcc0\ud658\ud558\ub294\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename DTYPE > Tensor < DTYPE > * LFWDataset < DTYPE >:: Image2Tensor ( ImageWrapper & imgWrp , int doValueScaling ) { unsigned char * imgBuf = imgWrp . imgBuf ; Shape * imgShape = imgWrp . imgShape ; int width = imgShape -> GetDim ( 2 ); int height = imgShape -> GetDim ( 1 ); int channel = imgShape -> GetDim ( 0 ); Tensor < DTYPE > * result = Tensor < DTYPE >:: Zeros ( 1 , 1 , channel , height , width ); if ( doValueScaling ) { for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = imgBuf [ ro * width * channel + co * channel + ch ] / 255.0 ; } } } } else { for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = imgBuf [ ro * width * channel + co * channel + ch ]; } } } } return result ; } 1-11 : imgWrp \ucc38\uc870\uc790\uc640 doValueScaling \uc744 \uc778\uc790\ub85c \ubc1b\ub294\ub2e4. Danger doValuerScaling \uc740 true \uc640 false \ub97c \uad6c\ubd84\ud558\ub294 \uc6a9\ub3c4\ub85c \uc4f0\uc774\uae30 \ub54c\ubb38\uc5d0 4 \ubc14\uc774\ud2b8\ub098 \ub418\ub294 int \ud0c0\uc785\uc774 \uc544\ub2cc 1 \ubc14\uc774\ud2b8 bool \ud0c0\uc785\uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc88b\uc544 \ubcf4\uc778\ub2e4. 5-7 : \ucc28\uc6d0 \uc815\ubcf4\ub97c \uac00\uc838\uc628\ub2e4. 9 : Tensor::Zeros \uc5d0 \ucc28\uc6d0\uc815\ubcf4\ub97c \uc804\ub2ec\ud558\uc5ec Tensor \uac1d\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. Danger \uadf8\ub7f0\ub370 LFW \ub370\uc774\ud130\uc14b\uc740 .jpeg \ud30c\uc77c\ub85c\uc368 \uc2e4\uc81c\ub85c\ub294 3 \ucc28\uc6d0 \ud150\uc800( \\(\\text{RGB} \\times \\text{width} \\times \\text{height}\\) ) \ub85c \ub418\uc5b4 \uc788\ub2e4. \uadf8\ub7f0\ub370\ub3c4 \uc65c \uad73\uc774 \ubd88\ud544\uc694\ud55c \uc5f0\uc0b0\uc774 \ucd94\uac00\ub418\ub294 5 \ucc28\uc6d0 \ud150\uc800\ub97c \uc0ac\uc6a9\ud588\ub294\uc9c0 \ubaa8\ub974\uaca0\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc911\uc5d0 \uc0b4\ud3b4\ubcf4\uaca0\uc9c0\ub9cc Tensor::Zeros \ub294 \ub0b4\ubd80\uc801\uc73c\ub85c Shape \uac1d\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub3d9\uc77c\ud55c \ub370\uc774\ud130\uc14b\uc744 \ud45c\ud604\ud558\ub294 Shape \uac1d\uccb4\uac00 \\(2\\) \ubc88\uc774\ub098 \ubd88\ud544\uc694\ud558\uac8c \uc0dd\uc131\ub41c \uac83\uc774\ub2e4. 12-15 : doValuerScaling \uc774 TRUE \uc774\ubbc0\ub85c \uc774 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub41c\ub2e4. imgBuf \uc758 ro * width * channel + co * channel + ch \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uc5ec 255.0 \ub85c \ub098\ub208\ub2e4. \ub2e8\uc9c0 \\(1\\) \ucc28\uc6d0 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 \\(3\\) \ucc28\uc6d0 \ub370\uc774\ud130\ub97c \ucc38\uc870\ud558\ub294 \ubc29\uc2dd\uc774\ub2e4. Note \uc774\uac83\uc740 libjpeg-turbo \uac00 \uc555\ucd95 \ud574\uc81c\ud55c \ub370\uc774\ud130\uc14b\uc774\ubbc0\ub85c \\(3\\) \ucc28\uc6d0 \ub370\uc774\ud130\uc14b\uc778 \uc774\ubbf8\uc9c0\uc758 \uc2e4\uc81c \ub370\uc774\ud130\ub97c \ucc38\uc870\ud560 \ub54c \uc65c ro * width * channel + co * channel + ch \ub85c \ucc38\uc870\ud558\ub294\uc9c0\ub294 libjpeg-turbo \ub97c \ucc38\uc870\ud574\uc57c \ud560 \uac83 \uac19\ub2e4. \uc774\ub294 \ub9cc\uc57d \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c(\uac00\ub839 CImg ) \ub370\uc774\ud130\uc14b\uc744 \\(1\\) \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e4\uace0 \uadf8\uac83\uc744 \ub2e4\uc2dc Tensor \ub85c \ubcc0\ud658\ud55c\ub2e4\uba74 \ub610 \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \\(1\\) \ucc28\uc6d0 \ubc30\uc5f4\uc758 \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. Danger (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ud558\uc9c0\ub9cc \uc774\ub807\uac8c \ud558\uba74 \ub370\uc774\ud130 \ucc38\uc870 \uacfc\uc815\uc774 \ubc88\uac70\ub86d\uace0 \ubd88\ud544\uc694\ud55c \uacfc\uc815\uc774 \ub418\uc9c0 \uc54a\ub098 \uc2f6\ub2e4. \uc65c\ub0d0\ud558\uba74 Index5D \uba54\uc18c\ub4dc\ub97c Tensor \ud074\ub798\uc2a4 \ub0b4\ubd80\uc5d0\uc11c \ucc98\ub9ac\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub807\uac8c \ud55c\ub2e4\uba74 \uc0ac\uc6a9\uc790\uc758 \ud3b8\uc758\ub97c \ub192\uc77c \uc218 \uc788\ub2e4. Danger imgBuf \ub294 unsigned char \ud615 \ubc30\uc5f4\uc778\ub370 \uc774\uac83\uc758 \uc6d0\uc18c\ub97c \uba85\uc2dc\uc801 \ud615\ubcc0\ud658 \uc5c6\uc774 double \ud615\uc73c\ub85c \ub098\ub204\uace0 \uc788\uc73c\ubbc0\ub85c \uc774 \ucf54\ub4dc\ub294 \uc554\uc2dc\uc801 \ud615\ubcc0\ud658 \uc744 \uc77c\uc73c\ud0a8\ub2e4. \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \ud504\ub85c\uc81d\ud2b8\uc758 \uc548\uc815\uc131\uacfc \uc2e0\ub8b0\uc131\uc744 \ud30c\uad34\ud558\ub294 \uc8fc\ub41c \uc6d0\uc778 \uc911 \ud558\ub098\uc774\ubbc0\ub85c \uace0\uce60 \ud544\uc694\uac00 \uc788\uc5b4 \ubcf4\uc778\ub2e4. \uc800\uc7a5 \ub300\uc0c1\uc778 LongArray \uc758 DTYPE ** m_aaHostLongArray \uc758 \ucd94\uc0c1\uc790\ub8cc\ud615 DTYPE \uc740 Tensor \uac00 \uacb0\uc815\ud558\uace0, Tensor \uc758 \ucd94\uc0c1\uc790\ub8cc\ud615\uc740 LFWDataset \uc774 \uacb0\uc815\ud558\uace0, LFWDataset \uc758 \ucd94\uc0c1\uc790\ub8cc\ud615\uc740 LFW/main.cpp \uc758 main \ud568\uc218\uc758 \ud638\ucd9c\ud615\ud0dc\uc5d0\uc11c \uacb0\uc815\ub41c\ub2e4. \uadf8\ub7f0\ub370 \uc2ec\uc9c0\uc5b4 \uadf8 LFWDataset \ud638\ucd9c\ud615\ud0dc\uac00 LFWDataset<float> *train_dataset = new LFWDataset<float>(\"./data\", \"lfw_funneled\", NUMBER_OF_CLASS, transform); \uc774\uc5c8\ub358 \uac83\uc744 \uae30\uc5b5\ud558\uc790. \uadf8\ub7ec\ubbc0\ub85c double \uc5d0\uc11c float \ub85c \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc774 \uc77c\uc5b4\ub098\uba74\uc11c \ub370\uc774\ud130 \uc190\uc2e4\uae4c\uc9c0 \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc880 \ub354 \ud070 \uc790\ub8cc\ud615\uc5d0 \ub300\ud55c \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \ub370\uc774\ud130 \uc190\uc2e4\uc774 \uc5c6\uc73c\ubbc0\ub85c \uc560\uad50\ub85c \ubd10\uc904\ub9cc \ud558\uc9c0\ub9cc \ub354 \uc791\uc740 \uc790\ub8cc\ud615\uc5d0 \ub300\ud55c \uc554\uc2dc\uc801 \ud615\ubcc0\ud658\uc740 \ub370\uc774\ud130 \uc190\uc2e4\uc774 \ubc1c\uc0dd\ud560 \uc218\ub3c4 \uc788\uc73c\ubbc0\ub85c \ud504\ub85c\uc81d\ud2b8\uc758 \uc548\uc815\uc131\uc744 \uc2ec\uac01\ud558\uac8c \ud574\uce5c\ub2e4. \uc5b4\uca0c\ub4e0 .jpeg \uc758 \ud53d\uc140\uac12 \ud558\ub098\ud558\ub098\ub97c 255.0 \ub85c \ub098\ub214\uc73c\ub85c\uc368 \ub370\uc774\ud130\ub97c \uc2a4\ucf00\uc77c\ub9c1\ud55c \ud6c4 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uc5d0 \ud558\ub098\ud558\ub098\uc529 \uc800\uc7a5\ud55c\ub2e4. Danger \uc65c \uc774\ub7f0 \ucf54\ub4dc\ub294 GPU Acceleration \uc774 \ub418\uc9c0 \uc54a\uc558\uc744\uae4c? \ubd84\uc11d \uacb0\ub860 Tensor<DTYPE> * image = this->Image2Tensor(imgWrp, TRUE); \uc740 Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub97c \ub9cc\ub4e4\uace0 \\(3\\) \ucc28\uc6d0 \ub370\uc774\ud130\uc14b\uc758 \uc6d0\uc18c \ud558\ub098 \ud558\ub098\ub97c \uac00\uc838\uc640\uc11c (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc804\uc5d0 Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub85c\uc368 Tensor::Zeros \uba54\uc18c\ub4dc\ub85c Tensor \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\uc600\uc73c\ubbc0\ub85c \uc774\uac83\ubd80\ud130 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"LFW/LFWDataset.hpp: LFWDataset::Image2Tensor \uba54\uc18c\ub4dc"},{"location":"sync/fewshot/step1-2/#srctensorhpp-tensorzeros","text":"\ubd84\uc11d \ubaa9\ud45c Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub85c\uc368 Tensor \uac1d\uccb4\ub97c \uc0dd\uc131\ud558\ub294 \uacfc\uc815 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 enum IsUseTime { UseTime , NoUseTime }; ... template < typename DTYPE > class Tensor { private : Shape * m_aShape ; ///< Tensor\ub97c \uad6c\uc131\ud558\ub294 Shape \ud074\ub798\uc2a4, \ud150\uc11c\uc758 \ucc28\uc6d0\uc744 \uc815\uc758 LongArray < DTYPE > * m_aLongArray ; ///< Tensor\ub97c \uad6c\uc131\ud558\ub294 LongArray \ud074\ub798\uc2a4, \ud150\uc11c\uc758 \uc6d0\uc18c\ub4e4\uc758 \uac12\uc744 \uc800\uc7a5 ... IsUseTime m_IsUseTime ; ///< time \ucd95 \uc0ac\uc6a9 \uc720\ubb34, IsUseTime \ucc38\uace0 int Alloc ( Shape * pShape , IsUseTime pAnswer ); ... public : Tensor ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 , IsUseTime pAnswer = UseTime ); // For 5D-Tensor ... Tensor ( Shape * pShape , IsUseTime pAnswer = UseTime ); ... static Tensor < DTYPE >* Zeros ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 , IsUseTime pAnswer = UseTime ); static Tensor < DTYPE >* Zeros ( Shape * pShape , IsUseTime pAnswer = UseTime ); ... }; 19 : Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub294 \uc774 \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud55c\ub2e4. \uac1d\uccb4\uac00 \uc0dd\uc131\ub418\uae30 \uc804\uc5d0 \ud638\ucd9c\ub418\uc5b4\uc57c \ud558\ubbc0\ub85c static \uc73c\ub85c \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. \ub610\ud55c IsUseTime pAnswer = UseTime \uc758 \ub514\ud3f4\ud2b8 \ud30c\ub77c\ubbf8\ud130\ub97c \uc0ac\uc6a9\ud55c\ub2e4. 1 2 3 4 5 6 7 8 9 10 template < typename DTYPE > Tensor < DTYPE > * Tensor < DTYPE >:: Zeros ( int pSize0 , int pSize1 , int pSize2 , int pSize3 , int pSize4 , IsUseTime pAnswer ) { return Tensor < DTYPE >:: Zeros ( new Shape ( pSize0 , pSize1 , pSize2 , pSize3 , pSize4 ), pAnswer ); } 8-9 : \ud30c\ub77c\ubbf8\ud130 (1, 1, channel, height, width) \ub97c \ubc1b\uc544\uc11c \uc624\ubc84\ub85c\ub529\ub41c Tensor::Zeros \ub97c \ud638\ucd9c\ud55c\ub2e4. 1 2 3 template < typename DTYPE > Tensor < DTYPE > * Tensor < DTYPE >:: Zeros ( Shape * pShape , IsUseTime pAnswer ) { return new Tensor < DTYPE > ( pShape , pAnswer ); } 2 : \ud30c\ub77c\ubbf8\ud130 new Shape(pSize0, pSize1, pSize2, pSize3, pSize4), pAnswer \ub97c \ubc1b\uc544\uc11c \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud55c\ub2e4. Danger \uc774\ub7f4\uac70\uba74 Tensor<DTYPE>::Zeros(int pSize0, int pSize1, int pSize2, int pSize3, int pSize4, IsUseTime pAnswer) \uc5d0\uc11c \ubc14\ub85c \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc774 \ub354 \ube60\ub97c \uac83\uc774\ub2e4. 1 2 3 4 5 6 7 template < typename DTYPE > Tensor < DTYPE >:: Tensor ( Shape * pShape , IsUseTime pAnswer ) { m_aShape = NULL ; m_aLongArray = NULL ; m_Device = CPU ; m_idOfDevice = -1 ; Alloc ( pShape , pAnswer ); } 2-5 : \uba64\ubc84 \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud574\uc900\ub2e4. Danger \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc4f0\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uae30\ub300\ud560 \uc218 \uc788\uc744 \uac83 \uac19\ub2e4. 6 : \ud30c\ub77c\ubbf8\ud130\ub97c \uadf8\ub300\ub85c Tensor::Alloc \uba54\uc18c\ub4dc\ub85c \uc804\ub2ec\ud55c\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 template < typename DTYPE > int Tensor < DTYPE >:: Alloc ( Shape * pShape , IsUseTime pAnswer ) { if ( pShape == NULL ) { printf ( \"Receive NULL pointer of Shape class in %s (%s %d) \\n \" , __FUNCTION__ , __FILE__ , __LINE__ ); return FALSE ; } else { m_aShape = pShape ; m_IsUseTime = pAnswer ; int rank = pShape -> GetRank (); int pTime = 1 ; int pCapacityPerTime = 1 ; if ( m_IsUseTime == UseTime ) { pTime = ( * pShape )[ 0 ]; for ( int i = 1 ; i < rank ; i ++ ) { pCapacityPerTime *= ( * pShape )[ i ]; } } else if ( m_IsUseTime == NoUseTime ) { for ( int i = 0 ; i < rank ; i ++ ) { pCapacityPerTime *= ( * pShape )[ i ]; } } else return FALSE ; m_aLongArray = new LongArray < DTYPE > ( pTime , pCapacityPerTime ); } m_Device = CPU ; return TRUE ; } 2-5 : Danger \uc5d0\ub7ec\ub97c \ucc98\ub9ac\ud574\uc8fc\ub294\ub370 C++ \ud504\ub85c\uc81d\ud2b8\uc774\ubbc0\ub85c try-catch \ubb38\uc744 \uc0ac\uc6a9\ud558\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uacfc \uac00\ub3c5\uc131\uc744 \uae30\ub300\ud560 \uc218 \uc788\ub2e4. \ub610\ud55c printf \ub294 \ud45c\uc900\ucd9c\ub825\uc778\ub370 \uc5d0\ub7ec \ucc98\ub9ac \uba54\uc2dc\uc9c0\uc774\ubbc0\ub85c \ud45c\uc900\uc5d0\ub7ec\uc2a4\ud2b8\ub9bc\uc73c\ub85c \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\uba74 \uc5d0\ub7ec \ub85c\uadf8\ub97c \ubd84\ub958\ud560 \uc218 \uc788\ub2e4. \uac00\ub839 fprintf(stderr, ...) \uc774\ub098 std::cerr << ... \ub85c \ud45c\uc900\uc5d0\ub7ec\uc2a4\ud2b8\ub9bc\uc73c\ub85c \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\ub294 \uac83\uc774\ub2e4. 6-7 : Danger \uba64\ubc84\ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud558\ub294\ub370 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uae30\ub300\ud560 \uc218 \uc788\ub2e4. 14-24 : Danger \uc5d0\ub7ec\ub97c \ucc98\ub9ac\ud574\uc8fc\ub294\ub370 C++ \ud504\ub85c\uc81d\ud2b8\uc774\ubbc0\ub85c try-catch \ubb38\uc744 \uc0ac\uc6a9\ud558\uba74 \ub354 \ub098\uc740 \uc131\ub2a5\uacfc \uac00\ub3c5\uc131\uc744 \uae30\ub300\ud560 \uc218 \uc788\ub2e4. 15-19 : pAnswer = UseTime \uc774\ubbc0\ub85c \uc774 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub41c\ub2e4. 15 : Shape::operator[] \uc5d0 0 \uc744 \uc804\ub2ec\ud558\uc5ec pTime \uc744 \ucd08\uae30\ud654\ud55c\ub2e4. Shape::operator[] \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 int & Shape :: operator []( int pRanknum ) { try { if ( pRanknum >= 0 ) return m_aDim [ pRanknum ]; else throw ; } catch (...) { printf ( \"Receive invalid pRanknum value in %s (%s %d) \\n \" , __FUNCTION__ , __FILE__ , __LINE__ ); exit ( 0 ); // return FALSE; } } 3 : \ub2e8\uc21c\ud788 int * m_aDim \ub97c pRanknum \uc778\ub371\uc2a4\ub85c \ucc38\uc870\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4. 6-8 : Danger \uc5d0\ub7ec \ucc98\ub9ac\ub97c try-catch \ub85c \ud588\uc9c0\ub9cc \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \ud45c\uc900\ucd9c\ub825\uc2a4\ud2b8\ub9bc\uc73c\ub85c \ubcf4\ub0b4\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc5d0\ub7ec\uba54\uc2dc\uc9c0 \uc218\uc9d1\uc774 \uc5b4\ub824\uc6cc \ud504\ub85c\uc81d\ud2b8 \uc2e0\ub8b0\uc131\uacfc \ud3b8\uc758\uc131\uc774 \ub5a8\uc5b4\uc9c4\ub2e4. \ub610\ud55c \uc5d0\ub7ec\ucf54\ub4dc\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c exit(0) \uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc744 \uac15\uc81c\ub85c \uc885\ub8cc\ud574\ubc84\ub9ac\ubbc0\ub85c \uc0ac\uc6a9\uc790\uac00 \uc5d0\ub7ec\ub97c \ud578\ub4e4\ub9c1\ud560 \uc218 \uc788\ub294 \uae30\ud68c\uac00 \ubc15\ud0c8\ub2f9\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774 \ucf54\ub4dc\ub294 \ub370\uc774\ud130\uc14b\uc758 0 \ubc88\uc9f8 \ucd95\uc758 \ud06c\uae30\ub97c pTime \uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774\ub2e4. 18 : Shape \uc5d0 operator[] \ub85c i \uc778\ub371\uc2a4\ub97c \uac00\uc838\uc640\uc11c pCapacityPerTime \uc5d0 \ub204\uc801\uc73c\ub85c \uacf1\ud574\uc900\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774 \ucf54\ub4dc\ub294 \ub370\uc774\ud130\uc14b\uc758 1 \ubc88\uc9f8 \ucd95\uc758 \ud06c\uae30\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0 pCapacityPerTime \uc5d0 \uc800\uc7a5\ud558\uace0 \uc788\ub2e4. 26 : pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc73c\ub85c LongArray \ub97c \ub9cc\ub4e4\uace0 m_aLongArray \uc5d0 \uc800\uc7a5\ud55c\ub2e4. 29 : Danger \uba54\uc18c\ub4dc\uac00 \uc131\uacf5\uc801\uc73c\ub85c \ub05d\ub0ac\uc744 \ub54c TRUE \ub97c \ubc18\ud658\ud558\ub294\ub370 4 \ubc14\uc774\ud2b8 int \ud615\uc774 \uc544\ub2c8\ub77c 1 \ubc14\uc774\ud2b8 bool \ud615 true \ub97c \uc0ac\uc6a9\ud558\uba74 \uba54\ubaa8\ub9ac \ud6a8\uc728\uc744 \ub192\uc77c \uc218 \uc788\uc5b4 \ubcf4\uc778\ub2e4. \ubd84\uc11d \uacb0\ub860 Tensor<DTYPE> *result = Tensor<DTYPE>::Zeros(1, 1, channel, height, width); \ub294 \ud30c\ub77c\ubbf8\ud130\ub97c \ubc1b\uc544\uc11c \uc790\ub3d9\uc73c\ub85c Shape \ub97c \uc0dd\uc131\ud574\uc900 \ub2e4\uc74c \ud544\uc694\ud55c \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\uc2dc\ud0a4\uace0 LongArray \ub97c \ub9cc\ub4e4\uc5b4\uc11c LongArray<DTYPE> * m_aLongArray \uc5d0 \uc800\uc7a5\ud55c\ub2e4. \uadf8\ub7f0\ub370 Tensor::Zeros \uac00 \ud150\uc800\uac12\ub4e4\uc744 \\(0\\) \uc73c\ub85c \ucd08\uae30\ud654\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc\ub77c\uace0 \ud588\ub294\ub370 \uc5b4\ub514\uc5d0\uc11c \\(0\\) \uc73c\ub85c \ucd08\uae30\ud654\ub418\uc5c8\ub294\uc9c0 \ubcf4\uc774\uc9c0 \uc544\uc9c1 \uc54a\ub294\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \ubd84\uc11d\ud558\uae30 \uc704\ud558\uc5ec Tensor::operator[] \ub97c \ubd84\uc11d\ud574\ubcf8\ub2e4. \uadf8\ub7f0\ub370 Index5D \uac00 Tensor::operator[] \uc5d0 \uc778\uc790\ub85c \uc804\ub2ec\ub418\uc5c8\uc73c\ubbc0\ub85c Index5D \ubd80\ud130 \ubd84\uc11d\ud574\ubcf8\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/Tensor.hpp: Tensor::Zeros \uba54\uc18c\ub4dc"},{"location":"sync/fewshot/step1-2/#srctensorhpp-index5d","text":"\ubd84\uc11d \ubaa9\ud45c Index5D(result->GetShape(), 0, 0, ch, ro, co) \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \uc774\ud574\ud558\uae30 \uc8fc\uc11d\uc5d0 \ub530\ub974\uba74 Index5D \ub294 5\ucc28\uc6d0\uc73c\ub85c \uc815\uc758\ub41c Tensor \uc758 LongArray \uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4\ub97c \uacc4\uc0b0\ud558\ub294 \uba54\uc18c\ub4dc\uc774\ub2e4. \uc989 Index5D \ub294 5\ucc28\uc6d0\uc73c\ub85c \uc815\uc758\ub41c Tensor \uc5d0 \ub300\ud574, pShape \uacfc \uac01 \ucd95\uc758 \uc778\ub371\uc2a4\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 \uc774\uc5d0 \ub300\uc751\ub418\ub294 LongArray \uc758 \uc6d0\uc18c\uc5d0 \uc811\uadfc\ud558\uae30 \uc704\ud55c \uc778\ub371\uc2a4 \ubc88\ud638\ub97c \uacc4\uc0b0\ud558\uc5ec \ubc18\ud658\ud55c\ub2e4. 1 2 3 inline unsigned int Index5D ( Shape * pShape , int ti , int ba , int ch , int ro , int co ) { return ((( ti * ( * pShape )[ 1 ] + ba ) * ( * pShape )[ 2 ] + ch ) * ( * pShape )[ 3 ] + ro ) * ( * pShape )[ 4 ] + co ; } 2 : \uc774 \ucf54\ub4dc\ub97c \uc774\ud574\ud558\uae30 \uc704\ud558\uc5ec \uac00\uc7a5 \ub2e8\uc21c\ud55c \ud615\ud0dc\uc758 Index2D \ud568\uc218\ub97c \uc0b4\ud3b4\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 inline unsigned int Index2D ( Shape * pShape , int ro , int co ) { return ro * ( * pShape )[ 1 ] + co ; } \uc774\uac83\uc740 2 \ucc28\uc6d0 \ubc30\uc5f4\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e0 \uac83\uc744 \ucc38\uc870\ud558\uae30 \uc704\ud55c \ucf54\ub4dc\uc774\ub2e4. \ub2e4\uc74c\uc740 \\((n+1) \\times 8\\) \ud615\uc0c1\uc758 \ud589\ub82c\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e0 \uac83\uc774\ub2e4. \uc704 \uadf8\ub9bc\uc744 \ubcf4\uba74 2 \ucc28\uc6d0 \ubc30\uc5f4\uc774 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ub418\uc5c8\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uac01\uac01\uc758 \uc778\ub371\uc2a4\ub294 2 \ucc28\uc6d0 \ubc30\uc5f4\uc77c \ub54c \\((0,0)\\) \ubd80\ud130 \\((n, 7)\\) \uae4c\uc9c0 \uc600\ub2e4. \ud558\uc9c0\ub9cc 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ub418\uc5c8\uc73c\ubbc0\ub85c \uc778\ub371\uc2a4\ub97c \\(i \\in \\{0, 1, \\dots, n\\}, j \\in \\{0, 1, \\dots, 7\\}\\) \uc778 \\(i, j\\) \uc5d0 \ub300\ud558\uc5ec \\(i \\times 8 + j\\) \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4. \uc774\uac83\uc744 \uc77c\ubc18\ud654\ud558\uba74 \\(n \\in \\mathbb{N}, m \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \ud589\ub82c\uc744 \\(1 \\times nm\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\(i \\in \\{0, 1, \\dots, n-1\\}, j \\in \\{0, 1, \\dots, m-1\\}\\) \uc778 \\(i, j\\) \uc5d0 \ub300\ud558\uc5ec \\(\\boxed{ i \\times m + j}\\) \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uadc0\ub0a9\uc801\uc73c\ub85c \uc54c \uc218 \uc788\ub2e4. \uc774\uac83\uc744 \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\uba74 \uc704\uc640 \uac19\uc740 Index2D \ud568\uc218\uac00 \ub418\ub294 \uac83\uc774\ub2e4. Note \uc5f0\uc5ed\uc801\uc778 \uc99d\uba85\uc740 \uc0dd\ub7b5\ud55c\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c 3 \ucc28\uc6d0 \ubc30\uc5f4\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc800\uc7a5\ud55c \ub2e4\uc74c \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud55c Index3D \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 inline unsigned int Index3D ( Shape * pShape , int ch , int ro , int co ) { return ( ch * ( * pShape )[ 1 ] + ro ) * ( * pShape )[ 2 ] + co ; } \uc774\uac83\uc740 3 \ucc28\uc6d0 \ubc30\uc5f4\uc744 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e0 \uac83\uc744 \ucc38\uc870\ud558\uae30 \uc704\ud55c \ucf54\ub4dc\uc774\ub2e4. \ub2e4\uc74c\uc740 \\((n+1) \\times 3 \\times 4\\) \ud615\uc0c1\uc758 \ud150\uc800\ub97c 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ud55c \uac83\uc774\ub2e4. \uc774 \ud150\uc800\uc758 \uc778\ub371\uc2a4\ub294 \\((0, 0, 0)\\) \ubd80\ud130 \\((n,2,3)\\) \uae4c\uc9c0\uc600\ub2e4. \ud558\uc9c0\ub9cc 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ubcc0\ud658\ub418\uc5c8\uc73c\ubbc0\ub85c \uc778\ub371\uc2a4\ub97c \\(i \\in \\{0, 1, \\dots, n\\}, j \\in \\{0, 1, 2\\}, k \\in \\{0,1,2,3\\}\\) \uc5d0 \ub300\ud558\uc5ec \\(i \\times 3 \\times 4 + j \\times 4 + k = (i \\times 3 + j) \\times 4 + k\\) \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4. \uc774\uac83\uc744 \uc77c\ubc18\ud654\ud558\uba74 \\(t_1 \\in \\mathbb{N}, t_2 \\in \\mathbb{N}, t_3 \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(t_1 \\times t_2 \\times t_3\\) \ud150\uc800\ub97c \\(1 \\times t_1t_2t_3\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\(i_1 \\in \\{0, 1, \\dots, t_1-1\\}, i_2 \\in \\{0, 1, \\dots, t_2-1\\}, i_3 \\in \\{0, 1, \\dots, t_3-1\\}\\) \uc778 \\(i_1, i_2, i_3\\) \uc5d0 \ub300\ud558\uc5ec \\[\\boxed{i_1t_2t_3 + i_2t_3 + i_3 = (i_1t_2 + i_2)t_3 + i_3} \\] \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uadc0\ub0a9\uc801\uc73c\ub85c \uc54c \uc218 \uc788\ub2e4. \uc774\uac83\uc744 \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\uba74 \uc704\uc640 \uac19\uc740 Index3D \ud568\uc218\uac00 \ub41c\ub2e4. \uadf8\ub807\ub2e4\uba74 \ub9c8\ucc2c\uac00\uc9c0\ub85c \\(t_1 \\in \\mathbb{N}, t_2 \\in \\mathbb{N}, t_3 \\in \\mathbb{N}, t_4 \\in \\mathbb{N}, t_5 \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(t_1 \\times t_2 \\times t_3 \\times t_4 \\times t_5\\) \ud150\uc800\ub97c \\(1 \\times t_1t_2t_3t_4t_5\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\[i_1 \\in \\{0, 1, \\dots, t_1-1\\}\\] \\[i_2 \\in \\{0, 1, \\dots, t_2-1\\}\\] \\[i_3 \\in \\{0, 1, \\dots, t_3-1\\}\\] \\[i_4 \\in \\{0,1,\\dots,t_4-1\\}\\] \\[i_5 \\in \\{0, 1, \\dots, t_5-1\\}\\] \uc778 \\(i_1, i_2, i_3, i_4, i_5\\) \uc5d0 \ub300\ud558\uc5ec \\[\\boxed{i_1t_5t_4t_3t_2+i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5 = (((i_1t_2+i_2)t_3+i_3)t_4+i_4)t_5 + i_5} \\] \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uadc0\ub0a9\uc801\uc73c\ub85c \uc54c \uc218 \uc788\ub2e4. \uc774\uac83\uc744 \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\uba74 \uc704\uc640 \uac19\uc740 Index5D \ud568\uc218\uac00 \ub41c\ub2e4. Bug \uadf8\ub7f0\ub370 \uc774\uc5d0 \ub530\ub974\uba74 LFWDataset::Image2Tensor \uba54\uc18c\ub4dc\uc758 \ub2e4\uc74c\uc758 \ucf54\ub4dc\ub294 \uc880 \uc774\uc0c1\ud558\ub2e4. 1 2 3 4 5 6 7 Tensor < DTYPE > * result = Tensor < DTYPE >:: Zeros ( 1 , 1 , channel , height , width ); ... for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = imgBuf [ ro * width * channel + co * channel + ch ] / 255.0 ; ... \uc65c\ub0d0\ud558\uba74 Tensor \uc758 \ud615\uc0c1\uc744 \uc815\ud574\uc904 \ub54c \\(\\text{channel} \\times \\text{height} \\times \\text{width}\\) \ub85c \uc815\ud574\uc92c\ub294\ub370\ub3c4 Tensor \uc5d0 3 \ucc28\uc6d0 \ud150\uc800\uac00 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \uc800\uc7a5\ub41c imgBuf \uc758 \uc6d0\uc18c\ub97c \uc800\uc7a5\ud560 \ub54c\uc758 \uc778\ub371\uc2f1 \ubc29\uc2dd \\[\\boxed{i_1t_2t_3 + i_2t_3 + i_3 = (i_1t_2 + i_2)t_3 + i_3} \\] \uc5d0 \ub530\ub77c ch * height * width + ro * width + co \ub85c \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uc5ec \uc800\uc7a5\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c ro * width * channel + co * channel + ch \ub85c \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uc5ec \ubc14\uc774\ud2b8\ub4e4\uc744 \uc800\uc7a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \ub9cc\uc57d ro * width * channel + co * channel + ch \ub300\ub85c \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud55c\ub2e4\uba74 1 \ucc28\uc6d0 \ubc30\uc5f4 imgBuf \uac00 \uc6d0\ub798\ub294 3 \ucc28\uc6d0 \ud150\uc800 \\(\\text{height} \\times \\text{width} \\times \\text{channel}\\) \uc600\ub2e4\ub294 \uc758\ubbf8\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uc815\ub9d0 \uadf8\ub807\ub2e4\uba74 \ud615\uc0c1\uc744 Tensor<DTYPE>::Zeros(1, 1, height, width, channel); \ub85c \uc815\ud574\uc8fc\uc5c8\uc5b4\uc57c \ud55c\ub2e4. \ub0b4\uac00 \uc798\ubabb \ud310\ub2e8\ud55c \uac83\uc77c \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub17c\uc758\uac00 \ud544\uc694\ud558\ub2e4. \ucd94\uce21\uc744 \ud574\ubcf4\uac74\ub370 \uc544\ubb34\ub798\ub3c4, Reshape \ub97c \ub3d9\uc2dc\uc5d0 \ud574\uc8fc\ub294 \ucf54\ub4dc\uc778 \uac83 \uac19\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub7f0 \uc2dd\uc73c\ub85c Reshape \uc744 \ud55c\ub2e4\uba74 \ubcf4\ud1b5\uc758 \uacbd\uc6b0\uc5d0 \uc54c\uc544\ubcf4\uae30\uac00 \ub9e4\uc6b0 \ud798\ub4e4\uae30 \ub54c\ubb38\uc5d0 \ub2e4\ub978 \uac1c\ubc1c\uc790\uc640\uc758 \ud611\ub825\uc774 \uc804\ud600 \uc774\ub8e8\uc5b4\uc9c0\uc9c0 \ubabb\ud560 \uc218\ub3c4 \uc788\ub294 \uc548 \uc88b\uc740 \ucf54\ub4dc\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 Index5D \ub294 Shape \uc640 \ub370\uc774\ud130\uc14b \uac01 \ucd95\uc758 \uc778\ub371\uc2a4\uac00 \uc804\ub2ec\ub418\uba74 \uadf8\uac83\uc5d0 \ub300\uc751\ub418\ub294 LongArray \uc758 \uc6d0\uc18c\uc758 \uc778\ub371\uc2a4\ub97c \ubc18\ud658\ud574\uc900\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/Tensor.hpp: Index5D \ud568\uc218"},{"location":"sync/fewshot/step1-2/#srctensorhpp-tensoroperator","text":"\ubd84\uc11d \ubaa9\ud45c (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \uac00 \uc5b4\ub5a4 \ucf54\ub4dc\uc778\uc9c0 \uc774\ud574\ud558\uae30 1 2 3 4 5 template < typename DTYPE > class Tensor { ... DTYPE & operator []( unsigned int index ); ... }; 3 : [] \uc5f0\uc0b0\uc790\ub294 Tensor \ud074\ub798\uc2a4\uc5d0\uc11c \uc774\ub807\uac8c \uc624\ubc84\ub85c\ub529 \ub418\uc5b4 \uc788\ub2e4. \uba54\uc18c\ub4dc\uc758 \uad6c\ud604\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 template < typename DTYPE > DTYPE & Tensor < DTYPE >:: operator []( unsigned int index ) { #ifdef __CUDNN__ if ( m_Device == GPU ) { this -> SetDeviceCPU (); } #endif // __CUDNN__ return ( * m_aLongArray )[ index ]; } 2-3 : Danger \uc5b4\ucc28\ud53c if (m_Device == GPU) \ub85c GPU \uc778\uc9c0 \uac80\uc99d\ud574\uc8fc\ub294\ub370 \uc65c #ifdef __CUDNN__ \uac00 \ud544\uc694\ud55c\uc9c0 \ubaa8\ub974\uaca0\ub2e4. 7 : LongArray<DTYPE> * m_aLongArray \uc758 operator[] \uc5d0 index \ub97c \uc804\ub2ec\ud574\uc8fc\uace0 \ubc18\ud658\ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ub97c \uc774\ud574\ud574\ubcf4\ub824 \ud588\ub294\ub370 Tensor::operator[] \uba54\uc18c\ub4dc\uac00 \uc778\ub371\uc2a4\ub97c \uadf8\uc800 LongArray::operator[] \ub85c \uc804\ub2ec\ud574\uc900\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 LongArray::operator[] \uc744 \ubd84\uc11d\ud568\uc73c\ub85c\uc368 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ub97c \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \uadf8\ub7f0\ub370 LongArray::operator[] \uc744 \ubd84\uc11d\ud558\ub824\uba74 \uba3c\uc800 LongArray \uac1d\uccb4\uc758 \uc0dd\uc131\uc744 \uc774\ud574\ud574\uc57c \ud55c\ub2e4. LongArray \uac1d\uccb4\ub294 Tensor::Zeros \uba54\uc18c\ub4dc \ubd84\uc11d \uacfc\uc815\uc5d0\uc11c pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \ubcc0\uc218\ub85c LongArray<DTYPE> * m_aLongArray = new LongArray<DTYPE>(pTime, pCapacityPerTime); \uc640 \uac19\uc774 \uc0dd\uc131\ub418\uc5c8\uc74c\uc744 \uae30\uc5b5\ud558\uc790. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/Tensor.hpp: Tensor::operator[] \uba54\uc18c\ub4dc"},{"location":"sync/fewshot/step1-2/#srclongarrayhpp-longarray","text":"\ubd84\uc11d \ubaa9\ud45c LongArray \uac1d\uccb4 \uc0dd\uc131 \uacfc\uc815\uc778 LongArray<DTYPE> * m_aLongArray = new LongArray<DTYPE>(pTime, pCapacityPerTime); \uc744 \uc774\ud574\ud558\uae30 \ud30c\ub77c\ubbf8\ud130\uc758 \uc758\ubbf8\ub294 pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc774\uc5c8\uc74c\uc744 \uae30\uc5b5\ud558\uc790. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 template < typename DTYPE > class LongArray { private : DTYPE ** m_aaHostLongArray ; ///< \uba54\ubaa8\ub9ac\uc5d0 \uc62c\ub77c\uac00 \uc788\ub294 \ub370\uc774\ud130\uc758 \uc8fc\uc18c \uac12. int m_CapacityOfLongArray ; ///< LongArray\uc758 \ucd1d \uc6a9\ub7c9. int m_TimeSize ; ///< Tensor\uc758 TimeSize int m_CapacityPerTime ; ///< Time\uc73c\ub85c \ub098\ub204\uc5b4\uc9c4 data\uc758 Capacity Device m_Device ; ///< \uc7a5\uce58 \uc0ac\uc6a9 \uad6c\ubd84\uc790 (CPU or GPU) int m_idOfDevice ; ///< GPU\uc0ac\uc6a9 \uc2dc, \uc0ac\uc6a9\ud558\ub824\ub294 GPU\uc758 \ubc88\ud638. #ifdef __CUDNN__ DTYPE ** m_aaDevLongArray ; ///< GPU\uba54\ubaa8\ub9ac\uc5d0 \uc62c\ub77c\uac00\uc788\ub294 \ub370\uc774\ud130\uc758 \uc8fc\uc18c \uac12. m_aaHostLongArray\uc640 \ube44\uc2b7\ud55c \uc5ed\ud560\uc744 \ud55c\ub2e4. #endif // __CUDNN int Alloc ( unsigned int pTimeSize , unsigned int pCapacityPerTime ); int Alloc ( LongArray * pLongArray ); void Delete (); ... public : LongArray ( unsigned int pCapacity ); LongArray ( unsigned int pTimeSize , unsigned int pCapacityPerTime ); LongArray ( LongArray * pLongArray ); // Copy Constructor ... DTYPE & operator []( unsigned int index ); ... }; 18 : \uc774 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. 19 : Danger \ub610\ud55c LongArray(unsigned int pCapacity); \ub85c \uc120\uc5b8\ub41c \uc0dd\uc131\uc790\ub294 \uc0ac\uc6a9\ub418\uace0 \uc788\uc9c0 \uc54a\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 template < typename DTYPE > LongArray < DTYPE >:: LongArray ( unsigned int pTimeSize , unsigned int pCapacity ) { m_TimeSize = 0 ; m_CapacityPerTime = 0 ; m_aaHostLongArray = NULL ; m_Device = CPU ; m_idOfDevice = -1 ; #ifdef __CUDNN__ m_aaDevLongArray = NULL ; #endif // __CUDNN Alloc ( pTimeSize , pCapacity ); } 10 : \ud30c\ub77c\ubbf8\ud130\ub97c \uadf8\ub300\ub85c Alloc \uba54\uc18c\ub4dc\ub85c \ubcf4\ub0b4\uc900\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 template < typename DTYPE > int LongArray < DTYPE >:: Alloc ( unsigned int pTimeSize , unsigned int pCapacityPerTime ) { m_TimeSize = pTimeSize ; m_CapacityPerTime = pCapacityPerTime ; m_aaHostLongArray = new DTYPE * [ m_TimeSize ]; for ( int i = 0 ; i < m_TimeSize ; i ++ ) { m_aaHostLongArray [ i ] = new DTYPE [ m_CapacityPerTime ]; for ( int j = 0 ; j < m_CapacityPerTime ; j ++ ) { m_aaHostLongArray [ i ][ j ] = 0.f ; } } m_CapacityOfLongArray = m_TimeSize * m_CapacityPerTime ; m_Device = CPU ; return TRUE ; } 2-3 : \ud30c\ub77c\ubbf8\ud130( pTime : 0 \ubc88\uc9f8 \ucd95, pCapacityPerTime : 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \ub97c \uba64\ubc84\ubcc0\uc218 m_TimeSize , m_CapacityPerTime \uc5d0 \uc800\uc7a5\ud55c\ub2e4. Danger \uadf8\ub7ec\ub098 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc131\ub2a5\uc774 \ub354 \uc88b\uc544\uc9c4\ub2e4. 6-7 : m_TimeSize \ub9cc\ud07c for \ubb38\uc744 \ub3cc\uba74\uc11c DTYPE ** m_aaHostLongArray \ub354\ube14\ud3ec\uc778\ud130\ub97c m_CapacityPerTime \ud06c\uae30\uc758 DTYPE \ubc30\uc5f4\uc758 \ubc30\uc5f4\ub85c \ucd08\uae30\ud654\ud574\uc900\ub2e4. Danger \uc65c LongArray \ub97c \uc774\ub807\uac8c 2 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \ub9cc\ub4e4\uc5c8\uc744\uae4c? 9-10 : m_aaHostLongArray \ub97c 0 \uc73c\ub85c \ucd08\uae30\ud654\ud574\uc900\ub2e4. Danger \uadf8\ub7ec\ub098 \uc774\ub807\uac8c for \ubb38\uc73c\ub85c \uba54\ubaa8\ub9ac\ub97c 0 \uc73c\ub85c \ucd08\uae30\ud654\ud558\ub294 \uac83\uc740 \uc2dc\uac04\uc774 \uc624\ub798\uac78\ub9ac\ubbc0\ub85c memset \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \ube60\ub974\ub2e4. \ud558\uc9c0\ub9cc C++ \uc5d0\uc11c\ub294 memset \ubcf4\ub2e4 std:fill \uc774 \uad8c\uc7a5\ub41c\ub2e4. \ud55c\ud3b8 LongArray \uc0dd\uc131\uc790\uac00 \ubc18\ub4dc\uc2dc Alloc() \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud558\ub294\ub370 \uc774 \uba54\uc18c\ub4dc\uac00 \ud56d\uc0c1 \uba54\ubaa8\ub9ac\ub97c 0 \uc73c\ub85c \ucd08\uae30\ud654\uc2dc\ud0a4\ubbc0\ub85c Tensor::Zeros \uba54\uc18c\ub4dc\uc758 \uc758\ubbf8\uac00 \ubb34\uc5c7\uc778\uc9c0 \uc54c \uc218 \uc5c6\ub2e4. \uc65c\ub0d0\ud558\uba74 \ub2e4\ub978 Tensor \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud574\ub3c4 \ubc18\ub4dc\uc2dc 0 \uc73c\ub85c \ucd08\uae30\ud654 \ub418\uae30 \ub54c\ubb38\uc774\ub2e4. 13 : m_CapacityOfLongArray \uc5d0 LongArray \uc758 \ucd1d \ud06c\uae30\ub97c \uc800\uc7a5\ud574\uc900\ub2e4. pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc774 m_TimeSize \uc640 m_CapacityPerTime \uc774 \ub418\uc5c8\uc73c\ubbc0\ub85c \ub370\uc774\ud130\uc14b\uc758 \ud615\uc0c1\uc744 \ubaa8\ub450 \uacf1\ud55c \uac12\uc744 \uc800\uc7a5\ud574\uc8fc\ub294 \uac83\uc774\ub2e4. 15 : Danger 1 \ubc14\uc774\ud2b8 bool \uc774 \uc544\ub2c8\ub77c 4 \ubc14\uc774\ud2b8 int \ud615\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c \uba54\ubaa8\ub9ac\uac00 \ub0ad\ube44\ub41c\ub2e4. \ub610\ud55c \uba54\uc18c\ub4dc\uc5d0\uc11c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud588\uc744 \uacbd\uc6b0 return FALSE \ud574\uc8fc\ub294 \ucf54\ub4dc\uac00 \uc5c6\uc73c\ubbc0\ub85c \ube44\ub300\uce6d\uc801\uc778 \uba54\uc18c\ub4dc\ub85c \ubcfc \uc218 \uc788\ub2e4. \ubd84\uc11d \uacb0\ub860 m_TimeSize \\(\\times\\) m_CapacityPerTime \ud615\uc0c1\uc758 \ubc30\uc5f4\uc744 \ub9cc\ub4e4\uc5b4\uc11c DTYPE ** m_aaHostLongArray \uc5d0 \uc800\uc7a5\ud574\uc8fc\uace0 0 \uc73c\ub85c \ucd08\uae30\ud654\uc2dc\ud0a8\ub2e4. pTime ( 0 \ubc88\uc9f8 \ucd95) \uacfc pCapacityPerTime ( 1 \ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uc758 \ud06c\uae30\uae4c\uc9c0\uc758 \uacf1) \uc774 m_TimeSize \uc640 m_CapacityPerTime \uc774 \ub418\uc5c8\uc73c\ubbc0\ub85c \"\uccab\ubc88\uc9f8 \ucd95\uc758 \ud06c\uae30 X \ub450\ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uae4c\uc9c0\uc758 \uacf1\" \uc758 \ubc30\uc5f4\uc774 \uc0dd\uc131\ub418\uace0 0 \uc73c\ub85c \ucd08\uae30\ud654\ub41c \uac83\uc774\ub2e4. \uc774 m_aaHostLongArray \uac00 LongArray \uc758 \uc2e4\uccb4\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/LongArray.hpp: LongArray \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step1-2/#srclongarrayhpp-longarrayoperator","text":"\ubd84\uc11d \ubaa9\ud45c LongArray::operator[] \uc744 \ubd84\uc11d\ud568\uc73c\ub85c\uc368 (*result)[Index5D(result->GetShape(), 0, 0, ch, ro, co)] \ub97c \uc774\ud574\ud558\uae30 1 2 3 4 5 template < typename DTYPE > class LongArray { ... DTYPE & operator []( unsigned int index ); ... }; 3 : [] \uc5f0\uc0b0\uc790\ub294 \uc774\ub807\uac8c \uc120\uc5b8\ub418\uc5b4 \uc788\ub2e4. 1 2 3 4 5 6 7 8 template < typename DTYPE > DTYPE & LongArray < DTYPE >:: operator []( unsigned int index ) { #ifdef __CUDNN__ if ( m_Device == GPU ) { this -> SetDeviceCPU (); } #endif // __CUDNN__ return m_aaHostLongArray [ index / m_CapacityPerTime ][ index % m_CapacityPerTime ]; } 1 : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc\uc758 for ( int ro = 0 ; ro < height ; ro ++ ) { for ( int co = 0 ; co < width ; co ++ ) { for ( int ch = 0 ; ch < channel ; ch ++ ) { ( * result )[ Index5D ( result -> GetShape (), 0 , 0 , ch , ro , co )] = \\ imgBuf [ ro * width * channel + co * channel + ch ] / 255.0 ; \uc5d0\uc11c Index5D(result->GetShape(), 0, 0, ch, ro, co) \uac00 index \ub85c \uc804\ub2ec\ub418\uc5c8\uc74c\uc744 \uae30\uc5b5\ud558\uc790. 7 : \uacb0\uad6d LFWDataset::Image2Tensor \ub780 Index5D(result->GetShape(), 0, 0, ch, ro, co) \uc73c\ub85c \uc804\ub2ec\ub41c index \ub85c\uc368 2 \ucc28\uc6d0 \ubc30\uc5f4 m_aaHostLongArray[index / m_CapacityPerTime][index % m_CapacityPerTime] \uc5d0 \ub370\uc774\ud130\uc14b imgBuf \uc758 \uc6d0\uc18c\ub97c \ud558\ub098\ud558\ub098 \ubcf5\uc0ac\ud558\uace0 \uc788\ub294 \uac83\uc774\ub2e4. Note \uc774\ub54c \\(t_1 \\in \\mathbb{N}, t_2 \\in \\mathbb{N}, t_3 \\in \\mathbb{N}, t_4 \\in \\mathbb{N}, t_5 \\in \\mathbb{N}\\) \uc5d0 \ub300\ud55c \\(t_1 \\times t_2 \\times t_3 \\times t_4 \\times t_5\\) \ud150\uc800\ub97c \\(1 \\times t_1t_2t_3t_4t_5\\) \ubc30\uc5f4\ub85c \ubcc0\ud658\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 \\[i_1 \\in \\{0, 1, \\dots, t_1-1\\}\\] \\[i_2 \\in \\{0, 1, \\dots, t_2-1\\}\\] \\[i_3 \\in \\{0, 1, \\dots, t_3-1\\}\\] \\[i_4 \\in \\{0,1,\\dots,t_4-1\\}\\] \\[i_5 \\in \\{0, 1, \\dots, t_5-1\\}\\] \uc778 \\(i_1, i_2, i_3, i_4, i_5\\) \uc5d0 \ub300\ud558\uc5ec \\[\\boxed{i_1t_5t_4t_3t_2+i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5 = (((i_1t_2+i_2)t_3+i_3)t_4+i_4)t_5 + i_5} \\] \ub85c \ucc38\uc870\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc5d0\uc11c index \uac00 \\(i_1t_5t_4t_3t_2+i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5\\) \uc774\uace0, m_CapacityPerTime \uc774 \\(t_2t_3t_4t_5\\) \uc774\ub2e4. \uc774\ub54c index \ub97c m_CapacityPerTime \uc73c\ub85c \ub098\ub204\uba74 \uadf8 \ubaab\uc774 \\(i_1\\) \uc774\ubbc0\ub85c [index / m_CapacityPerTime] \ub294 \uccab\ubc88\uc9f8 \ucd95\uc744 \ucc38\uc870\ud560 \uc218 \uc788\ub294 \uc88c\ud45c \\(i_1\\) \uac00 \ub41c\ub2e4. \uadf8\ub807\ub2e4\uba74 \uadf8 \ub098\uba38\uc9c0\ub294 \\(i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5\\) \uc778\ub370 \uc774\uac83\uc740 \ub450\ubc88\uc9f8 \ucd95\ubd80\ud130 \ub9c8\uc9c0\ub9c9 \ucd95\uae4c\uc9c0\uc758 4 \ucc28\uc6d0 \ud150\uc11c\ub97c 1 \ucc28\uc6d0 \ubc30\uc5f4\ub85c \uc778\ub371\uc2f1\ud558\uae30 \uc704\ud55c \uc218\uc2dd\uacfc \uac19\uae30 \ub54c\ubb38\uc5d0 [index % m_CapacityPerTime] \uac00 \uc815\ud655\ud788 \uc778\ub371\uc2f1\uc744 \ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc740 \\(i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5\\) \uac00 \ubc18\ub4dc\uc2dc \\(t_2t_3t_4t_5\\) \ubcf4\ub2e4 \uc791\ub2e4\ub294 \uac00\uc815\uc774 \ud544\uc694\ud558\ub2e4. \uc65c\ub0d0\ud558\uba74 \\(i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5\\) \uc774 \ubc18\ub4dc\uc2dc \\(t_2t_3t_4t_5\\) \uc73c\ub85c \ub098\ub208 \ub098\uba38\uc9c0\uac00 \ub418\uc5b4\uc57c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7f0\ub370 \\(k \\in \\{1,2,3,4,5\\}\\) \uc5d0 \ub300\ud55c \\(i_k\\) \ub4e4\uc758 \uc0c1\uacc4\ub294 \\(t_{k} - 1\\) \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\[i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5\\] \\[ = (t_2 - 1)t_5t_4t_3+(t_3 - 1)t_5t_4+(t_4 - 1) t_5+ t_5 - 1\\] \\[ = t_2t_5t_4t_3 - t_5t_4t_3 +t_3t_5t_4- t_5t_4+t_4t_5 - t_5+ t_5 - 1\\] \\[ = t_2t_3t_4t_5 - 1\\] \uc774\ub2e4. \uc989, \\(i_2, i_3, i_4, i_5\\) \uac00 \uc544\ubb34\ub9ac \ucee4\ub3c4 \\(i_2t_5t_4t_3+i_3t_5t_4+i_4t_5+i_5\\) \ub294 \\(t_2t_3t_4t_5\\) \uc744 \ub118\uc9c0 \ubabb\ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c [index / m_CapacityPerTime][index % m_CapacityPerTime] \ub77c\ub294 \ubc29\uc2dd\uc73c\ub85c \uc778\ub371\uc2f1\uc744 \ud558\ub294 \ubc29\uc2dd\uc740 \ud56d\uc0c1 \uc720\ud6a8\ud558\ub2e4. Success \uc774\ub85c\uc368 \uc6b0\ub9ac\ub294 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc744 \uc774\ud574\ud588\ub2e4. \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc774\ub780 (1) \ub370\uc774\ud130\uc14b\uc744 \uc801\uc808\ud55c \ubc29\uc2dd\uc73c\ub85c \uc77d\uace0 (2) \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud55c \ub2e4\uc74c (3) Tensor \uac1d\uccb4\ub97c \ub370\uc774\ud130\uc14b \ud615\uc0c1\uc5d0 \ub9de\ucdb0\uc11c \uc801\uc808\ud788 \ub9cc\ub4e4\uace0 (4) \uadf8\ub0e5 Tensor[Index5D(i1, i2, i3, i4, i5)] \ub77c\ub294 \uc2dd\uc73c\ub85c \ubcf5\uc0ac\ud558\uba74 \ub05d\uc774\ub2e4. \ubd84\uc11d \uacb0\ub860 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc774\ub780 (1) \ub370\uc774\ud130\uc14b\uc744 \uc801\uc808\ud55c \ubc29\uc2dd\uc73c\ub85c \uc77d\uace0 (2) \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud55c \ub2e4\uc74c (3) Tensor \uac1d\uccb4\ub97c \ub370\uc774\ud130\uc14b \ud615\uc0c1\uc5d0 \ub9de\ucdb0\uc11c \uc801\uc808\ud788 \ub9cc\ub4e4\uace0 (4) \uadf8\ub0e5 Tensor[Index5D(i1, i2, i3, i4, i5)] \ub77c\ub294 \uc2dd\uc73c\ub85c \ubcf5\uc0ac\ud558\uba74 \ub05d\uc774\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 \ubd84\uc11d \uc9c0\ub3c4\uc5d0 \ub530\ub974\uba74 \uc544\uc9c1 LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc \uc744 \ubd84\uc11d\ud558\uc9c0 \uc54a\uc558\uc9c0\ub9cc \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \uacfc\uc815\uc744 \ucda9\ubd84\ud788 \uc774\ud574\ud588\uc73c\ubbc0\ub85c \uc774\ucbe4\uc5d0\uc11c \ub2e4\ub978 \ucf54\ub4dc \ubd84\uc11d\uc744 \uadf8\ub9cc\ub450\uace0, \ucf54\ub529\uc744 \uc2dc\uc791\ud574\ubcf8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ud6c4\uc5d0 \ubb3c\ub860 DataLoader \ub97c \uc815\uc758\ud574\uc57c \ud560 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098 \ubaa8\ub4e0 \uac74 \uc778\uacf5\uc2e0\uacbd\ub9dd \uad6c\ud604\uc744 \uc704\ud55c \uac83\uc774\uc5c8\uc73c\ubbc0\ub85c \ucf54\ub529\uc744 \uc2dc\uc791\ud560 \uae30\ubcf8\uc801\uc778 \uc900\ube44\ub77c\ub3c4 \ub05d\ub098\uba74 \uc77c\ub2e8 \ud560 \uc218 \uc788\ub294 \uc218\uc900\uae4c\uc9c0\uc758 \ucf54\ub529\uc740 \ud574\ub450\ub294 \uac83\uc774 \uc633\uc740 \ubc29\ud5a5\uc778 \uac83 \uac19\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 LFW/main.cpp : main \ud568\uc218 LFW/ImageProcess.hpp : Transform \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Resize \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : CenterCrop \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : Compose \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset \uc0dd\uc131\uc790 LFW/LFWDataset.hpp : LFWDataset \uc0dd\uc131\uc790 src/Dataset.hpp : Dataset::SetLabel \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::CopyData \uba54\uc18c\ub4dc src/Shape.hpp : Shape \uc0dd\uc131\uc790 LFW/ImageProcess.hpp : vision::Compose::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::Resize::DoTransform \uba54\uc18c\ub4dc LFW/ImageProcess.hpp : vision::CenterCrop::DoTransform \uba54\uc18c\ub4dc LFW/LFWDataset.hpp : LFWDataset::Image2Tensor \uba54\uc18c\ub4dc src/Tensor.hpp : Tensor::Zeros \uba54\uc18c\ub4dc src/Tensor.hpp : Index5D \ud568\uc218 src/Tensor.hpp : Tensor::operator[] \uba54\uc18c\ub4dc src/LongArray.hpp : LongArray \uc0dd\uc131\uc790 src/LongArray.hpp : LongArray::operator[] \uba54\uc18c\ub4dc LFW/LFWSampler.hpp : LFWSampler \uc0dd\uc131\uc790 LFW/LFWSampler.hpp : LFWSampler::GetDataFromGlobalBuffer \uba54\uc18c\ub4dc","title":"src/LongArray.hpp: LongArray::operator[] \uba54\uc18c\ub4dc"},{"location":"sync/fewshot/step1-3/","text":"\uc6b0\ub9ac\ub294 \ubd84\uc11d\uc744 \ud1b5\ud558\uc5ec \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc744 \uc774\ud574\ud588\ub2e4. \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc774\ub780 (1) \ub370\uc774\ud130\uc14b\uc744 \uc801\uc808\ud55c \ubc29\uc2dd\uc73c\ub85c \uc77d\uace0 (2) \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud55c \ub2e4\uc74c (3) Tensor \uac1d\uccb4\ub97c \ub370\uc774\ud130\uc14b \ud615\uc0c1\uc5d0 \ub9de\ucdb0\uc11c \uc801\uc808\ud788 \ub9cc\ub4e4\uace0 (4) \uadf8\ub0e5 Tensor[Index5D(i1, i2, i3, i4, i5)] \ub77c\ub294 \uc2dd\uc73c\ub85c \ubcf5\uc0ac\ud558\ub294 \uac83\uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c CasiaWebFace \uc758 .png \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubcf8\uaca9\uc801\uc778 \ucf54\ub529\uc744 \uc2dc\uc791\ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uadf8\uc5d0 \uc55e\uc11c \ub514\uc9c0\ud138 \uc774\ubbf8\uc9c0\uac00 \ucef4\ud4e8\ud130\uc5d0 \uc800\uc7a5\ub418\ub294 \ubc29\uc2dd\uc5d0 \ub300\ud55c \uc774\ud574, \uadf8\ub9ac\uace0 .png \ud30c\uc77c \ud3ec\ub9f7\uc5d0 \ub300\ud55c \uac00\ubcbc\uc6b4 \uc774\ud574\ub77c\ub3c4 \ud544\uc694\ud558\ub2e4. Digital Image \u00b6 \ub514\uc9c0\ud138 \uc774\ubbf8\uc9c0\ub294 \\(xy\\) \ucd95 \uc88c\ud45c\ud3c9\uba74\uc758 \uc88c\ud45c \\(x, y\\) \ub97c \uc774\ubcc0\uc218 \ubca1\ud130\ud568\uc218\uc5d0 \uc785\ub825\ud558\uace0 \uc5bb\uc740 \ucd9c\ub825\uc73c\ub85c \uad6c\uc131\ub41c \uac83 \uc774\ub2e4. \uadf8 \ucd9c\ub825\uc744 \ud53d\uc140\uc774\ub77c\uace0 \ud55c\ub2e4. \ud53d\uc140\ub85c \uad6c\uc131\ub418\ub294 \uc774\ubbf8\uc9c0 (https://twlab.tistory.com/23) \uc218\ud559\uc5d0\uc11c\uc758 \uacf5\uac04\uc88c\ud45c\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uc218\ud559\uc5d0\uc11c\uc758 3\ucc28\uc6d0 \uacf5\uac04\uc88c\ud45c \ud558\uc9c0\ub9cc \uc774\ubbf8\uc9c0\uc5d0\uc11c\uc758 \uc88c\ud45c\ub294 \uc218\ud559\uc5d0\uc11c\uc758 \uc88c\ud45c\uc640 \ub2ec\ub9ac \uc67c\ucabd \uc0c1\ub2e8\ubd80\uc5d0\uc11c \uc88c\ud45c \\((0, 0)\\) \uc774 \uc2dc\uc791\ud558\uace0 \\(y\\) \ucd95\uc774 \uc544\ub798\ucabd \ubc29\ud5a5\uc73c\ub85c \uc99d\uac00\ud55c\ub2e4. \uc774 \\(xy\\) \ucd95\uc5d0 \ub530\ub978 \uc704\uce58\uc5d0 \uc788\ub294 \uac12\uc774 \uc774\ubbf8\uc9c0\uc758 \ud53d\uc140\uac12\uc774 \ub41c\ub2e4. \uadf8\ub9ac\uace0 \\(z\\) \ucd95\uc740 \ud53d\uc140 \uc815\ubc00\ub3c4\ub97c \ub098\ud0c0\ub0b8\ub2e4. \\(z\\) \ucd95\uc774 \uae4a\uc744\uc218\ub85d \ud53d\uc140 \uc815\ubc00\ub3c4( depth )\uac00 \ub192\uc544\uc838\uc11c \uc0c9\ucc44\uac00 \ub354 \ub192\uc740 \uc774\ubbf8\uc9c0\uac00 \ub098\ud0c0\ub09c\ub2e4. \ud53d\uc140 \uc815\ubc00\ub3c4\uc5d0 \ub300\ud574\uc11c\ub294 \uc544\ub798\uc5d0\uc11c \uc790\uc138\ud788 \ub2e4\ub8ec\ub2e4. \uc774\ubbf8\uc9c0\uc5d0\uc11c\uc758 \ud53d\uc140\uac12\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud55c 3\ucc28\uc6d0 \uacf5\uac04\uc88c\ud45c \ucc44\ub110(Channel) \u00b6 \uc704\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 \uc774\ubbf8\uc9c0\uc758 \uacf5\uac04\uc88c\ud45c\ub97c \ud1b5\ud558\uc5ec \uc774\ubbf8\uc9c0\uac00 \ud53d\uc140 \uac12\uc744 \uc815\ud55c\ub2e4\ub294 \uac83\uc744 \uc54c\uc544\ubcf4\uc558\ub2e4. \uadf8\ub7f0\ub370 \uc774\ub807\uac8c \\(3\\) \ucc28\uc6d0 \uacf5\uac04\uc88c\ud45c \ud558\ub098\ub85c \uc774\ubbf8\uc9c0\ub97c \ub098\ud0c0\ub0b4\uba74 \uc774\ubbf8\uc9c0\uac00 \ud55c \uac00\uc9c0 \uc0c9\uc758 \uac15\ub3c4\ub9cc \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \ubcf4\ud1b5\uc740 \ud53d\uc140 \ud558\ub098\uc5d0 \uc5ec\ub7ec\uac1c\uc758 \uc0c9\uc744 \uac16\uac8c \ud558\uace0 \uadf8 \uc0c9\uc758 \uc870\ud569\uc73c\ub85c \ucd5c\uc885\uc801\uc73c\ub85c \ud53d\uc140\uc758 \uc0c9\uc744 \uacb0\uc815\ud55c\ub2e4. \ub300\ud45c\uc801\uc73c\ub85c \ube68\uac15, \ucd08\ub85d, \ud30c\ub791\uc758 \uc0c9 \uc870\ud569\uc73c\ub85c \ud53d\uc140\uc758 \uc0c9\uc744 \uacb0\uc815\ud558\ub294 \ubc29\uc2dd\uc744 \ud2b8\ub8e8\uceec\ub7ec RGB \ubc29\uc2dd\uc774\ub77c\uace0 \ud55c\ub2e4. \uc774\ub7ec\ud55c \ud558\ub098\uc758 \uc774\ubbf8\uc9c0 \uacf5\uac04\uc88c\ud45c\ub97c \ucc44\ub110(Channel) \uc774\ub77c\uace0 \ud55c\ub2e4. \ud558\ub098\uc758 \ucc44\ub110\uc740 \uc774\ubbf8\uc9c0\uc758 \ud53d\uc140\uc758 \uc0c9\uc0c1 \uc815\ubcf4\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4. \ucc44\ub110\uc774 \\(1\\) \uac1c \ub77c\uba74 \ubcf4\ud1b5 \ube5b\uc758 \uac15\ub3c4\ub9cc\uc744 \ub098\ud0c0\ub0b4\uc5b4 \uadf8\ub808\uc774 \uc2a4\ucf00\uc77c \uc774\ubbf8\uc9c0\ub97c \ud45c\ud604\ud558\uac8c \ub41c\ub2e4. RGB \uc758 \uacbd\uc6b0 \uac01 \ud53d\uc140 \ub2f9 \ube68\uac15, \ucd08\ub85d, \ud30c\ub791\uc758 \uc815\ub3c4\ub97c \ub098\ud0c0\ub0b4\uae30 \uc704\ud558\uc5ec \uc704\uc640 \uac19\uc740 \uacf5\uac04\uc88c\ud45c\uac00 \\(3\\) \uac1c \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774\ubbf8\uc9c0\uac00 \\(4\\) \ucc28\uc6d0 \ud615\uc0c1\uc744 \uac16\ub294\ub2e4. \uc989, RGB \ub294 \ucc44\ub110 \\(3\\) \uac1c(\uacf5\uac04\uc88c\ud45c \\(3\\) \uac1c)\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\ub2e4. \uc694\uc998\uc5d0\ub294 \ud22c\uba85\ub3c4\ub97c \ucc44\ub110\uc744 \ud558\ub098 \ub354 \ucd94\uac00\ud558\uc5ec \\(4\\) \uac1c\uc758 \ucc44\ub110\uc744 \uac16\ub294 RGBA \uc774\ubbf8\uc9c0\ub97c \uc4f0\uae30\ub3c4 \ud55c\ub2e4. \uc774 \uc774\ubbf8\uc9c0\ub294 \ud53d\uc140\uc758 \uc0c9\uc744 \ub098\ud0c0\ub0b4\ub294 \uacf5\uac04\uc88c\ud45c \\(4\\) \uac1c\ub97c \uac16\ub294\ub2e4. \ud53d\uc140 \uc815\ubc00\ub3c4(Bit Depth) \u00b6 \uc774\ubbf8\uc9c0\uac00 \ud53d\uc140\uc744 \uc815\ubc00\ud558\uac8c \ub098\ud0c0\ub0b4\ub294 \uc815\ub3c4\ub97c \uc815\ubc00\ub3c4( depth )\ub77c\uace0 \ud55c\ub2e4. \uc704\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 \uc774\ubbf8\uc9c0\uc758 \uacf5\uac04\uc88c\ud45c\uc5d0\uc11c \\(z\\) \ucd95\uc774 \uae4a\uc740 \uc815\ub3c4 \ub97c \ub098\ud0c0\ub0b4\ub294 \uac83\uc774 \ud53d\uc140 \uc815\ubc00\ub3c4( depth ) \uc778 \uac83\uc774\ub2e4. \ud53d\uc140 \uc815\ubc00\ub3c4\ub97c \ub098\ud0c0\ub0b4\ub294 \ub2e8\uc704\ub294 \ube44\ud2b8 \uc774\ub2e4. \uc774\uc9c4 \uc774\ubbf8\uc9c0 ( depth=1 ) \ucd08\uae30\uc758 \uc774\ubbf8\uc9c0\ub294 \ud751\u9ed1 \uc744 \ub73b\ud558\ub294 \\(0\\) \uacfc \ubc31\u767d \uc744 \ub73b\ud558\ub294 \\(1\\) \ub9cc\uc73c\ub85c \ud53d\uc140\uc744 \uad6c\uc131\ud588\ub2e4. \uc774\uac83\uc744 \uc774\uc9c4 \uc774\ubbf8\uc9c0(binary image)\ub77c\uace0 \ud55c\ub2e4. \uc774\uc9c4 \uc774\ubbf8\uc9c0\uc758 \uacbd\uc6b0 \ud53d\uc140\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud558\uc5ec 1 \ube44\ud2b8\ub9cc \uc788\uc73c\uba74 \ub418\uae30 \ub54c\ubb38\uc5d0 depth \uac00 1 \uc774\ub2e4. \uc989, \uc774\uc9c4 \uc774\ubbf8\uc9c0\uc758 \\(z\\) \ucd95\uc758 \uae4a\uc774\ub294 \\(1\\) \uc774\ub2e4. \uc774\uc9c4 \uc774\ubbf8\uc9c0\ub294 \ud53d\uc140\uc758 \uc0c9\uae54\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud558\uc5ec \ud558\ub098\uc758 \uacf5\uac04\uc88c\ud45c\ub9cc\uc744 \uac00\uc9c0\uae30 \ub54c\ubb38\uc5d0 \ucc44\ub110\uc774 1 \uc774\ub2e4. \uc774\uc9c4 \uc774\ubbf8\uc9c0 (https://kr.mathworks.com/help/images/image-types-in-the-toolbox.html) \uadf8\ub808\uc774 \uc2a4\ucf00\uc77c ( depth=8 ) \uadf8\ub808\uc774 \uc2a4\ucf00\uc77c\uc740 \ube5b\uc758 \uac15\ub3c4\ub9cc\uc744 \ud53d\uc140\uc5d0 \ub098\ud0c0\ub0b4\ub294 \uc774\ubbf8\uc9c0\uc774\ub2e4. \uadf8\ub808\uc774 \uc2a4\ucf00\uc77c\uc758 \ud53d\uc140\uc740 0 \ubd80\ud130 255 \uc758 \uac12\uc744 \uac00\uc9c4\ub2e4. 8 \ube44\ud2b8\uac00 \uc788\uc73c\uba74 \\(2 ^{8} = 256\\) \uac00\uc9c0 \uc0c9\uc744 \ud45c\ud604\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uadf8\ub808\uc774 \uc2a4\ucf00\uc77c\uc740 \ud53d\uc140 \ud558\ub098\ub2f9 1 \ubc14\uc774\ud2b8( 8 \ube44\ud2b8) \uc758 \uc815\ubc00\ub3c4( depth ) \ub97c \uac16\ub294\ub2e4. \uc989, \uadf8\ub808\uc774 \uc2a4\ucf00\uc77c\uc758 \\(z\\) \ucd95\uc758 \uae4a\uc774\ub294 \\(8\\) \uc774\ub2e4. \uadf8\ub808\uc774 \uc2a4\ucf00\uc77c\ub3c4 \ud53d\uc140\uc758 \uc0c9\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud558\uc5ec \ud558\ub098\uc758 \uacf5\uac04\uc88c\ud45c\ub9cc\uc744 \uac00\uc9c0\uae30 \ub54c\ubb38\uc5d0 \ucc44\ub110\uc774 1 \uc774\ub2e4. \uadf8\ub808\uc774 \uc2a4\ucf00\uc77c \uc774\ubbf8\uc9c0 (https://en.wikipedia.org/wiki/Grayscale) \ud2b8\ub8e8 \uceec\ub7ec ( depth=24 ) \ud2b8\ub8e8 \uceec\ub7ec \uc774\ubbf8\uc9c0\ub294 \ud53d\uc140\uc774 3 \uac1c\uc758 \ucc44\ub110\uc744 \uac16\uace0, \uac01 \ucc44\ub110\uc774 8 \ube44\ud2b8\uc758 \ud53d\uc140 \uc815\ubc00\ub3c4( depth )\ub97c \uac16\ub294\ub2e4. \uc989, \ud53d\uc140\uc758 \uc0c9\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud558\uc5ec \\(3\\) \uac1c\uc758 \uacf5\uac04\uc88c\ud45c\ub97c \uac00\uc9c0\ub294 \uac83\uc774\ub2e4. \ud2b8\ub8e8 \uceec\ub7ec\ub294 \ucd5c\uc885\uc801\uc73c\ub85c \\(3\\) \uac1c\uc758 \uacf5\uac04\uc88c\ud45c\uc758 \uc88c\ud45c\uac12(\ud53d\uc140\uac12)\uc744 \uc870\ud569\ud558\uc5ec \uc0c9\uc744 \ub098\ud0c0\ub0b8\ub2e4. \ud2b8\ub8e8 \uceec\ub7ec \uc774\ubbf8\uc9c0\ub294 \ucc44\ub110\uc774 3 \uac1c \uc774\ubbc0\ub85c \ud55c \ud53d\uc140 \ub2f9 24 \ube44\ud2b8\ub85c \uc0c9\uc744 \ud45c\ud604\ud55c\ub2e4. RGB \ub294 \ud2b8\ub8e8 \uceec\ub7ec \uc774\ubbf8\uc9c0\uc758 \ub300\ud45c\uc801\uc778 \uc608\uc774\ub2e4. RGB \ub294 \ube68\uac15, \ucd08\ub85d, \ud30c\ub791\uc758 \uac15\ub3c4\ub97c \uac01\uac01 \uc138 \uac00\uc9c0 \ucc44\ub110(\uc138 \uac00\uc9c0 \uacf5\uac04\uc88c\ud45c)\ub85c \ub098\ud0c0\ub0b8\ub2e4. \uccab\ubc88\uc9f8 \ucc44\ub110\uc774 \ube68\uac04\uc0c9\uc758 \uc815\ub3c4\ub97c 0~255 \ub85c \ub098\ud0c0\ub0b4\uace0, \ub450\ubc88\uc9f8 \ucc44\ub110\uc774 \ucd08\ub85d\uc0c9\uc758 \uc815\ub3c4\ub97c 0~255 \ub85c \ub098\ud0c0\ub0b4\uace0, \uc138\ubc88\uc9f8 \ucc44\ub110\uc774 \ud30c\ub780\uc0c9\uc758 \uc815\ub3c4\ub97c 0~255 \ub85c \ub098\ud0c0\ub0b8\ub2e4. \uadf8\ub9ac\uace0 \uc774 \uc138 \uac00\uc9c0 \uc0c9\uae54\uc758 \uc0c9\uc870\ud569\uc744 \ud1b5\ud574 \ucd5c\uc885\uc801\uc73c\ub85c \ud55c \ud53d\uc140\uc758 \uc0c9\uae54\uc744 \ub9cc\ub4e4\uc5b4\ub0b8\ub2e4. \ub2e4\uc74c \uadf8\ub9bc\uc740 0~255 \uc758 \uc815\uc218 \ucc44\ub110 \uac12\uc744 0~1 \uc758 \uc2e4\uc218\ub85c \uc2a4\ucf00\uc77c\ub9c1 \ud55c \uac83\uc774\ub2e4. \ud2b8\ub8e8 \uceec\ub7ec \uc774\ubbf8\uc9c0 (https://kr.mathworks.com/help/images/image-types-in-the-toolbox.html) References : https://en.wikipedia.org/wiki/Digital_image https://twlab.tistory.com/23 https://kr.mathworks.com/help/images/image-types-in-the-toolbox.html PNG file format \u00b6 .png \ud30c\uc77c\uc758 \ud3ec\ub9f7\uc5d0 \ub300\ud55c \uc815\ubcf4\ub294 \uc774\uacf3 \uc744 \ud1b5\ud558\uc5ec \uc5bb\uc744 \uc218 \uc788\uc5c8\ub2e4. Structure \u00b6 PNG file Structure (https://github.com/corkami/formats/blob/master/image/png.md) PNG \ud30c\uc77c\uc740 \uc704\uc640 \uac19\uc774 Signature \uc640 \uc5ec\ub7ec\uac1c\uc758 chunk \ub4e4\ub85c \uad6c\uc131\ub41c\ub2e4. Signature : PNG \ud30c\uc77c\uc784\uc744 \uad6c\ubcc4\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ub9e4\uc9c1\ub118\ubc84\ub85c\uc368 \ub2e4\uc74c\uacfc \uac19\uc740 8 \ubc14\uc774\ud2b8 \ub370\uc774\ud130\ub85c \uad6c\uc131\ub41c\ub2e4. \\x89PNG\\x0d\\x0a\\x1a\\x0a chunk : [ length-type-data-checksum ] \uc640 \uac19\uc774 4 \uac00\uc9c0 \ub370\uc774\ud130\ub85c \uad6c\uc131\ub418\ub294 \ub370\uc774\ud130\uad6c\uc870\uc774\ub2e4. length : >4u 4 \ubc14\uc774\ud2b8 \ube45\uc5d4\ub514\uc548 unsigned \ub85c \uc774\ub8e8\uc5b4\uc9c4 \ub370\uc774\ud130 \uae38\uc774 \uc9c0\uc815\uc790\uc774\ub2e4. \uc774 \uae38\uc774\ub294 type-data-checksum \uc758 \uae38\uc774\uac00 \uc544\ub2c8\ub77c \uc624\uc9c1 data \uc758 \uae38\uc774\ub97c \ub73b\ud55c\ub2e4. type : 4c 4 \ubc14\uc774\ud2b8 char \ub85c \uc774\ub8e8\uc5b4\uc9c4 \ud0c0\uc785 \uc9c0\uc815\uc790\uc774\ub2e4. \ud0c0\uc785\uc740 IHDR , IDAT , IEND \ub4f1\uc774 \uc788\ub2e4. IHDR \uc740 \ud5e4\ub354 \ub370\uc774\ud130\ub97c \ub73b\ud558\uace0, IDAT \uc740 \uc2e4\uc81c \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\ub97c \ub73b\ud558\uace0, IEND \ub294 \ud30c\uc77c\uc758 \ub05d\uc744 \ub098\ud0c0\ub0b4\ub294 \ub370\uc774\ud130\ub97c \ub73b\ud55c\ub2e4. data : [length]b length \ubc14\uc774\ud2b8\ub9cc\ud07c\uc758 \uc2e4\uc81c \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\uc774\ub2e4. checksum(type+data) : 4u 4 \ubc14\uc774\ud2b8 unsigned \ub85c \uc774\ub8e8\uc5b4\uc9c4 \uccb4\ud06c\uc12c\uc774\ub2e4. \ub370\uc774\ud130\uac00 \ud6fc\uc190\ub418\uc9c0 \uc54a\uc558\ub294\uc9c0 \uac80\uc99d\ud560 \uc218 \uc788\uac8c \ud574\uc900\ub2e4. Terminator : \ub9c8\uc9c0\ub9c9\uc73c\ub85c PNG \ud30c\uc77c\uc740 \ud30c\uc77c\uc758 \ub05d\uc744 \uc54c\ub9ac\ub294 \ub2e4\uc74c\uc758 \ubc14\uc774\ud2b8 \ubc30\uc5f4\uc744 \uac16\ub294\ub2e4. 00 00 00 00 .I .E .N .D AE 42 60 82 Example \u00b6 a dissected RGN png (https://github.com/corkami/formats/blob/master/image/png.md) PNG \ud30c\uc77c\uc740 \uc704\uc640 \uac19\uc774 Signature \ub85c \uc2dc\uc791\ud558\uc5ec Header, Data, Terminator \ub85c \uad6c\uc131\ub41c\ub2e4. \uc774\uac83\uc740 \ube68\uac15, \ucd08\ub85d, \ud30c\ub791 \ud53d\uc140\ub9cc\uc744 \uac16\ub294 \ub2e8\uc21c\ud78c PNG \ud30c\uc77c\uc744 \ubd84\uc11d\ud55c \uac83\uc774\ub2e4. References : https://github.com/corkami/formats/blob/master/image/png.md CImg \u00b6 \uc774\uc81c \uc2e4\uc81c\ub85c PNG \ud30c\uc77c\uc744 \uc77d\uc5b4\uc11c \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud55c \ud6c4 Tensor \ub85c \ubcc0\ud658\ud574\ubcfc\ud150\ub370 \ubc14\uc774\ub108\ub9ac \ud30c\uc77c\uc744 \uc77d\uace0 \uc800\uc7a5\ud558\ub294 \ucf54\ub4dc\ub97c \uc9dc\ub824\uba74 PNG \ud30c\uc77c\uc758 \uc804\uccb4 \uc2a4\ud399\uc744 \uae30\uc220\ud55c \ud45c\uc900 \ubaa8\ub450 \uc774\ud574\ud55c \ub2e4\uc74c \ubc14\uc774\ub108\ub9ac \ub808\ubca8\uc758 \ucc98\ub9ac\ub97c \ud574\uc8fc\uc5b4\uc57c \ud558\ubbc0\ub85c \uc0c1\ub2f9\ud788 \uc2dc\uac04 \uc18c\ubaa8\uac00 \ub9ce\uc774 \ub41c\ub2e4. \uc2ec\uc9c0\uc5b4 \ubc14\uc774\ub108\ub9ac \ub808\ubca8\uc758 \ucc98\ub9ac\ub294 \ucde8\uc57d\uc810\uc774 \ubc1c\uc0dd\ud558\uae30 \ub9e4\uc6b0 \uc26c\uc6cc\uc11c WICWIU \uc5d0 \ucde8\uc57d\uc810\uc774 \uc0dd\uae38 \uc218\ub3c4 \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c PNG \ud30c\uc77c\uc744 \uc77d\uc744 \uc218 \uc788\ub3c4\ub85d \uc774\ubbf8 \uc81c\uc791\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub0ab\ub2e4. C++ \uc5d0\uc11c PNG \ud30c\uc77c\uc744 \uc77d\uc744 \uc218 \uc788\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub9ce\uc774 \uc788\uc9c0\ub9cc \uadf8 \uc911\uc5d0\uc11c CImg \ub97c \uc0ac\uc6a9\ud558\uae30\ub85c \ud588\ub2e4. \uadf8 \uc774\uc720\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. CImg \ub294 C++ \uc5d0\uc11c \uc774\ubbf8\uc9c0\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \ucd5c\uc801\ud654\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. CImg \ub294 \uc774\ubbf8\uc9c0\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc744 \uc81c\uacf5\ud558\uc5ec \ub2e4\uc591\ud55c \ud53d\uc140 \ud0c0\uc785( bool , char , int , float \ub4f1)\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\ub2e4. CImg \ub294 \uc5ec\ub7ec \uc774\ubbf8\uc9c0\ub97c \uc190\uc27d\uac8c \ub2e4\ub8f0 \uc218 \uc788\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. CImg \ub294 thread-safe \ud558\ub2e4. CImg \ub294 \uac00\ubccd\ub2e4. CImg \ub294 \ub2e8\uc9c0 \ud558\ub098\uc758 \ud5e4\ub354\ud30c\uc77c CImg.h \ub85c \uad6c\uc131\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. CImg \uc5d0\ub294 \uc624\uc9c1 4 \uac00\uc9c0 \ud074\ub798\uc2a4\ub9cc \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. CImg \ub294 \ub2e4\ub978 \uc758\uc874\uc131 \uc5c6\uc774 \uc21c\uc804\ud788 STL \uacfc \uc2dc\uc2a4\ud15c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub9cc\uc744 \uc0ac\uc6a9\ud55c\ub2e4. CImg \ub294 \ubb34\ub8cc\uc774\uace0 \uc624\ud508\uc18c\uc2a4\uc774\ub2e4. References : http://cimg.eu Installation \u00b6 git clone --depth=1 https://github.com/dtschump/CImg.git \ub85c CImg.h \ub97c \uac00\uc838\uc628 \ud6c4 \uadf8\ub0e5 #include \"/path/to/CImg.h\" \ud5e4\ub354\ub97c \ud3ec\ud568\uc2dc\ud0a4\uba74 \ub41c\ub2e4. \ub2e8\uc9c0 \ud5e4\ub354 \ud30c\uc77c\uc744 \ud3ec\ud568\uc2dc\ud0a4\ub294 \uac83\uc774 \uc124\uce58\uc758 \ub05d\uc774\ub2e4. \uadf8\ub9ac\uace0 \ud3b8\uc758\ub97c \uc704\ud558\uc5ec \uc774\ub984\uacf5\uac04 cimg_library \ub97c \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4. \uadf8\ub7ec\ub2c8\uae4c using namespace cimg_library ; \ub97c \ud3ec\ud568\uc2dc\ud0a4\uba74 \ub41c\ub2e4. Getting Started \u00b6 \ub2e4\uc74c\uc758 \uc608\uc81c \ucf54\ub4dc\ub97c \ubcf4\uc790. lena.png \ub294 http://optipng.sourceforge.net/pngtech/img/lena.png \uc5d0\uc11c \uc5bb\uc744 \uc218 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \"CImg.h\" #include <iostream> using namespace cimg_library ; using namespace std ; int main ( int c , char ** v ) { CImg < unsigned char > lena ( \"lena.png\" ); cout << \"width: \" << lena . width () << endl ; cout << \"height: \" << lena . height () << endl ; cout << \"depth: \" << lena . depth () << endl ; cout << \"channels: \" << lena . spectrum () << endl ; cout << \"size: \" << lena . size () << endl ; cout << \"pixel type: \" << lena . pixel_type () << endl ; lena . print (); return 0 ; } 8 : \ud2b8\ub8e8 \uceec\ub7ec RGB \uc774\ubbf8\uc9c0\uc778 lena.png \ub97c \uc77d\uace0 unsigned char \ub85c \uc77d\ub294\ub2e4. \uc774\ubbf8\uc9c0\ub294 \ubcf4\ud1b5 \uc774\ucc98\ub7fc unsigned char \ub85c \uc77d\uc73c\uba74 \ub41c\ub2e4. \uc65c\ub0d0\ud558\uba74 \uac01 \ucc44\ub110\uc774 0~255 \uc758 \uac12\uc744 \uac16\uae30 \ub54c\ubb38\uc774\ub2e4. \ub9cc\uc57d char \ub85c \uc77d\uc73c\uba74 \ucc44\ub110\uc758 \uac12\uc774 -128~127 \uc758 \uac12\uc744 \uac16\uac8c \ub418\ubc84\ub9b0\ub2e4. 9-15 : CImg \uc758 API \ub97c \ucc38\uace0\ud558\uba74 \uc774\ubbf8\uc9c0\uc758 \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc5bb\uc744 \uc218 \uc788\ub294 \ud568\uc218\ub4e4\uc774 \uc788\ub2e4. \uadf8\ub7ec\ud55c \ud568\uc218\ub4e4\ub85c \uc704\uc640 \uac19\uc740 \ucf54\ub4dc\uac00 \uad6c\uc131\ub418\uc5c8\ub2e4. \uc774 \ud504\ub85c\uadf8\ub7a8\uc744 main.cpp \ud30c\uc77c\uc5d0 \uc800\uc7a5\ud55c\ub2e4\uba74 \ub9ac\ub205\uc2a4 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucef4\ud30c\uc77c\ud558\uace0 \uc2e4\ud589\ud558\uba74 \ub41c\ub2e4. $ g++ main.cpp -O2 -lm -lpthread -lX11 $ ./a.out width: 512 height: 512 depth: 1 channels: 3 size: 786432 pixel type: unsigned char CImg<unsigned char>: this = 0x7ffdba95e5a0, size = ( 512 ,512,1,3 ) [ 768 Kio ] , data = ( unsigned char* ) 0x7fe294140010..0x7fe29420000f ( non-shared ) = [ 226 226 223 223 226 226 228 227 ... 88 85 80 89 77 79 81 81 ] , min = 3 , max = 255 , mean = 128 .228, std = 58 .9838, coords_min = ( 264 ,198,0,1 ) , coords_max = ( 445 ,51,0,0 ) . width() \ud568\uc218\uac00 512 \ub97c \ubc18\ud658\ud588\ub2e4. \uc774\uac83\uc740 \uc774\ubbf8\uc9c0\uc758 \uac00\ub85c( \\(x\\) \ucd95) \uae38\uc774\ub97c \ub73b\ud55c\ub2e4. height() \ud568\uc218\uac00 512 \ub97c \ubc18\ud658\ud588\ub2e4. \uc774\uac83\uc740 \uc774\ubbf8\uc9c0\uc758 \uc138\ub85c( \\(y\\) \ucd95) \uae38\uc774\ub97c \ub73b\ud55c\ub2e4. depth() \ud568\uc218\uac00 1 \ub97c \ubc18\ud658\ud588\ub2e4. \uc774\uac83\uc740 \uc774\ubbf8\uc9c0\uc758 \ud53d\uc140 \uc815\ubc00\ub3c4( \\(z\\) \ucd95)\uc744 \ub73b\ud55c\ub2e4. \ud558\uc9c0\ub9cc 1 \ube44\ud2b8\ub97c \ub73b\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c 1 \ubc14\uc774\ud2b8\ub97c \ub73b\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uac01 \ucc44\ub110\uc774 8 \ube44\ud2b8\uc758 \ud53d\uc140 \uc815\ubc00\ub3c4\ub97c \uac16\ub294\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \uadf8\ub7f0\ub370 \ud2b8\ub8e8 \uceec\ub7ec RGB \uc774\ubbf8\uc9c0\uc758 \ud53d\uc140 \uc815\ubc00\ub3c4\ub294 24 \ub77c\uace0 \ud588\uc5c8\ub2e4. \ud558\uc9c0\ub9cc spectrum() \ud568\uc218\uac00 3 \uc744 \ubc18\ud658\ud558\uc600\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \ucc44\ub110\uc774 3 \uac1c \uc774\ubbc0\ub85c \\(3 \\times 8 = 24\\) \ub85c\uc368 \ud53d\uc140 \uc815\ubc00\ub3c4\uac00 24 \uac00 \ub41c\ub2e4. References : http://cimg.eu/reference/group__cimg__tutorial.html \ud53d\uc140 \uc800\uc7a5 \ubc29\uc2dd \u00b6 CImg \ub294 \uc0dd\uc131\ub420 \ub54c \uc774\ubbf8\uc9c0\uc758 \ubaa8\ub4e0 \ud53d\uc140\uac12\uc744 \uba54\ubaa8\ub9ac\uc5d0 \ud55c\ubc88\uc5d0 \uc800\uc7a5\ud55c\ub2e4. CImg \ub294 \uae30\ubcf8\uc801\uc73c\ub85c 4 \ucc28\uc6d0( width , height , depth , dim ) \ubc30\uc5f4\uc774\ub2e4. \uadf8\ub9ac\uace0 \uc774 \ud53d\uc140\uac12\ub4e4\uc774 \uc2e4\uc81c\ub85c \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ub420 \ub54c\ub294 width * height * depth * dim \uc758 \ud06c\uae30\uc758 \uc120\ud615 \ubc30\uc5f4( 1 \ucc28\uc6d0 \ubc30\uc5f4)\ub85c \uc800\uc7a5\ub41c\ub2e4. \uadf8\ub7ec\ub2c8\uae4c CImg<T> \ub85c \uc774\ubbf8\uc9c0 \uac1d\uccb4\uac00 \uc0dd\uc131\ub418\uba74 width * height * depth * dim * sizeof(T) \ubc14\uc774\ud2b8\uac00 \ud560\ub2f9\ub41c\ub2e4. \uc774\ub807\uac8c \ud53d\uc140\ub4e4\uc774 \uc800\uc7a5\ub41c \uba54\ubaa8\ub9ac\uc758 \uc8fc\uc18c\uac12\uc740 CImg<T>::data() \uba54\uc18c\ub4dc\uac00 \ubc18\ud658\ud55c\ub2e4. \uc774\uac83\uc744 T* \uc5d0 \uc800\uc7a5\ud558\uba74 \ub41c\ub2e4. \ud53d\uc140 \uc800\uc7a5 \uc21c\uc11c \ud53d\uc140\uac12\uc740 \\(x\\) \ucd95, \\(y\\) \ucd95, \\(z\\) \ucd95, \\(v\\) \ucd95(\uac01\uac01 width , height , depth , dim(channels) ) \uc21c\uc11c\ub300\ub85c \uc800\uc7a5\ub41c\ub2e4. \uc989 \uc774\ubbf8\uc9c0\uc758 \uc67c\ucabd \uc704 \ud53d\uc140\ubd80\ud130 \uc624\ub978\ucabd \uc544\ub798 \ud53d\uc140\uae4c\uc9c0 \uc21c\uc11c\ub300\ub85c \uc800\uc7a5\ub418\uc5b4 \uc788\ub2e4. \ud53d\uc140\uac12\uc740 \uad50\ucc28\ub85c \ubc30\uce58\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \\(n \\times m \\times 1 \\times 3\\) \ud615\uc0c1\uc758 RGB \uc774\ubbf8\uc9c0\ub294 \uba54\ubaa8\ub9ac\uc5d0 \uc120\ud615 \uc21c\uc11c\ub85c \\[ R _{00} R _{01} \\dots R _{0n} R _{10} R _{11} \\dots R _{1n} \\dots R _{m0} R _{m1} \\dots R _{mn} \\] \\[G _{00} G _{01} \\dots G _{0n} G _{10} G _{11} \\dots G _{1n} \\dots G _{m0} G _{m1} \\dots G _{mn} \\] \\[B _{00} B _{01} \\dots B _{0n} B _{10} B _{11} \\dots B _{1n} \\dots B _{m0} B _{m1} \\dots B _{mn} \\] \ub85c \uc800\uc7a5\ub418\uc5b4 \uc788\uace0, \\[ R _{00} G _{00} B _{00} R _{01} G _{01} B _{01} \\dots \\] \ucc98\ub7fc \uad50\ucc28\ub85c \uc800\uc7a5\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4. \ud53d\uc140 \uac12 \uac00\uc838\uc624\uae30 CImg \uc758 API \ub97c \ucc38\uc870\ud558\uba74 () \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 \uba54\uc18c\ub4dc \ub97c \ubcfc \uc218 \uc788\ub2e4. \uc774 \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. 1 2 3 4 5 T & operator () ( const unsigned int x , const unsigned int y = 0 , const unsigned int z = 0 , const unsigned int c = 0 ) \uadf8\ub9ac\uace0 \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. Quote Access to a pixel value. Return a reference to a located pixel value of the image instance, being possibly const, whether the image instance is const or not. This is the standard method to get/set pixel values in CImg images. Parameter x : X-coordinate of the pixel value y : Y-coordinate of the pixel value z : Z-coordinate of the pixel value c : C-coordinate of the pixel value \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uba74 \ub9e4\uc6b0 \ud3b8\ub9ac\ud558\uac8c \uc88c\ud45c\ub85c \uc774\ubbf8\uc9c0\uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 \uacf3\uc758 \uba54\ubaa8\ub9ac\ub97c \ucc38\uc870\ud560 \uc218 \uc788\ub2e4. \uc704\uc5d0\uc11c \uc124\uba85\ud55c \\(n \\times m \\times 1 \\times 3\\) \ud615\uc0c1\uc758 RGB \uc774\ubbf8\uc9c0\ub97c \ucc38\uc870\ud558\ub294 \uc608\uc2dc\ub97c \ub4e4\uc5b4\ubcf4\uc790. \\(R _{00}\\) \uac12\uc744 \uac00\uc838\uc624\ub824\uba74 img(0, 0, 0, 0) \ub85c \ucc38\uc870\ud558\uba74 \ub41c\ub2e4. \\(R _{01}\\) \uac12\uc744 \uac00\uc838\uc624\ub824\uba74 img(1, 0, 0, 0) \ub85c \ucc38\uc870\ud558\uba74 \ub41c\ub2e4. \\(G _{00}\\) \uac12\uc744 \uac00\uc838\uc624\ub824\uba74 img(0, 0, 0, 1) \ub85c \ucc38\uc870\ud558\uba74 \ub41c\ub2e4. \\(G _{01}\\) \uac12\uc744 \uac00\uc838\uc624\ub824\uba74 img(1, 0, 0, 1) \ub85c \ucc38\uc870\ud558\uba74 \ub41c\ub2e4. \\(B _{00}\\) \uac12\uc744 \uac00\uc838\uc624\ub824\uba74 img(0, 0, 0, 2) \ub85c \ucc38\uc870\ud558\uba74 \ub41c\ub2e4. Example \\(1 \\times 5 \\times 1 \\times 1\\) \ud615\uc0c1\uc758 \uc774\ubbf8\uc9c0 \\(A\\) \ub97c CImg \ub85c \uc800\uc7a5\ud55c\ub2e4\uba74 \uba54\ubaa8\ub9ac\uc5d0 \uc120\ud615\uc21c\uc11c\ub85c \\[ A _{00} A _{10} A _{20} A _{30} A _{40} \\] \uc640 \uac19\uc774 \uc800\uc7a5\ub41c\ub2e4. \uc774\ub54c \ud53d\uc140\uac12 \\(A _{00}\\) \uc740 img(0, 0) , \\(A _{10}\\) \uc740 img(0, 1) , \\(\\dots\\) , \\(A _{40}\\) \ub294 img(0, 4) \ub85c \ucc38\uc870\ud560 \uc218 \uc788\ub2e4. \\(5 \\times 1 \\times 1 \\times 1\\) \ud615\uc0c1\uc758 \uc774\ubbf8\uc9c0 \\(A\\) \ub97c CImg \ub85c \uc800\uc7a5\ud55c\ub2e4\uba74 \uba54\ubaa8\ub9ac\uc5d0 \uc120\ud615\uc21c\uc11c\ub85c \\[ A _{00} A _{01} A _{02} A _{03} A _{04} \\] \uc640 \uac19\uc774 \uc800\uc7a5\ub41c\ub2e4. \uc774\ub54c \ud53d\uc140\uac12 \\(A _{00}\\) \uc740 img(0, 0) , \\(A _{01}\\) \uc740 img(1, 0) , \\(\\dots\\) , \\(A _{04}\\) \ub294 img(4, 0) \ub85c \ucc38\uc870\ud560 \uc218 \uc788\ub2e4. \ub610\ud55c CImg \ub294 \ucd95\uc774 1 \uc77c \uacbd\uc6b0 \uadf8 \uc88c\ud45c\uac12\uc744 \uc0dd\ub7b5\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\uc900\ub2e4. \ub2e4\uc74c \uc608\uc2dc\ub97c \ubcf4\uba74 \\((10, 10)\\) \uc758 \\(B\\) \uc758 \uac12\uc744 valB = img(10,10,2) \ub85c \ucc38\uc870\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. Example 1 2 3 4 5 6 7 8 9 10 11 12 13 // Construct a 100x100x1x3 (color) image with pixels set to '0' CImg < float > img ( 100 , 100 , 1 , 3 , 0 ); const float // Read red value at coordinates (10,10) valR = img ( 10 , 10 , 0 , 0 ), // Read green value at coordinates (10,10) valG = img ( 10 , 10 , 0 , 1 ), // Read blue value at coordinates (10,10) (Z-coordinate can be omitted) valB = img ( 10 , 10 , 2 ), // Compute average pixel value avg = ( valR + valG + valB ) / 3 ; // Replace the color pixel (10,10) by the average grey value img ( 10 , 10 , 0 ) = img ( 10 , 10 , 1 ) = img ( 10 , 10 , 2 ) = avg ; References : http://cimg.eu/reference/group__cimg__storage.html Image Loop \u00b6 CImg \ub294 \ud53d\uc140 \ubc84\ud37c \ub8e8\ud504, \ucc28\uc6d0 \ub8e8\ud504 \ub9e4\ud06c\ub85c\ub97c \uc81c\uacf5\ud55c\ub2e4. \uac00\ub839 cimg_forX(img,x) \uc740 for ( int x = 0 ; x < img . width (); ++ x ) \uc640 \ub611\uac19\ub2e4. CImg \uc758 \uc774 \uae30\ub2a5\uc740 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud560 \ub54c \ud3b8\ud558\uac8c \uc0ac\uc6a9\ub420 \uc218 \uc788\uc744 \uac83 \uac19\ub2e4. Example 1 2 3 CImg < unsigned char > img ( 256 , 256 , 1 , 3 ); // Define a 256x256 color image cimg_forXYC ( img , x , y , c ) { img ( x , y , c ) = ( x + y ) * ( c + 1 ) / 6 ; } img . display ( \"Color gradient\" ); Success \uc774\ub85c\uc368 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub4dc\ub97c \ub300\ucda9 \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\uc0c1\ud574\ubcfc \uc218 \uc788\uc744\uac83 \ud558\ub2e4. 1 2 3 4 5 6 CImg < unsigned char > lena ( \"lena.png\" ); Tensor < float > t ; cimg_forXYZC ( lena , x , y , z , c ) { t [ Index3D ( Shape , x , y , c )] = static_cast < float > ( img ( x , y , z , c )); } \uadf8\ub7f0\ub370 \ucd95\uc774 1 \uc77c \uacbd\uc6b0 \uc88c\ud45c\ub97c \uc0dd\ub7b5\ud574\ub3c4 \ub41c\ub2e4\uace0 \ud588\uc73c\ub2c8\uae4c \ub2e4\uc74c\uacfc \uac19\uc774 \ub354\uc6b1 \uac04\ub7b5\ud558\uac8c \uc9e4 \uc218\ub3c4 \uc788\uc744 \uac83 \uac19\ub2e4. 1 2 3 4 5 6 CImg < unsigned char > lena ( \"lena.png\" ); Tensor < float > t ; cimg_forXYC ( lena , x , y , c ) { t [ Index3D ( Shape , x , y , c )] = static_cast < float > ( img ( x , y , c )); } References : http://cimg.eu/reference/group__cimg__loops.html CImg \ud14c\uc2a4\ud2b8 \u00b6 CImg \uac00 \ucda9\ubd84\ud788 \uad1c\ucc2e\uc740 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 \uac83 \uac19\uc73c\ub2c8 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \ucda9\ubd84\ud788 \uac80\uc99d\ub41c \ud30c\uc774\uc36c \ud328\ud0a4\uc9c0\ub97c \ud1b5\ud558\uc5ec \uc774\ubbf8\uc9c0\ub97c \uc77d\ub294 \uac83\uc744 \ube44\uad50\ud558\uba74\uc11c CImg \uac00 \ud53d\uc140\uc744 \uc798 \uc800\uc7a5\ud558\uace0 \uc788\ub294\uc9c0 \ud14c\uc2a4\ud2b8\ud574\ub3c4\ub85d \ud558\uc790. \uba3c\uc800 CImg \ub85c \ub2e4\uc74c\uacfc \uac19\uc740 \uac04\ub2e8\ud55c \ud504\ub85c\uadf8\ub7a8\uc744 \ub9cc\ub4e4\uc5b4\ubcf8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include \"CImg.h\" #include <iostream> using namespace cimg_library ; using namespace std ; int main ( int c , char ** v ) { CImg < float > lena ( \"lena.png\" ); cout << \"R of (0, 0): \" << lena ( 0 , 0 , 0 ) << endl ; cout << \"R of (0, 1): \" << lena ( 1 , 0 , 0 ) << endl ; cout << \"R of (27, 199): \" << lena ( 199 , 27 , 0 ) << endl ; cout << \"G of (0, 0): \" << lena ( 0 , 0 , 1 ) << endl ; cout << \"G of (381, 501): \" << lena ( 501 , 381 , 1 ) << endl ; cout << \"B of (0, 0): \" << lena ( 0 , 0 , 2 ) << endl ; cout << \"B of (1, 0): \" << lena ( 0 , 1 , 2 ) << endl ; cout << \"B of (144, 9): \" << lena ( 9 , 144 , 2 ) << endl ; return 0 ; } 9-16 : \\((0, 0), (0, 1), (27, 199)\\) \uc758 R \uac12\uacfc \\((0, 0), (381, 501)\\) \uc758 G \uac12\uacfc \\((0, 0), (1, 0), (144, 9)\\) \uc758 B \uac12\uc744 \ucd9c\ub825\ud574\ubcf8\ub2e4. \ucd9c\ub825 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ g++ main.cpp -O2 -lm -lpthread -lX11 $ ./a.out R of ( 0 , 0 ) : 226 R of ( 0 , 1 ) : 226 R of ( 27 , 199 ) : 211 G of ( 0 , 0 ) : 137 G of ( 381 , 501 ) : 179 B of ( 0 , 0 ) : 125 B of ( 1 , 0 ) : 125 B of ( 144 , 9 ) : 72 \uc774\uc81c Python \ud328\ud0a4\uc9c0 imageio \ub97c \ud1b5\ud558\uc5ec \ub611\uac19\uc740 \uc774\ubbf8\uc9c0\ub97c \uc77d\uace0 \uac19\uc740 \uc88c\ud45c\uac12\uc744 \ucd9c\ub825\ud574\ubcf8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub2e8\ud55c Python \ud504\ub85c\uadf8\ub7a8\uc744 \ub9cc\ub4e4\uace0 test_cimg.py \ub85c \uc800\uc7a5\ud558\uc790. import imageio lena = imageio . imread ( \"lena.png\" ) print ( \"R of (0, 0):\" , lena [ 0 , 0 , 0 ]) print ( \"R of (0, 1):\" , lena [ 0 , 1 , 0 ]) print ( \"R of (27, 199):\" , lena [ 27 , 199 , 0 ]) print ( \"G of (0, 0):\" , lena [ 0 , 0 , 1 ]) print ( \"G of (381, 501):\" , lena [ 381 , 501 , 1 ]) print ( \"B of (0, 0):\" , lena [ 0 , 0 , 2 ]) print ( \"B of (1, 0):\" , lena [ 1 , 0 , 2 ]) print ( \"B of (144, 9):\" , lena [ 144 , 9 , 2 ]) \ucd9c\ub825 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ python test_cimg.py R of ( 0 , 0 ) : 226 R of ( 0 , 1 ) : 226 R of ( 27 , 199 ) : 211 G of ( 0 , 0 ) : 137 G of ( 381 , 501 ) : 179 B of ( 0 , 0 ) : 125 B of ( 1 , 0 ) : 125 B of ( 144 , 9 ) : 72 CImg \ud504\ub85c\uadf8\ub7a8\uc758 \ucd9c\ub825 \uacb0\uacfc\uc640 \uc644\uc804\ud788 \ub611\uac19\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. Coding: Data \u2192 Tensor \u00b6 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc740 (1) \ub370\uc774\ud130\uc14b\uc744 \uc801\uc808\ud55c \ubc29\uc2dd\uc73c\ub85c \uc77d\uace0 (2) \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud55c \ub2e4\uc74c (3) Tensor \uac1d\uccb4\ub97c \ub370\uc774\ud130\uc14b \ud615\uc0c1\uc5d0 \ub9de\ucdb0\uc11c \uc801\uc808\ud788 \ub9cc\ub4e4\uace0 (4) \uadf8\ub0e5 Tensor[Index5D(i1, i2, i3, i4, i5)] \ub77c\ub294 \uc2dd\uc73c\ub85c \ubcf5\uc0ac\ud558\ub294 \uac83\uc774\uc5c8\ub2e4. \uadf8\ub7f0\ub370 \uc774\uc81c \uc6b0\ub9ac\ub294 \ub514\uc9c0\ud138 \uc774\ubbf8\uc9c0\uac00 \uc5b4\ub5a4 \ud615\ud0dc\ub85c \ucef4\ud4e8\ud130\uc5d0 \uc800\uc7a5\ub418\ub294\uc9c0, \uadf8\ub9ac\uace0 .png \ud30c\uc77c \ud3ec\ub9f7\uc740 \uc5b4\ub5bb\uac8c \ub418\uc5b4 \uc788\ub294\uc9c0, \uadf8\ub9ac\uace0 CImg \ub85c .png \ud30c\uc77c\uc744 \uc77d\uace0 \uc5b4\ub5bb\uac8c \ud53d\uc140\uac12\ub4e4\uc744 \uc815\ud655\ud55c \uc88c\ud45c\ub85c \ucc38\uc870\ud560 \uc218 \uc788\ub294\uc9c0 \uc54c\uc558\ub2e4. \uadf8\ub7ec\ubbc0\ub85c CasiaWebFace \uc758 .png \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubcf8\uaca9\uc801\uc778 \ucf54\ub529\uc744 \uc2dc\uc791\ud560 \uc218 \uc788\ub2e4. Convert first .png \u2192 Tensor \u00b6 \uba3c\uc800 \uc6b0\ub9ac\ub294 \uc9c0\uae08\uae4c\uc9c0\uc758 \ubd84\uc11d\uacfc \ud559\uc2b5\uc744 \uae30\ubc18\uc73c\ub85c CasiaWebFace \ub370\uc774\ud130\uc14b \uc911 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 .png \ud30c\uc77c\uc744 \uc77d\uc5b4\uc11c Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub4dc\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc27d\uac8c \ub9cc\ub4e4 \uc218 \uc788\uac8c \ub418\uc5c8\ub2e4. \ub2e4\uc74c \ucf54\ub4dc\uc5d0\uc11c\ub294 .png \ub97c Tensor \ub85c \ubcc0\ud658\ud560 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc81c\ub300\ub85c \ubcc0\ud658\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud558\uc5ec CImg \uac1d\uccb4\uc640 Tensor \uac1d\uccb4\uc758 \uba54\ud0c0\ub370\uc774\ud130\uc640 \uc2e4\uc81c\ub370\uc774\ud130\ub97c \ube44\uad50\ud574\ubcf4\uc558\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 #include <iostream> #include <fstream> #include <iterator> #include <vector> #include <dirent.h> #include <sys/types.h> #include \"CImg.h\" #include \"WICWIU/WICWIU_src/Tensor.hpp\" using namespace cimg_library ; DIR * getDirList ( const char * dirName ) { DIR * dir ; if (( dir = opendir ( dirName )) == NULL ) throw std :: invalid_argument ( \"could not open directory\" ); return dir ; } void test_convertFirstCasia2Tensor (); int main ( int argc , char const * argv []) { test_convertFirstCasia2Tensor (); return EXIT_SUCCESS ; } void test_convertFirstCasia2Tensor () { DIR * dir ; std :: string casiaTrainDirPath = \"/tmp/casia_train\" ; std :: string casiaTrainFirstDirPath ; std :: string casiaTrainFirstImagePath ; // // Get first directory of casia_train // try { dir = getDirList ( casiaTrainDirPath . c_str ()); if ( dir == nullptr ) throw ; struct dirent * ent ; for ( int idx = 0 ; ( ent = readdir ( dir )) != NULL ; idx ++ ) { if ( idx == 2 ) // first index (because: 0 -> . 1 -> .. 2 -> first path) { casiaTrainFirstDirPath = casiaTrainDirPath + \"/\" + std :: string ( ent -> d_name ); } } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } // // Get first image of first directory // try { dir = getDirList ( casiaTrainFirstDirPath . c_str ()); if ( dir == nullptr ) throw ; struct dirent * ent ; for ( int idx = 0 ; ( ent = readdir ( dir )) != NULL ; idx ++ ) { if ( idx == 2 ) // first index (because: 0 -> . 1 -> .. 2 -> first path) { casiaTrainFirstImagePath = casiaTrainFirstDirPath + \"/\" + std :: string ( ent -> d_name ); } } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } // // Data to Tensor // CImg < unsigned char > casiaTrainFirstImage ( casiaTrainFirstImagePath . c_str ()); Tensor < unsigned char > * casiaTrainFirstTensor = \\ new Tensor < unsigned char > ( casiaTrainFirstImage . width (), casiaTrainFirstImage . height (), casiaTrainFirstImage . spectrum () ); Shape * casiaTrainFirstTensorShape = casiaTrainFirstTensor -> GetShape (); cimg_forXYC ( casiaTrainFirstImage , x , y , c ) { ( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , x , y , c )] = \\ casiaTrainFirstImage ( x , y , c ); } std :: cout << \"##########################################\" << std :: endl ; std :: cout << \"######### Meta data comparison ###########\" << std :: endl ; std :: cout << \"##########################################\" << std :: endl ; std :: cout << std :: endl ; std :: cout << \"CImg width: \" << casiaTrainFirstImage . width () << std :: endl ; std :: cout << \"CImg height: \" << casiaTrainFirstImage . height () << std :: endl ; std :: cout << \"CImg depth: \" << casiaTrainFirstImage . depth () << std :: endl ; std :: cout << \"CImg channels: \" << casiaTrainFirstImage . spectrum () << std :: endl ; std :: cout << \"CImg size: \" << casiaTrainFirstImage . size () << std :: endl ; std :: cout << \"CImg pixel type: \" << casiaTrainFirstImage . pixel_type () << std :: endl ; casiaTrainFirstImage . print (); std :: cout << std :: endl ; std :: cout << \"Tensor shape: \" << casiaTrainFirstTensorShape << std :: endl ; std :: cout << \"Tensor rank: \" << casiaTrainFirstTensor -> GetRank () << std :: endl ; std :: cout << \"Tensor dim(0): \" << casiaTrainFirstTensor -> GetDim ( 0 ) << std :: endl ; std :: cout << \"Tensor dim(1): \" << casiaTrainFirstTensor -> GetDim ( 1 ) << std :: endl ; std :: cout << \"Tensor dim(2): \" << casiaTrainFirstTensor -> GetDim ( 2 ) << std :: endl ; std :: cout << \"Tensor Capacity: \" << casiaTrainFirstTensor -> GetCapacity () << std :: endl ; std :: cout << std :: endl ; std :: cout << \"##########################################\" << std :: endl ; std :: cout << \"######### Real data comparison ###########\" << std :: endl ; std :: cout << \"##########################################\" << std :: endl ; std :: cout << std :: endl ; std :: cout << \"CImg R of (0, 0): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 0 , 0 , 0 )) << std :: endl ; std :: cout << \"CImg R of (0, 1): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 1 , 0 , 0 )) << std :: endl ; std :: cout << \"CImg R of (27, 159): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 159 , 27 , 0 )) << std :: endl ; std :: cout << \"CImg G of (0, 0): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 0 , 0 , 1 )) << std :: endl ; std :: cout << \"CImg G of (31, 51): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 51 , 31 , 1 )) << std :: endl ; std :: cout << \"CImg B of (0, 0): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 0 , 0 , 2 )) << std :: endl ; std :: cout << \"CImg B of (1, 0): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 0 , 1 , 2 )) << std :: endl ; std :: cout << \"CImg B of (144, 9): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 9 , 144 , 2 )) << std :: endl ; std :: cout << std :: endl ; std :: cout << \"Tensor R of (0, 0): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 0 , 0 , 0 )]) << std :: endl ; std :: cout << \"Tensor R of (0, 1): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 1 , 0 , 0 )]) << std :: endl ; std :: cout << \"Tensor R of (27, 159): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 159 , 27 , 0 )]) << std :: endl ; std :: cout << \"Tensor G of (0, 0): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 0 , 0 , 1 )]) << std :: endl ; std :: cout << \"Tensor G of (31, 51): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 51 , 31 , 1 )]) << std :: endl ; std :: cout << \"Tensor B of (0, 0): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 0 , 0 , 2 )]) << std :: endl ; std :: cout << \"Tensor B of (1, 0): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 0 , 1 , 2 )]) << std :: endl ; std :: cout << \"Tensor B of (144, 9): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 9 , 144 , 2 )]) << std :: endl ; std :: cout << std :: endl ; } 11-17 , 29-80 : \uc774 \ucf54\ub4dc\ub4e4\uc740 Step 1. Data \u2192 Tensor: Analysis: LFW 1 \uc5d0\uc11c \uc774\ubbf8 \uc124\uba85\ud558\uc600\ub2e4. 85 : CasiaWebFace \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 .png \ub370\uc774\ud130\ub97c CImg \ub85c \uc77d\ub294\ub2e4. 87-92 : .png \uc758 \\(x\\) \ucd95, \\(y\\) \ucd95, \\(c\\) \ucd95 \uc815\ubcf4\ub97c \ud1b5\ud558\uc5ec Tensor \ub97c \uc0dd\uc131\ud55c\ub2e4. 95-98 : \ub370\uc774\ud130\ub97c Tensor \uc5d0 \ubcf5\uc0ac\ud55c\ub2e4. 100-120 : CImg \uac1d\uccb4\uc640 Tensor \uc758 \uba54\ud0c0\ub370\uc774\ud130\ub97c \ube44\uad50\ud55c\ub2e4. 122-145 : CImg \uac1d\uccb4\uc640 Tensor \uc758 \uc2e4\uc81c\ub370\uc774\ud130\ub97c \ube44\uad50\ud55c\ub2e4. \ucd9c\ub825 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. Success \uc774\ub85c\uc368 \uc6b0\ub9ac\ub294 \uc131\uacf5\uc801\uc73c\ub85c CasiaWebFace \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 .png \ub370\uc774\ud130\ub97c Tensor \ub85c \ubcc0\ud658\ud558\uc600\ub2e4.","title":"Coding&#58; PNG, CImg"},{"location":"sync/fewshot/step1-3/#digital-image","text":"\ub514\uc9c0\ud138 \uc774\ubbf8\uc9c0\ub294 \\(xy\\) \ucd95 \uc88c\ud45c\ud3c9\uba74\uc758 \uc88c\ud45c \\(x, y\\) \ub97c \uc774\ubcc0\uc218 \ubca1\ud130\ud568\uc218\uc5d0 \uc785\ub825\ud558\uace0 \uc5bb\uc740 \ucd9c\ub825\uc73c\ub85c \uad6c\uc131\ub41c \uac83 \uc774\ub2e4. \uadf8 \ucd9c\ub825\uc744 \ud53d\uc140\uc774\ub77c\uace0 \ud55c\ub2e4. \ud53d\uc140\ub85c \uad6c\uc131\ub418\ub294 \uc774\ubbf8\uc9c0 (https://twlab.tistory.com/23) \uc218\ud559\uc5d0\uc11c\uc758 \uacf5\uac04\uc88c\ud45c\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uc218\ud559\uc5d0\uc11c\uc758 3\ucc28\uc6d0 \uacf5\uac04\uc88c\ud45c \ud558\uc9c0\ub9cc \uc774\ubbf8\uc9c0\uc5d0\uc11c\uc758 \uc88c\ud45c\ub294 \uc218\ud559\uc5d0\uc11c\uc758 \uc88c\ud45c\uc640 \ub2ec\ub9ac \uc67c\ucabd \uc0c1\ub2e8\ubd80\uc5d0\uc11c \uc88c\ud45c \\((0, 0)\\) \uc774 \uc2dc\uc791\ud558\uace0 \\(y\\) \ucd95\uc774 \uc544\ub798\ucabd \ubc29\ud5a5\uc73c\ub85c \uc99d\uac00\ud55c\ub2e4. \uc774 \\(xy\\) \ucd95\uc5d0 \ub530\ub978 \uc704\uce58\uc5d0 \uc788\ub294 \uac12\uc774 \uc774\ubbf8\uc9c0\uc758 \ud53d\uc140\uac12\uc774 \ub41c\ub2e4. \uadf8\ub9ac\uace0 \\(z\\) \ucd95\uc740 \ud53d\uc140 \uc815\ubc00\ub3c4\ub97c \ub098\ud0c0\ub0b8\ub2e4. \\(z\\) \ucd95\uc774 \uae4a\uc744\uc218\ub85d \ud53d\uc140 \uc815\ubc00\ub3c4( depth )\uac00 \ub192\uc544\uc838\uc11c \uc0c9\ucc44\uac00 \ub354 \ub192\uc740 \uc774\ubbf8\uc9c0\uac00 \ub098\ud0c0\ub09c\ub2e4. \ud53d\uc140 \uc815\ubc00\ub3c4\uc5d0 \ub300\ud574\uc11c\ub294 \uc544\ub798\uc5d0\uc11c \uc790\uc138\ud788 \ub2e4\ub8ec\ub2e4. \uc774\ubbf8\uc9c0\uc5d0\uc11c\uc758 \ud53d\uc140\uac12\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud55c 3\ucc28\uc6d0 \uacf5\uac04\uc88c\ud45c","title":"Digital Image"},{"location":"sync/fewshot/step1-3/#channel","text":"\uc704\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 \uc774\ubbf8\uc9c0\uc758 \uacf5\uac04\uc88c\ud45c\ub97c \ud1b5\ud558\uc5ec \uc774\ubbf8\uc9c0\uac00 \ud53d\uc140 \uac12\uc744 \uc815\ud55c\ub2e4\ub294 \uac83\uc744 \uc54c\uc544\ubcf4\uc558\ub2e4. \uadf8\ub7f0\ub370 \uc774\ub807\uac8c \\(3\\) \ucc28\uc6d0 \uacf5\uac04\uc88c\ud45c \ud558\ub098\ub85c \uc774\ubbf8\uc9c0\ub97c \ub098\ud0c0\ub0b4\uba74 \uc774\ubbf8\uc9c0\uac00 \ud55c \uac00\uc9c0 \uc0c9\uc758 \uac15\ub3c4\ub9cc \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \ubcf4\ud1b5\uc740 \ud53d\uc140 \ud558\ub098\uc5d0 \uc5ec\ub7ec\uac1c\uc758 \uc0c9\uc744 \uac16\uac8c \ud558\uace0 \uadf8 \uc0c9\uc758 \uc870\ud569\uc73c\ub85c \ucd5c\uc885\uc801\uc73c\ub85c \ud53d\uc140\uc758 \uc0c9\uc744 \uacb0\uc815\ud55c\ub2e4. \ub300\ud45c\uc801\uc73c\ub85c \ube68\uac15, \ucd08\ub85d, \ud30c\ub791\uc758 \uc0c9 \uc870\ud569\uc73c\ub85c \ud53d\uc140\uc758 \uc0c9\uc744 \uacb0\uc815\ud558\ub294 \ubc29\uc2dd\uc744 \ud2b8\ub8e8\uceec\ub7ec RGB \ubc29\uc2dd\uc774\ub77c\uace0 \ud55c\ub2e4. \uc774\ub7ec\ud55c \ud558\ub098\uc758 \uc774\ubbf8\uc9c0 \uacf5\uac04\uc88c\ud45c\ub97c \ucc44\ub110(Channel) \uc774\ub77c\uace0 \ud55c\ub2e4. \ud558\ub098\uc758 \ucc44\ub110\uc740 \uc774\ubbf8\uc9c0\uc758 \ud53d\uc140\uc758 \uc0c9\uc0c1 \uc815\ubcf4\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4. \ucc44\ub110\uc774 \\(1\\) \uac1c \ub77c\uba74 \ubcf4\ud1b5 \ube5b\uc758 \uac15\ub3c4\ub9cc\uc744 \ub098\ud0c0\ub0b4\uc5b4 \uadf8\ub808\uc774 \uc2a4\ucf00\uc77c \uc774\ubbf8\uc9c0\ub97c \ud45c\ud604\ud558\uac8c \ub41c\ub2e4. RGB \uc758 \uacbd\uc6b0 \uac01 \ud53d\uc140 \ub2f9 \ube68\uac15, \ucd08\ub85d, \ud30c\ub791\uc758 \uc815\ub3c4\ub97c \ub098\ud0c0\ub0b4\uae30 \uc704\ud558\uc5ec \uc704\uc640 \uac19\uc740 \uacf5\uac04\uc88c\ud45c\uac00 \\(3\\) \uac1c \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc774\ubbf8\uc9c0\uac00 \\(4\\) \ucc28\uc6d0 \ud615\uc0c1\uc744 \uac16\ub294\ub2e4. \uc989, RGB \ub294 \ucc44\ub110 \\(3\\) \uac1c(\uacf5\uac04\uc88c\ud45c \\(3\\) \uac1c)\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\ub2e4. \uc694\uc998\uc5d0\ub294 \ud22c\uba85\ub3c4\ub97c \ucc44\ub110\uc744 \ud558\ub098 \ub354 \ucd94\uac00\ud558\uc5ec \\(4\\) \uac1c\uc758 \ucc44\ub110\uc744 \uac16\ub294 RGBA \uc774\ubbf8\uc9c0\ub97c \uc4f0\uae30\ub3c4 \ud55c\ub2e4. \uc774 \uc774\ubbf8\uc9c0\ub294 \ud53d\uc140\uc758 \uc0c9\uc744 \ub098\ud0c0\ub0b4\ub294 \uacf5\uac04\uc88c\ud45c \\(4\\) \uac1c\ub97c \uac16\ub294\ub2e4.","title":"\ucc44\ub110(Channel)"},{"location":"sync/fewshot/step1-3/#bit-depth","text":"\uc774\ubbf8\uc9c0\uac00 \ud53d\uc140\uc744 \uc815\ubc00\ud558\uac8c \ub098\ud0c0\ub0b4\ub294 \uc815\ub3c4\ub97c \uc815\ubc00\ub3c4( depth )\ub77c\uace0 \ud55c\ub2e4. \uc704\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 \uc774\ubbf8\uc9c0\uc758 \uacf5\uac04\uc88c\ud45c\uc5d0\uc11c \\(z\\) \ucd95\uc774 \uae4a\uc740 \uc815\ub3c4 \ub97c \ub098\ud0c0\ub0b4\ub294 \uac83\uc774 \ud53d\uc140 \uc815\ubc00\ub3c4( depth ) \uc778 \uac83\uc774\ub2e4. \ud53d\uc140 \uc815\ubc00\ub3c4\ub97c \ub098\ud0c0\ub0b4\ub294 \ub2e8\uc704\ub294 \ube44\ud2b8 \uc774\ub2e4.","title":"\ud53d\uc140 \uc815\ubc00\ub3c4(Bit Depth)"},{"location":"sync/fewshot/step1-3/#png-file-format","text":".png \ud30c\uc77c\uc758 \ud3ec\ub9f7\uc5d0 \ub300\ud55c \uc815\ubcf4\ub294 \uc774\uacf3 \uc744 \ud1b5\ud558\uc5ec \uc5bb\uc744 \uc218 \uc788\uc5c8\ub2e4.","title":"PNG file format"},{"location":"sync/fewshot/step1-3/#structure","text":"PNG file Structure (https://github.com/corkami/formats/blob/master/image/png.md) PNG \ud30c\uc77c\uc740 \uc704\uc640 \uac19\uc774 Signature \uc640 \uc5ec\ub7ec\uac1c\uc758 chunk \ub4e4\ub85c \uad6c\uc131\ub41c\ub2e4. Signature : PNG \ud30c\uc77c\uc784\uc744 \uad6c\ubcc4\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ub9e4\uc9c1\ub118\ubc84\ub85c\uc368 \ub2e4\uc74c\uacfc \uac19\uc740 8 \ubc14\uc774\ud2b8 \ub370\uc774\ud130\ub85c \uad6c\uc131\ub41c\ub2e4. \\x89PNG\\x0d\\x0a\\x1a\\x0a chunk : [ length-type-data-checksum ] \uc640 \uac19\uc774 4 \uac00\uc9c0 \ub370\uc774\ud130\ub85c \uad6c\uc131\ub418\ub294 \ub370\uc774\ud130\uad6c\uc870\uc774\ub2e4. length : >4u 4 \ubc14\uc774\ud2b8 \ube45\uc5d4\ub514\uc548 unsigned \ub85c \uc774\ub8e8\uc5b4\uc9c4 \ub370\uc774\ud130 \uae38\uc774 \uc9c0\uc815\uc790\uc774\ub2e4. \uc774 \uae38\uc774\ub294 type-data-checksum \uc758 \uae38\uc774\uac00 \uc544\ub2c8\ub77c \uc624\uc9c1 data \uc758 \uae38\uc774\ub97c \ub73b\ud55c\ub2e4. type : 4c 4 \ubc14\uc774\ud2b8 char \ub85c \uc774\ub8e8\uc5b4\uc9c4 \ud0c0\uc785 \uc9c0\uc815\uc790\uc774\ub2e4. \ud0c0\uc785\uc740 IHDR , IDAT , IEND \ub4f1\uc774 \uc788\ub2e4. IHDR \uc740 \ud5e4\ub354 \ub370\uc774\ud130\ub97c \ub73b\ud558\uace0, IDAT \uc740 \uc2e4\uc81c \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\ub97c \ub73b\ud558\uace0, IEND \ub294 \ud30c\uc77c\uc758 \ub05d\uc744 \ub098\ud0c0\ub0b4\ub294 \ub370\uc774\ud130\ub97c \ub73b\ud55c\ub2e4. data : [length]b length \ubc14\uc774\ud2b8\ub9cc\ud07c\uc758 \uc2e4\uc81c \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\uc774\ub2e4. checksum(type+data) : 4u 4 \ubc14\uc774\ud2b8 unsigned \ub85c \uc774\ub8e8\uc5b4\uc9c4 \uccb4\ud06c\uc12c\uc774\ub2e4. \ub370\uc774\ud130\uac00 \ud6fc\uc190\ub418\uc9c0 \uc54a\uc558\ub294\uc9c0 \uac80\uc99d\ud560 \uc218 \uc788\uac8c \ud574\uc900\ub2e4. Terminator : \ub9c8\uc9c0\ub9c9\uc73c\ub85c PNG \ud30c\uc77c\uc740 \ud30c\uc77c\uc758 \ub05d\uc744 \uc54c\ub9ac\ub294 \ub2e4\uc74c\uc758 \ubc14\uc774\ud2b8 \ubc30\uc5f4\uc744 \uac16\ub294\ub2e4. 00 00 00 00 .I .E .N .D AE 42 60 82","title":"Structure"},{"location":"sync/fewshot/step1-3/#example","text":"a dissected RGN png (https://github.com/corkami/formats/blob/master/image/png.md) PNG \ud30c\uc77c\uc740 \uc704\uc640 \uac19\uc774 Signature \ub85c \uc2dc\uc791\ud558\uc5ec Header, Data, Terminator \ub85c \uad6c\uc131\ub41c\ub2e4. \uc774\uac83\uc740 \ube68\uac15, \ucd08\ub85d, \ud30c\ub791 \ud53d\uc140\ub9cc\uc744 \uac16\ub294 \ub2e8\uc21c\ud78c PNG \ud30c\uc77c\uc744 \ubd84\uc11d\ud55c \uac83\uc774\ub2e4. References : https://github.com/corkami/formats/blob/master/image/png.md","title":"Example"},{"location":"sync/fewshot/step1-3/#cimg","text":"\uc774\uc81c \uc2e4\uc81c\ub85c PNG \ud30c\uc77c\uc744 \uc77d\uc5b4\uc11c \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud55c \ud6c4 Tensor \ub85c \ubcc0\ud658\ud574\ubcfc\ud150\ub370 \ubc14\uc774\ub108\ub9ac \ud30c\uc77c\uc744 \uc77d\uace0 \uc800\uc7a5\ud558\ub294 \ucf54\ub4dc\ub97c \uc9dc\ub824\uba74 PNG \ud30c\uc77c\uc758 \uc804\uccb4 \uc2a4\ud399\uc744 \uae30\uc220\ud55c \ud45c\uc900 \ubaa8\ub450 \uc774\ud574\ud55c \ub2e4\uc74c \ubc14\uc774\ub108\ub9ac \ub808\ubca8\uc758 \ucc98\ub9ac\ub97c \ud574\uc8fc\uc5b4\uc57c \ud558\ubbc0\ub85c \uc0c1\ub2f9\ud788 \uc2dc\uac04 \uc18c\ubaa8\uac00 \ub9ce\uc774 \ub41c\ub2e4. \uc2ec\uc9c0\uc5b4 \ubc14\uc774\ub108\ub9ac \ub808\ubca8\uc758 \ucc98\ub9ac\ub294 \ucde8\uc57d\uc810\uc774 \ubc1c\uc0dd\ud558\uae30 \ub9e4\uc6b0 \uc26c\uc6cc\uc11c WICWIU \uc5d0 \ucde8\uc57d\uc810\uc774 \uc0dd\uae38 \uc218\ub3c4 \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c PNG \ud30c\uc77c\uc744 \uc77d\uc744 \uc218 \uc788\ub3c4\ub85d \uc774\ubbf8 \uc81c\uc791\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub0ab\ub2e4. C++ \uc5d0\uc11c PNG \ud30c\uc77c\uc744 \uc77d\uc744 \uc218 \uc788\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub9ce\uc774 \uc788\uc9c0\ub9cc \uadf8 \uc911\uc5d0\uc11c CImg \ub97c \uc0ac\uc6a9\ud558\uae30\ub85c \ud588\ub2e4. \uadf8 \uc774\uc720\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. CImg \ub294 C++ \uc5d0\uc11c \uc774\ubbf8\uc9c0\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \ucd5c\uc801\ud654\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. CImg \ub294 \uc774\ubbf8\uc9c0\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc744 \uc81c\uacf5\ud558\uc5ec \ub2e4\uc591\ud55c \ud53d\uc140 \ud0c0\uc785( bool , char , int , float \ub4f1)\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\ub2e4. CImg \ub294 \uc5ec\ub7ec \uc774\ubbf8\uc9c0\ub97c \uc190\uc27d\uac8c \ub2e4\ub8f0 \uc218 \uc788\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4. CImg \ub294 thread-safe \ud558\ub2e4. CImg \ub294 \uac00\ubccd\ub2e4. CImg \ub294 \ub2e8\uc9c0 \ud558\ub098\uc758 \ud5e4\ub354\ud30c\uc77c CImg.h \ub85c \uad6c\uc131\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. CImg \uc5d0\ub294 \uc624\uc9c1 4 \uac00\uc9c0 \ud074\ub798\uc2a4\ub9cc \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. CImg \ub294 \ub2e4\ub978 \uc758\uc874\uc131 \uc5c6\uc774 \uc21c\uc804\ud788 STL \uacfc \uc2dc\uc2a4\ud15c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub9cc\uc744 \uc0ac\uc6a9\ud55c\ub2e4. CImg \ub294 \ubb34\ub8cc\uc774\uace0 \uc624\ud508\uc18c\uc2a4\uc774\ub2e4. References : http://cimg.eu","title":"CImg"},{"location":"sync/fewshot/step1-3/#installation","text":"git clone --depth=1 https://github.com/dtschump/CImg.git \ub85c CImg.h \ub97c \uac00\uc838\uc628 \ud6c4 \uadf8\ub0e5 #include \"/path/to/CImg.h\" \ud5e4\ub354\ub97c \ud3ec\ud568\uc2dc\ud0a4\uba74 \ub41c\ub2e4. \ub2e8\uc9c0 \ud5e4\ub354 \ud30c\uc77c\uc744 \ud3ec\ud568\uc2dc\ud0a4\ub294 \uac83\uc774 \uc124\uce58\uc758 \ub05d\uc774\ub2e4. \uadf8\ub9ac\uace0 \ud3b8\uc758\ub97c \uc704\ud558\uc5ec \uc774\ub984\uacf5\uac04 cimg_library \ub97c \uc0ac\uc6a9\ud558\uba74 \ub41c\ub2e4. \uadf8\ub7ec\ub2c8\uae4c using namespace cimg_library ; \ub97c \ud3ec\ud568\uc2dc\ud0a4\uba74 \ub41c\ub2e4.","title":"Installation"},{"location":"sync/fewshot/step1-3/#getting-started","text":"\ub2e4\uc74c\uc758 \uc608\uc81c \ucf54\ub4dc\ub97c \ubcf4\uc790. lena.png \ub294 http://optipng.sourceforge.net/pngtech/img/lena.png \uc5d0\uc11c \uc5bb\uc744 \uc218 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \"CImg.h\" #include <iostream> using namespace cimg_library ; using namespace std ; int main ( int c , char ** v ) { CImg < unsigned char > lena ( \"lena.png\" ); cout << \"width: \" << lena . width () << endl ; cout << \"height: \" << lena . height () << endl ; cout << \"depth: \" << lena . depth () << endl ; cout << \"channels: \" << lena . spectrum () << endl ; cout << \"size: \" << lena . size () << endl ; cout << \"pixel type: \" << lena . pixel_type () << endl ; lena . print (); return 0 ; } 8 : \ud2b8\ub8e8 \uceec\ub7ec RGB \uc774\ubbf8\uc9c0\uc778 lena.png \ub97c \uc77d\uace0 unsigned char \ub85c \uc77d\ub294\ub2e4. \uc774\ubbf8\uc9c0\ub294 \ubcf4\ud1b5 \uc774\ucc98\ub7fc unsigned char \ub85c \uc77d\uc73c\uba74 \ub41c\ub2e4. \uc65c\ub0d0\ud558\uba74 \uac01 \ucc44\ub110\uc774 0~255 \uc758 \uac12\uc744 \uac16\uae30 \ub54c\ubb38\uc774\ub2e4. \ub9cc\uc57d char \ub85c \uc77d\uc73c\uba74 \ucc44\ub110\uc758 \uac12\uc774 -128~127 \uc758 \uac12\uc744 \uac16\uac8c \ub418\ubc84\ub9b0\ub2e4. 9-15 : CImg \uc758 API \ub97c \ucc38\uace0\ud558\uba74 \uc774\ubbf8\uc9c0\uc758 \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc5bb\uc744 \uc218 \uc788\ub294 \ud568\uc218\ub4e4\uc774 \uc788\ub2e4. \uadf8\ub7ec\ud55c \ud568\uc218\ub4e4\ub85c \uc704\uc640 \uac19\uc740 \ucf54\ub4dc\uac00 \uad6c\uc131\ub418\uc5c8\ub2e4. \uc774 \ud504\ub85c\uadf8\ub7a8\uc744 main.cpp \ud30c\uc77c\uc5d0 \uc800\uc7a5\ud55c\ub2e4\uba74 \ub9ac\ub205\uc2a4 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucef4\ud30c\uc77c\ud558\uace0 \uc2e4\ud589\ud558\uba74 \ub41c\ub2e4. $ g++ main.cpp -O2 -lm -lpthread -lX11 $ ./a.out width: 512 height: 512 depth: 1 channels: 3 size: 786432 pixel type: unsigned char CImg<unsigned char>: this = 0x7ffdba95e5a0, size = ( 512 ,512,1,3 ) [ 768 Kio ] , data = ( unsigned char* ) 0x7fe294140010..0x7fe29420000f ( non-shared ) = [ 226 226 223 223 226 226 228 227 ... 88 85 80 89 77 79 81 81 ] , min = 3 , max = 255 , mean = 128 .228, std = 58 .9838, coords_min = ( 264 ,198,0,1 ) , coords_max = ( 445 ,51,0,0 ) . width() \ud568\uc218\uac00 512 \ub97c \ubc18\ud658\ud588\ub2e4. \uc774\uac83\uc740 \uc774\ubbf8\uc9c0\uc758 \uac00\ub85c( \\(x\\) \ucd95) \uae38\uc774\ub97c \ub73b\ud55c\ub2e4. height() \ud568\uc218\uac00 512 \ub97c \ubc18\ud658\ud588\ub2e4. \uc774\uac83\uc740 \uc774\ubbf8\uc9c0\uc758 \uc138\ub85c( \\(y\\) \ucd95) \uae38\uc774\ub97c \ub73b\ud55c\ub2e4. depth() \ud568\uc218\uac00 1 \ub97c \ubc18\ud658\ud588\ub2e4. \uc774\uac83\uc740 \uc774\ubbf8\uc9c0\uc758 \ud53d\uc140 \uc815\ubc00\ub3c4( \\(z\\) \ucd95)\uc744 \ub73b\ud55c\ub2e4. \ud558\uc9c0\ub9cc 1 \ube44\ud2b8\ub97c \ub73b\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c 1 \ubc14\uc774\ud2b8\ub97c \ub73b\ud558\ub294 \uac83\uc774\ubbc0\ub85c \uac01 \ucc44\ub110\uc774 8 \ube44\ud2b8\uc758 \ud53d\uc140 \uc815\ubc00\ub3c4\ub97c \uac16\ub294\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \uadf8\ub7f0\ub370 \ud2b8\ub8e8 \uceec\ub7ec RGB \uc774\ubbf8\uc9c0\uc758 \ud53d\uc140 \uc815\ubc00\ub3c4\ub294 24 \ub77c\uace0 \ud588\uc5c8\ub2e4. \ud558\uc9c0\ub9cc spectrum() \ud568\uc218\uac00 3 \uc744 \ubc18\ud658\ud558\uc600\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \ucc44\ub110\uc774 3 \uac1c \uc774\ubbc0\ub85c \\(3 \\times 8 = 24\\) \ub85c\uc368 \ud53d\uc140 \uc815\ubc00\ub3c4\uac00 24 \uac00 \ub41c\ub2e4. References : http://cimg.eu/reference/group__cimg__tutorial.html","title":"Getting Started"},{"location":"sync/fewshot/step1-3/#_1","text":"CImg \ub294 \uc0dd\uc131\ub420 \ub54c \uc774\ubbf8\uc9c0\uc758 \ubaa8\ub4e0 \ud53d\uc140\uac12\uc744 \uba54\ubaa8\ub9ac\uc5d0 \ud55c\ubc88\uc5d0 \uc800\uc7a5\ud55c\ub2e4. CImg \ub294 \uae30\ubcf8\uc801\uc73c\ub85c 4 \ucc28\uc6d0( width , height , depth , dim ) \ubc30\uc5f4\uc774\ub2e4. \uadf8\ub9ac\uace0 \uc774 \ud53d\uc140\uac12\ub4e4\uc774 \uc2e4\uc81c\ub85c \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ub420 \ub54c\ub294 width * height * depth * dim \uc758 \ud06c\uae30\uc758 \uc120\ud615 \ubc30\uc5f4( 1 \ucc28\uc6d0 \ubc30\uc5f4)\ub85c \uc800\uc7a5\ub41c\ub2e4. \uadf8\ub7ec\ub2c8\uae4c CImg<T> \ub85c \uc774\ubbf8\uc9c0 \uac1d\uccb4\uac00 \uc0dd\uc131\ub418\uba74 width * height * depth * dim * sizeof(T) \ubc14\uc774\ud2b8\uac00 \ud560\ub2f9\ub41c\ub2e4. \uc774\ub807\uac8c \ud53d\uc140\ub4e4\uc774 \uc800\uc7a5\ub41c \uba54\ubaa8\ub9ac\uc758 \uc8fc\uc18c\uac12\uc740 CImg<T>::data() \uba54\uc18c\ub4dc\uac00 \ubc18\ud658\ud55c\ub2e4. \uc774\uac83\uc744 T* \uc5d0 \uc800\uc7a5\ud558\uba74 \ub41c\ub2e4.","title":"\ud53d\uc140 \uc800\uc7a5 \ubc29\uc2dd"},{"location":"sync/fewshot/step1-3/#image-loop","text":"CImg \ub294 \ud53d\uc140 \ubc84\ud37c \ub8e8\ud504, \ucc28\uc6d0 \ub8e8\ud504 \ub9e4\ud06c\ub85c\ub97c \uc81c\uacf5\ud55c\ub2e4. \uac00\ub839 cimg_forX(img,x) \uc740 for ( int x = 0 ; x < img . width (); ++ x ) \uc640 \ub611\uac19\ub2e4. CImg \uc758 \uc774 \uae30\ub2a5\uc740 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud560 \ub54c \ud3b8\ud558\uac8c \uc0ac\uc6a9\ub420 \uc218 \uc788\uc744 \uac83 \uac19\ub2e4. Example 1 2 3 CImg < unsigned char > img ( 256 , 256 , 1 , 3 ); // Define a 256x256 color image cimg_forXYC ( img , x , y , c ) { img ( x , y , c ) = ( x + y ) * ( c + 1 ) / 6 ; } img . display ( \"Color gradient\" ); Success \uc774\ub85c\uc368 \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub4dc\ub97c \ub300\ucda9 \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\uc0c1\ud574\ubcfc \uc218 \uc788\uc744\uac83 \ud558\ub2e4. 1 2 3 4 5 6 CImg < unsigned char > lena ( \"lena.png\" ); Tensor < float > t ; cimg_forXYZC ( lena , x , y , z , c ) { t [ Index3D ( Shape , x , y , c )] = static_cast < float > ( img ( x , y , z , c )); } \uadf8\ub7f0\ub370 \ucd95\uc774 1 \uc77c \uacbd\uc6b0 \uc88c\ud45c\ub97c \uc0dd\ub7b5\ud574\ub3c4 \ub41c\ub2e4\uace0 \ud588\uc73c\ub2c8\uae4c \ub2e4\uc74c\uacfc \uac19\uc774 \ub354\uc6b1 \uac04\ub7b5\ud558\uac8c \uc9e4 \uc218\ub3c4 \uc788\uc744 \uac83 \uac19\ub2e4. 1 2 3 4 5 6 CImg < unsigned char > lena ( \"lena.png\" ); Tensor < float > t ; cimg_forXYC ( lena , x , y , c ) { t [ Index3D ( Shape , x , y , c )] = static_cast < float > ( img ( x , y , c )); } References : http://cimg.eu/reference/group__cimg__loops.html","title":"Image Loop"},{"location":"sync/fewshot/step1-3/#cimg_1","text":"CImg \uac00 \ucda9\ubd84\ud788 \uad1c\ucc2e\uc740 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 \uac83 \uac19\uc73c\ub2c8 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \ucda9\ubd84\ud788 \uac80\uc99d\ub41c \ud30c\uc774\uc36c \ud328\ud0a4\uc9c0\ub97c \ud1b5\ud558\uc5ec \uc774\ubbf8\uc9c0\ub97c \uc77d\ub294 \uac83\uc744 \ube44\uad50\ud558\uba74\uc11c CImg \uac00 \ud53d\uc140\uc744 \uc798 \uc800\uc7a5\ud558\uace0 \uc788\ub294\uc9c0 \ud14c\uc2a4\ud2b8\ud574\ub3c4\ub85d \ud558\uc790. \uba3c\uc800 CImg \ub85c \ub2e4\uc74c\uacfc \uac19\uc740 \uac04\ub2e8\ud55c \ud504\ub85c\uadf8\ub7a8\uc744 \ub9cc\ub4e4\uc5b4\ubcf8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include \"CImg.h\" #include <iostream> using namespace cimg_library ; using namespace std ; int main ( int c , char ** v ) { CImg < float > lena ( \"lena.png\" ); cout << \"R of (0, 0): \" << lena ( 0 , 0 , 0 ) << endl ; cout << \"R of (0, 1): \" << lena ( 1 , 0 , 0 ) << endl ; cout << \"R of (27, 199): \" << lena ( 199 , 27 , 0 ) << endl ; cout << \"G of (0, 0): \" << lena ( 0 , 0 , 1 ) << endl ; cout << \"G of (381, 501): \" << lena ( 501 , 381 , 1 ) << endl ; cout << \"B of (0, 0): \" << lena ( 0 , 0 , 2 ) << endl ; cout << \"B of (1, 0): \" << lena ( 0 , 1 , 2 ) << endl ; cout << \"B of (144, 9): \" << lena ( 9 , 144 , 2 ) << endl ; return 0 ; } 9-16 : \\((0, 0), (0, 1), (27, 199)\\) \uc758 R \uac12\uacfc \\((0, 0), (381, 501)\\) \uc758 G \uac12\uacfc \\((0, 0), (1, 0), (144, 9)\\) \uc758 B \uac12\uc744 \ucd9c\ub825\ud574\ubcf8\ub2e4. \ucd9c\ub825 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ g++ main.cpp -O2 -lm -lpthread -lX11 $ ./a.out R of ( 0 , 0 ) : 226 R of ( 0 , 1 ) : 226 R of ( 27 , 199 ) : 211 G of ( 0 , 0 ) : 137 G of ( 381 , 501 ) : 179 B of ( 0 , 0 ) : 125 B of ( 1 , 0 ) : 125 B of ( 144 , 9 ) : 72 \uc774\uc81c Python \ud328\ud0a4\uc9c0 imageio \ub97c \ud1b5\ud558\uc5ec \ub611\uac19\uc740 \uc774\ubbf8\uc9c0\ub97c \uc77d\uace0 \uac19\uc740 \uc88c\ud45c\uac12\uc744 \ucd9c\ub825\ud574\ubcf8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \uac04\ub2e8\ud55c Python \ud504\ub85c\uadf8\ub7a8\uc744 \ub9cc\ub4e4\uace0 test_cimg.py \ub85c \uc800\uc7a5\ud558\uc790. import imageio lena = imageio . imread ( \"lena.png\" ) print ( \"R of (0, 0):\" , lena [ 0 , 0 , 0 ]) print ( \"R of (0, 1):\" , lena [ 0 , 1 , 0 ]) print ( \"R of (27, 199):\" , lena [ 27 , 199 , 0 ]) print ( \"G of (0, 0):\" , lena [ 0 , 0 , 1 ]) print ( \"G of (381, 501):\" , lena [ 381 , 501 , 1 ]) print ( \"B of (0, 0):\" , lena [ 0 , 0 , 2 ]) print ( \"B of (1, 0):\" , lena [ 1 , 0 , 2 ]) print ( \"B of (144, 9):\" , lena [ 144 , 9 , 2 ]) \ucd9c\ub825 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. $ python test_cimg.py R of ( 0 , 0 ) : 226 R of ( 0 , 1 ) : 226 R of ( 27 , 199 ) : 211 G of ( 0 , 0 ) : 137 G of ( 381 , 501 ) : 179 B of ( 0 , 0 ) : 125 B of ( 1 , 0 ) : 125 B of ( 144 , 9 ) : 72 CImg \ud504\ub85c\uadf8\ub7a8\uc758 \ucd9c\ub825 \uacb0\uacfc\uc640 \uc644\uc804\ud788 \ub611\uac19\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.","title":"CImg \ud14c\uc2a4\ud2b8"},{"location":"sync/fewshot/step1-3/#coding-data-tensor","text":"\ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc740 (1) \ub370\uc774\ud130\uc14b\uc744 \uc801\uc808\ud55c \ubc29\uc2dd\uc73c\ub85c \uc77d\uace0 (2) \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ud55c \ub2e4\uc74c (3) Tensor \uac1d\uccb4\ub97c \ub370\uc774\ud130\uc14b \ud615\uc0c1\uc5d0 \ub9de\ucdb0\uc11c \uc801\uc808\ud788 \ub9cc\ub4e4\uace0 (4) \uadf8\ub0e5 Tensor[Index5D(i1, i2, i3, i4, i5)] \ub77c\ub294 \uc2dd\uc73c\ub85c \ubcf5\uc0ac\ud558\ub294 \uac83\uc774\uc5c8\ub2e4. \uadf8\ub7f0\ub370 \uc774\uc81c \uc6b0\ub9ac\ub294 \ub514\uc9c0\ud138 \uc774\ubbf8\uc9c0\uac00 \uc5b4\ub5a4 \ud615\ud0dc\ub85c \ucef4\ud4e8\ud130\uc5d0 \uc800\uc7a5\ub418\ub294\uc9c0, \uadf8\ub9ac\uace0 .png \ud30c\uc77c \ud3ec\ub9f7\uc740 \uc5b4\ub5bb\uac8c \ub418\uc5b4 \uc788\ub294\uc9c0, \uadf8\ub9ac\uace0 CImg \ub85c .png \ud30c\uc77c\uc744 \uc77d\uace0 \uc5b4\ub5bb\uac8c \ud53d\uc140\uac12\ub4e4\uc744 \uc815\ud655\ud55c \uc88c\ud45c\ub85c \ucc38\uc870\ud560 \uc218 \uc788\ub294\uc9c0 \uc54c\uc558\ub2e4. \uadf8\ub7ec\ubbc0\ub85c CasiaWebFace \uc758 .png \ub370\uc774\ud130\uc14b\uc744 Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ubcf8\uaca9\uc801\uc778 \ucf54\ub529\uc744 \uc2dc\uc791\ud560 \uc218 \uc788\ub2e4.","title":"Coding: Data &rarr; Tensor"},{"location":"sync/fewshot/step1-3/#convert-first-png-tensor","text":"\uba3c\uc800 \uc6b0\ub9ac\ub294 \uc9c0\uae08\uae4c\uc9c0\uc758 \ubd84\uc11d\uacfc \ud559\uc2b5\uc744 \uae30\ubc18\uc73c\ub85c CasiaWebFace \ub370\uc774\ud130\uc14b \uc911 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 .png \ud30c\uc77c\uc744 \uc77d\uc5b4\uc11c Tensor \ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub4dc\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc27d\uac8c \ub9cc\ub4e4 \uc218 \uc788\uac8c \ub418\uc5c8\ub2e4. \ub2e4\uc74c \ucf54\ub4dc\uc5d0\uc11c\ub294 .png \ub97c Tensor \ub85c \ubcc0\ud658\ud560 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc81c\ub300\ub85c \ubcc0\ud658\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud558\uc5ec CImg \uac1d\uccb4\uc640 Tensor \uac1d\uccb4\uc758 \uba54\ud0c0\ub370\uc774\ud130\uc640 \uc2e4\uc81c\ub370\uc774\ud130\ub97c \ube44\uad50\ud574\ubcf4\uc558\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 #include <iostream> #include <fstream> #include <iterator> #include <vector> #include <dirent.h> #include <sys/types.h> #include \"CImg.h\" #include \"WICWIU/WICWIU_src/Tensor.hpp\" using namespace cimg_library ; DIR * getDirList ( const char * dirName ) { DIR * dir ; if (( dir = opendir ( dirName )) == NULL ) throw std :: invalid_argument ( \"could not open directory\" ); return dir ; } void test_convertFirstCasia2Tensor (); int main ( int argc , char const * argv []) { test_convertFirstCasia2Tensor (); return EXIT_SUCCESS ; } void test_convertFirstCasia2Tensor () { DIR * dir ; std :: string casiaTrainDirPath = \"/tmp/casia_train\" ; std :: string casiaTrainFirstDirPath ; std :: string casiaTrainFirstImagePath ; // // Get first directory of casia_train // try { dir = getDirList ( casiaTrainDirPath . c_str ()); if ( dir == nullptr ) throw ; struct dirent * ent ; for ( int idx = 0 ; ( ent = readdir ( dir )) != NULL ; idx ++ ) { if ( idx == 2 ) // first index (because: 0 -> . 1 -> .. 2 -> first path) { casiaTrainFirstDirPath = casiaTrainDirPath + \"/\" + std :: string ( ent -> d_name ); } } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } // // Get first image of first directory // try { dir = getDirList ( casiaTrainFirstDirPath . c_str ()); if ( dir == nullptr ) throw ; struct dirent * ent ; for ( int idx = 0 ; ( ent = readdir ( dir )) != NULL ; idx ++ ) { if ( idx == 2 ) // first index (because: 0 -> . 1 -> .. 2 -> first path) { casiaTrainFirstImagePath = casiaTrainFirstDirPath + \"/\" + std :: string ( ent -> d_name ); } } closedir ( dir ); } catch ( const std :: invalid_argument & e ) { std :: cerr << e . what () << std :: endl ; } // // Data to Tensor // CImg < unsigned char > casiaTrainFirstImage ( casiaTrainFirstImagePath . c_str ()); Tensor < unsigned char > * casiaTrainFirstTensor = \\ new Tensor < unsigned char > ( casiaTrainFirstImage . width (), casiaTrainFirstImage . height (), casiaTrainFirstImage . spectrum () ); Shape * casiaTrainFirstTensorShape = casiaTrainFirstTensor -> GetShape (); cimg_forXYC ( casiaTrainFirstImage , x , y , c ) { ( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , x , y , c )] = \\ casiaTrainFirstImage ( x , y , c ); } std :: cout << \"##########################################\" << std :: endl ; std :: cout << \"######### Meta data comparison ###########\" << std :: endl ; std :: cout << \"##########################################\" << std :: endl ; std :: cout << std :: endl ; std :: cout << \"CImg width: \" << casiaTrainFirstImage . width () << std :: endl ; std :: cout << \"CImg height: \" << casiaTrainFirstImage . height () << std :: endl ; std :: cout << \"CImg depth: \" << casiaTrainFirstImage . depth () << std :: endl ; std :: cout << \"CImg channels: \" << casiaTrainFirstImage . spectrum () << std :: endl ; std :: cout << \"CImg size: \" << casiaTrainFirstImage . size () << std :: endl ; std :: cout << \"CImg pixel type: \" << casiaTrainFirstImage . pixel_type () << std :: endl ; casiaTrainFirstImage . print (); std :: cout << std :: endl ; std :: cout << \"Tensor shape: \" << casiaTrainFirstTensorShape << std :: endl ; std :: cout << \"Tensor rank: \" << casiaTrainFirstTensor -> GetRank () << std :: endl ; std :: cout << \"Tensor dim(0): \" << casiaTrainFirstTensor -> GetDim ( 0 ) << std :: endl ; std :: cout << \"Tensor dim(1): \" << casiaTrainFirstTensor -> GetDim ( 1 ) << std :: endl ; std :: cout << \"Tensor dim(2): \" << casiaTrainFirstTensor -> GetDim ( 2 ) << std :: endl ; std :: cout << \"Tensor Capacity: \" << casiaTrainFirstTensor -> GetCapacity () << std :: endl ; std :: cout << std :: endl ; std :: cout << \"##########################################\" << std :: endl ; std :: cout << \"######### Real data comparison ###########\" << std :: endl ; std :: cout << \"##########################################\" << std :: endl ; std :: cout << std :: endl ; std :: cout << \"CImg R of (0, 0): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 0 , 0 , 0 )) << std :: endl ; std :: cout << \"CImg R of (0, 1): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 1 , 0 , 0 )) << std :: endl ; std :: cout << \"CImg R of (27, 159): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 159 , 27 , 0 )) << std :: endl ; std :: cout << \"CImg G of (0, 0): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 0 , 0 , 1 )) << std :: endl ; std :: cout << \"CImg G of (31, 51): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 51 , 31 , 1 )) << std :: endl ; std :: cout << \"CImg B of (0, 0): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 0 , 0 , 2 )) << std :: endl ; std :: cout << \"CImg B of (1, 0): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 0 , 1 , 2 )) << std :: endl ; std :: cout << \"CImg B of (144, 9): \" << static_cast < unsigned int > ( casiaTrainFirstImage ( 9 , 144 , 2 )) << std :: endl ; std :: cout << std :: endl ; std :: cout << \"Tensor R of (0, 0): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 0 , 0 , 0 )]) << std :: endl ; std :: cout << \"Tensor R of (0, 1): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 1 , 0 , 0 )]) << std :: endl ; std :: cout << \"Tensor R of (27, 159): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 159 , 27 , 0 )]) << std :: endl ; std :: cout << \"Tensor G of (0, 0): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 0 , 0 , 1 )]) << std :: endl ; std :: cout << \"Tensor G of (31, 51): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 51 , 31 , 1 )]) << std :: endl ; std :: cout << \"Tensor B of (0, 0): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 0 , 0 , 2 )]) << std :: endl ; std :: cout << \"Tensor B of (1, 0): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 0 , 1 , 2 )]) << std :: endl ; std :: cout << \"Tensor B of (144, 9): \" << static_cast < unsigned int > (( * casiaTrainFirstTensor )[ Index3D ( casiaTrainFirstTensorShape , 9 , 144 , 2 )]) << std :: endl ; std :: cout << std :: endl ; } 11-17 , 29-80 : \uc774 \ucf54\ub4dc\ub4e4\uc740 Step 1. Data \u2192 Tensor: Analysis: LFW 1 \uc5d0\uc11c \uc774\ubbf8 \uc124\uba85\ud558\uc600\ub2e4. 85 : CasiaWebFace \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 .png \ub370\uc774\ud130\ub97c CImg \ub85c \uc77d\ub294\ub2e4. 87-92 : .png \uc758 \\(x\\) \ucd95, \\(y\\) \ucd95, \\(c\\) \ucd95 \uc815\ubcf4\ub97c \ud1b5\ud558\uc5ec Tensor \ub97c \uc0dd\uc131\ud55c\ub2e4. 95-98 : \ub370\uc774\ud130\ub97c Tensor \uc5d0 \ubcf5\uc0ac\ud55c\ub2e4. 100-120 : CImg \uac1d\uccb4\uc640 Tensor \uc758 \uba54\ud0c0\ub370\uc774\ud130\ub97c \ube44\uad50\ud55c\ub2e4. 122-145 : CImg \uac1d\uccb4\uc640 Tensor \uc758 \uc2e4\uc81c\ub370\uc774\ud130\ub97c \ube44\uad50\ud55c\ub2e4. \ucd9c\ub825 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. Success \uc774\ub85c\uc368 \uc6b0\ub9ac\ub294 \uc131\uacf5\uc801\uc73c\ub85c CasiaWebFace \uc758 \uccab\ubc88\uc9f8 \ub514\ub809\ud1a0\ub9ac\uc758 \uccab\ubc88\uc9f8 .png \ub370\uc774\ud130\ub97c Tensor \ub85c \ubcc0\ud658\ud558\uc600\ub2e4.","title":"Convert first .png &rarr; Tensor"},{"location":"sync/fewshot/step2/","text":"Info \uc774\uacf3\uc740 fewshot-learning \uc744 \uad6c\ud604\ud558\uae30 \uc704\ud55c WICWIU \uac1c\ubc1c\ud300\uc758 WICWIU \ubd84\uc11d/\ucf54\ub529 \uacfc\uc815\uc744 \uae30\ub85d\ud574\ub450\ub294 \uacf3\uc785\ub2c8\ub2e4. WICWIU \uc758 \ud559\uc2b5 \uacfc\uc815\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774\ub8e8\uc5b4\uc84c\ub2e4\ub294 \uac83\uc744 \uc774\ubbf8 \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4. Step 1. \ud559\uc2b5 \ub370\uc774\ud130 \u2192 Tensor Step 2. \uc21c\uc804\ud30c Step 3. \uc5ed\uc804\ud30c Step 4. Weight \ud30c\ub77c\ubbf8\ud130 \uac31\uc2e0 \uc5ec\uae30\ub294 fewshot \ud300\uc774 \" Step 2. \uc21c\uc804\ud30c \" \uc744 \uad6c\ud604\ud558\uae30 \uc704\ud55c \uacfc\uc815\uc744 \uae30\ub85d\ud574\ub450\ub294 \uacf3\uc785\ub2c8\ub2e4. \uc21c\uc804\ud30c\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub294 FaceNet \uc5d0 \ub300\ud55c \uc774\ud574\uac00 \ud544\uc694\ud558\ubbc0\ub85c FaceNet \ub17c\ubb38\uc744 \uc77d\uc5b4\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc2e4\uc81c \ub17c\ubb38\uc744 \uc77d\uae30 \uc804\uc5d0 \uc5bc\uad74 \uc778\uc2dd\uc5d0 \ub300\ud55c \ubc30\uacbd\uc9c0\uc2dd\uc774 \ubd80\uc871\ud558\uc5ec Keras \ub85c FaceNet \uc744 \uad6c\ud604\ud558\uc5ec \uc5bc\uad74 \uc778\uc2dd \uc2dc\uc2a4\ud15c\uc744 \uac1c\ubc1c\ud558\ub294 \ube14\ub85c\uadf8 \uae00 \uc744 \ucc38\uace0\ud558\uba74\uc11c FaceNet \uc744 \uc774\ud574\ud558\uae30 \uc704\ud55c \uc0ac\uc804\uc791\uc5c5\uc744 \ud574\ubcf4\uc558\ub2e4. Info FaceNet \uc0ac\uc804\uc9c0\uc2dd\uacfc \ub17c\ubb38 \uc815\ub9ac\ub294 \uc774\uacf3 \uc73c\ub85c \uc774\ub3d9\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c FaceNet \uc744 \uc774\ud574\ud574\ubcf4\uc558\ub2e4. \uc5b4\ub54c\uc694 \ucc38 \uc27d\uc8e0? Analysis: Forward Propagation \u00b6 \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 MNIST \ub97c CNN \uc73c\ub85c \ud559\uc2b5\ud558\ub294 \uac83\uc744 \uc5b4\ub5bb\uac8c \uad6c\ud604\ud588\ub294\uc9c0 \ubd84\uc11d \ubd84\uc11d \uc9c0\ub3c4 MNIST/main.cpp : main \ud568\uc218 MNIST/main.cpp : main \ud568\uc218 \u00b6 \ubd84\uc11d \ubaa9\ud45c MNIST \ub370\uc774\ud130\uc14b CNN \ud559\uc2b5 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 int main ( int argc , char const * argv []) { ... // create input, label data placeholder -> Tensorholder Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 10 , \"label\" ); // ======================= Select net =================== NeuralNetwork < float > * net = new my_CNN ( x , label ); // ======================= Prepare Data =================== MNISTDataSet < float > * train_dataset = new MNISTDataSet < float > ( \"data/train-images-idx3-ubyte\" , \"data/train-labels-idx1-ubyte\" , TRAINING ); DataLoader < float > * train_dataloader = new DataLoader < float > ( train_dataset , BATCH , TRUE , 20 , FALSE ); MNISTDataSet < float > * test_dataset = new MNISTDataSet < float > ( \"data/t10k-images-idx3-ubyte\" , \"data/t10k-labels-idx1-ubyte\" , TESTING ); DataLoader < float > * test_dataloader = new DataLoader < float > ( test_dataset , BATCH , FALSE , 20 , FALSE ); net -> SetDeviceGPU ( GPUID ); net -> PrintGraphInformation (); ... for ( int i = epoch + 1 ; i < EPOCH ; i ++ ) { if (( i + 1 ) % 50 == 0 ) { float lr = net -> GetOptimizer () -> GetLearningRate (); net -> GetOptimizer () -> SetLearningRate ( lr * 0.1 ); } // ======================= Train ======================= float train_accuracy = 0.f ; float train_avg_loss = 0.f ; net -> SetModeTrain (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { std :: vector < Tensor < float > *> * temp = train_dataloader -> GetDataFromGlobalBuffer (); Tensor < float > * x_t = ( * temp )[ 0 ]; Tensor < float > * l_t = ( * temp )[ 1 ]; delete temp ; x_t -> SetDeviceGPU ( GPUID ); l_t -> SetDeviceGPU ( GPUID ); net -> FeedInputTensor ( 2 , x_t , l_t ); net -> ResetParameterGradient (); net -> Train (); train_accuracy += net -> GetAccuracy (); train_avg_loss += net -> GetLoss (); ... } // ======================= Test ====================== float test_accuracy = 0.f ; float test_avg_loss = 0.f ; net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_TEST ; j ++ ) { std :: vector < Tensor < float > *> * temp = test_dataloader -> GetDataFromGlobalBuffer (); Tensor < float > * x_t = ( * temp )[ 0 ]; Tensor < float > * l_t = ( * temp )[ 1 ]; delete temp ; x_t -> SetDeviceGPU ( GPUID ); l_t -> SetDeviceGPU ( GPUID ); net -> FeedInputTensor ( 2 , x_t , l_t ); net -> Test (); test_accuracy += net -> GetAccuracy (); test_avg_loss += net -> GetLoss (); ... } } ... return 0 ; } \ubd84\uc11d \uacb0\ub860 main \ud568\uc218\uc5d0\uc11c\ub294 Tensorholder \ub97c \uc0dd\uc131\ud558\uc5ec my_CNN \uc5d0 \uc804\ub2ec\ud558\uc5ec \ubaa8\ub378\uc744 \ub9cc\ub4e0\ub2e4. \uadf8\ub9ac\uace0 MNISTDataSet \uc73c\ub85c \ub370\uc774\ud130\ub97c \uac00\uc838\uc624\uace0 DataLoader \uc5d0 \uc785\ub825\ud558\uc5ec \ub370\uc774\ud130 \ub85c\ub354\ub97c \ub9cc\ub4e0\ub2e4. \uc774\ud6c4 DataLoader::GetDataFromGlobalBuffer \ub85c \ub370\uc774\ud130\ub97c \uac00\uc838\uc640\uc11c my_CNN::FeedInputTensor \ub85c \ubaa8\ub378\uc5d0 \uc785\ub825\ud558\uace0, my_CNN::Train \uc73c\ub85c \ud559\uc2b5\uc744 \ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 Tensorholder , my_CNN \uc774 \uc5b4\ub5a4 \ud074\ub798\uc2a4\uc778\uc9c0 \ubd84\uc11d, MNISTDataSet \uacfc DataLoader \ub85c \uc5b4\ub5bb\uac8c MNIST \ub370\uc774\ud130\uc14b\uc744 \uac00\uc838\uc640\uc11c my_CNN::FeedInputTensor \ub85c \uc785\ub825\ud558\ub294\uc9c0 \ubd84\uc11d, my_CNN::Train \uc73c\ub85c \uc5b4\ub5bb\uac8c \ud559\uc2b5\uc774 \uc9c4\ud589\ub418\ub294\uc9c0 \ubd84\uc11d. \uc774\ub54c Tensorholder \ub294 Operator \ub97c \uc0c1\uc18d\ud558\ubbc0\ub85c \uc774\uac83\ubd80\ud130 \ubd84\uc11d. \ubd84\uc11d \uc9c0\ub3c4 MNIST/main.cpp : main \ud568\uc218 src/Operator.hpp : Operator \uc0dd\uc131\uc790 src/Tensorholder.cpp : Tensorholder \uc0dd\uc131\uc790 MNIST/MNIST.hpp : MNISTDataSet \uc0dd\uc131\uc790 src/DataLoader.hpp : DataLoader \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN::Train \uba54\uc18c\ub4dc src/Operator.cpp : Operator \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c Operator \uc0dd\uc131\uc790 \uc774\ud574\ud558\uae30 main \ud568\uc218\uc758 Tensorholder \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc0dd\uc131\ub41c\ub2e4. Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 10 , \"label\" ); \uadf8\ub7ec\ubbc0\ub85c \ub2e4\uc74c\uc758 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. Tensorholder ( int pTimeSize , int pBatchSize , int pChannelSize , int pRowSize , int pColSize , std :: string pName , int pTrainable = TRUE , int pLoadflag = TRUE ) : Operator < DTYPE > ( pName , pLoadflag ) { this -> Alloc ( pTimeSize , pBatchSize , pChannelSize , pRowSize , pColSize , pTrainable ); } \uadf8\ub7ec\ubbc0\ub85c Operator \uc5d0\uc11c \ub2e4\uc74c\uc758 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. template < typename DTYPE > Operator < DTYPE >:: Operator ( std :: string pName , int pLoadflag ) { m_apOutput = NULL ; m_apInput = NULL ; m_aaResult = NULL ; m_aaGradient = NULL ; m_name = pName ; m_Device = CPU ; m_Mode = TRAIN ; m_isParameter = FALSE ; m_isTrainable = FALSE ; m_idOfDevice = -1 ; m_Loadflag = TRUE ; Alloc (); } Alloc \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: Alloc () { m_apOutput = new Container < Operator < DTYPE > *> (); m_apInput = new Container < Operator < DTYPE > *> (); m_aaResult = new Container < Tensor < DTYPE > *> (); m_aaGradient = new Container < Tensor < DTYPE > *> (); return TRUE ; } \ubd84\uc11d \uacb0\ub860 Operator \ub294 \uba87\uac00\uc9c0 \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud558\uace0 Container \ub97c \uc0dd\uc131\ud558\uc5ec \uba64\ubc84\ubcc0\uc218\ub85c \uc800\uc7a5\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 Container \ub97c \uba3c\uc800 \ubd84\uc11d \ubd84\uc11d \uc9c0\ub3c4 MNIST/main.cpp : main \ud568\uc218 src/Operator.hpp : Operator \uc0dd\uc131\uc790 src/Container.hpp : Container \uc0dd\uc131\uc790 src/Tensorholder.cpp : Tensorholder \uc0dd\uc131\uc790 MNIST/MNIST.hpp : MNISTDataSet \uc0dd\uc131\uc790 src/DataLoader.hpp : DataLoader \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN::Train \uba54\uc18c\ub4dc src/Container.hpp : Container \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c Container \uc0dd\uc131\uc790 \uc774\ud574\ud558\uae30 Container () { m_aElement = NULL ; m_size = 0 ; } \ud544\uc694\ud55c \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud558\uace0 \ub05d\ub0b8\ub2e4. Container \ub294 API \uc8fc\uc11d\uc774 \uc798 \ub2ec\ub824\uc788\ub294\ub370 \ub2e8\uc9c0 \uc778\ub371\uc2a4 \uc811\uadfc\uacfc \uc5ed\uc21c \uc811\uadfc\uc774 \uac00\ub2a5\ud55c queue \ub77c\uace0 \ud55c\ub2e4. Note \uadf8\ub7ec\uba74 std::deque \ub97c \uc4f0\uba74 \uc548\ub420\uae4c. \ubd84\uc11d \uc9c0\ub3c4 MNIST/main.cpp : main \ud568\uc218 src/Operator.hpp : Operator \uc0dd\uc131\uc790 src/Container.hpp : Container \uc0dd\uc131\uc790 src/Tensorholder.cpp : Tensorholder \uc0dd\uc131\uc790 MNIST/MNIST.hpp : MNISTDataSet \uc0dd\uc131\uc790 src/DataLoader.hpp : DataLoader \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN::Train \uba54\uc18c\ub4dc src/Tensorholder.cpp : Tensorholder \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 10 , \"label\" ); \uc704 \ucf54\ub4dc \uc5d0\uc11c\uc758 Tensorholder \uc0dd\uc131\uc790 \uc774\ud574\ud558\uae30 Tensorholder ( int pTimeSize , int pBatchSize , int pChannelSize , int pRowSize , int pColSize , std :: string pName , int pTrainable = TRUE , int pLoadflag = TRUE ) : Operator < DTYPE > ( pName , pLoadflag ) { this -> Alloc ( pTimeSize , pBatchSize , pChannelSize , pRowSize , pColSize , pTrainable ); } Alloc \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 template < typename DTYPE > class Tensorholder : public Operator < DTYPE > { ... int Alloc ( int pTimeSize , int pBatchSize , int pChannelSize , int pRowSize , int pColSize , int pTrainable ) { Tensor < DTYPE > * pTensor = Tensor < float >:: Zeros ( pTimeSize , pBatchSize , pChannelSize , pRowSize , pColSize ); this -> SetResult ( pTensor ); this -> SetIsTensorholder ( TRUE ); this -> SetIsTrainable ( pTrainable ); Shape * shapeOfDelta = new Shape ( pTensor -> GetShape ()); this -> AddGradient ( new Tensor < DTYPE > ( shapeOfDelta )); return TRUE ; } ... } 5: SetResult \ub294 Operator \uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub294\ub370, \ub2e4\uc74c\uacfc \uac19\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: SetResult ( Tensor < DTYPE > * pTensor ) { if ( m_aaResult -> GetSize ()) { Tensor < DTYPE > * temp = m_aaResult -> Pop (); delete temp ; temp = NULL ; } m_aaResult -> Push ( pTensor ); return TRUE ; } Container<Tensor<DTYPE> *> *m_aaResult; \uc758 Container::GetSize \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. template < typename DTYPE > class Container { ... int GetSize () { return m_size ; } ... } m_size \ub294 Container \uc0dd\uc131\uc790\uc5d0\uc11c 0 \uc73c\ub85c \ucd08\uae30\ud654\ub41c \uac83\uc744 \uc774\ubbf8 \ud655\uc778\ud588\ub2e4. template < typename DTYPE > class Container { ... int Push ( DTYPE pElement ) { DTYPE * temp = new DTYPE [ m_size + 1 ]; for ( int i = 0 ; i < m_size ; i ++ ) temp [ i ] = m_aElement [ i ]; temp [ m_size ] = pElement ; if ( m_aElement ) { delete [] m_aElement ; m_aElement = NULL ; } m_aElement = temp ; return TRUE ; } ... } Push \ub294 \ub2e8\uc9c0 m_size + 1 \ub3d9\uc801 \ubc30\uc5f4\uc744 \ud560\ub2f9\ud558\uace0 \uae30\uc874\uc758 \ubc30\uc5f4\uc744 \ubcf5\uc0ac\ud55c \ud6c4 \ub9c8\uc9c0\ub9c9 \uc778\ub371\uc2a4\uc5d0 \ud30c\ub77c\ubbf8\ud130\ub97c \uc800\uc7a5\ud55c\ub2e4. \uacb0\uad6d this->SetResult(pTensor); \ub780 m_aaResult \ub77c\ub294 queue \uc5d0 \uc785\ub825 \ub370\uc774\ud130\uc758 \ud615\uc0c1\uc73c\ub85c \uc0dd\uc131\ub41c Tensor \uac1d\uccb4\ub97c Push \ud55c\ub2e4. 6: Operator \uc758 SetIsTensorholder \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: SetIsTensorholder ( int pIsParameter ) { m_isParameter = pIsParameter ; return TRUE ; } m_isParameter \ub294 \uc0dd\uc131\uc2dc FALSE \ub85c \ucd08\uae30\ud654\ub418\ub294\ub370 \uc774 \ucf54\ub4dc\ub85c TRUE \ub85c \ubc14\ub010\ub2e4. 7: Operator \uc758 SetIsTrainable \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: SetIsTrainable ( int pIsTrainable ) { m_isTrainable = pIsTrainable ; return TRUE ; } m_isTrainable \ub294 \uc0dd\uc131\uc2dc FALSE \ub85c \ucd08\uae30\ud654\ub418\ub294\ub370 \uc774 \ucf54\ub4dc\ub85c TRUE \ub85c \ubc14\ub010\ub2e4. 9: Operator \uc758 AddGradient \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: AddGradient ( Tensor < DTYPE > * pTensor ) { m_aaGradient -> Push ( pTensor ); return TRUE ; } \uacb0\uad6d Operator \uba64\ubc84\ubcc0\uc218\uc778 Container<Tensor<DTYPE> *> *m_aaGradient; \uc5d0 pTensor \ud615\uc0c1\uc758 \uc0c8\ub85c\uc6b4 Tensor \uac1d\uccb4\ub97c Push \ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 Tensorholder \ub294 \uc785\ub825 \ub370\uc774\ud130 \ud615\uc0c1\uc73c\ub85c pTensor \ub97c \ub9cc\ub4e4\uc5b4\uc11c m_aaResult \ud050\uc5d0 \ud478\uc26c\ud558\uace0, \ub3d9\uc77c\ud55c \ud615\uc0c1\uc758 Tensor \ub97c \ub9cc\ub4e4\uc5b4\uc11c m_aaGradient \ud050\uc5d0 Push \ud55c\ub2e4. \uadf8\ub9ac\uace0 m_isParameter \uc640 m_isTrainable \uc744 TRUE \ub85c \ub9cc\ub4e0\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 MNIST/main.cpp : main \ud568\uc218 src/Operator.hpp : Operator \uc0dd\uc131\uc790 src/Container.hpp : Container \uc0dd\uc131\uc790 src/Tensorholder.cpp : Tensorholder \uc0dd\uc131\uc790 MNIST/MNIST.hpp : MNISTDataSet \uc0dd\uc131\uc790 src/DataLoader.hpp : DataLoader \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN::Train \uba54\uc18c\ub4dc src/Module.hpp : Module \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c Module \uc0dd\uc131\uc790 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 template < typename DTYPE > Module < DTYPE >:: Module ( std :: string pName ) : Operator < DTYPE > ( pName ) { m_aaExcutableOperator = NULL ; m_numOfExcutableOperator = 0 ; m_pLastOperator = NULL ; m_idOfDevice = -1 ; Alloc (); } \uc774 \uc0dd\uc131\uc790\uac00 \uc815\uc758\ub418\uc5b4 \uc788\ub294\ub370 Module() \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub418\ubbc0\ub85c \ub514\ud3f4\ud2b8 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. \uadfc\ub370 \ub514\ud3f4\ud2b8 \uc0dd\uc131\uc790\uac00 \uc548\ubcf4\uc774\ub124. \uadf8\ub7f0\ub370 \uc120\uc5b8\ubd80\uc5d0 Module(std::string pName = \"No Name\"); \uc774\ub807\uac8c \uc120\uc5b8\ub418\uc5b4 \uc788\ub354\ub77c. \uadf8\ub798\uc11c \uc774 \uc0dd\uc131\uc790\uac00 \uc798 \ud638\ucd9c\ub41c\ub2e4. 6: template < typename DTYPE > int Module < DTYPE >:: Alloc () { m_apInput = new Container < Operator < DTYPE > *> (); m_apParameter = new Container < Operator < DTYPE > *> (); m_aaExcutableOperator = new Container < Operator < DTYPE > *> (); return TRUE ; } src/NeuralNetwork.hpp : NeuralNetwork \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 template < typename DTYPE > NeuralNetwork < DTYPE >:: NeuralNetwork () : Module < DTYPE > () { m_aLossFunction = NULL ; m_aOptimizer = NULL ; m_Device = CPU ; m_idOfDevice = -1 ; #ifdef __CUDNN__ m_cudnnHandle = NULL ; #endif // if __CUDNN__ Alloc (); } 1: Module() \uc758 \ub514\ud3f4\ud2b8 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. 2: \uba64\ubc84 \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. LossFunction < DTYPE > * m_aLossFunction ; ///< \uc2e0\uacbd\ub9dd\uc758 \uc190\uc2e4\ud568\uc218 Optimizer < DTYPE > * m_aOptimizer ; ///< \uc2e0\uacbd\ub9dd\uc758 Optimizer Device m_Device ; ///< \uc7a5\uce58 \uc0ac\uc6a9 \uad6c\ubd84\uc790, CPU \ub610\ub294 GPU, Device \ucc38\uace0 int m_idOfDevice ; ///< GPU \uc0ac\uc6a9 \uc2dc, \uc0ac\uc6a9\ud558\ub824\ub294 GPU\uc758 \ubc88\ud638. CPU\uc758 \uacbd\uc6b0 -1 9: template < typename DTYPE > int NeuralNetwork < DTYPE >:: Alloc () { return TRUE ; } MNIST/my_CNN.hpp : my_CNN \uc0dd\uc131\uc790 \u00b6 \ubd84\uc11d \ubaa9\ud45c NeuralNetwork < float > * net = new my_CNN ( x , label ); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class my_CNN : public NeuralNetwork < float > { ... public : my_CNN ( Tensorholder < float > * x , Tensorholder < float > * label ) { SetInput ( 2 , x , label ); Operator < float > * out = NULL ; out = new ReShape < float > ( x , 28 , 28 , \"Flat2Image\" ); // ======================= layer 1======================= out = new ConvolutionLayer2D < float > ( out , 1 , 10 , 3 , 3 , 1 , 1 , 0 , FALSE , \"Conv_1\" ); out = new Relu < float > ( out , \"Relu_1\" ); out = new Maxpooling2D < float > ( out , 2 , 2 , 2 , 2 , \"MaxPool_1\" ); // ======================= layer 2======================= out = new ConvolutionLayer2D < float > ( out , 10 , 20 , 3 , 3 , 1 , 1 , 0 , FALSE , \"Conv_2\" ); out = new Relu < float > ( out , \"Relu_2\" ); out = new Maxpooling2D < float > ( out , 2 , 2 , 2 , 2 , \"MaxPool_2\" ); // ======================= layer 3======================= out = new ReShape < float > ( out , 1 , 1 , 5 * 5 * 20 , \"Image2Flat\" ); // ======================= layer 3======================= out = new Linear < float > ( out , 5 * 5 * 20 , 1024 , TRUE , \"Fully-Connected_1\" ); out = new Relu < float > ( out , \"Relu_3\" ); //// ======================= layer 4======================= out = new Linear < float > ( out , 1024 , 10 , TRUE , \"Fully-connected_2\" ); AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , label , \"SCE\" )); // ======================= Select Optimizer =================== SetOptimizer ( new GradientDescentOptimizer < float > ( GetParameter (), 0.001 , 0.9 , MINIMIZE )); } ... }; 5: template < typename DTYPE > int Module < DTYPE >:: SetInput ( int pNumOfInput , ...) { Operator < DTYPE > * temp = NULL ; va_list ap ; va_start ( ap , pNumOfInput ); for ( int i = 0 ; i < pNumOfInput ; i ++ ) { temp = va_arg ( ap , Operator < DTYPE > * ); this -> SetInput ( temp ); } va_end ( ap ); return TRUE ; } Tensorholder \ub97c \uac00\ubcc0\uc778\uc790\ub85c \uc804\ub2ec\ud558\ub294\ub370 Operator \uc758 \uc790\uc2dd \ud074\ub798\uc2a4\uc774\ubbc0\ub85c va_arg \uc5d0\uc11c \uc800\ub807\uac8c \ud0c0\uc785\uc744 \uc804\ub2ec\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\ub2e4. \uc774 \uba54\uc18c\ub4dc\ub97c \ud1b5\ud574 \ub2e4\uc74c\uc758 \uba54\uc18c\ub4dc\uac00 \ud638\ucd9c\ub41c\ub2e4. template < typename DTYPE > Operator < DTYPE > * Module < DTYPE >:: SetInput ( Operator < DTYPE > * pInput ) { m_apInput -> Push ( pInput ); m_InputDegree ++ ; this -> AddEdgebetweenOperators ( pInput ); return pInput ; } m_apInput \uc73c\ub85c Tensorholder \ub97c Push \ud55c\ub2e4. \uc989 x \uc640 label \uc774 \ud478\uc26c\ub41c\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: AddEdgebetweenOperators ( Operator < DTYPE > * pInput ) { this -> AddInputEdge ( pInput ); pInput -> AddOutputEdge ( this ); return TRUE ; } \uc774 \uba54\uc18c\ub4dc\ub85c \ub4e4\uc5b4\uc640\uc11c \uc5e3\uc9c0\ub97c \uc11c\ub85c \uc5f0\uacb0\ud574\uc900\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: AddInputEdge ( Operator < DTYPE > * pInput ) { m_apInput -> Push ( pInput ); ... } template < typename DTYPE > int Operator < DTYPE >:: AddOutputEdge ( Operator < DTYPE > * pOutput ) { m_apOutput -> Push ( pOutput ); ... } \uadfc\ub370 SetInput \uba54\uc18c\ub4dc\uc5d0\uc11c m_apInput->Push(pInput); \uc744 \ud574\uc92c\ub294\ub370 \uc65c AddInputEdge \uc5d0\uc11c \ub610 \ud574\uc8fc\ub294 \uac70\uc9c0? \uc5b4\uca0c\ub4e0 Tensorholder \uc758 \uc544\uc6c3\ud48b\uc774 \uc774 \ud074\ub798\uc2a4 \uc989, my_CNN \uc774 \ub418\uace0, my_CNN \uc758 \uc778\ud48b\uc774 \ud150\uc11c\ud640\ub354\uac00 \ub41c\ub2e4. 7: template < typename DTYPE > class ReShape : public Operator < DTYPE > { ... ReShape ( Operator < DTYPE > * pInput , int pRowSize , int pColSize , std :: string pName , int pLoadflag = TRUE ) : Operator < DTYPE > ( pInput , pName , pLoadflag ) { this -> Alloc ( pInput , 0 , 0 , 0 , pRowSize , pColSize ); } ... } \uc704 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. template < typename DTYPE > class ReShape : public Operator < DTYPE > { ... int Alloc ( Operator < DTYPE > * pInput , int pTimeSize , int pBatchSize , int pChannelSize , int pRowSize , int pColSize ) { Shape * pInputShape = pInput -> GetResult () -> GetShape (); if ( pTimeSize == 0 ) pTimeSize = ( * pInputShape )[ 0 ]; if ( pBatchSize == 0 ) pBatchSize = ( * pInputShape )[ 1 ]; if ( pChannelSize == 0 ) pChannelSize = ( * pInputShape )[ 2 ]; Tensor < DTYPE > * result = new Tensor < DTYPE > ( pInput -> GetResult ()); result -> ReShape ( pTimeSize , pBatchSize , pChannelSize , pRowSize , pColSize ); this -> SetResult ( result ); // copy data this -> SetDelta ( new Tensor < DTYPE > ( pTimeSize , pBatchSize , pChannelSize , pRowSize , pColSize )); return TRUE ; } ... } \uc774 \ucf54\ub4dc\ub294 \ub2e8\uc9c0 1, BATCH, 1, 1, 784 \ud615\uc0c1\uc73c\ub85c \uc0dd\uc131\ub41c \ud150\uc11c\ud640\ub354\ub97c ..., 28, 28 \ud615\uc0c1\uc73c\ub85c \ubc14\uafb8\uc5b4\uc8fc\ub294 \uac83 \uac19\ub2e4. \ucca8\ubd80\ud130 28, 28 \ub85c \ud588\uc73c\uba74 \uc548\ubc14\uafd4\ub3c4 \ub418\uc9c0 \uc54a\ub098? \uadf8\ub9ac\uace0 \uc774\ub807\uac8c int \ub97c \ubc1b\uc744 \ud544\uc694\uc5c6\uc774 \uac00\ubcc0 \ud615\uc0c1\uc744 \ubc1b\uc744 \uc218 \uc788\uc5b4\uc57c \ud560\ud150\ub370. SetResult \ub294 m_aaResult \ub97c \ucd08\uae30\ud654\ud558\uace0 SetDelta \ub294 m_aaGradient \ub97c \ucd08\uae30\ud654\ud55c\ub2e4. 9: template < typename DTYPE > class ConvolutionLayer2D : public Module < DTYPE > { private : public : ConvolutionLayer2D ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pNumKernelRow , int pNumKernelCol , int pStrideRow , int pStrideCol , int pPadding , int use_bias = FALSE , std :: string pName = \"NO NAME\" ) : Module < DTYPE > ( pName ){ Alloc ( pInput , pNumInputChannel , pNumOutputChannel , pNumKernelRow , pNumKernelCol , pStrideRow , pStrideCol , pPadding , pPadding , use_bias , pName ); } \uc880 \uc804\uc5d0 \uc0dd\uc131\ud55c 28, 28 \ud615\uc0c1 \ub370\uc774\ud130\uc640 \uc785\ub825 \ucc44\ub110 1 , \ucd9c\ub825 \ucc44\ub110 10 , \\(3 \\times 3\\) \ucee4\ub110, \uc2a4\ud2b8\ub77c\uc774\ub4dc \\(s = 1 \\times 1\\) , \ud328\ub529 \\(p = 0\\) \uc73c\ub85c \ud569\uc131\uacf1 \uacc4\uce35\uc744 \ub9cc\ub4e0\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 template < typename DTYPE > class ConvolutionLayer2D : public Module < DTYPE > { int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pNumKernelRow , int pNumKernelCol , int pStrideRow , int pStrideCol , int pPaddingRow , int pPaddingCol , int use_bias , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * out = pInput ; Tensorholder < DTYPE > * pWeight = new Tensorholder < DTYPE > ( Tensor < DTYPE >:: Random_normal ( 1 , pNumOutputChannel , pNumInputChannel , pNumKernelRow , pNumKernelCol , 0.0 , 0.02 ), \"Convolution2D_Weight_\" + pName ); out = new Convolution2D < DTYPE > ( out , pWeight , pStrideRow , pStrideCol , pPaddingRow , pPaddingCol , \"Convolution2D_Convolution2D_\" + pName ); if ( use_bias ){ Tensorholder < DTYPE > * pBias = new Tensorholder < DTYPE > ( Tensor < DTYPE >:: Constants ( 1 , 1 , pNumOutputChannel , 1 , 1 , 0 ), \"Convolution2D_Bias_\" + pName ); out = new AddChannelWise < DTYPE > ( out , pBias , \"Convolution2D_Add_\" + pName ); } this -> AnalyzeGraph ( out ); return TRUE ; } }; 3: \uc774\uc804\uc5d0 \uc0dd\uc131\ub41c \ud150\uc11c\ud640\ub354\ub97c pInput \uc73c\ub85c \uc804\ub2ec\ubc1b\uc544 SetInput \uc5d0 \uc804\ub2ec\ud55c\ub2e4. \uc774 \uba54\uc18c\ub4dc\ub294 \uc774\ubbf8 \uc0b4\ud3b4\ubd24\ub4ef\uc774 m_apInput \uc5d0 pInput \uc744 Push \ud558\uace0 AddEdgebetweenOperators \ub85c \ub450 \uc5e3\uc9c0\ub97c \uc11c\ub85c \uc5f0\uacb0\ud55c\ub2e4. 5: \\(\\mu = 0.0, \\sigma = 0.02\\) \ub85c \uc0dd\uc131\ub41c \ub79c\ub364\uac12\uc73c\ub85c \uac00\uc911\uce58 \ucee4\ub110\uc744 \uc0dd\uc131\ud55c\ub2e4. 6: \uc0dd\uc131\ub41c \uac00\uc911\uce58 \ud544\ud130\uc640 \uc2a4\ud2b8\ub77c\uc774\ub4dc, \ud328\ub529 \uc815\ubcf4\ub97c Convolution2D \uac1d\uccb4\uc5d0 \uc804\ub2ec\ud55c\ub2e4. template < typename DTYPE > class Convolution2D : public Operator < DTYPE > { private : int m_stride [ 2 ]; // [0]\uc740 row, [1]\uc740 colunm\uc744 \uac01\uac01 \uc758\ubbf8\ud55c\ub2e4. int m_padding [ 2 ]; // [0]\uc740 height, [1]\uc740 width\ub97c \uac01\uac01 \uc758\ubbf8\ud55c\ub2e4. ... Convolution2D ( Operator < DTYPE > * pInput , Operator < DTYPE > * pWeight , int stride1 , int stride2 , std :: string pName = \"NO NAME\" , int pLoadflag = TRUE ) : Operator < DTYPE > ( pInput , pWeight , pName , pLoadflag ) { Alloc ( pInput , pWeight , stride1 , stride2 , 0 , 0 ); } ... \uc0dd\uc131\uc790\ub294 \ub2e8\uc9c0 Alloc \uba54\uc18c\ub4dc\uc5d0 \ud30c\ub77c\ubbf8\ud130\ub97c \ud3ec\uc6cc\ub529\ud574\uc900\ub2e4. \uadf8\ub9ac\uace0 Operator \uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0 pInput , \uc989 \uae30\uc874\uc5d0 ConvolutionLayer2D \uc758 out \uc73c\ub85c \uc804\ub2ec\ub41c \uac1d\uccb4\ub97c \uc804\ub2ec\ud55c\ub2e4. \ub79c\ub364\uac12\uc73c\ub85c \uc0dd\uc131\ub41c \uac00\uc911\uce58\ub3c4 Operator \uc5d0 \ud568\uaed8 \uc804\ub2ec\ud574\uc900\ub2e4. \uc774 \uacbd\uc6b0 \ub2e4\uc74c\uc758 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. template < typename DTYPE > Operator < DTYPE >:: Operator ( Operator < DTYPE > * pInput0 , Operator < DTYPE > * pInput1 , std :: string pName , int pLoadflag ) { ... Alloc (); AddEdgebetweenOperators ( 2 , pInput0 , pInput1 , pLoadflag ); } \uc989, \ud544\uc694\ud55c \ucd08\uae30\ud654\ub97c \ud55c \ud6c4 \uc804\ub2ec\ub41c \ub450 Operator \ub97c \uc11c\ub85c \uc5f0\uacb0\ud574\uc8fc\uace0 \uc788\ub2e4. \uc774\ud6c4 Alloc \uba54\uc18c\ub4dc\ub85c \uc785\ub825 Operator , \uac00\uc911\uce58 Operator , \uc2a4\ud2b8\ub77c\uc774\ub4dc, \ud328\ub529\uc744 \uc804\ub2ec\ud574\uc900\ub2e4. Note \ud328\ub529\uc740 0 \uc73c\ub85c \ud558\ub4dc\ucf54\ub529\ub418\uc5b4\uc788\ub124. \uc65c\uadf8\ub7f4\uae4c? template < typename DTYPE > class Convolution2D : public Operator < DTYPE > { ... int Alloc ( Operator < DTYPE > * pInput , Operator < DTYPE > * pWeight , int stride1 , int stride2 , int padding1 , int padding2 ) { int outputWidth = 0 ; int outputHeight = 0 ; Shape * shapeOfInput = pInput -> GetResult () -> GetShape (); Shape * shapeOfWeight = pWeight -> GetResult () -> GetShape (); m_stride [ 0 ] = stride1 ; m_stride [ 1 ] = stride2 ; m_padding [ 0 ] = padding1 ; m_padding [ 1 ] = padding2 ; outputHeight = (( * shapeOfInput )[ 3 ] - ( * shapeOfWeight )[ 3 ] + ( 2 * m_padding [ 0 ])) / m_stride [ 0 ] + 1 ; outputWidth = (( * shapeOfInput )[ 4 ] - ( * shapeOfWeight )[ 4 ] + ( 2 * m_padding [ 1 ])) / m_stride [ 1 ] + 1 ; this -> SetResult ( new Tensor < DTYPE > (( * shapeOfInput )[ 0 ], ( * shapeOfInput )[ 1 ], ( * shapeOfWeight )[ 1 ], outputHeight , outputWidth )); this -> SetDelta ( new Tensor < DTYPE > (( * shapeOfInput )[ 0 ], ( * shapeOfInput )[ 1 ], ( * shapeOfWeight )[ 1 ], outputHeight , outputWidth )); return TRUE ; } \ud569\uc131\uacf1 \uacc4\uce35\uc5d0\uc11c \uc2a4\ud2b8\ub77c\uc774\ub4dc\uc640 \ud328\ub529\uc5d0 \ub530\ub978 \ucd9c\ub825 \ub370\uc774\ud130 \ud615\uc0c1\uc744 \uad6c\ud558\ub294 \uacf5\uc2dd\uc5d0 \ub530\ub77c\uc11c outputHeight, outputWidth \ub97c \ucd08\uae30\ud654\ud55c\ub2e4. \uadf8\ub7ec\uace0 \ub098\uc11c \uc801\uc808\ud55c \ud615\uc0c1\uc73c\ub85c Tensor \uac1d\uccb4\ub97c \ub9cc\ub4e4\uace0 m_aaResult \uc640 m_aaGradient \ub97c \uc0dd\uc131\ud574\uc8fc\uace0 \ub05d\ub0b8\ub2e4. 12: \ub9c8\uc9c0\ub9c9\uc73c\ub85c AnalyzeGraph \ub97c \ud638\ucd9c\ud558\uace0 \ub05d\ub0b8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 template < typename DTYPE > Operator < DTYPE > * Module < DTYPE >:: AnalyzeGraph ( Operator < DTYPE > * pResultOperator ) { Container < Operator < DTYPE > *> queue ; queue . Push ( pResultOperator ); m_pLastOperator = pResultOperator ; Container < Operator < DTYPE > *> * nextOp = NULL ; Container < Operator < DTYPE > *> * prevOp = NULL ; int numOfInputEdge = 0 ; Operator < DTYPE > * out = NULL ; while ( queue . GetSize () > 0 ) { out = queue . Pop (); if ( ! ( this -> IsInput ( out ))) { if ( this -> IsValid ( out )) { if ( out -> GetIsTensorholder ()) { this -> SetParameter ( out ); } else { this -> SetExecutableOperater ( out ); } nextOp = out -> GetInputContainer (); numOfInputEdge = nextOp -> GetSize (); for ( int i = 0 ; i < numOfInputEdge ; i ++ ) { prevOp = ( * nextOp )[ i ] -> GetOutputContainer (); prevOp -> Pop ( out ); queue . Push (( * nextOp )[ i ]); } } else continue ; } else continue ; } m_aaExcutableOperator -> Reverse (); return pResultOperator ; } AnalyzeGraph \ub294 \uc8fc\uc11d\uc5d0 \ub530\ub974\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \uae30\ub2a5\uc744 \ud55c\ub2e4. comment \ud559\uc2b5 \uac00\ub2a5\ud55c \ud615\ud0dc\ub85c \ubaa8\ub4c8 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc \ubaa8\ub4c8\uc758 Output\uc5d0 \ud574\ub2f9\ud558\ub294 Operator\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9\uc73c\ub85c \ubaa8\ub4c8 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud55c\ub2e4. \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 \ubaa8\ub4c8\uc758 Output\uc5d0 \ud574\ub2f9\ud558\ub294 Operator\ub97c \uc2dc\uc791\uc73c\ub85c \ubaa8\ub4c8\uc758 Input\uc5d0 \ud574\ub2f9\ud558\ub294 Operator\uae4c\uc9c0 \uc5ed\uc21c\uc73c\ub85c, Operator\uac00 Input Tensor \ubc0f \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130\uc778 \uacbd\uc6b0 Module \ud074\ub798\uc2a4\uc758 Input Container \uba64\ubc84 \ubcc0\uc218\uc5d0 \ucd94\uac00\ud558\uace0 \ub098\uba38\uc9c0 \uacbd\uc6b0\uc5d0\ub294 Module \ud074\ub798\uc2a4\uc758 Excutable Operator Container \uba64\ubc84 \ubcc0\uc218\uc5d0 \ucd94\uac00\ud55c\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\uc758 Excutable Operator Container \uba64\ubc84 \ubcc0\uc218\uc5d0 Operator\ub4e4\uc774 \ubaa8\ub450 \ucd94\uac00\ub418\uba74 Container\ub97c \uc5ed\uc21c\uc73c\ub85c \ubcc0\uacbd\ud55c\ub2e4. Operator \ud0d0\uc0c9 \uc21c\uc11c\ub294 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9\uc744 \ub530\ub974\uba70, \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Output Operator\ubd80\ud130 \ud574\ub2f9 Operator\uc758 Input Operator \ub9ac\uc2a4\ud2b8\ub97c \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9 \ubc29\uc2dd\uc744 \uc774\uc6a9\ud574 \uc21c\uc11c\ub300\ub85c \uc9c4\ud589\ud55c\ub2e4. \uac01 Operator\ub4e4\uc740 Module ::IsValid(Operator *pOperator) \uba54\uc18c\ub4dc\ub97c \uc774\uc6a9\ud558\uc5ec \ubaa8\ub4c8 \uadf8\ub798\ud504 \uc548\uc5d0\uc11c\uc758 \uc911\ubcf5 \uc5ec\ubd80\ub97c \ud655\uc778\ud558\uba70 \uc911\ubcf5\ub418\ub294 \uacbd\uc6b0 \uadf8\ub798\ud504\uc5d0 \ucd94\uac00\ud558\uc9c0 \uc54a\ub294\ub2e4. \uba54\uc18c\ub4dc \uc774\ub984\uacfc \ub2e4\ub974\uac8c this->SetExecutableOperater(out); \ub294 Set \uae30\ub2a5\uc744 \ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c Add \uae30\ub2a5, \uc989 Push \uae30\ub2a5\uc744 \ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uacb0\uad6d \ucee8\ud14c\uc774\ub108 m_aaExcutableOperator \uc5d0 \uc2e4\ud589\uac00\ub2a5\ud55c Operator \ub97c \ucb49 \ub123\uc5b4\uc8fc\uac8c \ub41c\ub2e4. this->SetParameter(out); \ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c \ud30c\ub77c\ubbf8\ud130\uc778 Operator \ub97c m_apParameter \uc5d0 Add \ud574\uc900\ub2e4. 22: nextOp = out->GetInputContainer(); \ub85c out \uc758 \uc778\ud48b \ucee8\ud14c\uc774\ub108\uc5d0 \uc874\uc7ac\ud558\ub294 Operator \ub4e4\uc744 nextOp \uc5d0 \uc800\uc7a5\ud558\uace0 \ub2e4\uc2dc \ud050\uc5d0 \uc800\uc7a5\ud55c\ub2e4. template < typename DTYPE > class ConvolutionLayer2D : public Module < DTYPE > { int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pNumKernelRow , int pNumKernelCol , int pStrideRow , int pStrideCol , int pPaddingRow , int pPaddingCol , int use_bias , std :: string pName ) { this -> SetInput ( pInput ); ... \uc704 \ucf54\ub4dc\uc758 SetInput \uc5d0\uc11c pInput \uc774 \uc800\uc7a5\ub41c \uac83\uc774 \ub098\uc624\uac8c \ub41c\ub2e4. pInput \uc740 out = new ReShape<float>(x, 28, 28, \"Flat2Image\"); \uc5d0\uc11c \uc628 \uac83\uc774\uc5c8\ub2e4. \uc774 pInput \uc774 \ub2e4\uc2dc out = new Convolution2D < DTYPE > ( out , pWeight , pStrideRow , pStrideCol , pPaddingRow , pPaddingCol , \"Convolution2D_Convolution2D_\" + pName ); \ub85c \ub4e4\uc5b4\uac14\ub2e4\uac00 AnalyzeGraph \ub85c \ub4e4\uc5b4\uac04 \uac83\uc774\uc5c8\ub2e4. \ub2e4\uc2dc.. Convolution2D \uc5d0\uc11c\ub294 Convolution2D ( Operator < DTYPE > * pInput , Operator < DTYPE > * pWeight , int stride1 , int stride2 , std :: string pName = \"NO NAME\" , int pLoadflag = TRUE ) : Operator < DTYPE > ( pInput , pWeight , pName , pLoadflag ) { Alloc ( pInput , pWeight , stride1 , stride2 , 0 , 0 ); } \uc774\uac8c \ud638\ucd9c \ub418\uace0, \uc774\uc5d0 \ub530\ub77c Operator \uc5d0\uc11c template < typename DTYPE > Operator < DTYPE >:: Operator ( Operator < DTYPE > * pInput0 , Operator < DTYPE > * pInput1 , std :: string pName , int pLoadflag ) { ... Alloc (); AddEdgebetweenOperators ( 2 , pInput0 , pInput1 , pLoadflag ); } \uc774\uac8c \ud638\ucd9c \ub418\uace0, template < typename DTYPE > int Operator < DTYPE >:: AddEdgebetweenOperators ( Operator < DTYPE > * pInput ) { this -> AddInputEdge ( pInput ); pInput -> AddOutputEdge ( this ); return TRUE ; } \uc774\uac8c \ud638\ucd9c\ub418\uace0 template < typename DTYPE > int Operator < DTYPE >:: AddInputEdge ( Operator < DTYPE > * pInput ) { ... m_apInput -> Push ( pInput ); ... } \uc774\uac8c \ud638\ucd9c\ub41c\ub2e4. \uc77c\ub2e8 SetInput \ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c Set \uae30\ub2a5\uc774 \uc544\ub2c8\ub77c Add \uae30\ub2a5\uc744 \ud558\ub294 \uba54\uc18c\ub4dc\uc600\uc5c8\ub2e4. \uadf8\ub7ec\ub2c8\uae4c \uc815\ub9ac\ud558\uc790\uba74 \ub9e8 \ucc98\uc74c\uc5d0 ConvolutionLayer2D \uc758 SetInput \uc744 \ud1b5\ud574 ConvolutionLayer2D \uac1d\uccb4\uc758 m_apInput \uc5d0 \uc804\ub2ec\ub41c ReShape \uac1d\uccb4\uc778 pInput \uc774 Push \ub418\uc5c8\uace0, Convolution2D \uc758 \uc0c1\uc704\ud074\ub798\uc2a4 Operator \uc758 \uc0dd\uc131\uc790 \uc18d\uc758 AddEdgebetweenOperators \uc18d\uc758 AddInputEdge \uc5d0 pInput \uc5d0 \uc800\uc7a5\ub418\uc5b4 \uc788\ub358 ReShape \uac1d\uccb4\uc778 out \uc804\ub2ec\ub418\ub294\ub370, \uc774\uac83\uc774 Convolution2D \uac1d\uccb4\uc758 m_apInput \uc5d0 Push \ub418\uace0, ReShape \uac1d\uccb4\uc758 m_apOutput \uc5d0 Convolution2D \uac00 Push \ub41c\ub2e4. Danger \ub370\uc774\ud130 \uad6c\uc870\ub97c \uc880 \uc2ec\ud50c\ud558\uac8c \ub9cc\ub4e4 \ud544\uc694\uac00 \uc788\uc5b4\ubcf4\uc774\ub294\ub370, \uc911\ubcf5\uc73c\ub85c Push \ud558\ub294 \ubd80\ubd84\ub3c4 \ub9ce\uc544 \ubcf4\uc774\uace0, \uadf8\ub798\uc11c isValid \ub97c \ud638\ucd9c\ud574\uc57c\ub9cc \ud558\ub294 \uac83 \uac19\uace0, \uc0c1\uc18d \uad6c\uc870\ub3c4 \ucf54\ub4dc \ubd84\uc11d\uc744 \ub09c\ud574\ud558\uac8c \ub9cc\ub4dc\ub294 \ubd88\ud544\uc694\ud55c \uc0c1\uc18d\uad00\uacc4\uac00 \ub9ce\uc740 \uac83 \uac19\ub2e4.k \uc804\uccb4\uc801\uc778 \uad6c\uc870\uac00 \ub2e8\uc21c\ud560 \uc218 \uc788\ub294\ub370, \ubd88\ud544\uc694\ud558\uac8c \ub108\ubb34 \ubcf5\uc7a1\ud574\uc9c4 \uac83 \uac19\uace0, \uc911\ubcf5 \ub85c\uc9c1\uc774 \ub108\ubb34 \ub9ce\uace0, \ubd88\ud544\uc694\ud55c \ub85c\uc9c1\ub3c4 \ub108\ubb34 \ub9ce\uc544 \ubcf4\uc778\ub2e4. \uc774\ub7ec\uba74 \ucf54\ub4dc \uad00\ub9ac\uac00 \uacc4\uc18d \uacc4\uc18d \ud798\ub4e4\uc5b4\uc9c0\uac8c \ub41c\ub2e4. \uc5b4\uca0c\ub4e0 \uacb0\uad6d Convolution2D \uc758 GetInputContainer \ub97c \ud1b5\ud574 ReShape \uac1d\uccb4\uac00 \ub098\uc624\uac8c \ub41c\ub2e4. 10-22: Relu , Maxpooling2D \uc740 \ub2e8\uc21c\ud788 \ub2e4\uc74c\uc758 \uc0dd\uc131\uc790\ub97c \uac16\ub294\ub2e4. Relu ( Operator < DTYPE > * pInput , std :: string pName , int pLoadflag = TRUE ) : Operator < DTYPE > ( pInput , pName , pLoadflag ) { this -> Alloc ( pInput ); } int Alloc ( Operator < DTYPE > * pInput ) { int timesize = pInput -> GetResult () -> GetTimeSize (); int batchsize = pInput -> GetResult () -> GetBatchSize (); int channelsize = pInput -> GetResult () -> GetChannelSize (); int rowsize = pInput -> GetResult () -> GetRowSize (); int colsize = pInput -> GetResult () -> GetColSize (); this -> SetResult ( new Tensor < DTYPE > ( timesize , batchsize , channelsize , rowsize , colsize )); this -> SetDelta ( new Tensor < DTYPE > ( timesize , batchsize , channelsize , rowsize , colsize )); return TRUE ; } \uc774\ub54c Operator \uc758 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub418\ubbc0\ub85c \uc778\ud48b\uacfc \uc544\uc6c3\ud48b\uc744 \uc124\uc815\ud574\uc8fc\ub294 \uacfc\uc815\uc774 \ub610 \uc9c4\ud589\ub41c\ub2e4. Maxpooling2D ( Operator < DTYPE > * pInput , int maskRow , int maskCol , int strideRow , int strideCol , int padding , std :: string pName , int pLoadflag = TRUE ) : Operator < DTYPE > ( pInput , pName , pLoadflag ) { this -> Alloc ( pInput , strideRow , strideCol , maskRow , maskCol , padding , padding ); } int Alloc ( Operator < DTYPE > * pInput , int strideRow , int strideCol , int maskRow , int maskCol , int padding1 = 0 , int padding2 = 0 ) { Shape * shapeOfInput = pInput -> GetResult () -> GetShape (); m_stride [ 0 ] = strideRow ; m_stride [ 1 ] = strideCol ; m_mask [ 0 ] = maskRow ; m_mask [ 1 ] = maskCol ; m_padding [ 0 ] = padding1 ; m_padding [ 1 ] = padding2 ; int rowsize = 0 ; int colsize = 0 ; rowsize = (( * shapeOfInput )[ 3 ] - maskRow + ( 2 * m_padding [ 0 ])) / strideRow + 1 ; colsize = (( * shapeOfInput )[ 4 ] - maskCol + ( 2 * m_padding [ 1 ])) / strideCol + 1 ; this -> SetResult ( new Tensor < DTYPE > (( * shapeOfInput )[ 0 ], ( * shapeOfInput )[ 1 ], ( * shapeOfInput )[ 2 ], rowsize , colsize )); this -> SetDelta ( new Tensor < DTYPE > (( * shapeOfInput )[ 0 ], ( * shapeOfInput )[ 1 ], ( * shapeOfInput )[ 2 ], rowsize , colsize )); indexOfMaxInput = new Tensor < int > (( * shapeOfInput )[ 0 ], ( * shapeOfInput )[ 1 ], ( * shapeOfInput )[ 2 ], rowsize , colsize ); return TRUE ; } Maxpooling2D \ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c Operator \uc758 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub418\uc5b4 \uc778\ud48b\uacfc \uc544\uc6c3\ud48b\uc774 \uc124\uc815\ub41c\ub2e4. Linear \uac1d\uccb4\uc5d0\uc11c\ub294 Linear ( Operator < DTYPE > * pInput , int pNumInputCol , int pNumOutputCol , int use_bias = FALSE , std :: string pName = \"No Name\" ) : Module < DTYPE > ( pName ) { Alloc ( pInput , pNumInputCol , pNumOutputCol , use_bias , pName ); } int Alloc ( Operator < DTYPE > * pInput , int pNumInputCol , int pNumOutputCol , int use_bias , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * out = pInput ; // for He initialization float stddev = sqrt (( float ) 4 / ( pNumInputCol + pNumOutputCol )); Tensorholder < DTYPE > * pWeight = new Tensorholder < DTYPE > ( Tensor < DTYPE >:: Random_normal ( 1 , 1 , 1 , pNumOutputCol , pNumInputCol , 0.0 , stddev ), \"Layer_Weight_\" + pName ); out = new MatMul < DTYPE > ( pWeight , out , \"Layer_MatMul_\" + pName ); if ( use_bias ) { Tensorholder < DTYPE > * pBias = new Tensorholder < DTYPE > ( Tensor < DTYPE >:: Constants ( 1 , 1 , 1 , 1 , pNumOutputCol , 0.f ), \"Add_Bias_\" + pName ); out = new AddColWise < DTYPE > ( out , pBias , \"Layer_Add_\" + pName ); } this -> AnalyzeGraph ( out ); return TRUE ; } Module \uc758 template < typename DTYPE > Module < DTYPE >:: Module ( std :: string pName ) : Operator < DTYPE > ( pName ) { m_aaExcutableOperator = NULL ; m_numOfExcutableOperator = 0 ; m_pLastOperator = NULL ; m_idOfDevice = -1 ; Alloc (); } \uc774 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub418\uace0 \ub2e4\uc2dc Operator \uc758 template < typename DTYPE > Operator < DTYPE >:: Operator ( std :: string pName , int pLoadflag ) { m_apOutput = NULL ; m_apInput = NULL ; m_aaResult = NULL ; m_aaGradient = NULL ; m_name = pName ; m_Device = CPU ; m_Mode = TRAIN ; m_isParameter = FALSE ; m_isTrainable = FALSE ; m_idOfDevice = -1 ; m_Loadflag = TRUE ; Alloc (); } \uc774 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. \u314b\u314b\u314b Danger AnalyzeGraph \ub97c \ub05d\uc5c6\uc774 \ud558\uace0 \uc788\ub294\ub370, \ud559\uc2b5 \uac00\ub2a5 \uadf8\ub798\ud504\ub97c \uc5ec\ub7ec\ubc88 \ub9cc\ub4dc\ub294 \uac8c \uac00\uce58\uac00 \uc788\ub098? \uc774\ub7f0 \uc5f0\uc0b0\uc740 \ub9c8\uc9c0\ub9c9\uc5d0 \ud55c\ubc88\ub9cc \ud574\ub3c4 \ub418\uc9c0 \uc54a\ub098? \uadf8\ub9ac\uace0 \uc560\ucd08\uc5d0 \ub370\uc774\ud130\uad6c\uc870\ub97c \uc798 \uc120\ud0dd\ud588\ub2e4\uba74, \uc774\ub7ec\ud55c \ud559\uc2b5 \uac00\ub2a5 \uadf8\ub798\ud504\ub97c \ub9cc\ub4dc\ub294 \uc5f0\uc0b0 \uc790\uccb4\uac00 \ud544\uc694 \uc5c6\ub2e4. Ordered Dictionary \ub098 Sequence \uac19\uc740 \uac83\ub4e4. Queue \ub97c \ub370\uc774\ud130\uad6c\uc870\ub85c \ucc44\ud0dd\ud55c \uac83\ub54c\ubb38\uc5d0 \uc2a4\ub178\uc6b0\ubcfc\uc774 \ub108\ubb34 \uad74\ub7ec\uac00\uc11c \uad6c\uc870\uac00 \ub108\ubb34 \ubcf5\uc7a1\ud574\uc9c4 \uac83 \uac19\uc740\ub370. 23: \ub9c8\uc9c0\ub9c9\uc5d0 AnalyzeGraph \ub97c \ud55c\ubc88 \ub354 \ud638\ucd9c\ud574\uc900\ub2e4. 25-27: \uc190\uc2e4 \ud568\uc218\uc640 \ucd5c\uc801\ud654 \ud568\uc218\ub97c \ucd08\uae30\ud654\ud574\uc8fc\ub294\ub370 \ubcfc \ud544\uc694\ub3c4 \uc5c6\uc774 template < typename DTYPE > class NeuralNetwork : public Module < DTYPE > { private : LossFunction < DTYPE > * m_aLossFunction ; ///< \uc2e0\uacbd\ub9dd\uc758 \uc190\uc2e4\ud568\uc218\uc5d0 \ud574\ub2f9\ud558\ub294 LossFunction\uc758 \ud3ec\uc778\ud130 \uba64\ubc84 \ubcc0\uc218 Optimizer < DTYPE > * m_aOptimizer ; \uc598\ub124 \ub4e4\uc744 \ucd08\uae30\ud654\ud574\uc8fc\ub294 \uc560\ub4e4\uc77c \uac83 \uac19\ub2e4. template < typename DTYPE > LossFunction < DTYPE > * NeuralNetwork < DTYPE >:: SetLossFunction ( LossFunction < DTYPE > * pLossFunction ) { m_aLossFunction = pLossFunction ; return pLossFunction ; } template < typename DTYPE > Optimizer < DTYPE > * NeuralNetwork < DTYPE >:: SetOptimizer ( Optimizer < DTYPE > * pOptimizer ) { m_aOptimizer = pOptimizer ; return pOptimizer ; } ForwardPropagateOnGPU \uac00 \uc65c NeuralNetwork \uc5d0 \uc788\ub294 \uac8c \uc544\ub2c8\ub77c Module \uc5d0 \uc788\uc9c0? \uc544 \uc0c1\uc18d \uad00\uacc4\ub97c \uc9c0\ud0a4\ub824\uace0, \uc774\ub97c \ud1b5\ud574 \ud074\ub798\uc2a4 \uad6c\uc870\ub97c \uc9c0\ud0a4\ub824\uace0.","title":"Step 2. \uc21c\uc804\ud30c"},{"location":"sync/fewshot/step2/#analysis-forward-propagation","text":"\uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 MNIST \ub97c CNN \uc73c\ub85c \ud559\uc2b5\ud558\ub294 \uac83\uc744 \uc5b4\ub5bb\uac8c \uad6c\ud604\ud588\ub294\uc9c0 \ubd84\uc11d \ubd84\uc11d \uc9c0\ub3c4 MNIST/main.cpp : main \ud568\uc218","title":"Analysis: Forward Propagation"},{"location":"sync/fewshot/step2/#mnistmaincpp-main","text":"\ubd84\uc11d \ubaa9\ud45c MNIST \ub370\uc774\ud130\uc14b CNN \ud559\uc2b5 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 int main ( int argc , char const * argv []) { ... // create input, label data placeholder -> Tensorholder Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 10 , \"label\" ); // ======================= Select net =================== NeuralNetwork < float > * net = new my_CNN ( x , label ); // ======================= Prepare Data =================== MNISTDataSet < float > * train_dataset = new MNISTDataSet < float > ( \"data/train-images-idx3-ubyte\" , \"data/train-labels-idx1-ubyte\" , TRAINING ); DataLoader < float > * train_dataloader = new DataLoader < float > ( train_dataset , BATCH , TRUE , 20 , FALSE ); MNISTDataSet < float > * test_dataset = new MNISTDataSet < float > ( \"data/t10k-images-idx3-ubyte\" , \"data/t10k-labels-idx1-ubyte\" , TESTING ); DataLoader < float > * test_dataloader = new DataLoader < float > ( test_dataset , BATCH , FALSE , 20 , FALSE ); net -> SetDeviceGPU ( GPUID ); net -> PrintGraphInformation (); ... for ( int i = epoch + 1 ; i < EPOCH ; i ++ ) { if (( i + 1 ) % 50 == 0 ) { float lr = net -> GetOptimizer () -> GetLearningRate (); net -> GetOptimizer () -> SetLearningRate ( lr * 0.1 ); } // ======================= Train ======================= float train_accuracy = 0.f ; float train_avg_loss = 0.f ; net -> SetModeTrain (); for ( int j = 0 ; j < LOOP_FOR_TRAIN ; j ++ ) { std :: vector < Tensor < float > *> * temp = train_dataloader -> GetDataFromGlobalBuffer (); Tensor < float > * x_t = ( * temp )[ 0 ]; Tensor < float > * l_t = ( * temp )[ 1 ]; delete temp ; x_t -> SetDeviceGPU ( GPUID ); l_t -> SetDeviceGPU ( GPUID ); net -> FeedInputTensor ( 2 , x_t , l_t ); net -> ResetParameterGradient (); net -> Train (); train_accuracy += net -> GetAccuracy (); train_avg_loss += net -> GetLoss (); ... } // ======================= Test ====================== float test_accuracy = 0.f ; float test_avg_loss = 0.f ; net -> SetModeInference (); for ( int j = 0 ; j < ( int ) LOOP_FOR_TEST ; j ++ ) { std :: vector < Tensor < float > *> * temp = test_dataloader -> GetDataFromGlobalBuffer (); Tensor < float > * x_t = ( * temp )[ 0 ]; Tensor < float > * l_t = ( * temp )[ 1 ]; delete temp ; x_t -> SetDeviceGPU ( GPUID ); l_t -> SetDeviceGPU ( GPUID ); net -> FeedInputTensor ( 2 , x_t , l_t ); net -> Test (); test_accuracy += net -> GetAccuracy (); test_avg_loss += net -> GetLoss (); ... } } ... return 0 ; } \ubd84\uc11d \uacb0\ub860 main \ud568\uc218\uc5d0\uc11c\ub294 Tensorholder \ub97c \uc0dd\uc131\ud558\uc5ec my_CNN \uc5d0 \uc804\ub2ec\ud558\uc5ec \ubaa8\ub378\uc744 \ub9cc\ub4e0\ub2e4. \uadf8\ub9ac\uace0 MNISTDataSet \uc73c\ub85c \ub370\uc774\ud130\ub97c \uac00\uc838\uc624\uace0 DataLoader \uc5d0 \uc785\ub825\ud558\uc5ec \ub370\uc774\ud130 \ub85c\ub354\ub97c \ub9cc\ub4e0\ub2e4. \uc774\ud6c4 DataLoader::GetDataFromGlobalBuffer \ub85c \ub370\uc774\ud130\ub97c \uac00\uc838\uc640\uc11c my_CNN::FeedInputTensor \ub85c \ubaa8\ub378\uc5d0 \uc785\ub825\ud558\uace0, my_CNN::Train \uc73c\ub85c \ud559\uc2b5\uc744 \ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 Tensorholder , my_CNN \uc774 \uc5b4\ub5a4 \ud074\ub798\uc2a4\uc778\uc9c0 \ubd84\uc11d, MNISTDataSet \uacfc DataLoader \ub85c \uc5b4\ub5bb\uac8c MNIST \ub370\uc774\ud130\uc14b\uc744 \uac00\uc838\uc640\uc11c my_CNN::FeedInputTensor \ub85c \uc785\ub825\ud558\ub294\uc9c0 \ubd84\uc11d, my_CNN::Train \uc73c\ub85c \uc5b4\ub5bb\uac8c \ud559\uc2b5\uc774 \uc9c4\ud589\ub418\ub294\uc9c0 \ubd84\uc11d. \uc774\ub54c Tensorholder \ub294 Operator \ub97c \uc0c1\uc18d\ud558\ubbc0\ub85c \uc774\uac83\ubd80\ud130 \ubd84\uc11d. \ubd84\uc11d \uc9c0\ub3c4 MNIST/main.cpp : main \ud568\uc218 src/Operator.hpp : Operator \uc0dd\uc131\uc790 src/Tensorholder.cpp : Tensorholder \uc0dd\uc131\uc790 MNIST/MNIST.hpp : MNISTDataSet \uc0dd\uc131\uc790 src/DataLoader.hpp : DataLoader \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN::Train \uba54\uc18c\ub4dc","title":"MNIST/main.cpp: main \ud568\uc218"},{"location":"sync/fewshot/step2/#srcoperatorcpp-operator","text":"\ubd84\uc11d \ubaa9\ud45c Operator \uc0dd\uc131\uc790 \uc774\ud574\ud558\uae30 main \ud568\uc218\uc758 Tensorholder \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc0dd\uc131\ub41c\ub2e4. Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 10 , \"label\" ); \uadf8\ub7ec\ubbc0\ub85c \ub2e4\uc74c\uc758 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. Tensorholder ( int pTimeSize , int pBatchSize , int pChannelSize , int pRowSize , int pColSize , std :: string pName , int pTrainable = TRUE , int pLoadflag = TRUE ) : Operator < DTYPE > ( pName , pLoadflag ) { this -> Alloc ( pTimeSize , pBatchSize , pChannelSize , pRowSize , pColSize , pTrainable ); } \uadf8\ub7ec\ubbc0\ub85c Operator \uc5d0\uc11c \ub2e4\uc74c\uc758 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. template < typename DTYPE > Operator < DTYPE >:: Operator ( std :: string pName , int pLoadflag ) { m_apOutput = NULL ; m_apInput = NULL ; m_aaResult = NULL ; m_aaGradient = NULL ; m_name = pName ; m_Device = CPU ; m_Mode = TRAIN ; m_isParameter = FALSE ; m_isTrainable = FALSE ; m_idOfDevice = -1 ; m_Loadflag = TRUE ; Alloc (); } Alloc \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: Alloc () { m_apOutput = new Container < Operator < DTYPE > *> (); m_apInput = new Container < Operator < DTYPE > *> (); m_aaResult = new Container < Tensor < DTYPE > *> (); m_aaGradient = new Container < Tensor < DTYPE > *> (); return TRUE ; } \ubd84\uc11d \uacb0\ub860 Operator \ub294 \uba87\uac00\uc9c0 \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud558\uace0 Container \ub97c \uc0dd\uc131\ud558\uc5ec \uba64\ubc84\ubcc0\uc218\ub85c \uc800\uc7a5\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ubd84\uc11d \ubc29\ud5a5 Container \ub97c \uba3c\uc800 \ubd84\uc11d \ubd84\uc11d \uc9c0\ub3c4 MNIST/main.cpp : main \ud568\uc218 src/Operator.hpp : Operator \uc0dd\uc131\uc790 src/Container.hpp : Container \uc0dd\uc131\uc790 src/Tensorholder.cpp : Tensorholder \uc0dd\uc131\uc790 MNIST/MNIST.hpp : MNISTDataSet \uc0dd\uc131\uc790 src/DataLoader.hpp : DataLoader \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN::Train \uba54\uc18c\ub4dc","title":"src/Operator.cpp: Operator \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step2/#srccontainerhpp-container","text":"\ubd84\uc11d \ubaa9\ud45c Container \uc0dd\uc131\uc790 \uc774\ud574\ud558\uae30 Container () { m_aElement = NULL ; m_size = 0 ; } \ud544\uc694\ud55c \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud558\uace0 \ub05d\ub0b8\ub2e4. Container \ub294 API \uc8fc\uc11d\uc774 \uc798 \ub2ec\ub824\uc788\ub294\ub370 \ub2e8\uc9c0 \uc778\ub371\uc2a4 \uc811\uadfc\uacfc \uc5ed\uc21c \uc811\uadfc\uc774 \uac00\ub2a5\ud55c queue \ub77c\uace0 \ud55c\ub2e4. Note \uadf8\ub7ec\uba74 std::deque \ub97c \uc4f0\uba74 \uc548\ub420\uae4c. \ubd84\uc11d \uc9c0\ub3c4 MNIST/main.cpp : main \ud568\uc218 src/Operator.hpp : Operator \uc0dd\uc131\uc790 src/Container.hpp : Container \uc0dd\uc131\uc790 src/Tensorholder.cpp : Tensorholder \uc0dd\uc131\uc790 MNIST/MNIST.hpp : MNISTDataSet \uc0dd\uc131\uc790 src/DataLoader.hpp : DataLoader \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN::Train \uba54\uc18c\ub4dc","title":"src/Container.hpp: Container \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step2/#srctensorholdercpp-tensorholder","text":"\ubd84\uc11d \ubaa9\ud45c Tensorholder < float > * x = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 784 , \"x\" ); Tensorholder < float > * label = new Tensorholder < float > ( 1 , BATCH , 1 , 1 , 10 , \"label\" ); \uc704 \ucf54\ub4dc \uc5d0\uc11c\uc758 Tensorholder \uc0dd\uc131\uc790 \uc774\ud574\ud558\uae30 Tensorholder ( int pTimeSize , int pBatchSize , int pChannelSize , int pRowSize , int pColSize , std :: string pName , int pTrainable = TRUE , int pLoadflag = TRUE ) : Operator < DTYPE > ( pName , pLoadflag ) { this -> Alloc ( pTimeSize , pBatchSize , pChannelSize , pRowSize , pColSize , pTrainable ); } Alloc \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 template < typename DTYPE > class Tensorholder : public Operator < DTYPE > { ... int Alloc ( int pTimeSize , int pBatchSize , int pChannelSize , int pRowSize , int pColSize , int pTrainable ) { Tensor < DTYPE > * pTensor = Tensor < float >:: Zeros ( pTimeSize , pBatchSize , pChannelSize , pRowSize , pColSize ); this -> SetResult ( pTensor ); this -> SetIsTensorholder ( TRUE ); this -> SetIsTrainable ( pTrainable ); Shape * shapeOfDelta = new Shape ( pTensor -> GetShape ()); this -> AddGradient ( new Tensor < DTYPE > ( shapeOfDelta )); return TRUE ; } ... } 5: SetResult \ub294 Operator \uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub294\ub370, \ub2e4\uc74c\uacfc \uac19\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: SetResult ( Tensor < DTYPE > * pTensor ) { if ( m_aaResult -> GetSize ()) { Tensor < DTYPE > * temp = m_aaResult -> Pop (); delete temp ; temp = NULL ; } m_aaResult -> Push ( pTensor ); return TRUE ; } Container<Tensor<DTYPE> *> *m_aaResult; \uc758 Container::GetSize \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. template < typename DTYPE > class Container { ... int GetSize () { return m_size ; } ... } m_size \ub294 Container \uc0dd\uc131\uc790\uc5d0\uc11c 0 \uc73c\ub85c \ucd08\uae30\ud654\ub41c \uac83\uc744 \uc774\ubbf8 \ud655\uc778\ud588\ub2e4. template < typename DTYPE > class Container { ... int Push ( DTYPE pElement ) { DTYPE * temp = new DTYPE [ m_size + 1 ]; for ( int i = 0 ; i < m_size ; i ++ ) temp [ i ] = m_aElement [ i ]; temp [ m_size ] = pElement ; if ( m_aElement ) { delete [] m_aElement ; m_aElement = NULL ; } m_aElement = temp ; return TRUE ; } ... } Push \ub294 \ub2e8\uc9c0 m_size + 1 \ub3d9\uc801 \ubc30\uc5f4\uc744 \ud560\ub2f9\ud558\uace0 \uae30\uc874\uc758 \ubc30\uc5f4\uc744 \ubcf5\uc0ac\ud55c \ud6c4 \ub9c8\uc9c0\ub9c9 \uc778\ub371\uc2a4\uc5d0 \ud30c\ub77c\ubbf8\ud130\ub97c \uc800\uc7a5\ud55c\ub2e4. \uacb0\uad6d this->SetResult(pTensor); \ub780 m_aaResult \ub77c\ub294 queue \uc5d0 \uc785\ub825 \ub370\uc774\ud130\uc758 \ud615\uc0c1\uc73c\ub85c \uc0dd\uc131\ub41c Tensor \uac1d\uccb4\ub97c Push \ud55c\ub2e4. 6: Operator \uc758 SetIsTensorholder \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: SetIsTensorholder ( int pIsParameter ) { m_isParameter = pIsParameter ; return TRUE ; } m_isParameter \ub294 \uc0dd\uc131\uc2dc FALSE \ub85c \ucd08\uae30\ud654\ub418\ub294\ub370 \uc774 \ucf54\ub4dc\ub85c TRUE \ub85c \ubc14\ub010\ub2e4. 7: Operator \uc758 SetIsTrainable \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: SetIsTrainable ( int pIsTrainable ) { m_isTrainable = pIsTrainable ; return TRUE ; } m_isTrainable \ub294 \uc0dd\uc131\uc2dc FALSE \ub85c \ucd08\uae30\ud654\ub418\ub294\ub370 \uc774 \ucf54\ub4dc\ub85c TRUE \ub85c \ubc14\ub010\ub2e4. 9: Operator \uc758 AddGradient \ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: AddGradient ( Tensor < DTYPE > * pTensor ) { m_aaGradient -> Push ( pTensor ); return TRUE ; } \uacb0\uad6d Operator \uba64\ubc84\ubcc0\uc218\uc778 Container<Tensor<DTYPE> *> *m_aaGradient; \uc5d0 pTensor \ud615\uc0c1\uc758 \uc0c8\ub85c\uc6b4 Tensor \uac1d\uccb4\ub97c Push \ud55c\ub2e4. \ubd84\uc11d \uacb0\ub860 Tensorholder \ub294 \uc785\ub825 \ub370\uc774\ud130 \ud615\uc0c1\uc73c\ub85c pTensor \ub97c \ub9cc\ub4e4\uc5b4\uc11c m_aaResult \ud050\uc5d0 \ud478\uc26c\ud558\uace0, \ub3d9\uc77c\ud55c \ud615\uc0c1\uc758 Tensor \ub97c \ub9cc\ub4e4\uc5b4\uc11c m_aaGradient \ud050\uc5d0 Push \ud55c\ub2e4. \uadf8\ub9ac\uace0 m_isParameter \uc640 m_isTrainable \uc744 TRUE \ub85c \ub9cc\ub4e0\ub2e4. \ubd84\uc11d \uc9c0\ub3c4 MNIST/main.cpp : main \ud568\uc218 src/Operator.hpp : Operator \uc0dd\uc131\uc790 src/Container.hpp : Container \uc0dd\uc131\uc790 src/Tensorholder.cpp : Tensorholder \uc0dd\uc131\uc790 MNIST/MNIST.hpp : MNISTDataSet \uc0dd\uc131\uc790 src/DataLoader.hpp : DataLoader \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN \uc0dd\uc131\uc790 MNIST/net/my_CNN.hpp : my_CNN::Train \uba54\uc18c\ub4dc","title":"src/Tensorholder.cpp: Tensorholder \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step2/#srcmodulehpp-module","text":"\ubd84\uc11d \ubaa9\ud45c Module \uc0dd\uc131\uc790 \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 template < typename DTYPE > Module < DTYPE >:: Module ( std :: string pName ) : Operator < DTYPE > ( pName ) { m_aaExcutableOperator = NULL ; m_numOfExcutableOperator = 0 ; m_pLastOperator = NULL ; m_idOfDevice = -1 ; Alloc (); } \uc774 \uc0dd\uc131\uc790\uac00 \uc815\uc758\ub418\uc5b4 \uc788\ub294\ub370 Module() \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub418\ubbc0\ub85c \ub514\ud3f4\ud2b8 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. \uadfc\ub370 \ub514\ud3f4\ud2b8 \uc0dd\uc131\uc790\uac00 \uc548\ubcf4\uc774\ub124. \uadf8\ub7f0\ub370 \uc120\uc5b8\ubd80\uc5d0 Module(std::string pName = \"No Name\"); \uc774\ub807\uac8c \uc120\uc5b8\ub418\uc5b4 \uc788\ub354\ub77c. \uadf8\ub798\uc11c \uc774 \uc0dd\uc131\uc790\uac00 \uc798 \ud638\ucd9c\ub41c\ub2e4. 6: template < typename DTYPE > int Module < DTYPE >:: Alloc () { m_apInput = new Container < Operator < DTYPE > *> (); m_apParameter = new Container < Operator < DTYPE > *> (); m_aaExcutableOperator = new Container < Operator < DTYPE > *> (); return TRUE ; }","title":"src/Module.hpp: Module \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step2/#srcneuralnetworkhpp-neuralnetwork","text":"\ubd84\uc11d \ubaa9\ud45c \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 template < typename DTYPE > NeuralNetwork < DTYPE >:: NeuralNetwork () : Module < DTYPE > () { m_aLossFunction = NULL ; m_aOptimizer = NULL ; m_Device = CPU ; m_idOfDevice = -1 ; #ifdef __CUDNN__ m_cudnnHandle = NULL ; #endif // if __CUDNN__ Alloc (); } 1: Module() \uc758 \ub514\ud3f4\ud2b8 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. 2: \uba64\ubc84 \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud55c\ub2e4. LossFunction < DTYPE > * m_aLossFunction ; ///< \uc2e0\uacbd\ub9dd\uc758 \uc190\uc2e4\ud568\uc218 Optimizer < DTYPE > * m_aOptimizer ; ///< \uc2e0\uacbd\ub9dd\uc758 Optimizer Device m_Device ; ///< \uc7a5\uce58 \uc0ac\uc6a9 \uad6c\ubd84\uc790, CPU \ub610\ub294 GPU, Device \ucc38\uace0 int m_idOfDevice ; ///< GPU \uc0ac\uc6a9 \uc2dc, \uc0ac\uc6a9\ud558\ub824\ub294 GPU\uc758 \ubc88\ud638. CPU\uc758 \uacbd\uc6b0 -1 9: template < typename DTYPE > int NeuralNetwork < DTYPE >:: Alloc () { return TRUE ; }","title":"src/NeuralNetwork.hpp: NeuralNetwork \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step2/#mnistmy_cnnhpp-my_cnn","text":"\ubd84\uc11d \ubaa9\ud45c NeuralNetwork < float > * net = new my_CNN ( x , label ); \uc774\ud574\ud558\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class my_CNN : public NeuralNetwork < float > { ... public : my_CNN ( Tensorholder < float > * x , Tensorholder < float > * label ) { SetInput ( 2 , x , label ); Operator < float > * out = NULL ; out = new ReShape < float > ( x , 28 , 28 , \"Flat2Image\" ); // ======================= layer 1======================= out = new ConvolutionLayer2D < float > ( out , 1 , 10 , 3 , 3 , 1 , 1 , 0 , FALSE , \"Conv_1\" ); out = new Relu < float > ( out , \"Relu_1\" ); out = new Maxpooling2D < float > ( out , 2 , 2 , 2 , 2 , \"MaxPool_1\" ); // ======================= layer 2======================= out = new ConvolutionLayer2D < float > ( out , 10 , 20 , 3 , 3 , 1 , 1 , 0 , FALSE , \"Conv_2\" ); out = new Relu < float > ( out , \"Relu_2\" ); out = new Maxpooling2D < float > ( out , 2 , 2 , 2 , 2 , \"MaxPool_2\" ); // ======================= layer 3======================= out = new ReShape < float > ( out , 1 , 1 , 5 * 5 * 20 , \"Image2Flat\" ); // ======================= layer 3======================= out = new Linear < float > ( out , 5 * 5 * 20 , 1024 , TRUE , \"Fully-Connected_1\" ); out = new Relu < float > ( out , \"Relu_3\" ); //// ======================= layer 4======================= out = new Linear < float > ( out , 1024 , 10 , TRUE , \"Fully-connected_2\" ); AnalyzeGraph ( out ); // ======================= Select LossFunction Function =================== SetLossFunction ( new SoftmaxCrossEntropy < float > ( out , label , \"SCE\" )); // ======================= Select Optimizer =================== SetOptimizer ( new GradientDescentOptimizer < float > ( GetParameter (), 0.001 , 0.9 , MINIMIZE )); } ... }; 5: template < typename DTYPE > int Module < DTYPE >:: SetInput ( int pNumOfInput , ...) { Operator < DTYPE > * temp = NULL ; va_list ap ; va_start ( ap , pNumOfInput ); for ( int i = 0 ; i < pNumOfInput ; i ++ ) { temp = va_arg ( ap , Operator < DTYPE > * ); this -> SetInput ( temp ); } va_end ( ap ); return TRUE ; } Tensorholder \ub97c \uac00\ubcc0\uc778\uc790\ub85c \uc804\ub2ec\ud558\ub294\ub370 Operator \uc758 \uc790\uc2dd \ud074\ub798\uc2a4\uc774\ubbc0\ub85c va_arg \uc5d0\uc11c \uc800\ub807\uac8c \ud0c0\uc785\uc744 \uc804\ub2ec\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\ub2e4. \uc774 \uba54\uc18c\ub4dc\ub97c \ud1b5\ud574 \ub2e4\uc74c\uc758 \uba54\uc18c\ub4dc\uac00 \ud638\ucd9c\ub41c\ub2e4. template < typename DTYPE > Operator < DTYPE > * Module < DTYPE >:: SetInput ( Operator < DTYPE > * pInput ) { m_apInput -> Push ( pInput ); m_InputDegree ++ ; this -> AddEdgebetweenOperators ( pInput ); return pInput ; } m_apInput \uc73c\ub85c Tensorholder \ub97c Push \ud55c\ub2e4. \uc989 x \uc640 label \uc774 \ud478\uc26c\ub41c\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: AddEdgebetweenOperators ( Operator < DTYPE > * pInput ) { this -> AddInputEdge ( pInput ); pInput -> AddOutputEdge ( this ); return TRUE ; } \uc774 \uba54\uc18c\ub4dc\ub85c \ub4e4\uc5b4\uc640\uc11c \uc5e3\uc9c0\ub97c \uc11c\ub85c \uc5f0\uacb0\ud574\uc900\ub2e4. template < typename DTYPE > int Operator < DTYPE >:: AddInputEdge ( Operator < DTYPE > * pInput ) { m_apInput -> Push ( pInput ); ... } template < typename DTYPE > int Operator < DTYPE >:: AddOutputEdge ( Operator < DTYPE > * pOutput ) { m_apOutput -> Push ( pOutput ); ... } \uadfc\ub370 SetInput \uba54\uc18c\ub4dc\uc5d0\uc11c m_apInput->Push(pInput); \uc744 \ud574\uc92c\ub294\ub370 \uc65c AddInputEdge \uc5d0\uc11c \ub610 \ud574\uc8fc\ub294 \uac70\uc9c0? \uc5b4\uca0c\ub4e0 Tensorholder \uc758 \uc544\uc6c3\ud48b\uc774 \uc774 \ud074\ub798\uc2a4 \uc989, my_CNN \uc774 \ub418\uace0, my_CNN \uc758 \uc778\ud48b\uc774 \ud150\uc11c\ud640\ub354\uac00 \ub41c\ub2e4. 7: template < typename DTYPE > class ReShape : public Operator < DTYPE > { ... ReShape ( Operator < DTYPE > * pInput , int pRowSize , int pColSize , std :: string pName , int pLoadflag = TRUE ) : Operator < DTYPE > ( pInput , pName , pLoadflag ) { this -> Alloc ( pInput , 0 , 0 , 0 , pRowSize , pColSize ); } ... } \uc704 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. template < typename DTYPE > class ReShape : public Operator < DTYPE > { ... int Alloc ( Operator < DTYPE > * pInput , int pTimeSize , int pBatchSize , int pChannelSize , int pRowSize , int pColSize ) { Shape * pInputShape = pInput -> GetResult () -> GetShape (); if ( pTimeSize == 0 ) pTimeSize = ( * pInputShape )[ 0 ]; if ( pBatchSize == 0 ) pBatchSize = ( * pInputShape )[ 1 ]; if ( pChannelSize == 0 ) pChannelSize = ( * pInputShape )[ 2 ]; Tensor < DTYPE > * result = new Tensor < DTYPE > ( pInput -> GetResult ()); result -> ReShape ( pTimeSize , pBatchSize , pChannelSize , pRowSize , pColSize ); this -> SetResult ( result ); // copy data this -> SetDelta ( new Tensor < DTYPE > ( pTimeSize , pBatchSize , pChannelSize , pRowSize , pColSize )); return TRUE ; } ... } \uc774 \ucf54\ub4dc\ub294 \ub2e8\uc9c0 1, BATCH, 1, 1, 784 \ud615\uc0c1\uc73c\ub85c \uc0dd\uc131\ub41c \ud150\uc11c\ud640\ub354\ub97c ..., 28, 28 \ud615\uc0c1\uc73c\ub85c \ubc14\uafb8\uc5b4\uc8fc\ub294 \uac83 \uac19\ub2e4. \ucca8\ubd80\ud130 28, 28 \ub85c \ud588\uc73c\uba74 \uc548\ubc14\uafd4\ub3c4 \ub418\uc9c0 \uc54a\ub098? \uadf8\ub9ac\uace0 \uc774\ub807\uac8c int \ub97c \ubc1b\uc744 \ud544\uc694\uc5c6\uc774 \uac00\ubcc0 \ud615\uc0c1\uc744 \ubc1b\uc744 \uc218 \uc788\uc5b4\uc57c \ud560\ud150\ub370. SetResult \ub294 m_aaResult \ub97c \ucd08\uae30\ud654\ud558\uace0 SetDelta \ub294 m_aaGradient \ub97c \ucd08\uae30\ud654\ud55c\ub2e4. 9: template < typename DTYPE > class ConvolutionLayer2D : public Module < DTYPE > { private : public : ConvolutionLayer2D ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pNumKernelRow , int pNumKernelCol , int pStrideRow , int pStrideCol , int pPadding , int use_bias = FALSE , std :: string pName = \"NO NAME\" ) : Module < DTYPE > ( pName ){ Alloc ( pInput , pNumInputChannel , pNumOutputChannel , pNumKernelRow , pNumKernelCol , pStrideRow , pStrideCol , pPadding , pPadding , use_bias , pName ); } \uc880 \uc804\uc5d0 \uc0dd\uc131\ud55c 28, 28 \ud615\uc0c1 \ub370\uc774\ud130\uc640 \uc785\ub825 \ucc44\ub110 1 , \ucd9c\ub825 \ucc44\ub110 10 , \\(3 \\times 3\\) \ucee4\ub110, \uc2a4\ud2b8\ub77c\uc774\ub4dc \\(s = 1 \\times 1\\) , \ud328\ub529 \\(p = 0\\) \uc73c\ub85c \ud569\uc131\uacf1 \uacc4\uce35\uc744 \ub9cc\ub4e0\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 template < typename DTYPE > class ConvolutionLayer2D : public Module < DTYPE > { int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pNumKernelRow , int pNumKernelCol , int pStrideRow , int pStrideCol , int pPaddingRow , int pPaddingCol , int use_bias , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * out = pInput ; Tensorholder < DTYPE > * pWeight = new Tensorholder < DTYPE > ( Tensor < DTYPE >:: Random_normal ( 1 , pNumOutputChannel , pNumInputChannel , pNumKernelRow , pNumKernelCol , 0.0 , 0.02 ), \"Convolution2D_Weight_\" + pName ); out = new Convolution2D < DTYPE > ( out , pWeight , pStrideRow , pStrideCol , pPaddingRow , pPaddingCol , \"Convolution2D_Convolution2D_\" + pName ); if ( use_bias ){ Tensorholder < DTYPE > * pBias = new Tensorholder < DTYPE > ( Tensor < DTYPE >:: Constants ( 1 , 1 , pNumOutputChannel , 1 , 1 , 0 ), \"Convolution2D_Bias_\" + pName ); out = new AddChannelWise < DTYPE > ( out , pBias , \"Convolution2D_Add_\" + pName ); } this -> AnalyzeGraph ( out ); return TRUE ; } }; 3: \uc774\uc804\uc5d0 \uc0dd\uc131\ub41c \ud150\uc11c\ud640\ub354\ub97c pInput \uc73c\ub85c \uc804\ub2ec\ubc1b\uc544 SetInput \uc5d0 \uc804\ub2ec\ud55c\ub2e4. \uc774 \uba54\uc18c\ub4dc\ub294 \uc774\ubbf8 \uc0b4\ud3b4\ubd24\ub4ef\uc774 m_apInput \uc5d0 pInput \uc744 Push \ud558\uace0 AddEdgebetweenOperators \ub85c \ub450 \uc5e3\uc9c0\ub97c \uc11c\ub85c \uc5f0\uacb0\ud55c\ub2e4. 5: \\(\\mu = 0.0, \\sigma = 0.02\\) \ub85c \uc0dd\uc131\ub41c \ub79c\ub364\uac12\uc73c\ub85c \uac00\uc911\uce58 \ucee4\ub110\uc744 \uc0dd\uc131\ud55c\ub2e4. 6: \uc0dd\uc131\ub41c \uac00\uc911\uce58 \ud544\ud130\uc640 \uc2a4\ud2b8\ub77c\uc774\ub4dc, \ud328\ub529 \uc815\ubcf4\ub97c Convolution2D \uac1d\uccb4\uc5d0 \uc804\ub2ec\ud55c\ub2e4. template < typename DTYPE > class Convolution2D : public Operator < DTYPE > { private : int m_stride [ 2 ]; // [0]\uc740 row, [1]\uc740 colunm\uc744 \uac01\uac01 \uc758\ubbf8\ud55c\ub2e4. int m_padding [ 2 ]; // [0]\uc740 height, [1]\uc740 width\ub97c \uac01\uac01 \uc758\ubbf8\ud55c\ub2e4. ... Convolution2D ( Operator < DTYPE > * pInput , Operator < DTYPE > * pWeight , int stride1 , int stride2 , std :: string pName = \"NO NAME\" , int pLoadflag = TRUE ) : Operator < DTYPE > ( pInput , pWeight , pName , pLoadflag ) { Alloc ( pInput , pWeight , stride1 , stride2 , 0 , 0 ); } ... \uc0dd\uc131\uc790\ub294 \ub2e8\uc9c0 Alloc \uba54\uc18c\ub4dc\uc5d0 \ud30c\ub77c\ubbf8\ud130\ub97c \ud3ec\uc6cc\ub529\ud574\uc900\ub2e4. \uadf8\ub9ac\uace0 Operator \uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0 pInput , \uc989 \uae30\uc874\uc5d0 ConvolutionLayer2D \uc758 out \uc73c\ub85c \uc804\ub2ec\ub41c \uac1d\uccb4\ub97c \uc804\ub2ec\ud55c\ub2e4. \ub79c\ub364\uac12\uc73c\ub85c \uc0dd\uc131\ub41c \uac00\uc911\uce58\ub3c4 Operator \uc5d0 \ud568\uaed8 \uc804\ub2ec\ud574\uc900\ub2e4. \uc774 \uacbd\uc6b0 \ub2e4\uc74c\uc758 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. template < typename DTYPE > Operator < DTYPE >:: Operator ( Operator < DTYPE > * pInput0 , Operator < DTYPE > * pInput1 , std :: string pName , int pLoadflag ) { ... Alloc (); AddEdgebetweenOperators ( 2 , pInput0 , pInput1 , pLoadflag ); } \uc989, \ud544\uc694\ud55c \ucd08\uae30\ud654\ub97c \ud55c \ud6c4 \uc804\ub2ec\ub41c \ub450 Operator \ub97c \uc11c\ub85c \uc5f0\uacb0\ud574\uc8fc\uace0 \uc788\ub2e4. \uc774\ud6c4 Alloc \uba54\uc18c\ub4dc\ub85c \uc785\ub825 Operator , \uac00\uc911\uce58 Operator , \uc2a4\ud2b8\ub77c\uc774\ub4dc, \ud328\ub529\uc744 \uc804\ub2ec\ud574\uc900\ub2e4. Note \ud328\ub529\uc740 0 \uc73c\ub85c \ud558\ub4dc\ucf54\ub529\ub418\uc5b4\uc788\ub124. \uc65c\uadf8\ub7f4\uae4c? template < typename DTYPE > class Convolution2D : public Operator < DTYPE > { ... int Alloc ( Operator < DTYPE > * pInput , Operator < DTYPE > * pWeight , int stride1 , int stride2 , int padding1 , int padding2 ) { int outputWidth = 0 ; int outputHeight = 0 ; Shape * shapeOfInput = pInput -> GetResult () -> GetShape (); Shape * shapeOfWeight = pWeight -> GetResult () -> GetShape (); m_stride [ 0 ] = stride1 ; m_stride [ 1 ] = stride2 ; m_padding [ 0 ] = padding1 ; m_padding [ 1 ] = padding2 ; outputHeight = (( * shapeOfInput )[ 3 ] - ( * shapeOfWeight )[ 3 ] + ( 2 * m_padding [ 0 ])) / m_stride [ 0 ] + 1 ; outputWidth = (( * shapeOfInput )[ 4 ] - ( * shapeOfWeight )[ 4 ] + ( 2 * m_padding [ 1 ])) / m_stride [ 1 ] + 1 ; this -> SetResult ( new Tensor < DTYPE > (( * shapeOfInput )[ 0 ], ( * shapeOfInput )[ 1 ], ( * shapeOfWeight )[ 1 ], outputHeight , outputWidth )); this -> SetDelta ( new Tensor < DTYPE > (( * shapeOfInput )[ 0 ], ( * shapeOfInput )[ 1 ], ( * shapeOfWeight )[ 1 ], outputHeight , outputWidth )); return TRUE ; } \ud569\uc131\uacf1 \uacc4\uce35\uc5d0\uc11c \uc2a4\ud2b8\ub77c\uc774\ub4dc\uc640 \ud328\ub529\uc5d0 \ub530\ub978 \ucd9c\ub825 \ub370\uc774\ud130 \ud615\uc0c1\uc744 \uad6c\ud558\ub294 \uacf5\uc2dd\uc5d0 \ub530\ub77c\uc11c outputHeight, outputWidth \ub97c \ucd08\uae30\ud654\ud55c\ub2e4. \uadf8\ub7ec\uace0 \ub098\uc11c \uc801\uc808\ud55c \ud615\uc0c1\uc73c\ub85c Tensor \uac1d\uccb4\ub97c \ub9cc\ub4e4\uace0 m_aaResult \uc640 m_aaGradient \ub97c \uc0dd\uc131\ud574\uc8fc\uace0 \ub05d\ub0b8\ub2e4. 12: \ub9c8\uc9c0\ub9c9\uc73c\ub85c AnalyzeGraph \ub97c \ud638\ucd9c\ud558\uace0 \ub05d\ub0b8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 template < typename DTYPE > Operator < DTYPE > * Module < DTYPE >:: AnalyzeGraph ( Operator < DTYPE > * pResultOperator ) { Container < Operator < DTYPE > *> queue ; queue . Push ( pResultOperator ); m_pLastOperator = pResultOperator ; Container < Operator < DTYPE > *> * nextOp = NULL ; Container < Operator < DTYPE > *> * prevOp = NULL ; int numOfInputEdge = 0 ; Operator < DTYPE > * out = NULL ; while ( queue . GetSize () > 0 ) { out = queue . Pop (); if ( ! ( this -> IsInput ( out ))) { if ( this -> IsValid ( out )) { if ( out -> GetIsTensorholder ()) { this -> SetParameter ( out ); } else { this -> SetExecutableOperater ( out ); } nextOp = out -> GetInputContainer (); numOfInputEdge = nextOp -> GetSize (); for ( int i = 0 ; i < numOfInputEdge ; i ++ ) { prevOp = ( * nextOp )[ i ] -> GetOutputContainer (); prevOp -> Pop ( out ); queue . Push (( * nextOp )[ i ]); } } else continue ; } else continue ; } m_aaExcutableOperator -> Reverse (); return pResultOperator ; } AnalyzeGraph \ub294 \uc8fc\uc11d\uc5d0 \ub530\ub974\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \uae30\ub2a5\uc744 \ud55c\ub2e4. comment \ud559\uc2b5 \uac00\ub2a5\ud55c \ud615\ud0dc\ub85c \ubaa8\ub4c8 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud574\uc8fc\ub294 \uba54\uc18c\ub4dc \ubaa8\ub4c8\uc758 Output\uc5d0 \ud574\ub2f9\ud558\ub294 Operator\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc544 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9\uc73c\ub85c \ubaa8\ub4c8 \uadf8\ub798\ud504\ub97c \uad6c\uc131\ud55c\ub2e4. \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 \ubaa8\ub4c8\uc758 Output\uc5d0 \ud574\ub2f9\ud558\ub294 Operator\ub97c \uc2dc\uc791\uc73c\ub85c \ubaa8\ub4c8\uc758 Input\uc5d0 \ud574\ub2f9\ud558\ub294 Operator\uae4c\uc9c0 \uc5ed\uc21c\uc73c\ub85c, Operator\uac00 Input Tensor \ubc0f \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130\uc778 \uacbd\uc6b0 Module \ud074\ub798\uc2a4\uc758 Input Container \uba64\ubc84 \ubcc0\uc218\uc5d0 \ucd94\uac00\ud558\uace0 \ub098\uba38\uc9c0 \uacbd\uc6b0\uc5d0\ub294 Module \ud074\ub798\uc2a4\uc758 Excutable Operator Container \uba64\ubc84 \ubcc0\uc218\uc5d0 \ucd94\uac00\ud55c\ub2e4. NeuralNetwork \ud074\ub798\uc2a4\uc758 Excutable Operator Container \uba64\ubc84 \ubcc0\uc218\uc5d0 Operator\ub4e4\uc774 \ubaa8\ub450 \ucd94\uac00\ub418\uba74 Container\ub97c \uc5ed\uc21c\uc73c\ub85c \ubcc0\uacbd\ud55c\ub2e4. Operator \ud0d0\uc0c9 \uc21c\uc11c\ub294 \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9\uc744 \ub530\ub974\uba70, \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uc740 Output Operator\ubd80\ud130 \ud574\ub2f9 Operator\uc758 Input Operator \ub9ac\uc2a4\ud2b8\ub97c \ub108\ube44 \uc6b0\uc120 \ud0d0\uc0c9 \ubc29\uc2dd\uc744 \uc774\uc6a9\ud574 \uc21c\uc11c\ub300\ub85c \uc9c4\ud589\ud55c\ub2e4. \uac01 Operator\ub4e4\uc740 Module ::IsValid(Operator *pOperator) \uba54\uc18c\ub4dc\ub97c \uc774\uc6a9\ud558\uc5ec \ubaa8\ub4c8 \uadf8\ub798\ud504 \uc548\uc5d0\uc11c\uc758 \uc911\ubcf5 \uc5ec\ubd80\ub97c \ud655\uc778\ud558\uba70 \uc911\ubcf5\ub418\ub294 \uacbd\uc6b0 \uadf8\ub798\ud504\uc5d0 \ucd94\uac00\ud558\uc9c0 \uc54a\ub294\ub2e4. \uba54\uc18c\ub4dc \uc774\ub984\uacfc \ub2e4\ub974\uac8c this->SetExecutableOperater(out); \ub294 Set \uae30\ub2a5\uc744 \ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c Add \uae30\ub2a5, \uc989 Push \uae30\ub2a5\uc744 \ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uacb0\uad6d \ucee8\ud14c\uc774\ub108 m_aaExcutableOperator \uc5d0 \uc2e4\ud589\uac00\ub2a5\ud55c Operator \ub97c \ucb49 \ub123\uc5b4\uc8fc\uac8c \ub41c\ub2e4. this->SetParameter(out); \ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c \ud30c\ub77c\ubbf8\ud130\uc778 Operator \ub97c m_apParameter \uc5d0 Add \ud574\uc900\ub2e4. 22: nextOp = out->GetInputContainer(); \ub85c out \uc758 \uc778\ud48b \ucee8\ud14c\uc774\ub108\uc5d0 \uc874\uc7ac\ud558\ub294 Operator \ub4e4\uc744 nextOp \uc5d0 \uc800\uc7a5\ud558\uace0 \ub2e4\uc2dc \ud050\uc5d0 \uc800\uc7a5\ud55c\ub2e4. template < typename DTYPE > class ConvolutionLayer2D : public Module < DTYPE > { int Alloc ( Operator < DTYPE > * pInput , int pNumInputChannel , int pNumOutputChannel , int pNumKernelRow , int pNumKernelCol , int pStrideRow , int pStrideCol , int pPaddingRow , int pPaddingCol , int use_bias , std :: string pName ) { this -> SetInput ( pInput ); ... \uc704 \ucf54\ub4dc\uc758 SetInput \uc5d0\uc11c pInput \uc774 \uc800\uc7a5\ub41c \uac83\uc774 \ub098\uc624\uac8c \ub41c\ub2e4. pInput \uc740 out = new ReShape<float>(x, 28, 28, \"Flat2Image\"); \uc5d0\uc11c \uc628 \uac83\uc774\uc5c8\ub2e4. \uc774 pInput \uc774 \ub2e4\uc2dc out = new Convolution2D < DTYPE > ( out , pWeight , pStrideRow , pStrideCol , pPaddingRow , pPaddingCol , \"Convolution2D_Convolution2D_\" + pName ); \ub85c \ub4e4\uc5b4\uac14\ub2e4\uac00 AnalyzeGraph \ub85c \ub4e4\uc5b4\uac04 \uac83\uc774\uc5c8\ub2e4. \ub2e4\uc2dc.. Convolution2D \uc5d0\uc11c\ub294 Convolution2D ( Operator < DTYPE > * pInput , Operator < DTYPE > * pWeight , int stride1 , int stride2 , std :: string pName = \"NO NAME\" , int pLoadflag = TRUE ) : Operator < DTYPE > ( pInput , pWeight , pName , pLoadflag ) { Alloc ( pInput , pWeight , stride1 , stride2 , 0 , 0 ); } \uc774\uac8c \ud638\ucd9c \ub418\uace0, \uc774\uc5d0 \ub530\ub77c Operator \uc5d0\uc11c template < typename DTYPE > Operator < DTYPE >:: Operator ( Operator < DTYPE > * pInput0 , Operator < DTYPE > * pInput1 , std :: string pName , int pLoadflag ) { ... Alloc (); AddEdgebetweenOperators ( 2 , pInput0 , pInput1 , pLoadflag ); } \uc774\uac8c \ud638\ucd9c \ub418\uace0, template < typename DTYPE > int Operator < DTYPE >:: AddEdgebetweenOperators ( Operator < DTYPE > * pInput ) { this -> AddInputEdge ( pInput ); pInput -> AddOutputEdge ( this ); return TRUE ; } \uc774\uac8c \ud638\ucd9c\ub418\uace0 template < typename DTYPE > int Operator < DTYPE >:: AddInputEdge ( Operator < DTYPE > * pInput ) { ... m_apInput -> Push ( pInput ); ... } \uc774\uac8c \ud638\ucd9c\ub41c\ub2e4. \uc77c\ub2e8 SetInput \ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c Set \uae30\ub2a5\uc774 \uc544\ub2c8\ub77c Add \uae30\ub2a5\uc744 \ud558\ub294 \uba54\uc18c\ub4dc\uc600\uc5c8\ub2e4. \uadf8\ub7ec\ub2c8\uae4c \uc815\ub9ac\ud558\uc790\uba74 \ub9e8 \ucc98\uc74c\uc5d0 ConvolutionLayer2D \uc758 SetInput \uc744 \ud1b5\ud574 ConvolutionLayer2D \uac1d\uccb4\uc758 m_apInput \uc5d0 \uc804\ub2ec\ub41c ReShape \uac1d\uccb4\uc778 pInput \uc774 Push \ub418\uc5c8\uace0, Convolution2D \uc758 \uc0c1\uc704\ud074\ub798\uc2a4 Operator \uc758 \uc0dd\uc131\uc790 \uc18d\uc758 AddEdgebetweenOperators \uc18d\uc758 AddInputEdge \uc5d0 pInput \uc5d0 \uc800\uc7a5\ub418\uc5b4 \uc788\ub358 ReShape \uac1d\uccb4\uc778 out \uc804\ub2ec\ub418\ub294\ub370, \uc774\uac83\uc774 Convolution2D \uac1d\uccb4\uc758 m_apInput \uc5d0 Push \ub418\uace0, ReShape \uac1d\uccb4\uc758 m_apOutput \uc5d0 Convolution2D \uac00 Push \ub41c\ub2e4. Danger \ub370\uc774\ud130 \uad6c\uc870\ub97c \uc880 \uc2ec\ud50c\ud558\uac8c \ub9cc\ub4e4 \ud544\uc694\uac00 \uc788\uc5b4\ubcf4\uc774\ub294\ub370, \uc911\ubcf5\uc73c\ub85c Push \ud558\ub294 \ubd80\ubd84\ub3c4 \ub9ce\uc544 \ubcf4\uc774\uace0, \uadf8\ub798\uc11c isValid \ub97c \ud638\ucd9c\ud574\uc57c\ub9cc \ud558\ub294 \uac83 \uac19\uace0, \uc0c1\uc18d \uad6c\uc870\ub3c4 \ucf54\ub4dc \ubd84\uc11d\uc744 \ub09c\ud574\ud558\uac8c \ub9cc\ub4dc\ub294 \ubd88\ud544\uc694\ud55c \uc0c1\uc18d\uad00\uacc4\uac00 \ub9ce\uc740 \uac83 \uac19\ub2e4.k \uc804\uccb4\uc801\uc778 \uad6c\uc870\uac00 \ub2e8\uc21c\ud560 \uc218 \uc788\ub294\ub370, \ubd88\ud544\uc694\ud558\uac8c \ub108\ubb34 \ubcf5\uc7a1\ud574\uc9c4 \uac83 \uac19\uace0, \uc911\ubcf5 \ub85c\uc9c1\uc774 \ub108\ubb34 \ub9ce\uace0, \ubd88\ud544\uc694\ud55c \ub85c\uc9c1\ub3c4 \ub108\ubb34 \ub9ce\uc544 \ubcf4\uc778\ub2e4. \uc774\ub7ec\uba74 \ucf54\ub4dc \uad00\ub9ac\uac00 \uacc4\uc18d \uacc4\uc18d \ud798\ub4e4\uc5b4\uc9c0\uac8c \ub41c\ub2e4. \uc5b4\uca0c\ub4e0 \uacb0\uad6d Convolution2D \uc758 GetInputContainer \ub97c \ud1b5\ud574 ReShape \uac1d\uccb4\uac00 \ub098\uc624\uac8c \ub41c\ub2e4. 10-22: Relu , Maxpooling2D \uc740 \ub2e8\uc21c\ud788 \ub2e4\uc74c\uc758 \uc0dd\uc131\uc790\ub97c \uac16\ub294\ub2e4. Relu ( Operator < DTYPE > * pInput , std :: string pName , int pLoadflag = TRUE ) : Operator < DTYPE > ( pInput , pName , pLoadflag ) { this -> Alloc ( pInput ); } int Alloc ( Operator < DTYPE > * pInput ) { int timesize = pInput -> GetResult () -> GetTimeSize (); int batchsize = pInput -> GetResult () -> GetBatchSize (); int channelsize = pInput -> GetResult () -> GetChannelSize (); int rowsize = pInput -> GetResult () -> GetRowSize (); int colsize = pInput -> GetResult () -> GetColSize (); this -> SetResult ( new Tensor < DTYPE > ( timesize , batchsize , channelsize , rowsize , colsize )); this -> SetDelta ( new Tensor < DTYPE > ( timesize , batchsize , channelsize , rowsize , colsize )); return TRUE ; } \uc774\ub54c Operator \uc758 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub418\ubbc0\ub85c \uc778\ud48b\uacfc \uc544\uc6c3\ud48b\uc744 \uc124\uc815\ud574\uc8fc\ub294 \uacfc\uc815\uc774 \ub610 \uc9c4\ud589\ub41c\ub2e4. Maxpooling2D ( Operator < DTYPE > * pInput , int maskRow , int maskCol , int strideRow , int strideCol , int padding , std :: string pName , int pLoadflag = TRUE ) : Operator < DTYPE > ( pInput , pName , pLoadflag ) { this -> Alloc ( pInput , strideRow , strideCol , maskRow , maskCol , padding , padding ); } int Alloc ( Operator < DTYPE > * pInput , int strideRow , int strideCol , int maskRow , int maskCol , int padding1 = 0 , int padding2 = 0 ) { Shape * shapeOfInput = pInput -> GetResult () -> GetShape (); m_stride [ 0 ] = strideRow ; m_stride [ 1 ] = strideCol ; m_mask [ 0 ] = maskRow ; m_mask [ 1 ] = maskCol ; m_padding [ 0 ] = padding1 ; m_padding [ 1 ] = padding2 ; int rowsize = 0 ; int colsize = 0 ; rowsize = (( * shapeOfInput )[ 3 ] - maskRow + ( 2 * m_padding [ 0 ])) / strideRow + 1 ; colsize = (( * shapeOfInput )[ 4 ] - maskCol + ( 2 * m_padding [ 1 ])) / strideCol + 1 ; this -> SetResult ( new Tensor < DTYPE > (( * shapeOfInput )[ 0 ], ( * shapeOfInput )[ 1 ], ( * shapeOfInput )[ 2 ], rowsize , colsize )); this -> SetDelta ( new Tensor < DTYPE > (( * shapeOfInput )[ 0 ], ( * shapeOfInput )[ 1 ], ( * shapeOfInput )[ 2 ], rowsize , colsize )); indexOfMaxInput = new Tensor < int > (( * shapeOfInput )[ 0 ], ( * shapeOfInput )[ 1 ], ( * shapeOfInput )[ 2 ], rowsize , colsize ); return TRUE ; } Maxpooling2D \ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c Operator \uc758 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub418\uc5b4 \uc778\ud48b\uacfc \uc544\uc6c3\ud48b\uc774 \uc124\uc815\ub41c\ub2e4. Linear \uac1d\uccb4\uc5d0\uc11c\ub294 Linear ( Operator < DTYPE > * pInput , int pNumInputCol , int pNumOutputCol , int use_bias = FALSE , std :: string pName = \"No Name\" ) : Module < DTYPE > ( pName ) { Alloc ( pInput , pNumInputCol , pNumOutputCol , use_bias , pName ); } int Alloc ( Operator < DTYPE > * pInput , int pNumInputCol , int pNumOutputCol , int use_bias , std :: string pName ) { this -> SetInput ( pInput ); Operator < DTYPE > * out = pInput ; // for He initialization float stddev = sqrt (( float ) 4 / ( pNumInputCol + pNumOutputCol )); Tensorholder < DTYPE > * pWeight = new Tensorholder < DTYPE > ( Tensor < DTYPE >:: Random_normal ( 1 , 1 , 1 , pNumOutputCol , pNumInputCol , 0.0 , stddev ), \"Layer_Weight_\" + pName ); out = new MatMul < DTYPE > ( pWeight , out , \"Layer_MatMul_\" + pName ); if ( use_bias ) { Tensorholder < DTYPE > * pBias = new Tensorholder < DTYPE > ( Tensor < DTYPE >:: Constants ( 1 , 1 , 1 , 1 , pNumOutputCol , 0.f ), \"Add_Bias_\" + pName ); out = new AddColWise < DTYPE > ( out , pBias , \"Layer_Add_\" + pName ); } this -> AnalyzeGraph ( out ); return TRUE ; } Module \uc758 template < typename DTYPE > Module < DTYPE >:: Module ( std :: string pName ) : Operator < DTYPE > ( pName ) { m_aaExcutableOperator = NULL ; m_numOfExcutableOperator = 0 ; m_pLastOperator = NULL ; m_idOfDevice = -1 ; Alloc (); } \uc774 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub418\uace0 \ub2e4\uc2dc Operator \uc758 template < typename DTYPE > Operator < DTYPE >:: Operator ( std :: string pName , int pLoadflag ) { m_apOutput = NULL ; m_apInput = NULL ; m_aaResult = NULL ; m_aaGradient = NULL ; m_name = pName ; m_Device = CPU ; m_Mode = TRAIN ; m_isParameter = FALSE ; m_isTrainable = FALSE ; m_idOfDevice = -1 ; m_Loadflag = TRUE ; Alloc (); } \uc774 \uc0dd\uc131\uc790\uac00 \ud638\ucd9c\ub41c\ub2e4. \u314b\u314b\u314b Danger AnalyzeGraph \ub97c \ub05d\uc5c6\uc774 \ud558\uace0 \uc788\ub294\ub370, \ud559\uc2b5 \uac00\ub2a5 \uadf8\ub798\ud504\ub97c \uc5ec\ub7ec\ubc88 \ub9cc\ub4dc\ub294 \uac8c \uac00\uce58\uac00 \uc788\ub098? \uc774\ub7f0 \uc5f0\uc0b0\uc740 \ub9c8\uc9c0\ub9c9\uc5d0 \ud55c\ubc88\ub9cc \ud574\ub3c4 \ub418\uc9c0 \uc54a\ub098? \uadf8\ub9ac\uace0 \uc560\ucd08\uc5d0 \ub370\uc774\ud130\uad6c\uc870\ub97c \uc798 \uc120\ud0dd\ud588\ub2e4\uba74, \uc774\ub7ec\ud55c \ud559\uc2b5 \uac00\ub2a5 \uadf8\ub798\ud504\ub97c \ub9cc\ub4dc\ub294 \uc5f0\uc0b0 \uc790\uccb4\uac00 \ud544\uc694 \uc5c6\ub2e4. Ordered Dictionary \ub098 Sequence \uac19\uc740 \uac83\ub4e4. Queue \ub97c \ub370\uc774\ud130\uad6c\uc870\ub85c \ucc44\ud0dd\ud55c \uac83\ub54c\ubb38\uc5d0 \uc2a4\ub178\uc6b0\ubcfc\uc774 \ub108\ubb34 \uad74\ub7ec\uac00\uc11c \uad6c\uc870\uac00 \ub108\ubb34 \ubcf5\uc7a1\ud574\uc9c4 \uac83 \uac19\uc740\ub370. 23: \ub9c8\uc9c0\ub9c9\uc5d0 AnalyzeGraph \ub97c \ud55c\ubc88 \ub354 \ud638\ucd9c\ud574\uc900\ub2e4. 25-27: \uc190\uc2e4 \ud568\uc218\uc640 \ucd5c\uc801\ud654 \ud568\uc218\ub97c \ucd08\uae30\ud654\ud574\uc8fc\ub294\ub370 \ubcfc \ud544\uc694\ub3c4 \uc5c6\uc774 template < typename DTYPE > class NeuralNetwork : public Module < DTYPE > { private : LossFunction < DTYPE > * m_aLossFunction ; ///< \uc2e0\uacbd\ub9dd\uc758 \uc190\uc2e4\ud568\uc218\uc5d0 \ud574\ub2f9\ud558\ub294 LossFunction\uc758 \ud3ec\uc778\ud130 \uba64\ubc84 \ubcc0\uc218 Optimizer < DTYPE > * m_aOptimizer ; \uc598\ub124 \ub4e4\uc744 \ucd08\uae30\ud654\ud574\uc8fc\ub294 \uc560\ub4e4\uc77c \uac83 \uac19\ub2e4. template < typename DTYPE > LossFunction < DTYPE > * NeuralNetwork < DTYPE >:: SetLossFunction ( LossFunction < DTYPE > * pLossFunction ) { m_aLossFunction = pLossFunction ; return pLossFunction ; } template < typename DTYPE > Optimizer < DTYPE > * NeuralNetwork < DTYPE >:: SetOptimizer ( Optimizer < DTYPE > * pOptimizer ) { m_aOptimizer = pOptimizer ; return pOptimizer ; } ForwardPropagateOnGPU \uac00 \uc65c NeuralNetwork \uc5d0 \uc788\ub294 \uac8c \uc544\ub2c8\ub77c Module \uc5d0 \uc788\uc9c0? \uc544 \uc0c1\uc18d \uad00\uacc4\ub97c \uc9c0\ud0a4\ub824\uace0, \uc774\ub97c \ud1b5\ud574 \ud074\ub798\uc2a4 \uad6c\uc870\ub97c \uc9c0\ud0a4\ub824\uace0.","title":"MNIST/my_CNN.hpp: my_CNN \uc0dd\uc131\uc790"},{"location":"sync/fewshot/step3/","text":"(step3 \uc5ed\uc804\ud30c)","title":"Step 3. \uc5ed\uc804\ud30c"},{"location":"sync/fewshot/step4/","text":"(step4 \ucd5c\uc801\ud654)","title":"Step 4. \ucd5c\uc801\ud654"},{"location":"sync/fewshot/temp/","text":"\ubbf8\uc644\uc131 \u00b6 LFW/LFWSampler.hpp \u00b6 \ud074\ub798\uc2a4 \ubd84\uc11d\uc758 \uc2dc\uc791\uc740 \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\uc640 \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud558\ub294 \uac83\uc774\ubbc0\ub85c \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. \uc9c0\uae08\uc758 \ubaa9\ud45c\ub294 LFWSampler \uacfc LFWSampler::GetDataFromGlobalBuffer \uc744 \uc774\ud574\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ... template < typename DTYPE > class LFWSampler : public DataLoader < DTYPE > { private : /* data */ int m_numOfClass ; public : LFWSampler ( int numOfClass , Dataset < DTYPE > * dataset , int batchSize = 1 , int useShuffle = FALSE , int numOfWorker = 1 , int dropLast = TRUE ); virtual ~ LFWSampler (); virtual void MakeAllOfIndex ( std :: vector < int > * pAllOfIndex ); virtual void DataPreprocess (); void Tensor2Image ( std :: string filename , Tensor < DTYPE > * imgTensor , int doValuerScaling ); }; 3 : LFWSampler \ub294 DataLoader \ub97c \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc785\ub2c8\ub2e4. 9 : \uba3c\uc800 \uc0dd\uc131\uc790\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. 1 2 3 4 template < typename DTYPE > LFWSampler < DTYPE >:: LFWSampler ( int numOfClass , Dataset < DTYPE > * dataset , int batchSize , int useShuffle , int numOfWorker , int dropLast ) : DataLoader < DTYPE > ( dataset , batchSize , useShuffle , numOfWorker , dropLast ) { m_numOfClass = numOfClass ; } 2 : \uc0dd\uc131\uc790\uc5d0\uc11c\ub294 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub85c \uc0c1\uc704 \ud074\ub798\uc2a4\uc778 DataLoader \ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. 3 : \uadf8\ub9ac\uace0 \ub2e8\uc9c0 numOfClass \ub97c m_numOfClass \uc5d0 \uc800\uc7a5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ucf54\ub4dc\ub3c4 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub85c \ucd08\uae30\ud654\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc544\uc694. \ud558\uc9c0\ub9cc LFWSampler \uc5d0 GetDataFromGlobalBuffer \uac00 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc558\uc5b4\uc694. \uadf8\ub7ec\ub2c8\uae4c \uc0c1\uc704 \ud074\ub798\uc2a4\uc778 DataLoader \ub97c \ubd84\uc11d\ud574\uc57c \ud560 \uac83 \uac19\uc544\uc694. src/DataLoader.hpp \u00b6 \ud074\ub798\uc2a4 \ubd84\uc11d\uc758 \uc2dc\uc791\uc740 \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\uc640 \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud558\ub294 \uac83\uc774\ubbc0\ub85c \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 template < typename DTYPE > class DataLoader { private : /* data */ Dataset < DTYPE > * m_pDataset ; int m_lenOfDataset ; int m_numOfEachDatasetMember ; std :: thread m_aThreadForDistInfo ; std :: thread * m_aaWorkerForProcess ; // dynamic allocation int m_numOfWorker ; int m_nowWorking ; // for distribute data info std :: queue < std :: vector < int > *> m_splitedIdxBuffer ; sem_t m_distIdxFull ; // numOfthread + 1; sem_t m_distIdxEmpty ; sem_t m_distIdxMutex ; int m_batchSize ; int m_dropLast ; // implement yet int m_useShuffle ; // for global buffer std :: queue < std :: vector < Tensor < DTYPE > *> *> m_globalBuffer ; sem_t m_globalFull ; // numOfthread * 2 sem_t m_globalEmpty ; sem_t m_globalMutex ; void Alloc (); void Delete (); void Init (); public : DataLoader ( Dataset < DTYPE > * dataset , int batchSize = 1 , int useShuffle = FALSE , int numOfWorker = 1 , int dropLast = TRUE ); virtual ~ DataLoader (); void StartProcess (); void StopProcess (); // distribute data idx to each thread void DistributeIdxOfData2Thread (); virtual void MakeAllOfIndex ( std :: vector < int > * pAllOfIndex ); virtual void DataPreprocess (); void Push2IdxBuffer ( std :: vector < int > * setOfIdx ); std :: vector < int > * GetIdxSetFromIdxBuffer (); Tensor < DTYPE > * Concatenate ( std :: queue < Tensor < DTYPE > *>& setOfData ); void Push2GlobalBuffer ( std :: vector < Tensor < DTYPE > *> * preprocessedData ); std :: vector < Tensor < DTYPE > *>* GetDataFromGlobalBuffer (); int GetBatchSize (){ return m_batchSize ;} int GetWorkingSignal (){ return m_nowWorking ;} int GetNumOfEachDatasetMember (){ return m_numOfEachDatasetMember ;} Dataset < DTYPE > * GetDataset (){ return m_pDataset ;} // static int random_generator(int upperbound); }; 1 : DataLoader \ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc73c\ub85c \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. 34 : \uc0dd\uc131\uc790\uac00 \uc774\ub807\uac8c \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud574\ubd05\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 template < typename DTYPE > DataLoader < DTYPE >:: DataLoader ( Dataset < DTYPE > * dataset , int batchSize , int useShuffle , int numOfWorker , int dropLast ) { this -> Init (); // need to default value to run the data loader (background) m_pDataset = dataset ; // batch size m_batchSize = batchSize ; assert ( m_batchSize > 0 ); // random or not m_useShuffle = useShuffle ; // number of thread m_numOfWorker = numOfWorker ; assert ( m_numOfWorker > 0 ); // Drop last m_dropLast = dropLast ; // elicit information of data; m_lenOfDataset = m_pDataset -> GetLength (); assert ( m_lenOfDataset > 0 ); m_numOfEachDatasetMember = m_pDataset -> GetNumOfDatasetMember (); assert ( m_numOfEachDatasetMember > 0 ); sem_init ( & m_distIdxFull , 0 , 0 ); sem_init ( & m_distIdxEmpty , 0 , m_numOfWorker + 1 ); sem_init ( & m_distIdxMutex , 0 , 1 ); sem_init ( & m_globalFull , 0 , 0 ); sem_init ( & m_globalEmpty , 0 , m_numOfWorker * 2 ); sem_init ( & m_globalMutex , 0 , 1 ); this -> Alloc (); this -> StartProcess (); } 2 : Init \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc5b4\uc694. 1 2 3 4 5 6 7 8 9 10 11 template < typename DTYPE > void DataLoader < DTYPE >:: Init () { m_pDataset = NULL ; m_lenOfDataset = 1 ; m_numOfEachDatasetMember = 1 ; m_aaWorkerForProcess = NULL ; m_numOfWorker = 1 ; m_nowWorking = FALSE ; m_batchSize = 1 ; m_dropLast = FALSE ; m_useShuffle = FALSE ; } \uba64\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud574\uc8fc\ub294 \ud568\uc218\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5b4\uc694. \ud558\uc9c0\ub9cc \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. 4 : m_pDataset \uc5d0 dataset \uc744 \uc800\uc7a5\ud558\ub294\ub370 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud574\uc11c \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uae30\ub300\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc544\uc694. 17 : m_pDataset \uc758 GetLength \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294\ub370 \uc774\uac83\uc744 \uc774\ud574\ud558\uae30 \uc704\ud558\uc5ec \uba3c\uc800 Dataset \ud074\ub798\uc2a4\ub97c \uc774\ud574\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uacc4\uc18d \ucf54\ub4dc\ub97c \uc774\ud574\ud560 \ub54c Dataset \ud074\ub798\uc2a4\uac00 \uac78\ub9ac\ub124\uc694. \ud558\uc9c0\ub9cc \uc6b0\uc120 \ub370\uc774\ud130 \uae38\uc774\ub97c \ubc18\ud658\ubc1b\ub294 \ud568\uc218\ub77c\uace0 \uc0dd\uac01\ud558\uace0 \uacc4\uc18d \uc9c4\ud589\ud569\ub2c8\ub2e4. 30 : Alloc \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 4 template < typename DTYPE > void DataLoader < DTYPE >:: Alloc () { // thread allocate m_aaWorkerForProcess = new std :: thread [ m_numOfWorker ]; } \uc2a4\ub808\ub4dc \ubc30\uc5f4\uc744 \uc0dd\uc131\ud558\uc5ec std::thread m_aaWorkerForProcess \ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. 31 : StartProcess \uba54\uc18c\ub4dc\uc758 \uc815\uc758\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 template < typename DTYPE > void DataLoader < DTYPE >:: StartProcess () { // Generate thread for Dist - DistributeIdxOfData2Thread() // Generate thread set for Process - m_nowWorking = TRUE ; m_aThreadForDistInfo = std :: thread ([ & ]() { this -> DistributeIdxOfData2Thread (); }); // lambda expression printf ( \"Generate dataloader base thread \\r\\n \" ); for ( int i = 0 ; i < m_numOfWorker ; i ++ ) { m_aaWorkerForProcess [ i ] = std :: thread ([ & ]() { this -> DataPreprocess (); }); // lambda expression printf ( \"Generate worker[%d] for data preprocessing \\r\\n \" , i ); } } 4 : int m_nowWorking \uc744 TRUE \ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc TRUE \uc640 FALSE \ub85c \uc0ac\uc6a9\ud560 \ubcc0\uc218\ub77c\uba74 \\(4\\) \ubc14\uc774\ud2b8\ub098 \ub418\ub294 int \uac00 \uc544\ub2c8\ub77c \\(1\\) \ubc14\uc774\ud2b8\uc9dc\ub9ac bool \uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774 \ub098\uc744 \uac83 \uac19\uc544\uc694. 6-8 : \uc2a4\ub808\ub4dc\ub97c \uc0dd\uc131\ud558\uace0 \uc2a4\ub808\ub4dc \uc815\ubcf4\ub97c m_aThreadForDistInfo \uc5d0 \uc800\uc7a5\ud558\uba70 DistributeIdxOfData2Thread \ud568\uc218\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. \ud568\uc218 \uc774\ub984\ub9cc \ubd10\uc11c\ub294 \ucc98\ub9ac\ud560 \ub370\uc774\ud130\ub97c \uc2a4\ub808\ub4dc\uc5d0 \uacf5\ud3c9\ud558\uac8c \ubd84\ubc30\ud558\uae30 \uc704\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ubd84\ubc30\ud558\ub294 \uc0ac\uc804\uc791\uc5c5\uc744 \ud558\ub294 \ud568\uc218\uc778 \uac83 \uac19\uc544\uc694. \ud558\uc9c0\ub9cc \uc5b4\ucc28\ud53c \ud568\uc218 \ud558\ub098\ub97c \ud638\ucd9c\ud558\ub294\ub370 \uc65c \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc73c\ub85c \uc2a4\ub808\ub4dc\ub97c \ud638\ucd9c\ud588\ub294\uc9c0 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4. \uc5f0\uad6c\ub97c \ud574\ubd10\uc57c\ud560\ub4ef. DistributeIdxOfData2Thread \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc544\uc694. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 template < typename DTYPE > void DataLoader < DTYPE >:: DistributeIdxOfData2Thread () { std :: vector < int > * allOfIdx = new std :: vector < int > (); this -> MakeAllOfIndex ( allOfIdx ); // virtual function std :: vector < int > * setOfIdx = NULL ; int dropLastSize = allOfIdx -> size () % m_batchSize ; // num of dropLast int numOfBatchBlockSize = allOfIdx -> size () / m_batchSize ; int cnt = 0 ; if ( m_useShuffle ) std :: random_shuffle ( allOfIdx -> begin (), allOfIdx -> end (), random_generator ); while ( m_nowWorking ) { setOfIdx = new std :: vector < int > ( m_batchSize ); for ( int i = 0 ; i < m_batchSize ; i ++ ) { ( * setOfIdx )[ i ] = ( * allOfIdx )[ m_batchSize * cnt + i ]; } cnt ++ ; this -> Push2IdxBuffer ( setOfIdx ); if ( cnt == numOfBatchBlockSize ) { if ( ! m_dropLast && dropLastSize ) { std :: reverse ( allOfIdx -> begin (), allOfIdx -> end ()); if ( m_useShuffle ) std :: random_shuffle ( allOfIdx -> begin () + dropLastSize , allOfIdx -> end (), random_generator ); } else { if ( m_useShuffle ) std :: random_shuffle ( allOfIdx -> begin (), allOfIdx -> end (), random_generator ); } cnt = 0 ; } } delete allOfIdx ; } 3 : MakeAllOfIndex \ud568\uc218\uc5d0 vector \ud3ec\uc778\ud130 allOfIdx \ub97c \uc804\ub2ec\ud569\ub2c8\ub2e4. MakeAllOfIndex \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc544\uc694. 1 2 3 4 5 6 template < typename DTYPE > void DataLoader < DTYPE >:: MakeAllOfIndex ( std :: vector < int > * pAllOfIndex ) { pAllOfIndex -> resize ( m_lenOfDataset ); for ( int i = 0 ; i < m_lenOfDataset ; i ++ ) ( * pAllOfIndex )[ i ] = i ; } \ub2e8\uc21c\ud788 resize \ub85c \ubca1\ud130 \ud06c\uae30\ub97c \uc815\ud55c\ub2e4\uc74c 0, 1, ..., m_lenOfDataset-1 \uae4c\uc9c0 \ubca1\ud130\uc5d0 \ub300\uc785\ud574\uc8fc\ub124\uc694. std::vector \ub294 \uc6d0\uc18c\uac00 \ucd94\uac00\ub420 \ub54c\ub9c8\ub2e4 \uacf5\uac04\uc774 \ubd80\uc871\ud558\uba74 \\(2\\) \uc758 \ubc30\uc2b9\ub9cc\ud07c \uacf5\uac04\uc744 \ub298\ub9ac\ub294\ub370 \uadf8\uac83\uc5d0 \uc18c\ubaa8\ub418\ub294 \ube44\uc6a9\uc744 \uc904\uc774\uace0\uc790 \uc774\ub807\uac8c \uc9e0 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc std::vector::reserve \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uacfc \ube44\uad50\ud558\uc5ec \uc5b4\ub5a4 \uac8c \ub354 \uc88b\uc740\uc9c0 \uc5f0\uad6c\uac00 \ud544\uc694\ud560 \uac83 \uac19\ub124\uc694. 13-16 : vector( size_type count, const T& value, const Allocator& alloc = Allocator()); \uc758 \ud615\ud0dc\ub85c \ubca1\ud130\ub97c \ucd08\uae30\ud654\ud558\uace0 \uc788\ub294\ub370 \uc774\ub294 C++11 \uae4c\uc9c0 \uc9c0\uc6d0\ub418\ub294 \ubb38\ubc95\uc774\ubbc0\ub85c \ub098\uc911 \uc0c1\uc704 \ud638\ud658\uc131\uc744 \ub9de\ucd94\uc5b4\uc57c\ud560 \ub54c \ubc14\uafd4\uc57c\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc5b4\uca0c\ub4e0 m_batchSize \ub9cc\ud07c allOfIdx \ub97c \ubd84\ubc30\ud574\uc8fc\uace0 \uc788\uc2b5\ub2c8\ub2e4. 20 : Push2IdxBuffer \ud568\uc218\uc5d0 m_batchSize \ub9cc\ud07c allOfIdx \uac00 \ubd84\ubc30\ub41c setOfIdx \ub97c \uc804\ub2ec\ud569\ub2c8\ub2e4. Push2IdxBuffer \ub294 \uc774\ub807\uac8c \uc815\uc758\ub418\uc5b4 \uc788\uc5b4\uc694. 1 2 3 4 5 6 7 8 9 template < typename DTYPE > void DataLoader < DTYPE >:: Push2IdxBuffer ( std :: vector < int > * setOfIdx ) { sem_wait ( & m_distIdxEmpty ); sem_wait ( & m_distIdxMutex ); m_splitedIdxBuffer . push ( setOfIdx ); sem_post ( & m_distIdxMutex ); sem_post ( & m_distIdxFull ); } \ub2e8\uc21c\ud788 Critical Section \uc5d0 \ub4e4\uc5b4\uac00\uae30 \uc804\uc5d0 \uc2a4\ub808\ub4dc\ub4e4\uc744 \uc7a0\uad88\uc8fc\uace0 std::queue<std::vector<int> *> m_splitedIdxBuffer \uc5d0 setOfIdx \ub97c \ub123\uc5b4\uc8fc\ub124\uc694. \uc774\ub7f0 \uc2dd\uc73c\ub85c DistributeIdxOfData2Thread \uac00 \uc2a4\ub808\ub4dc\ub4e4\uc5d0 m_batchSize \ub9cc\ud07c allOfIdx \ub97c \ubd84\ubc30\ud574\uc900\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \ub098\uc911\uc5d0 \uc8fc\uc11d\uc744 \uc880 \ub354 \uc790\uc138\ud558\uac8c \ub2ec\uc544\ub193\uac70\ub098 API \ub97c \uc880 \ub354 \uc790\uc138\ud788 \uc368\ub450\uba74 \uc0ac\ub78c\ub4e4\uc774 \uc0c1\uc138\ud55c \ucf54\ub4dc \ubd84\uc11d \uc5c6\uc774\ub3c4 \uc8fc\uc11d\ub9cc \ubcf4\uace0 \ucf54\ub4dc \ubd84\uc11d\uc744 \ube60\ub974\uac8c \uc9c4\ud589\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ucf54\ub4dc \ubd84\uc11d\uc744 \ud1b5\ud558\uc5ec \ud568\uc218 \uae30\ub2a5\uc744 \uc774\ud574\ud558\ub294 \uac83\uc740 \uc2dc\uac04\uc774 \uc870\uae08 \uc624\ub798\uac78\ub9b4 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 API \uc640 \uc8fc\uc11d\uc73c\ub85c \uc774\ud574\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294 \uac83\uc774 \uc88b\uc744 \uac83 \uac19\uc544\uc694. 11-14 : m_numOfWorker \ub9cc\ud07c DataPreprocess \ub97c \uc2a4\ub808\ub4dc\ub85c \ud638\ucd9c\ud558\uba70 m_aaWorkerForProcess \ubca1\ud130\uc5d0 \uc2a4\ub808\ub4dc\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4. DataPreprocess \ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 template < typename DTYPE > void DataLoader < DTYPE >:: DataPreprocess () { // for thread // doing all of thing befor push global buffer // arrange everything for worker std :: queue < Tensor < DTYPE > *> * localBuffer = new std :: queue < Tensor < DTYPE > *> [ m_numOfEachDatasetMember ]; std :: vector < int > * setOfIdx = NULL ; int idx = 0 ; std :: vector < Tensor < DTYPE > *> * data = NULL ; Tensor < DTYPE > * pick = NULL ; std :: vector < Tensor < DTYPE > *> * preprocessedData = NULL ; std :: cout << \"DataLoader worker\" << '\\n' ; while ( m_nowWorking ) { // get information from IdxBuffer setOfIdx = this -> GetIdxSetFromIdxBuffer (); for ( int i = 0 ; i < m_batchSize ; i ++ ) { idx = ( * setOfIdx )[ i ]; data = m_pDataset -> GetData ( idx ); for ( int j = 0 ; j < m_numOfEachDatasetMember ; j ++ ) { // Chech the type of Data for determine doing preprocessing (IMAGE) // if true do data Preprocessing // push data into local buffer localBuffer [ j ]. push (( * data )[ j ]); } delete data ; data = NULL ; } // delete set of idx vector delete setOfIdx ; setOfIdx = NULL ; preprocessedData = new std :: vector < Tensor < DTYPE > *> ( m_numOfEachDatasetMember , NULL ); // do not deallocate in this function! for ( int k = 0 ; k < m_numOfEachDatasetMember ; k ++ ) { // concatenate each localbuffer // push preprocessedData vector ( * preprocessedData )[ k ] = this -> Concatenate ( localBuffer [ k ]); } // push preprocessedData into Global buffer this -> Push2GlobalBuffer ( preprocessedData ); preprocessedData = NULL ; } delete [] localBuffer ; } \uc774\ub85c\uc368 StartProcess \ub294","title":"\ubbf8\uc644\uc131"},{"location":"sync/fewshot/temp/#_1","text":"","title":"\ubbf8\uc644\uc131"},{"location":"sync/fewshot/temp/#lfwlfwsamplerhpp","text":"\ud074\ub798\uc2a4 \ubd84\uc11d\uc758 \uc2dc\uc791\uc740 \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\uc640 \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud558\ub294 \uac83\uc774\ubbc0\ub85c \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. \uc9c0\uae08\uc758 \ubaa9\ud45c\ub294 LFWSampler \uacfc LFWSampler::GetDataFromGlobalBuffer \uc744 \uc774\ud574\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ... template < typename DTYPE > class LFWSampler : public DataLoader < DTYPE > { private : /* data */ int m_numOfClass ; public : LFWSampler ( int numOfClass , Dataset < DTYPE > * dataset , int batchSize = 1 , int useShuffle = FALSE , int numOfWorker = 1 , int dropLast = TRUE ); virtual ~ LFWSampler (); virtual void MakeAllOfIndex ( std :: vector < int > * pAllOfIndex ); virtual void DataPreprocess (); void Tensor2Image ( std :: string filename , Tensor < DTYPE > * imgTensor , int doValuerScaling ); }; 3 : LFWSampler \ub294 DataLoader \ub97c \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc785\ub2c8\ub2e4. 9 : \uba3c\uc800 \uc0dd\uc131\uc790\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. 1 2 3 4 template < typename DTYPE > LFWSampler < DTYPE >:: LFWSampler ( int numOfClass , Dataset < DTYPE > * dataset , int batchSize , int useShuffle , int numOfWorker , int dropLast ) : DataLoader < DTYPE > ( dataset , batchSize , useShuffle , numOfWorker , dropLast ) { m_numOfClass = numOfClass ; } 2 : \uc0dd\uc131\uc790\uc5d0\uc11c\ub294 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub85c \uc0c1\uc704 \ud074\ub798\uc2a4\uc778 DataLoader \ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. 3 : \uadf8\ub9ac\uace0 \ub2e8\uc9c0 numOfClass \ub97c m_numOfClass \uc5d0 \uc800\uc7a5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ucf54\ub4dc\ub3c4 \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub85c \ucd08\uae30\ud654\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc544\uc694. \ud558\uc9c0\ub9cc LFWSampler \uc5d0 GetDataFromGlobalBuffer \uac00 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc558\uc5b4\uc694. \uadf8\ub7ec\ub2c8\uae4c \uc0c1\uc704 \ud074\ub798\uc2a4\uc778 DataLoader \ub97c \ubd84\uc11d\ud574\uc57c \ud560 \uac83 \uac19\uc544\uc694.","title":"LFW/LFWSampler.hpp"},{"location":"sync/fewshot/temp/#srcdataloaderhpp","text":"\ud074\ub798\uc2a4 \ubd84\uc11d\uc758 \uc2dc\uc791\uc740 \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\uc640 \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud558\ub294 \uac83\uc774\ubbc0\ub85c \ud074\ub798\uc2a4 \uc815\uc758 \ud615\ud0dc\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 template < typename DTYPE > class DataLoader { private : /* data */ Dataset < DTYPE > * m_pDataset ; int m_lenOfDataset ; int m_numOfEachDatasetMember ; std :: thread m_aThreadForDistInfo ; std :: thread * m_aaWorkerForProcess ; // dynamic allocation int m_numOfWorker ; int m_nowWorking ; // for distribute data info std :: queue < std :: vector < int > *> m_splitedIdxBuffer ; sem_t m_distIdxFull ; // numOfthread + 1; sem_t m_distIdxEmpty ; sem_t m_distIdxMutex ; int m_batchSize ; int m_dropLast ; // implement yet int m_useShuffle ; // for global buffer std :: queue < std :: vector < Tensor < DTYPE > *> *> m_globalBuffer ; sem_t m_globalFull ; // numOfthread * 2 sem_t m_globalEmpty ; sem_t m_globalMutex ; void Alloc (); void Delete (); void Init (); public : DataLoader ( Dataset < DTYPE > * dataset , int batchSize = 1 , int useShuffle = FALSE , int numOfWorker = 1 , int dropLast = TRUE ); virtual ~ DataLoader (); void StartProcess (); void StopProcess (); // distribute data idx to each thread void DistributeIdxOfData2Thread (); virtual void MakeAllOfIndex ( std :: vector < int > * pAllOfIndex ); virtual void DataPreprocess (); void Push2IdxBuffer ( std :: vector < int > * setOfIdx ); std :: vector < int > * GetIdxSetFromIdxBuffer (); Tensor < DTYPE > * Concatenate ( std :: queue < Tensor < DTYPE > *>& setOfData ); void Push2GlobalBuffer ( std :: vector < Tensor < DTYPE > *> * preprocessedData ); std :: vector < Tensor < DTYPE > *>* GetDataFromGlobalBuffer (); int GetBatchSize (){ return m_batchSize ;} int GetWorkingSignal (){ return m_nowWorking ;} int GetNumOfEachDatasetMember (){ return m_numOfEachDatasetMember ;} Dataset < DTYPE > * GetDataset (){ return m_pDataset ;} // static int random_generator(int upperbound); }; 1 : DataLoader \ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc73c\ub85c \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. 34 : \uc0dd\uc131\uc790\uac00 \uc774\ub807\uac8c \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc0dd\uc131\uc790\ub97c \ubd84\uc11d\ud574\ubd05\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 template < typename DTYPE > DataLoader < DTYPE >:: DataLoader ( Dataset < DTYPE > * dataset , int batchSize , int useShuffle , int numOfWorker , int dropLast ) { this -> Init (); // need to default value to run the data loader (background) m_pDataset = dataset ; // batch size m_batchSize = batchSize ; assert ( m_batchSize > 0 ); // random or not m_useShuffle = useShuffle ; // number of thread m_numOfWorker = numOfWorker ; assert ( m_numOfWorker > 0 ); // Drop last m_dropLast = dropLast ; // elicit information of data; m_lenOfDataset = m_pDataset -> GetLength (); assert ( m_lenOfDataset > 0 ); m_numOfEachDatasetMember = m_pDataset -> GetNumOfDatasetMember (); assert ( m_numOfEachDatasetMember > 0 ); sem_init ( & m_distIdxFull , 0 , 0 ); sem_init ( & m_distIdxEmpty , 0 , m_numOfWorker + 1 ); sem_init ( & m_distIdxMutex , 0 , 1 ); sem_init ( & m_globalFull , 0 , 0 ); sem_init ( & m_globalEmpty , 0 , m_numOfWorker * 2 ); sem_init ( & m_globalMutex , 0 , 1 ); this -> Alloc (); this -> StartProcess (); } 2 : Init \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc5b4\uc694. 1 2 3 4 5 6 7 8 9 10 11 template < typename DTYPE > void DataLoader < DTYPE >:: Init () { m_pDataset = NULL ; m_lenOfDataset = 1 ; m_numOfEachDatasetMember = 1 ; m_aaWorkerForProcess = NULL ; m_numOfWorker = 1 ; m_nowWorking = FALSE ; m_batchSize = 1 ; m_dropLast = FALSE ; m_useShuffle = FALSE ; } \uba64\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud574\uc8fc\ub294 \ud568\uc218\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5b4\uc694. \ud558\uc9c0\ub9cc \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\uba74 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. 4 : m_pDataset \uc5d0 dataset \uc744 \uc800\uc7a5\ud558\ub294\ub370 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uba64\ubc84 \uc774\ub2c8\uc15c\ub77c\uc774\uc800\ub97c \uc0ac\uc6a9\ud574\uc11c \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uae30\ub300\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc544\uc694. 17 : m_pDataset \uc758 GetLength \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294\ub370 \uc774\uac83\uc744 \uc774\ud574\ud558\uae30 \uc704\ud558\uc5ec \uba3c\uc800 Dataset \ud074\ub798\uc2a4\ub97c \uc774\ud574\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uacc4\uc18d \ucf54\ub4dc\ub97c \uc774\ud574\ud560 \ub54c Dataset \ud074\ub798\uc2a4\uac00 \uac78\ub9ac\ub124\uc694. \ud558\uc9c0\ub9cc \uc6b0\uc120 \ub370\uc774\ud130 \uae38\uc774\ub97c \ubc18\ud658\ubc1b\ub294 \ud568\uc218\ub77c\uace0 \uc0dd\uac01\ud558\uace0 \uacc4\uc18d \uc9c4\ud589\ud569\ub2c8\ub2e4. 30 : Alloc \uba54\uc18c\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 4 template < typename DTYPE > void DataLoader < DTYPE >:: Alloc () { // thread allocate m_aaWorkerForProcess = new std :: thread [ m_numOfWorker ]; } \uc2a4\ub808\ub4dc \ubc30\uc5f4\uc744 \uc0dd\uc131\ud558\uc5ec std::thread m_aaWorkerForProcess \ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. 31 : StartProcess \uba54\uc18c\ub4dc\uc758 \uc815\uc758\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 template < typename DTYPE > void DataLoader < DTYPE >:: StartProcess () { // Generate thread for Dist - DistributeIdxOfData2Thread() // Generate thread set for Process - m_nowWorking = TRUE ; m_aThreadForDistInfo = std :: thread ([ & ]() { this -> DistributeIdxOfData2Thread (); }); // lambda expression printf ( \"Generate dataloader base thread \\r\\n \" ); for ( int i = 0 ; i < m_numOfWorker ; i ++ ) { m_aaWorkerForProcess [ i ] = std :: thread ([ & ]() { this -> DataPreprocess (); }); // lambda expression printf ( \"Generate worker[%d] for data preprocessing \\r\\n \" , i ); } } 4 : int m_nowWorking \uc744 TRUE \ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc TRUE \uc640 FALSE \ub85c \uc0ac\uc6a9\ud560 \ubcc0\uc218\ub77c\uba74 \\(4\\) \ubc14\uc774\ud2b8\ub098 \ub418\ub294 int \uac00 \uc544\ub2c8\ub77c \\(1\\) \ubc14\uc774\ud2b8\uc9dc\ub9ac bool \uc5d0 \uc800\uc7a5\ud558\ub294 \uac83\uc774 \ub098\uc744 \uac83 \uac19\uc544\uc694. 6-8 : \uc2a4\ub808\ub4dc\ub97c \uc0dd\uc131\ud558\uace0 \uc2a4\ub808\ub4dc \uc815\ubcf4\ub97c m_aThreadForDistInfo \uc5d0 \uc800\uc7a5\ud558\uba70 DistributeIdxOfData2Thread \ud568\uc218\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. \ud568\uc218 \uc774\ub984\ub9cc \ubd10\uc11c\ub294 \ucc98\ub9ac\ud560 \ub370\uc774\ud130\ub97c \uc2a4\ub808\ub4dc\uc5d0 \uacf5\ud3c9\ud558\uac8c \ubd84\ubc30\ud558\uae30 \uc704\ud558\uc5ec \uc778\ub371\uc2a4\ub97c \ubd84\ubc30\ud558\ub294 \uc0ac\uc804\uc791\uc5c5\uc744 \ud558\ub294 \ud568\uc218\uc778 \uac83 \uac19\uc544\uc694. \ud558\uc9c0\ub9cc \uc5b4\ucc28\ud53c \ud568\uc218 \ud558\ub098\ub97c \ud638\ucd9c\ud558\ub294\ub370 \uc65c \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc73c\ub85c \uc2a4\ub808\ub4dc\ub97c \ud638\ucd9c\ud588\ub294\uc9c0 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4. \uc5f0\uad6c\ub97c \ud574\ubd10\uc57c\ud560\ub4ef. DistributeIdxOfData2Thread \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc544\uc694. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 template < typename DTYPE > void DataLoader < DTYPE >:: DistributeIdxOfData2Thread () { std :: vector < int > * allOfIdx = new std :: vector < int > (); this -> MakeAllOfIndex ( allOfIdx ); // virtual function std :: vector < int > * setOfIdx = NULL ; int dropLastSize = allOfIdx -> size () % m_batchSize ; // num of dropLast int numOfBatchBlockSize = allOfIdx -> size () / m_batchSize ; int cnt = 0 ; if ( m_useShuffle ) std :: random_shuffle ( allOfIdx -> begin (), allOfIdx -> end (), random_generator ); while ( m_nowWorking ) { setOfIdx = new std :: vector < int > ( m_batchSize ); for ( int i = 0 ; i < m_batchSize ; i ++ ) { ( * setOfIdx )[ i ] = ( * allOfIdx )[ m_batchSize * cnt + i ]; } cnt ++ ; this -> Push2IdxBuffer ( setOfIdx ); if ( cnt == numOfBatchBlockSize ) { if ( ! m_dropLast && dropLastSize ) { std :: reverse ( allOfIdx -> begin (), allOfIdx -> end ()); if ( m_useShuffle ) std :: random_shuffle ( allOfIdx -> begin () + dropLastSize , allOfIdx -> end (), random_generator ); } else { if ( m_useShuffle ) std :: random_shuffle ( allOfIdx -> begin (), allOfIdx -> end (), random_generator ); } cnt = 0 ; } } delete allOfIdx ; } 3 : MakeAllOfIndex \ud568\uc218\uc5d0 vector \ud3ec\uc778\ud130 allOfIdx \ub97c \uc804\ub2ec\ud569\ub2c8\ub2e4. MakeAllOfIndex \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc544\uc694. 1 2 3 4 5 6 template < typename DTYPE > void DataLoader < DTYPE >:: MakeAllOfIndex ( std :: vector < int > * pAllOfIndex ) { pAllOfIndex -> resize ( m_lenOfDataset ); for ( int i = 0 ; i < m_lenOfDataset ; i ++ ) ( * pAllOfIndex )[ i ] = i ; } \ub2e8\uc21c\ud788 resize \ub85c \ubca1\ud130 \ud06c\uae30\ub97c \uc815\ud55c\ub2e4\uc74c 0, 1, ..., m_lenOfDataset-1 \uae4c\uc9c0 \ubca1\ud130\uc5d0 \ub300\uc785\ud574\uc8fc\ub124\uc694. std::vector \ub294 \uc6d0\uc18c\uac00 \ucd94\uac00\ub420 \ub54c\ub9c8\ub2e4 \uacf5\uac04\uc774 \ubd80\uc871\ud558\uba74 \\(2\\) \uc758 \ubc30\uc2b9\ub9cc\ud07c \uacf5\uac04\uc744 \ub298\ub9ac\ub294\ub370 \uadf8\uac83\uc5d0 \uc18c\ubaa8\ub418\ub294 \ube44\uc6a9\uc744 \uc904\uc774\uace0\uc790 \uc774\ub807\uac8c \uc9e0 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc std::vector::reserve \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uacfc \ube44\uad50\ud558\uc5ec \uc5b4\ub5a4 \uac8c \ub354 \uc88b\uc740\uc9c0 \uc5f0\uad6c\uac00 \ud544\uc694\ud560 \uac83 \uac19\ub124\uc694. 13-16 : vector( size_type count, const T& value, const Allocator& alloc = Allocator()); \uc758 \ud615\ud0dc\ub85c \ubca1\ud130\ub97c \ucd08\uae30\ud654\ud558\uace0 \uc788\ub294\ub370 \uc774\ub294 C++11 \uae4c\uc9c0 \uc9c0\uc6d0\ub418\ub294 \ubb38\ubc95\uc774\ubbc0\ub85c \ub098\uc911 \uc0c1\uc704 \ud638\ud658\uc131\uc744 \ub9de\ucd94\uc5b4\uc57c\ud560 \ub54c \ubc14\uafd4\uc57c\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc5b4\uca0c\ub4e0 m_batchSize \ub9cc\ud07c allOfIdx \ub97c \ubd84\ubc30\ud574\uc8fc\uace0 \uc788\uc2b5\ub2c8\ub2e4. 20 : Push2IdxBuffer \ud568\uc218\uc5d0 m_batchSize \ub9cc\ud07c allOfIdx \uac00 \ubd84\ubc30\ub41c setOfIdx \ub97c \uc804\ub2ec\ud569\ub2c8\ub2e4. Push2IdxBuffer \ub294 \uc774\ub807\uac8c \uc815\uc758\ub418\uc5b4 \uc788\uc5b4\uc694. 1 2 3 4 5 6 7 8 9 template < typename DTYPE > void DataLoader < DTYPE >:: Push2IdxBuffer ( std :: vector < int > * setOfIdx ) { sem_wait ( & m_distIdxEmpty ); sem_wait ( & m_distIdxMutex ); m_splitedIdxBuffer . push ( setOfIdx ); sem_post ( & m_distIdxMutex ); sem_post ( & m_distIdxFull ); } \ub2e8\uc21c\ud788 Critical Section \uc5d0 \ub4e4\uc5b4\uac00\uae30 \uc804\uc5d0 \uc2a4\ub808\ub4dc\ub4e4\uc744 \uc7a0\uad88\uc8fc\uace0 std::queue<std::vector<int> *> m_splitedIdxBuffer \uc5d0 setOfIdx \ub97c \ub123\uc5b4\uc8fc\ub124\uc694. \uc774\ub7f0 \uc2dd\uc73c\ub85c DistributeIdxOfData2Thread \uac00 \uc2a4\ub808\ub4dc\ub4e4\uc5d0 m_batchSize \ub9cc\ud07c allOfIdx \ub97c \ubd84\ubc30\ud574\uc900\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \ub098\uc911\uc5d0 \uc8fc\uc11d\uc744 \uc880 \ub354 \uc790\uc138\ud558\uac8c \ub2ec\uc544\ub193\uac70\ub098 API \ub97c \uc880 \ub354 \uc790\uc138\ud788 \uc368\ub450\uba74 \uc0ac\ub78c\ub4e4\uc774 \uc0c1\uc138\ud55c \ucf54\ub4dc \ubd84\uc11d \uc5c6\uc774\ub3c4 \uc8fc\uc11d\ub9cc \ubcf4\uace0 \ucf54\ub4dc \ubd84\uc11d\uc744 \ube60\ub974\uac8c \uc9c4\ud589\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ucf54\ub4dc \ubd84\uc11d\uc744 \ud1b5\ud558\uc5ec \ud568\uc218 \uae30\ub2a5\uc744 \uc774\ud574\ud558\ub294 \uac83\uc740 \uc2dc\uac04\uc774 \uc870\uae08 \uc624\ub798\uac78\ub9b4 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 API \uc640 \uc8fc\uc11d\uc73c\ub85c \uc774\ud574\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294 \uac83\uc774 \uc88b\uc744 \uac83 \uac19\uc544\uc694. 11-14 : m_numOfWorker \ub9cc\ud07c DataPreprocess \ub97c \uc2a4\ub808\ub4dc\ub85c \ud638\ucd9c\ud558\uba70 m_aaWorkerForProcess \ubca1\ud130\uc5d0 \uc2a4\ub808\ub4dc\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4. DataPreprocess \ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 template < typename DTYPE > void DataLoader < DTYPE >:: DataPreprocess () { // for thread // doing all of thing befor push global buffer // arrange everything for worker std :: queue < Tensor < DTYPE > *> * localBuffer = new std :: queue < Tensor < DTYPE > *> [ m_numOfEachDatasetMember ]; std :: vector < int > * setOfIdx = NULL ; int idx = 0 ; std :: vector < Tensor < DTYPE > *> * data = NULL ; Tensor < DTYPE > * pick = NULL ; std :: vector < Tensor < DTYPE > *> * preprocessedData = NULL ; std :: cout << \"DataLoader worker\" << '\\n' ; while ( m_nowWorking ) { // get information from IdxBuffer setOfIdx = this -> GetIdxSetFromIdxBuffer (); for ( int i = 0 ; i < m_batchSize ; i ++ ) { idx = ( * setOfIdx )[ i ]; data = m_pDataset -> GetData ( idx ); for ( int j = 0 ; j < m_numOfEachDatasetMember ; j ++ ) { // Chech the type of Data for determine doing preprocessing (IMAGE) // if true do data Preprocessing // push data into local buffer localBuffer [ j ]. push (( * data )[ j ]); } delete data ; data = NULL ; } // delete set of idx vector delete setOfIdx ; setOfIdx = NULL ; preprocessedData = new std :: vector < Tensor < DTYPE > *> ( m_numOfEachDatasetMember , NULL ); // do not deallocate in this function! for ( int k = 0 ; k < m_numOfEachDatasetMember ; k ++ ) { // concatenate each localbuffer // push preprocessedData vector ( * preprocessedData )[ k ] = this -> Concatenate ( localBuffer [ k ]); } // push preprocessedData into Global buffer this -> Push2GlobalBuffer ( preprocessedData ); preprocessedData = NULL ; } delete [] localBuffer ; } \uc774\ub85c\uc368 StartProcess \ub294","title":"src/DataLoader.hpp"},{"location":"usage/usage/","text":"Usage \u00b6 command... - \uc124\uba85 command2... - \uc124\uba852 WICWIU \uc0ac\uc6a9 \uac00\uc774\ub4dc \u00b6 WICWIU \ub85c \ub525\ub7ec\ub2dd\uc744 \ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud558\uc5ec \uac00\uc774\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694! WICWIU \ub525\ub7ec\ub2dd \uac00\uc774\ub4dc","title":"Usage"},{"location":"usage/usage/#usage","text":"command... - \uc124\uba85 command2... - \uc124\uba852","title":"Usage"},{"location":"usage/usage/#wicwiu","text":"WICWIU \ub85c \ub525\ub7ec\ub2dd\uc744 \ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uc744 \ud074\ub9ad\ud558\uc5ec \uac00\uc774\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694! WICWIU \ub525\ub7ec\ub2dd \uac00\uc774\ub4dc","title":"WICWIU \uc0ac\uc6a9 \uac00\uc774\ub4dc"},{"location":"write/admonitions/","text":"Admonitions \uc740 \uc0ac\uc774\ub4dc\ucee8\ud150\uce20\ub97c \uc791\uc131\ud558\uae30\uc5d0 \uc88b\uc740 \ud3ec\ub9e4\ud305\uae30\ub2a5\uc785\ub2c8\ub2e4. Usage \u00b6 Admonitions \uc744 \uc0ac\uc6a9\ud558\ub824\uba74 \ub2e8\uc9c0 !!! \ub85c \ubb38\uc7a5\uc744 \uc2dc\uc791\ud558\uba74 \ub429\ub2c8\ub2e4. Example : !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \uc81c\ubaa9 \ubc14\uafb8\uae30 Admonitions \uc758 \uae30\ubcf8 \uc81c\ubaa9\uc740 \ud0c0\uc785 \uc9c0\uc815\uc790\uc5d0 \uc758\ud574 \uc815\ud574\uc9d1\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc81c\ubaa9\uc744 \ubc14\uafb8\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud070\ub530\uc634\ud45c\uc5d0 \uc81c\ubaa9\uc744 \uc9c0\uc815\ud558\uba74 \ub429\ub2c8\ub2e4. Example : !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \uc81c\ubaa9 \uc9c0\uc6b0\uae30 \uc81c\ubaa9\uc774 \uc5c6\ub294 Admonitions \uc744 \uc6d0\ud55c\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ube48 \ud070\ub530\uc634\ud45c\ub97c \uc4f0\uba74 \ub429\ub2c8\ub2e4. Example : !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \ucee8\ud150\uce20 \uc0bd\uc785 Admonitions \uc5d0\ub294 \ud5e4\ub4dc\ub77c\uc778, \ub9ac\uc2a4\ud2b8, \ub2e8\ub77d, \ube14\ub85d, \uc18c\uc2a4\ucf54\ub4dc \ub4f1\ub4f1\uc758 \ucee8\ud150\uce20\ub97c \uc0bd\uc785\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac00\ub839 \ub2e4\uc74c\uacfc \uac19\uc774 \uc18c\uc2a4\ucf54\ub4dc\ub3c4 \uc0bd\uc785\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` python def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Supported types \u00b6 \ub2e4\uc74c\uc740 \ub2e4\uc591\ud55c Admonitions \ud0c0\uc785\uc785\ub2c8\ub2e4. note , seealso Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. abstract , summary , tldr Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. info , todo Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. tip , hint , important Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. success , check , done Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. question , help , faq Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. warning , caution , attention Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. failure , fail , missing Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. danger , error Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. bug Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. example Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. quote , cite Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Step 4. Admonitions"},{"location":"write/admonitions/#usage","text":"Admonitions \uc744 \uc0ac\uc6a9\ud558\ub824\uba74 \ub2e8\uc9c0 !!! \ub85c \ubb38\uc7a5\uc744 \uc2dc\uc791\ud558\uba74 \ub429\ub2c8\ub2e4. Example : !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Usage"},{"location":"write/admonitions/#supported-types","text":"\ub2e4\uc74c\uc740 \ub2e4\uc591\ud55c Admonitions \ud0c0\uc785\uc785\ub2c8\ub2e4. note , seealso Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. abstract , summary , tldr Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. info , todo Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. tip , hint , important Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. success , check , done Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. question , help , faq Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. warning , caution , attention Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. failure , fail , missing Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. danger , error Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. bug Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. example Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. quote , cite Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Supported types"},{"location":"write/api/","text":"WICWIU \ub294 doxygen \uc73c\ub85c API \ub97c \uc790\ub3d9\uc0dd\uc131\ud569\ub2c8\ub2e4. doxygen \uc740 \uc18c\uc2a4\ucf54\ub4dc\uc758 \uc8fc\uc11d\uc73c\ub85c\ubd80\ud130 HTML , LaTex , XML \ub4f1\uc758 \ubb38\uc11c\ub97c \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ud574\uc8fc\ub294\ub370, Markdown \ud615\uc2dd\uc740 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c doxygen \uc73c\ub85c XML \ud615\uc2dd\uc758 API \ub97c \uc0dd\uc131\ud55c \ub2e4\uc74c moxygen \uc73c\ub85c Markdown \uc73c\ub85c \ubcc0\ud658\ud574\uc8fc\uc5b4\uc57c \ud569\ub2c8\ub2e4. HOW-TO \u00b6 WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c clone \ud55c \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c doxygen -g \ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. Doxygen \ud30c\uc77c\uc5d0\uc11c GENERATE_XML = no \ub97c GENERATE_XML = yes \ub85c \ubc14\uafc9\ub2c8\ub2e4. doxygen Doxygen \uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. moxygen -a xml \uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 api.md \ud30c\uc77c\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4. api.md \ub2e4\ub4ec\uae30 \u00b6 \ud558\uc9c0\ub9cc \uc0dd\uc131\ub41c api.md \ub97c \uace7\ubc14\ub85c mkdocs-material \uc5d0 \uc5c5\ub85c\ub4dc\ud558\uba74 \uba87 \uac00\uc9c0 \ubb38\uc81c\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud074\ub798\uc2a4\ub9c8\ub2e4 \uc788\ub294 ## Summary \uc640 ## Members \uac00 Table-of-Contents \ub97c \ub108\ubb34 \ub354\ub7fd\uac8c \ub9cc\ub4e4\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c api.md \ud30c\uc77c\uc5d0\uc11c ## Summary \uc640 ## Members \ub97c <h2> Summary </h2> \uc640 <h2> Members </h2> \ub85c \ubc14\uafb8\uc5b4 \uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 api.md \uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud074\ub798\uc2a4 \uba64\ubc84\ub97c \uc124\uba85\ud558\ub294\ub370 #### `public inline `[`AdagradOptimizer`](#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85)`(`[`Container](#classContainer)< [Operator`](#classOperator)`< DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection)` {#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85} \ud5e4\ub354\uac00 #### \ub85c \ub418\uc5b4\uc788\uc5b4\uc11c \ucf54\ub4dc\uac00 \ub79c\ub354\ub9c1\ub420 \ub54c \ub300\ubb38\uc790\ub85c \ub79c\ub354\ub9c1\ub429\ub2c8\ub2e4. \uc774\uac83\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud558\uc5ec \ubaa8\ub4e0 #### \\` \ub4e4\uc744 ### \\` \ub85c \ubc14\uafc9\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ubc14\ub014 \uac83\uc785\ub2c8\ub2e4. ### `public inline `[`AdagradOptimizer`](#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85)`(`[`Container](#classContainer)< [Operator`](#classOperator)`< DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection)` {#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85} \uadf8\ub7ec\uba74 \uc5c5\ub85c\ub4dc\ud560 \uc218 \uc788\ub294 api.md \uac00 \uc644\uc131\ub429\ub2c8\ub2e4.","title":"Step 8. API \uc791\uc131"},{"location":"write/api/#how-to","text":"WICWIU \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c clone \ud55c \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c doxygen -g \ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. Doxygen \ud30c\uc77c\uc5d0\uc11c GENERATE_XML = no \ub97c GENERATE_XML = yes \ub85c \ubc14\uafc9\ub2c8\ub2e4. doxygen Doxygen \uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. moxygen -a xml \uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 api.md \ud30c\uc77c\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4.","title":"HOW-TO"},{"location":"write/api/#apimd","text":"\ud558\uc9c0\ub9cc \uc0dd\uc131\ub41c api.md \ub97c \uace7\ubc14\ub85c mkdocs-material \uc5d0 \uc5c5\ub85c\ub4dc\ud558\uba74 \uba87 \uac00\uc9c0 \ubb38\uc81c\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud074\ub798\uc2a4\ub9c8\ub2e4 \uc788\ub294 ## Summary \uc640 ## Members \uac00 Table-of-Contents \ub97c \ub108\ubb34 \ub354\ub7fd\uac8c \ub9cc\ub4e4\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c api.md \ud30c\uc77c\uc5d0\uc11c ## Summary \uc640 ## Members \ub97c <h2> Summary </h2> \uc640 <h2> Members </h2> \ub85c \ubc14\uafb8\uc5b4 \uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 api.md \uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud074\ub798\uc2a4 \uba64\ubc84\ub97c \uc124\uba85\ud558\ub294\ub370 #### `public inline `[`AdagradOptimizer`](#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85)`(`[`Container](#classContainer)< [Operator`](#classOperator)`< DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection)` {#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85} \ud5e4\ub354\uac00 #### \ub85c \ub418\uc5b4\uc788\uc5b4\uc11c \ucf54\ub4dc\uac00 \ub79c\ub354\ub9c1\ub420 \ub54c \ub300\ubb38\uc790\ub85c \ub79c\ub354\ub9c1\ub429\ub2c8\ub2e4. \uc774\uac83\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud558\uc5ec \ubaa8\ub4e0 #### \\` \ub4e4\uc744 ### \\` \ub85c \ubc14\uafc9\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ubc14\ub014 \uac83\uc785\ub2c8\ub2e4. ### `public inline `[`AdagradOptimizer`](#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85)`(`[`Container](#classContainer)< [Operator`](#classOperator)`< DTYPE > * > * pParameterContainer,float pLearningRate,OptimizeDirection pOptimizeDirection)` {#classAdagradOptimizer_1a57ec3fb8b88c955719598afba8dc7a85} \uadf8\ub7ec\uba74 \uc5c5\ub85c\ub4dc\ud560 \uc218 \uc788\ub294 api.md \uac00 \uc644\uc131\ub429\ub2c8\ub2e4.","title":"api.md \ub2e4\ub4ec\uae30"},{"location":"write/button/","text":"Material for MkDocs \uc740 \ub2e4\uc591\ud55c \ubc84\ud2bc \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. Usage \u00b6 Adding buttons \ubc84\ud2bc\uc744 \ucd94\uac00\ud558\ub824\uba74 \ub2e8\uc21c\ud788 Markdown \uc5d0\uc11c \ud558\uc774\ud37c\ub9c1\ud06c\ub97c \ucd94\uac00\ud558\ub294 \ubb38\ubc95\uc5d0 `{: .md-button} \uc744 \ub367\ubd99\uc774\uba74 \ub429\ub2c8\ub2e4. Example : [Subscribe to our mailing list](#){: .md-button } Result : Subscribe to our mailing list Adding primary buttons \ubc30\uacbd\uc774 \ucc44\uc6cc\uc9c4 \ubc84\ud2bc\uc744 \ub9cc\ub4dc\ub824\uba74 \ubc84\ud2bc\uc744 \ub9cc\ub4dc\ub294 \ubb38\ubc95\uc5d0 .md-button \uc640 .md-button--primary \uc744 \ucd94\uac00\ud558\uba74 \ub429\ub2c8\ub2e4. Example : [Subscribe to our mailing list](#){: .md-button .md-button--primary } Result : Subscribe to our mailing list Adding icon buttons \uc544\uc774\ucf58\uc774 \uc788\ub294 \ubc84\ud2bc\uc744 \ub9cc\ub4e4\ub824\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud558\uba74 \ub429\ub2c8\ub2e4. Example : [Submit :fontawesome-solid-paper-plane:](#){: .md-button .md-button--primary } Result : Submit","title":"Step 6. \ubc84\ud2bc \ub123\uae30"},{"location":"write/button/#usage","text":"","title":"Usage"},{"location":"write/code/","text":"Makrdown \ud30c\uc77c\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud6a8\uacfc\uc801\uc778 \uc18c\uc2a4\ucf54\ub4dc \ud3ec\ub9e4\ud305 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. #include <iostream> using namespace std ; int fib ( int n ) { if ( n <= 1 ) return n ; return fib ( n -1 ) + fib ( n -2 ); } int main () { int n = 9 ; cout << fib ( n ); getchar (); return 0 ; } Markdown \ud30c\uc77c\uc758 \uae30\ucd08 \ubb38\ubc95\uc744 \uc54c\uace0 \uc788\uc5c8\ub2e4\uba74 \ub2f9\uc5f0\ud55c \ub0b4\uc6a9\uc77c \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc mkdocs \uc758 material \ud14c\ub9c8\uc5d0\uc11c \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc880 \ub354 \ud6a8\uacfc\uc801\uc73c\ub85c \uafb8\ubc00 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub77c\uc778 \ub118\ubc84 \ubd99\uc774\uae30 \u00b6 \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc2dc\uc791\ud558\ub294 ``` \uc5d0 linenums=\"1\" \uc744 \ubd99\uc774\uba74 \ub77c\uc778 \ub118\ubc84\uac00 \uc0dd\uae41\ub2c8\ub2e4. Example : ``` python linenums=\"1\" def Fibonacci(n): if n<0: print(\"Incorrect input\") elif n==0: return 0 elif n==1: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) print(Fibonacci(9)) ``` Result : 1 2 3 4 5 6 7 8 9 10 def Fibonacci ( n ): if n < 0 : print ( \"Incorrect input\" ) elif n == 0 : return 0 elif n == 1 : return 1 else : return Fibonacci ( n - 1 ) + Fibonacci ( n - 2 ) print ( Fibonacci ( 9 )) \ud2b9\uc815 \ucf54\ub4dc \uac15\uc870\ud558\uae30 \u00b6 \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc2dc\uc791\ud558\ub294 ``` \uc5d0 hl_lines=\"2 5\" \uc744 \ubd99\uc774\uba74 \ub450\ubc88\uc9f8, \ub2e4\uc12f\ubc88\uc9f8 \ucf54\ub4dc\uac00 \uac15\uc870\ub429\ub2c8\ub2e4. Example : ``` python linenums=\"1\" hl_lines=\"2 5\" def Fibonacci(n): if n<0: print(\"Incorrect input\") elif n==0: return 0 elif n==1: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) print(Fibonacci(9)) ``` Result : 1 2 3 4 5 6 7 8 9 10 def Fibonacci ( n ): if n < 0 : print ( \"Incorrect input\" ) elif n == 0 : return 0 elif n == 1 : return 1 else : return Fibonacci ( n - 1 ) + Fibonacci ( n - 2 ) print ( Fibonacci ( 9 ))","title":"Step 2. \uc18c\uc2a4\ucf54\ub4dc \uc124\uba85\ud558\uae30"},{"location":"write/code/#_1","text":"\uc18c\uc2a4\ucf54\ub4dc\ub97c \uc2dc\uc791\ud558\ub294 ``` \uc5d0 linenums=\"1\" \uc744 \ubd99\uc774\uba74 \ub77c\uc778 \ub118\ubc84\uac00 \uc0dd\uae41\ub2c8\ub2e4. Example : ``` python linenums=\"1\" def Fibonacci(n): if n<0: print(\"Incorrect input\") elif n==0: return 0 elif n==1: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) print(Fibonacci(9)) ``` Result : 1 2 3 4 5 6 7 8 9 10 def Fibonacci ( n ): if n < 0 : print ( \"Incorrect input\" ) elif n == 0 : return 0 elif n == 1 : return 1 else : return Fibonacci ( n - 1 ) + Fibonacci ( n - 2 ) print ( Fibonacci ( 9 ))","title":"\ub77c\uc778 \ub118\ubc84 \ubd99\uc774\uae30"},{"location":"write/code/#_2","text":"\uc18c\uc2a4\ucf54\ub4dc\ub97c \uc2dc\uc791\ud558\ub294 ``` \uc5d0 hl_lines=\"2 5\" \uc744 \ubd99\uc774\uba74 \ub450\ubc88\uc9f8, \ub2e4\uc12f\ubc88\uc9f8 \ucf54\ub4dc\uac00 \uac15\uc870\ub429\ub2c8\ub2e4. Example : ``` python linenums=\"1\" hl_lines=\"2 5\" def Fibonacci(n): if n<0: print(\"Incorrect input\") elif n==0: return 0 elif n==1: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) print(Fibonacci(9)) ``` Result : 1 2 3 4 5 6 7 8 9 10 def Fibonacci ( n ): if n < 0 : print ( \"Incorrect input\" ) elif n == 0 : return 0 elif n == 1 : return 1 else : return Fibonacci ( n - 1 ) + Fibonacci ( n - 2 ) print ( Fibonacci ( 9 ))","title":"\ud2b9\uc815 \ucf54\ub4dc \uac15\uc870\ud558\uae30"},{"location":"write/format/","text":"Markdown \ud30c\uc77c\uc758 \uae30\ucd08 \ubb38\ubc95\uc5d0\uc11c \ub354 \ub098\uc544\uac00\uc11c Python Markdown extension \uc744 \ud1b5\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \uace0\uc624\uae09 \ud3ec\ub9e4\ud305\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Definition \ub9ac\uc2a4\ud2b8 \u00b6 \ub2e4\uc74c\uacfc \uac19\uc774 Definition \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : `Lorem ipsum dolor sit amet` : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. `Cras arcu libero` : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Result : Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. \ud615\uad11\ud39c \u00b6 == \ub85c \ubb38\uc7a5\uc744 \ubb36\uc73c\uba74 \ud615\uad11\ud39c\uc744 \uce60\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : \ud615\uad11\ud39c\uc785\ub2c8\ub2e4. \u200b==Highlighting== Result : \ud615\uad11\ud39c\uc785\ub2c8\ub2e4. Highlighting \ubc11\uc904 \u00b6 Example : \ubc11\uc904\uc785\ub2c8\ub2e4. \u200b^^\ubc11\uc904 \uadf8\uc740 \ubb38\uc7a5^^ Result : \ubc11\uc904\uc785\ub2c8\ub2e4. \u200b \ubc11\uc904 \uadf8\uc740 \ubb38\uc7a5 \ucde8\uc18c\uc120 \u00b6 Example : \ucde8\uc18c\uc120\uc785\ub2c8\ub2e4. \u200b~~\ucde8\uc18c\uc120 \uadf8\uc740 \ubb38\uc7a5~~ Result : \ucde8\uc18c\uc120\uc785\ub2c8\ub2e4. \u200b \ucde8\uc18c\uc120 \uadf8\uc740 \ubb38\uc7a5","title":"Step 3. \uace0\uc624\uae09 \ud3ec\ub9e4\ud305"},{"location":"write/format/#definition","text":"\ub2e4\uc74c\uacfc \uac19\uc774 Definition \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : `Lorem ipsum dolor sit amet` : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. `Cras arcu libero` : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Result : Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.","title":"Definition \ub9ac\uc2a4\ud2b8"},{"location":"write/format/#_1","text":"== \ub85c \ubb38\uc7a5\uc744 \ubb36\uc73c\uba74 \ud615\uad11\ud39c\uc744 \uce60\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : \ud615\uad11\ud39c\uc785\ub2c8\ub2e4. \u200b==Highlighting== Result : \ud615\uad11\ud39c\uc785\ub2c8\ub2e4. Highlighting","title":"\ud615\uad11\ud39c"},{"location":"write/format/#_2","text":"Example : \ubc11\uc904\uc785\ub2c8\ub2e4. \u200b^^\ubc11\uc904 \uadf8\uc740 \ubb38\uc7a5^^ Result : \ubc11\uc904\uc785\ub2c8\ub2e4. \u200b \ubc11\uc904 \uadf8\uc740 \ubb38\uc7a5","title":"\ubc11\uc904"},{"location":"write/format/#_3","text":"Example : \ucde8\uc18c\uc120\uc785\ub2c8\ub2e4. \u200b~~\ucde8\uc18c\uc120 \uadf8\uc740 \ubb38\uc7a5~~ Result : \ucde8\uc18c\uc120\uc785\ub2c8\ub2e4. \u200b \ucde8\uc18c\uc120 \uadf8\uc740 \ubb38\uc7a5","title":"\ucde8\uc18c\uc120"},{"location":"write/markdown/","text":"Markdown \uc740 \uc5ec\ub7ec\uac00\uc9c0 \ud615\uc2dd\uc73c\ub85c \ud14d\uc2a4\ud2b8\ub97c \uc791\uc131\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ub9c8\ud06c\uc5c5 \uc5b8\uc5b4 \uc785\ub2c8\ub2e4. Markdown \ud30c\uc77c\uc740 \ud655\uc7a5\uc790 .md \ub97c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. Markdown \uc744 \uc54c\uc544\uc57c \ud558\ub294 \uc8fc\ub41c \uc774\uc720 \uc911 \ud558\ub098\ub294 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c Github \uc5d0 \uacf5\uc720\ud560 \ub54c \ud504\ub85c\uadf8\ub7a8\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \uc124\uba85\ud558\uae30 \uc704\ud574\uc11c\uc785\ub2c8\ub2e4. Markdown \uc774 \uc5bc\ub9c8\ub098 \ud6a8\uacfc\uc801\uc778 \ud3ec\ub9f7\ud305 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\ub294\uc9c0\ub294 \uc9c0\uae08 \uc77d\uace0 \uc788\ub294 \uc774 \ud30c\uc77c\ub4e4\uc774 \uc804\ubd80\ub2e4 .md \ud30c\uc77c\uc778 \uac83\ub9cc \ubcf4\uc544\ub3c4 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. Markdown \uc758 \ubb38\ubc95\uc740 \ub9e4\uc6b0 \uac04\ub2e8\ud558\uc9c0\ub9cc \ub9e4\uc6b0 \ub2e4\uc591\ud55c \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. Markdown \ud30c\uc77c\uc758 \uae30\ucd08 \ubb38\ubc95\uc744 \ubaa8\ub974\uc2e0\ub2e4\uba74 \uba3c\uc800 \uc774\uacf3 \uc744 \ucc38\uace0\ud574\uc8fc\uc138\uc694. Note \ub354 \uc790\uc138\ud55c Markdown \uc758 \ubb38\ubc95\uc744 \uc54c\uc544\ubcf4\ub824\uba74 Google \uc5d0 \uac80\uc0c9\ud558\uac70\ub098 Markdown-Cheatsheet markdown-it \uc744 \ucc38\uace0\ud558\uc138\uc694. \ubb38\uc11c \ucd94\uac00\ud558\uae30 \u00b6 Markdown \ud30c\uc77c\uc758 \uae30\ucd08 \ubb38\ubc95\uc744 \uc774\ud574\ud558\uc600\ub2e4\uba74, WICWIU Github Page \ub97c fork \ud558\uace0 clone \ud55c \ub2e4\uc74c docs \ub514\ub809\ud1a0\ub9ac \ubc11\uc5d0 .md \ud30c\uc77c\uc744 \ucd94\uac00\ud574\uc8fc\uc138\uc694. \uac00\ub839 RNN \uc744 \uc124\uba85\ud558\uae30 \uc704\ud55c \ud30c\uc77c\uc744 \uc791\uc131\ud558\uace0 \uc2f6\ub2e4\uba74 RNN.md \uc744 docs \ub514\ub809\ud1a0\ub9ac\uc5d0 \ucd94\uac00\ud558\uc5ec \ub0b4\uc6a9\uc744 \uc791\uc131\ud569\ub2c8\ub2e4. \uc774\ud6c4 mkdocs.yml \uc5d0 nav: - RNN: RNN.md \uc744 \ucd94\uac00\ud558\uba74 \ub429\ub2c8\ub2e4. \ud558\uc704 \uce74\ud14c\uace0\ub9ac\uc5d0 \ubb38\uc11c \ucd94\uac00\ud558\uae30 \ubb38\uc11c\ub97c Neural Network \ub77c\ub294 \ud558\uc704 \uce74\ud14c\uace0\ub9ac\uc5d0 \ucd94\uac00\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud558\uba74 \ub429\ub2c8\ub2e4. nav: - Neural Network - RNN: RNN.md Preview \u00b6 \ud558\uc9c0\ub9cc \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub41c .md \ud30c\uc77c\ub4e4\uc744 commit \ud558\uae30 \uc804\uc5d0 \uaf2d \ucd94\uac00\ub41c .md \ud30c\uc77c\uc774 \uc5b4\ub5bb\uac8c \ub79c\ub354\ub9c1\ub418\ub294\uc9c0 Preivew \ub97c \ud1b5\ud574 \ud655\uc778\ud574\uc57c \ud569\ub2c8\ub2e4. Preview \ub97c \ubcf4\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. pip install mkdocs-material \uba85\ub839\uc5b4\ub85c MkDocs \uc640 Material for MkDocs \ub97c \uc124\uce58\ud569\ub2c8\ub2e4. Note Windows \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 python -m pip install mkdocs-material \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\uc57c \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. mkdocs serve \ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 http://localhost:8000 \uc5d0 Preview \uc11c\ubc84\uac00 \uc5f4\ub9bd\ub2c8\ub2e4. \uc774\uacf3\uc5d0\uc11c \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub41c .md \ud30c\uc77c\uc774 \uc6d0\ud558\ub294\ub300\ub85c \uc798 \ub098\uc624\ub294\uc9c0 \ud655\uc778\ud574\uc8fc\uc138\uc694. \uadf8\ub9ac\uace0 commit , push \ud6c4 Pull Requests \ub97c \ud558\uba74 \ub429\ub2c8\ub2e4.","title":"Step 1. Markdown \ud30c\uc77c"},{"location":"write/markdown/#_1","text":"Markdown \ud30c\uc77c\uc758 \uae30\ucd08 \ubb38\ubc95\uc744 \uc774\ud574\ud558\uc600\ub2e4\uba74, WICWIU Github Page \ub97c fork \ud558\uace0 clone \ud55c \ub2e4\uc74c docs \ub514\ub809\ud1a0\ub9ac \ubc11\uc5d0 .md \ud30c\uc77c\uc744 \ucd94\uac00\ud574\uc8fc\uc138\uc694. \uac00\ub839 RNN \uc744 \uc124\uba85\ud558\uae30 \uc704\ud55c \ud30c\uc77c\uc744 \uc791\uc131\ud558\uace0 \uc2f6\ub2e4\uba74 RNN.md \uc744 docs \ub514\ub809\ud1a0\ub9ac\uc5d0 \ucd94\uac00\ud558\uc5ec \ub0b4\uc6a9\uc744 \uc791\uc131\ud569\ub2c8\ub2e4. \uc774\ud6c4 mkdocs.yml \uc5d0 nav: - RNN: RNN.md \uc744 \ucd94\uac00\ud558\uba74 \ub429\ub2c8\ub2e4.","title":"\ubb38\uc11c \ucd94\uac00\ud558\uae30"},{"location":"write/markdown/#preview","text":"\ud558\uc9c0\ub9cc \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub41c .md \ud30c\uc77c\ub4e4\uc744 commit \ud558\uae30 \uc804\uc5d0 \uaf2d \ucd94\uac00\ub41c .md \ud30c\uc77c\uc774 \uc5b4\ub5bb\uac8c \ub79c\ub354\ub9c1\ub418\ub294\uc9c0 Preivew \ub97c \ud1b5\ud574 \ud655\uc778\ud574\uc57c \ud569\ub2c8\ub2e4. Preview \ub97c \ubcf4\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. pip install mkdocs-material \uba85\ub839\uc5b4\ub85c MkDocs \uc640 Material for MkDocs \ub97c \uc124\uce58\ud569\ub2c8\ub2e4. Note Windows \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 python -m pip install mkdocs-material \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574\uc57c \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. mkdocs serve \ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 http://localhost:8000 \uc5d0 Preview \uc11c\ubc84\uac00 \uc5f4\ub9bd\ub2c8\ub2e4. \uc774\uacf3\uc5d0\uc11c \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub41c .md \ud30c\uc77c\uc774 \uc6d0\ud558\ub294\ub300\ub85c \uc798 \ub098\uc624\ub294\uc9c0 \ud655\uc778\ud574\uc8fc\uc138\uc694. \uadf8\ub9ac\uace0 commit , push \ud6c4 Pull Requests \ub97c \ud558\uba74 \ub429\ub2c8\ub2e4.","title":"Preview"},{"location":"write/math-sample-matrix-derivatives/","text":"Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84 \u00b6 Affine \ubcc0\ud658\uc758 \uc5ed\uc804\ud30c : \uc785\ub825 \ud589\ub82c \\(\\mathbf{X,W}\\) \uacfc \ucd9c\ub825\ud589\ub82c \\(\\mathbf{Y} = \\mathbf{XW}\\) \ub97c \uac16\ub294 Affine \ub808\uc774\uc5b4\uc758 \uc5ed\uc804\ud30c\ub294 \uc190\uc2e4\uac12 \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84 \\(\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\cdot \\mathbf{W} ^{\\intercal }, \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc774\ub2e4. Affine Layer \ub294 \ubcf4\ud1b5 \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\uc131\ub41c\ub2e4. Affine Layer \ucf54\ub4dc \uad6c\ud604 \u00b6 \ud589\ub82c\uacf1 \uc5f0\uc0b0\uacfc \ud589\ub82c\ub367\uc148 \uc5f0\uc0b0\uc744 \ud558\ub294 Affine \ub808\uc774\uc5b4\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc\ub85c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . dW = None self . db = None def forward ( self , x ): self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) return dx \ub2e4\uc74c \ucf54\ub4dc\ub294 \uc785\ub825 \ub370\uc774\ud130\uac00 \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ud150\uc11c\uc778 \uacbd\uc6b0, \uc989 4\ucc28\uc6d0 \ub370\uc774\ud130\uc778 \uacbd\uc6b0\ub3c4 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\ud604\ud55c \uac83\uc774\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . original_x_shape = None self . dW = None self . db = None def forward ( self , x ): # \ud150\uc11c \ub300\uc751 self . original_x_shape = x . shape x = x . reshape ( x . shape [ 0 ], - 1 ) self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) dx = dx . reshape ( * self . original_x_shape ) # \uc785\ub825 \ub370\uc774\ud130 \ubaa8\uc591 \ubcc0\uacbd(\ud150\uc11c \ub300\uc751) return dx \ud589\ub82c\uacf1 \ubbf8\ubd84 \uc815\ub9ac \u00b6 \\(n \\times d\\) \uc785\ub825 \ud589\ub82c \\(\\mathbf{X}\\) , \\(d \\times m\\) \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \ud589\ub82c \\(\\mathbf{Y=XW}\\) \uacfc \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\mathbf{W}^{\\intercal } \\] \uc774\uace0, \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\] \uc774\ub2e4. (1) \uc99d\uba85 \\(n \\times d\\) \uc785\ub825 \ud589\ub82c \\(\\mathbf{X}\\) , \\(d \\times m\\) \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}\\) \uc5d0 \ub300\ud55c \ud589\ub82c\uacf1 \\(\\mathbf{Y}\\) \ub294 \\(n \\times m\\) \ud589\ub82c \\[ \\mathbf{Y} = \\mathbf{XW} = \\begin{pmatrix} x _{11}&x _{12}&\\dots&x _{1d}\\\\ x _{21}&x _{22}&\\dots&x _{2d}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x _{n1}&x _{n2}&\\dots&x _{nd}\\\\ \\end{pmatrix} \\begin{pmatrix} w _{11} & w _{12} &\\dots & w _{1m} \\\\ w _{21} & w _{22} &\\dots & w _{2m} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ w _{d1} & w _{d2} &\\dots & w _{dm} \\\\ \\end{pmatrix} \\] \\[ = \\begin{pmatrix} \\displaystyle \\sum_{k=1}^{d}x _{1k} w _{k1} & \\displaystyle \\sum_{k=1}^{d}x _{1k} w _{k2} & \\dots & \\displaystyle \\sum_{k=1}^{d}x _{1k} w _{km} \\\\ \\displaystyle \\sum_{k=1}^{d}x _{2k} w _{k1} & \\displaystyle \\sum_{k=1}^{d}x _{2k} w _{k2} & \\dots & \\displaystyle \\sum_{k=1}^{d}x _{2k} w _{km} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle \\sum_{k=1}^{d}x _{nk} w _{k1} & \\displaystyle \\sum_{k=1}^{d}x _{nk} w _{k2} & \\dots & \\displaystyle \\sum_{k=1}^{d}x _{nk} w _{km} \\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774 \uc21c\uc804\ud30c \ucd9c\ub825 \\(\\mathbf{Y}\\) \uc774 \uc190\uc2e4\ud568\uc218 \\(l\\) \ub85c \uc804\ub2ec\ub418\uc5b4 \ucd5c\uc885\uc801\uc73c\ub85c \uc2a4\uce7c\ub77c \\(L\\) \uc774 \ub418\uc5c8\ub2e4\uace0 \ud558\uba74 \\[ L = l(\\mathbf{Y}) = l(\\mathbf{XW}) \\] \uc774\ub2e4. \\(L\\) \uc774 \uc2a4\uce7c\ub77c\uace0 \\(\\mathbf{Y}\\) \ub294 \\(n \\times m\\) \ud589\ub82c\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times m\\) \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \\(\\mathbf{Y}\\) \ub294 \\(\\mathbf{X, W}\\) \uc5d0 \ub300\ud55c \ud568\uc218\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X, W}\\) \uc758 \ubbf8\ubd84\uc740 \uc774\ub3c5\ub9bd\ubcc0\uc218\uc640 \uc77c\ub9e4\uac1c\ubcc0\uc218\uc758 \ud569\uc131\ud568\uc218\uc758 \ubbf8\ubd84 \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{X}}, \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{W}} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 \ud589\ub82c \ubbf8\ubd84\uc758 \uc815\uc758\uc5d0 \uc758\ud558\uc5ec \uc57c\ucf54\ube44 \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial x _{11}}& \\dfrac{\\partial L}{\\partial x _{12}}& \\dots& \\dfrac{\\partial L}{\\partial x _{1d}}\\\\ \\dfrac{\\partial L}{\\partial x _{21}}& \\dfrac{\\partial L}{\\partial x _{22}}& \\dots& \\dfrac{\\partial L}{\\partial x _{2d}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial x _{n1}}& \\dfrac{\\partial L}{\\partial x _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial x _{nd}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X}\\) \uc758 \\((1,1)\\) \uc6d0\uc18c \\(x_{11}\\) \uc758 \ubbf8\ubd84\uc740 \\(\\mathbf{Y}\\) \ub97c \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ub9e4\uac1c\ubcc0\uc218\uc758 \ub098\uc5f4\ub85c \ubcf8\ub2e4\uba74, \\(\\dfrac{\\partial L}{\\partial x _{11}}\\) \uc5d0 \ub300\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud569\uc131\ud568\uc218\uc758 \ud3b8\ubbf8\ubd84\uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc73c\ubbc0\ub85c \uc2a4\uce7c\ub77c \\[ \\dfrac{\\partial L}{\\partial x _{11}} = \\sum_{i=1}^{n}\\sum_{j=1}^{m}\\dfrac{\\partial L}{\\partial y _{ij}}\\dfrac{\\partial y _{ij}}{\\partial x _{11}} \\] \uc774\ub2e4. \uadf8\ub7f0\ub370 \uadc0\ucc2e\uc740 \ub367\uc148 \uc5f0\uc0b0\uc744 \ud53c\ud558\uae30 \uc704\ud558\uc5ec \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial L}{\\partial y _{ij}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \ub85c \uc4f0\uace0, \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial y _{ij}}{\\partial x _{11}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}}\\) \ub85c \uc4f0\uba74 \uc774\uac83\uc744 Frobenius \ub0b4\uc801 \\[ = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}} \\bigg > _{\\mathbf{F}}\\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \uc774\ub54c \\[ \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}} = \\begin{pmatrix} w _{11}& w _{12}& \\dots& w _{1m} \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\] \uc774\ubbc0\ub85c \\[ \\bigg < \\dfrac{\\partial L}{\\partial Y} , \\dfrac{\\partial Y}{\\partial x _{11}} \\bigg > _{\\mathbf{F}} = \\Bigg < \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix}, \\begin{pmatrix} w _{11}& w _{12}& \\dots& w _{1m} \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\Bigg > _{\\mathbf{F}} \\] \\[ = \\dfrac{\\partial L}{\\partial y _{11}} w _{11} + \\dfrac{\\partial L}{\\partial y _{12}} w _{12} + \\dots+ \\dfrac{\\partial L}{\\partial y _{1m}} w _{1m} = \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{1k} \\] \uc774\ub2e4. \uc989, \\(\\displaystyle \\dfrac{\\partial L}{\\partial x _{11}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{1k}\\) \uc774\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[\\displaystyle \\dfrac{\\partial L}{\\partial x _{12}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{12}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{2k}\\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial x _{21}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{21}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{1k}\\] \\[ \\vdots \\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial x _{ij}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{ij}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{ik}}w _{jk}\\] \uc774\ub2e4. \uadf8\ub807\ub2e4\uba74 \ucd5c\uc885\uc801\uc73c\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times d\\) \ud589\ub82c \\[ \\therefore \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\begin{pmatrix} \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{1k}& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{2k}& \\dots& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{dk} \\\\ \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{1k}& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{2k}& \\dots& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{dk} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{nk}}w _{1k}& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{nk}}w _{2k}& \\dots& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{nk}}w _{dk} \\\\ \\end{pmatrix}\\] \\[ = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix}\\begin{pmatrix} w_{11}& w_{21}& \\dots & w_{d1} \\\\ w_{12}& w_{22}& \\dots & w_{d2} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ w_{1m}& w_{2m}& \\dots & w_{dm} \\\\ \\end{pmatrix} \\] \\[ = \\boxed{\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\mathbf{W}^{\\intercal } } \\] \uc774\ub2e4. \u25a0 (2) \uc99d\uba85 \ub9c8\ucc2c\uac00\uc9c0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 \ud589\ub82c \ubbf8\ubd84\uc758 \uc815\uc758\uc5d0 \uc758\ud558\uc5ec \uc57c\ucf54\ube44 \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial w_{11}}& \\dfrac{\\partial L}{\\partial w_{12}}& \\dots& \\dfrac{\\partial L}{\\partial w_{1m}}\\\\ \\dfrac{\\partial L}{\\partial w_{21}}& \\dfrac{\\partial L}{\\partial w_{22}}& \\dots& \\dfrac{\\partial L}{\\partial w_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial w_{d1}}& \\dfrac{\\partial L}{\\partial w_{d2}}& \\dots& \\dfrac{\\partial L}{\\partial w_{dm}}\\\\ \\end{pmatrix} \\] \uc778\ub370 \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{W}\\) \uc758 \\((1,1)\\) \uc6d0\uc18c \\(w _{11}\\) \uc758 \ubbf8\ubd84\uc740 \\(\\mathbf{Y}\\) \ub97c \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ub9e4\uac1c\ubcc0\uc218\uc758 \ub098\uc5f4\ub85c \ubcf8\ub2e4\uba74, \\(\\dfrac{\\partial L}{\\partial w _{11}}\\) \uc5d0 \ub300\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud569\uc131\ud568\uc218\uc758 \ud3b8\ubbf8\ubd84\uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc73c\ubbc0\ub85c \uc2a4\uce7c\ub77c \\[ \\dfrac{\\partial L}{\\partial w_{11}} = \\sum_{i=1}^{n}\\sum_{j=1}^{m}\\dfrac{\\partial L}{\\partial y _{ij}}\\dfrac{\\partial y _{ij}}{\\partial w_{11}} \\] \uc774\ub2e4. \uc774\uac83\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c Frobenius \ub0b4\uc801 \\[ = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} \\bigg > _{\\mathbf{F}}\\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \uadf8\ub7ec\uba74 \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[ \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} = \\begin{pmatrix} x _{11}& 0& \\dots& 0 \\\\ x _{21}& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x _{n1}& 0& \\dots& 0\\\\ \\end{pmatrix} \\] \uc774\ubbc0\ub85c \\[ \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} \\bigg > _{\\mathbf{F}} = \\Bigg < \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix}, \\begin{pmatrix} x _{11}& 0& \\dots& 0 \\\\ x _{21}& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x _{n1}& 0& \\dots& 0\\\\ \\end{pmatrix} \\Bigg > _{\\mathbf{F}} \\] \\[ = \\dfrac{\\partial L}{\\partial y _{11}}x _{11} + \\dfrac{\\partial L}{\\partial y _{21}}x _{21} + \\dots+ \\dfrac{\\partial L}{\\partial y _{n1}}x _{n1} = \\sum_{k=1}^{n} \\dfrac{\\partial L}{\\partial y _{k1}}x _{k1} \\] \uc774\ub2e4. \uc989, \\(\\displaystyle \\dfrac{\\partial L}{\\partial w _{11}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{k1}}x _{k1}\\) \uc774\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[\\displaystyle \\dfrac{\\partial L}{\\partial w _{12}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{12}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{k2}}x_{k1}\\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial w _{21}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{21}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{k1}}x_{k2}\\] \\[ \\vdots \\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial w _{ij}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{ij}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{kj}}x_{ki}\\] \uc774\ub2e4. \uadf8\ub807\ub2e4\uba74 \ucd5c\uc885\uc801\uc73c\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 \\(d \\times m\\) \ud589\ub82c \\[ \\therefore \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\begin{pmatrix} \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k1}}x_{k1}& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k2}}x_{k1}& \\dots& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{km}}x_{k1} \\\\ \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k1}}x_{k2}& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k2}}x_{k2}& \\dots& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{km}}x_{k2} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k1}}x_{kd}& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k2}}x_{kd}& \\dots& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{km}}x_{kd} \\\\ \\end{pmatrix}\\] \\[ = \\begin{pmatrix} x_{11}& x_{21}& \\dots & x_{n1} \\\\ x_{12}& x_{22}& \\dots & x_{n2} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x_{1d}& x_{2d}& \\dots & x_{nd} \\\\ \\end{pmatrix}\\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix} \\] \\[ = \\boxed{\\mathbf{X}^{\\intercal }\\dfrac{\\partial L}{\\partial \\mathbf{Y}}} \\] \uc774\ub2e4. \u25a0 \ud589\ub82c\ub367\uc148 \ubbf8\ubd84 \uc815\ub9ac \u00b6 \\(n \\times m\\) \ucd9c\ub825 \ud589\ub82c \\(\\mathbf{Y}\\) , \\(n \\times m\\) \ud3b8\ud5a5 \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \uc21c\uc785\ub825 \ud589\ub82c \\(\\mathbf{Z=Y + B}\\) \uc640 \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\uace0, \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{B}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\ub2e4. (1) \uc99d\uba85 \\(n \\times m\\) \ucd9c\ub825 \ud589\ub82c \\(\\mathbf{Y}\\) , \\(n \\times m\\) \ud3b8\ud5a5 \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \ud589\ub82c \\(\\mathbf{Z = Y + B}\\) \ub294 \\(n \\times m\\) \ud589\ub82c \\[ \\mathbf{Z} = \\mathbf{Y + B} = \\begin{pmatrix} y_{11}&y_{12}&\\dots&y_{1m}\\\\ y_{21}&y_{22}&\\dots&y_{2m}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ y_{n1}&y_{n2}&\\dots&y_{nm}\\\\ \\end{pmatrix} + \\begin{pmatrix} b_{11} & b_{12} &\\dots & b_{1m} \\\\ b_{21} & b_{22} &\\dots & b_{2m} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ b_{n1} & b_{n2} &\\dots & b_{nm} \\\\ \\end{pmatrix} \\] \\[ = \\begin{pmatrix} \\displaystyle y_{11}+b_{11} & \\displaystyle y_{12}+b_{12} & \\dots & \\displaystyle y_{1m}+b_{1m} \\\\ \\displaystyle y_{21}+b_{21} & \\displaystyle y_{22}+b_{22} & \\dots & \\displaystyle y_{2m}+b_{2m} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle y_{n1}+b_{n1} & \\displaystyle y_{n2}+b_{n2} & \\dots & \\displaystyle y_{nm}+b_{nm} \\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774 \\(\\mathbf{Z}\\) \uc774 \uc190\uc2e4\ud568\uc218 \\(l\\) \ub85c \uc804\ub2ec\ub418\uc5b4 \ucd5c\uc885\uc801\uc73c\ub85c \uc2a4\uce7c\ub77c \\(L\\) \uc774 \ub418\uc5c8\ub2e4\uace0 \ud558\uba74 \\[ L = l(\\mathbf{Z}) = l(\\mathbf{Y + B}) \\] \uc774\ub2e4. \\(L\\) \uc774 \uc2a4\uce7c\ub77c\uace0 \\(\\mathbf{Z}\\) \ub294 \\(n \\times m\\) \ud589\ub82c\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Z}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times m\\) \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Z}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial z_{11}}& \\dfrac{\\partial L}{\\partial z_{12}}& \\dots& \\dfrac{\\partial L}{\\partial z_{1m}}\\\\ \\dfrac{\\partial L}{\\partial z_{21}}& \\dfrac{\\partial L}{\\partial z_{22}}& \\dots& \\dfrac{\\partial L}{\\partial z_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial z_{n1}}& \\dfrac{\\partial L}{\\partial z_{n2}}& \\dots& \\dfrac{\\partial L}{\\partial z_{nm}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \\(\\mathbf{Z}\\) \ub294 \\(\\mathbf{Y, B}\\) \uc5d0 \ub300\ud55c \ud568\uc218\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y, B}\\) \uc758 \ubbf8\ubd84\uc740 \uc774\ub3c5\ub9bd\ubcc0\uc218\uc640 \uc77c\ub9e4\uac1c\ubcc0\uc218\uc758 \ud569\uc131\ud568\uc218\uc758 \ubbf8\ubd84 \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}}\\dfrac{\\partial \\mathbf{Z}}{\\partial \\mathbf{Y}}, \\dfrac{\\partial L}{\\partial \\mathbf{B}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}}\\dfrac{\\partial \\mathbf{Z}}{\\partial \\mathbf{B}} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 \ud589\ub82c \ubbf8\ubd84\uc758 \uc815\uc758\uc5d0 \uc758\ud558\uc5ec \uc57c\ucf54\ube44 \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y_{11}}& \\dfrac{\\partial L}{\\partial y_{12}}& \\dots& \\dfrac{\\partial L}{\\partial y_{1m}}\\\\ \\dfrac{\\partial L}{\\partial y_{21}}& \\dfrac{\\partial L}{\\partial y_{22}}& \\dots& \\dfrac{\\partial L}{\\partial y_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y_{n1}}& \\dfrac{\\partial L}{\\partial y_{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y_{nm}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \\((1,1)\\) \uc6d0\uc18c \\(y_{11}\\) \uc758 \ubbf8\ubd84\uc740 \\(\\mathbf{Z}\\) \ub97c \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ub9e4\uac1c\ubcc0\uc218\uc758 \ub098\uc5f4\ub85c \ubcf8\ub2e4\uba74, \\(\\dfrac{\\partial L}{\\partial y_{11}}\\) \uc5d0 \ub300\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud569\uc131\ud568\uc218\uc758 \ud3b8\ubbf8\ubd84\uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc73c\ubbc0\ub85c \uc2a4\uce7c\ub77c \\[ \\dfrac{\\partial L}{\\partial y_{11}} = \\sum_{i=1}^{n}\\sum_{j=1}^{m}\\dfrac{\\partial L}{\\partial z _{ij}}\\dfrac{\\partial z _{ij}}{\\partial y_{11}} \\] \uc774\ub2e4. \uadf8\ub7f0\ub370 \uadc0\ucc2e\uc740 \ub367\uc148 \uc5f0\uc0b0\uc744 \ud53c\ud558\uae30 \uc704\ud558\uc5ec \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial L}{\\partial z _{ij}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial L}{\\partial \\mathbf{Z}}\\) \ub85c \uc4f0\uace0, \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial z _{ij}}{\\partial y_{11}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial \\mathbf{Z}}{\\partial y_{11}}\\) \ub85c \uc4f0\uba74 \uc774\uac83\uc744 Frobenius \ub0b4\uc801 \\[ = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y_{11}} \\bigg > _{\\mathbf{F}}\\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \uc774\ub54c \\[ \\dfrac{\\partial \\mathbf{Z}}{\\partial y_{11}} = \\begin{pmatrix} 1 & 0& \\dots& 0 \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\] \uc774\ubbc0\ub85c \\[ \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y _{11}} \\bigg > _{\\mathbf{F}} = \\Bigg < \\begin{pmatrix} \\dfrac{\\partial L}{\\partial z_{11}}& \\dfrac{\\partial L}{\\partial z_{12}}& \\dots& \\dfrac{\\partial L}{\\partial z_{1m}}\\\\ \\dfrac{\\partial L}{\\partial z_{21}}& \\dfrac{\\partial L}{\\partial z_{22}}& \\dots& \\dfrac{\\partial L}{\\partial z_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial z_{n1}}& \\dfrac{\\partial L}{\\partial z_{n2}}& \\dots& \\dfrac{\\partial L}{\\partial z_{nm}}\\\\ \\end{pmatrix}, \\begin{pmatrix} 1& 0& \\dots& 0 \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\Bigg > _{\\mathbf{F}} \\] \\[ = \\dfrac{\\partial L}{\\partial z_{11}} \\] \uc774\ub2e4. \uc989, \\(\\displaystyle \\dfrac{\\partial L}{\\partial y _{11}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y _{11}} \\bigg > _{\\mathbf{F}}= \\dfrac{\\partial L}{\\partial z _{11}}\\) \uc774\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[\\displaystyle \\dfrac{\\partial L}{\\partial y _{ij}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y _{ij}} \\bigg > _{\\mathbf{F}}= \\dfrac{\\partial L}{\\partial z _{ij}}\\] \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times m\\) \ud589\ub82c \\[ \\therefore \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial z _{11}}& \\dfrac{\\partial L}{\\partial z _{12}}& \\dots& \\dfrac{\\partial L}{\\partial z _{1m}}\\\\ \\dfrac{\\partial L}{\\partial z _{21}}& \\dfrac{\\partial L}{\\partial z _{22}}& \\dots& \\dfrac{\\partial L}{\\partial z _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial z _{n1}}& \\dfrac{\\partial L}{\\partial z _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial z _{nm}}\\\\ \\end{pmatrix} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\ub2e4. \u25a0 References : http://cs231n.stanford.edu/handouts/derivatives.pdf http://cs231n.stanford.edu/handouts/linear-backprop.pdf","title":"Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84"},{"location":"write/math-sample-matrix-derivatives/#affine-layer","text":"Affine \ubcc0\ud658\uc758 \uc5ed\uc804\ud30c : \uc785\ub825 \ud589\ub82c \\(\\mathbf{X,W}\\) \uacfc \ucd9c\ub825\ud589\ub82c \\(\\mathbf{Y} = \\mathbf{XW}\\) \ub97c \uac16\ub294 Affine \ub808\uc774\uc5b4\uc758 \uc5ed\uc804\ud30c\ub294 \uc190\uc2e4\uac12 \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84 \\(\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\cdot \\mathbf{W} ^{\\intercal }, \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc774\ub2e4. Affine Layer \ub294 \ubcf4\ud1b5 \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\uc131\ub41c\ub2e4.","title":"Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84"},{"location":"write/math-sample-matrix-derivatives/#affine-layer_1","text":"\ud589\ub82c\uacf1 \uc5f0\uc0b0\uacfc \ud589\ub82c\ub367\uc148 \uc5f0\uc0b0\uc744 \ud558\ub294 Affine \ub808\uc774\uc5b4\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc\ub85c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . dW = None self . db = None def forward ( self , x ): self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) return dx \ub2e4\uc74c \ucf54\ub4dc\ub294 \uc785\ub825 \ub370\uc774\ud130\uac00 \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ud150\uc11c\uc778 \uacbd\uc6b0, \uc989 4\ucc28\uc6d0 \ub370\uc774\ud130\uc778 \uacbd\uc6b0\ub3c4 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\ud604\ud55c \uac83\uc774\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . original_x_shape = None self . dW = None self . db = None def forward ( self , x ): # \ud150\uc11c \ub300\uc751 self . original_x_shape = x . shape x = x . reshape ( x . shape [ 0 ], - 1 ) self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) dx = dx . reshape ( * self . original_x_shape ) # \uc785\ub825 \ub370\uc774\ud130 \ubaa8\uc591 \ubcc0\uacbd(\ud150\uc11c \ub300\uc751) return dx","title":"Affine Layer \ucf54\ub4dc \uad6c\ud604"},{"location":"write/math-sample-matrix-derivatives/#_1","text":"\\(n \\times d\\) \uc785\ub825 \ud589\ub82c \\(\\mathbf{X}\\) , \\(d \\times m\\) \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \ud589\ub82c \\(\\mathbf{Y=XW}\\) \uacfc \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\mathbf{W}^{\\intercal } \\] \uc774\uace0, \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\] \uc774\ub2e4.","title":"\ud589\ub82c\uacf1 \ubbf8\ubd84 \uc815\ub9ac"},{"location":"write/math-sample-matrix-derivatives/#_2","text":"\\(n \\times m\\) \ucd9c\ub825 \ud589\ub82c \\(\\mathbf{Y}\\) , \\(n \\times m\\) \ud3b8\ud5a5 \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \uc21c\uc785\ub825 \ud589\ub82c \\(\\mathbf{Z=Y + B}\\) \uc640 \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\uace0, \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{B}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\ub2e4.","title":"\ud589\ub82c\ub367\uc148 \ubbf8\ubd84 \uc815\ub9ac"},{"location":"write/math-sample-perceptron-convergence/","text":"\ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac \u00b6 \ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac(perceptron convergence theorem) : \ud37c\uc149\ud2b8\ub860\uc774 \uc120\ud615 \ubd84\ub9ac \uac00\ub2a5 \ubb38\uc81c\ub4e4, \uc989 \uc9c1\uc120\uc73c\ub85c \ubd84\ub958\uac00 \uac00\ub2a5\ud55c \ub370\uc774\ud130\ub97c \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc798 \ubd84\ub958\ud558\ub294 \uac00\uc911\uce58\ub97c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4 \ub294 \uc815\ub9ac\uc774\ub2e4. \uc544\ub798\uc758 \ub0b4\uc6a9\uc740 metamath1/ml-simple-works/perceptron/perceptron.ipynb \uc758 \ub0b4\uc6a9\uc744 \ub2e4\uc2dc \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4. \uc5c4\ubc00\ud55c \uc815\ub9ac \u00b6 \" \\(\\|\\mathbf{w} ^{*}\\|=1\\) \uc778 \uacc4\uc218\ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \uc640 \\(\\forall k \\in \\{1, \\dots, n\\}\\) \uc5d0 \ub300\ud55c \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \\(k\\) \ubc88\uc9f8 \ucd9c\ub825\uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ubc88\uc9f8 \uc2a4\uce7c\ub77c \\(y_k \\in \\{-1,1\\}\\) \uc5d0 \ub300\ud558\uc5ec \\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\uace0, \\(\\|\\mathbf{x}_{k}\\| \\leq R\\) \uc778 \\(R \\in \\mathbb{R}\\) \uc774 \uc874\uc7ac\ud558\uba74, \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc758 \uc5d0\ub7ec \\(y_k \\neq \\hat{y}_{k} = \\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}\\) \uc5d0 \ub300\ud55c \uc5d0\ub7ec \ubc1c\uc0dd\ud69f\uc218 \\(\\epsilon\\) \uc740 \\(\\epsilon \\leq \\dfrac{R ^{2}}{\\gamma ^{2}}\\) \uc774\ub2e4.\" \uc815\ub9ac\uc758 \uc774\ud574 \u00b6 \uba3c\uc800 \uc5ec\uae30\uc5d0\uc11c\ub294 \ud65c\uc131\ud654\ud568\uc218\ub85c \uc591\uadf9\uc131 \uacc4\ub2e8\ud568\uc218 \\(\\displaystyle y = h(x) = \\begin{cases} 1 &x > 0\\\\ -1 &x \\leq 0\\\\ \\end{cases}\\) \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac\ub97c \ud55c\uc904\uc529 \ud480\uc5b4\uc11c \uc774\ud574\ud574\ubcf4\uc790. \uc704 \uadf8\ub9bc\uc5d0\uc11c \\(\\mathbf{w} ^{*}\\) \uc5d0 \uc758\ud574 \uacb0\uc815\ub418\ub294 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc740 \ubd89\uc740\uc120\uc774\ub2e4. \uc774 \ubd89\uc740\uc120\uc774 \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c \uc62c\ubc14\ub974\uac8c \uc120\ud615 \ubd84\ub9ac\ud558\ub294 \uc120\uc774\ub77c\uace0 \ud558\uc790. \uadf8 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc744 \ud3b8\ud5a5\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud55c \\(w_0 = b, x_0 = 1\\) \uc640 \uc790\uc720\ubcc0\uc218 \\(x_1, x_2\\) \uc5d0 \ub300\ud55c \\(\\mathbf{x} = \\big <1, x_1, x_2\\big >\\) \uc640 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}=\\big <b, w_1, w_2\\big >\\) \uc5d0 \ub300\ud558\uc5ec \\(x_1x_2\\) \ud3c9\uba74 \uc704\uc758 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \\[ \\mathbf{w} ^{*}\\cdot \\mathbf{x} = b + w_1x_1 + w_2x_2 = 0 \\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uc774\uc640\uac19\uc740 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\uc558\ub2e4\uba74 \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uc5ec \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} > 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc704\ucabd, \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} < 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud55c\ub2e4\uace0 \ud310\ubcc4\ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud558\uc5ec \\(y_k(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}) = y_k \\hat{y_k} \\geq \\gamma > 0\\) \uc778 \\(\\gamma\\) \uac00 \uc788\ub2e4\ub294 \uac83\uc740 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \\(2\\) \uac1c\uc758 \ud074\ub798\uc2a4\ub85c \uc798 \uc120\ud615\ubd84\ub9ac \ud558\uace0 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \uc65c\ub0d0\ud558\uba74 \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc704\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k > 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc704\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k > 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uace0, \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k < 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc544\ub798\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k < 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\uace0 \uc788\ub2e4\uba74 \ud56d\uc0c1 \\(y_k \\hat{y_k} > 0\\) \uac00 \ub420 \uac83\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub54c \uacb0\uacfc\uac12, \uc989 \\(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}\\) \uc774 \\(0\\) \uc5d0 \uac00\uae4c\uc6b8\uc218\ub85d \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uac00 \uac00\uae4c\uc6cc\uc9c4\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(\\gamma\\) \ub294 \uc544\ubb34\ub9ac \ucee4\ubd24\uc790 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc \uac70\ub9ac\uac00 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uc774\ub2e4. \ub610\ud55c \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc758 \ud06c\uae30, \uc989 \\(\\|\\mathbf{x}_{k}\\|\\) \uc640 \uac19\uac70\ub098 \ud070 \\(R \\in \\mathbb{R}\\) \uc744 \uc815\ud560 \uc218 \uc788\ub2e4. \uc774 \uc870\uac74\uc774 \ucda9\uc871\ub418\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\ub9cc\uc5d0 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\ub294 \uacc4\uc218 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub97c \ucc3e\uc744 \uc218 \uc788\ub2e4. \uc99d\uba85 \u00b6 \\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\ubbc0\ub85c \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\uc2dc\ud0ac \uc218 \uc788\ub294 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uac00\uc911\uce58 \ud559\uc2b5\uc744 \ubc18\ubcf5\ud558\uba74\uc11c \\(\\mathbf{w} ^{*}\\) \uc744 \ucc3e\uc73c\ub824\ud560\ud150\ub370 \uc774\ub54c \\(t\\) \ubc88\uc9f8 \ud559\uc2b5\uc5d0\uc11c\uc758 \uac00\uc911\uce58 \\(\\mathbf{w} ^{(t)}\\) \uac00 \\(\\mathbf{w}^{*}\\) \uc640 \ud3c9\ud589\ud558\ub2e4\uba74 \ub450 \ubca1\ud130\uc758 \uc0ac\uc774\uac01\uc774 \\(0\\) \uac00 \ub418\uc5b4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w} ^{(t)}\\) \uac12\uc774 \ucd5c\ub300\uac00 \ub41c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w} ^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud568\uc744 \ubcf4\uc774\uba74 \uac00\uc911\uce58\uac00 \uc218\ub834\ud558\uace0 \uc788\uc74c\uc744 \ubcf4\uc778\ub290 \uac83\uc774 \ub41c\ub2e4. \uc774\ub54c \ub450 \ubca1\ud130\uc758 \uac01\ub3c4\uac00 \uc904\uc5b4\ub4e6\uc73c\ub85c\uc368 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \\(\\mathbf{w} ^{(t)}\\) \uc758 \uac12 \uc790\uccb4\uac00 \ucee4\uc838\uc11c \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud560 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w} ^{(t)}\\) \uc758 \ud06c\uae30 \uc0c1\ud55c\uac12\ub3c4 \ud568\uaed8 \ubcf4\uc5ec\uc57c \uac00\uc911\uce58\uac00 \uc218\ub834\ud55c\ub2e4\uace0 \ub9d0\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \\(t\\) \ubc88\uc9f8 \ubc18\ubcf5\uc5d0\uc11c \\(k\\) \ubc88\uc9f8 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uadf8\uac83\uc758 \ud074\ub798\uc2a4 \ub808\uc774\ube14 \\(y _{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(y _{k}(\\mathbf{w} ^{(t-1)} \\cdot \\mathbf{x}_{k}) < 0\\) \uc774 \ub418\uc5c8\ub2e4\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c \uac83\uc774\ubbc0\ub85c \uac00\uc911\uce58\ub97c \uc870\uc815\ud574\uc57c \ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w} ^{(t)} := \\mathbf{w}^{(t-1)} + \\eta (y _{k} - \\hat{y} _{k})\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc84c\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc790. \uc774\ub54c \\(\\eta = 1\\) \ub85c \ub450\uace0 \ud37c\uc149\ud2b8\ub860\uc758 \uc608\uce21\uac12 \\(\\hat{y}_{k}\\) \ub294 \ud3b8\uc758\ub97c \uc704\ud558\uc5ec \uc81c\uac70\ud558\uc790. \uadf8\ub807\uac8c \ud574\ub3c4 \uc591\uc774 \uc5b4\ub290\uc815\ub3c4 \ubc14\ub014 \ubfd0 \ubd80\ud638\ub294 \ubc14\ub00c\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uac00\uc911\uce58 \uc870\uc815\uc774 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7ec\uba74 \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w}^{(t)} := \\mathbf{w}^{(t-1)} + y _{k}\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \uadf8\ub7ec\uba74 \uc774\ub54c \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w}^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc744 \uacc4\uc0b0\ud574\ubcf4\uba74 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} = \\mathbf{w}^{*}\\cdot (\\mathbf{w}^{(t-1)}+y _{k} \\mathbf{x}_{k}) \\] \\[ = \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}+y _{k} \\mathbf{w}^{*}\\cdot \\mathbf{x}_{k} \\] \\[ \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} + \\gamma \\ \\ (\\because y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma ) \\] \uc774\ub2e4. \uc989, \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}- \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} \\geq \\gamma > 0\\) \uc774\ubbc0\ub85c \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc774 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}\\) \ubcf4\ub2e4 \\(\\gamma\\) \uc774\uc0c1 \ud06c\ub2e4\ub294 \uac83\uc774\ub2e4. \uc774\ub85c\uc368 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uac00 \uc99d\uac00\ud55c\ub2e4\ub294 \uac83\uc774, \uc989 \uac00\uc911\uce58 \ubca1\ud130\uac00 \uc218\ub834\ub418\uace0 \uc788\ub2e4\ub294 \uac83\uc774 \uc99d\uba85\ub418\uc5c8\ub2e4. \u25b2 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub0b4\uc801 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc758 \uac12\uc774 \ucd5c\uc18c \\(\\gamma\\) \uc774\uc0c1 \uc99d\uac00\ud558\uae30 \ub54c\ubb38\uc5d0 \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\|\\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88 \ud559\uc2b5 \ud6c4 \ub0b4\uc801\uac12\uc774 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma \\] \uc774\ub77c\ub294 \uac83 \uc989, \ucd5c\uc18c \\(t \\gamma\\) \uc774\uc0c1\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uadf8\ub7f0\ub370 \ucf54\uc2dc-\uc288\ubc14\ub974\uce20 \ubd80\ub4f1\uc2dd\uc5d0 \uc758\ud574 \\[ \\|\\mathbf{w}^{*}\\|\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\] \uc778\ub370 \\(\\|\\mathbf{w}^{*}\\| = 1\\) \uc774\ubbc0\ub85c \\(\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma\\) \uc5d0\uc11c \\[\\|\\mathbf{w}^{(t)}\\| \\geq t \\gamma\\] \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(t \\gamma\\) \uac00 \\(\\|\\mathbf{w}^{(t)}\\|\\) \uc758 \ucd5c\ub300\ud558\uacc4, \uc989 \ud558\ud55c \\[ \\therefore \\inf \\| \\mathbf{w}^{(t)}\\| = t \\gamma \\] \uc774 \ub41c\ub2e4. \u25b2 \\(t\\) \ubc88\uc9f8 \ud559\uc2b5 \uc774\ud6c4 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{(t)}\\) \uc758 \uae38\uc774\uc758 \uc81c\uacf1\uc740 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} = \\|\\mathbf{w}^{(t-1)} + y _{k} \\mathbf{x} _{k}\\|^{2} \\] \\[ = \\|\\mathbf{w}^{(t-1)}\\| ^{2} + y _{k} ^{2} \\|\\mathbf{x} _{k}\\| ^{2} + 2y _{k} \\mathbf{w}^{(t-1)}\\cdot \\mathbf{x} _{k} \\] \uc778\ub370 \\(y _{k} \\in \\{-1,1\\}\\) \uc774\ubbc0\ub85c \\(y _{k}^{2} = 1\\) \uc774\uace0 \\(\\|x _{k}\\| \\leq R \\implies \\|x _{k}\\|^{2}\\leq R ^{2}\\) \uc774\uace0 \uc608\uce21\uac12\uc774 \ucd9c\ub825\uac12\uacfc \ud2c0\ub838\uc73c\ubbc0\ub85c \\(y _{k} \\mathbf{w}^{(t-1)} \\cdot \\mathbf{x} = y _{k}\\hat{y}_{k} < 0\\) \uc774\ub2e4. \ub530\ub77c\uc11c \\[ \\|\\mathbf{w}^{(t)}\\| ^{2} \\leq \\|\\mathbf{w}^{(t-1)}\\| ^{2} + R ^{2} \\] \uc774\ub2e4. \uc989, \\(\\|\\mathbf{w}^{(t)}\\| ^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2}\\) \uc774\ubbc0\ub85c \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\| \\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88\uc740 \ud559\uc2b5\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \\[ \\|\\mathbf{w}^{1}\\|^{2} - \\|\\mathbf{w}^{0}\\| ^{2} \\leq R ^{2} \\] \\[ \\|\\mathbf{w}^{2}\\|^{2} - \\|\\mathbf{w}^{1}\\| ^{2} \\leq R ^{2} \\] \\[ \\dots \\] \\[ \\|\\mathbf{w}^{(t)}\\|^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2} \\] \uc774\uac83\ub4e4\uc744 \ubaa8\ub450 \ub354\ud558\uba74 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc744 \uc5bb\ub294\ub2e4. \uc774\uac83\uc774 \\(\\|\\mathbf{w}\\|^{2}\\) \uc758 \ucd5c\uc18c\uc0c1\uacc4, \uc989 \uc0c1\ud55c \\[ \\sup \\|\\mathbf{w}^{(t)}\\| ^{2} = t R ^{2} \\] \uc774\ub2e4. \u25b2 \uc0c1\ud55c\uacfc \ud558\ud55c\uc744 \uac19\uc740 \ubd80\ub4f1\uc2dd\uc5d0 \uc4f0\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. \\[ (\\inf \\|\\mathbf{w}^{(t)}\\|) ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq \\sup \\|\\mathbf{w}^{(t)}\\|^{2} \\] \\[ \\iff t ^{2} \\gamma ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc5ec\uae30\uc5d0\uc11c \\[ \\iff t \\leq \\dfrac{R ^{2}}{\\gamma ^{2}} \\] \ub97c \uc5bb\ub294\ub2e4. \uc774\uac83\uc740 \uace7 \ud559\uc2b5 \ud69f\uc218 \\(t\\) \uac00 \uc0c1\uacc4\ub97c \uac16\ub294\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c \uacb0\uacfc\uc801\uc73c\ub85c \uc120\ud615\ubd84\ub9ac \uac00\ub2a5 \ub370\uc774\ud130\uc5d0 \uc870\uac74 \\(\\eta =1, \\|\\mathbf{w}^{0}\\| = 0\\) \uc744 \uc801\uc6a9\ud558\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c, \uc989 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\uc758 \ud559\uc2b5\uc73c\ub85c(\uc5d0\ub7ec\ub85c) \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218 \\(\\mathbf{w}\\) \ub97c \ucd5c\uc801\uc758 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub85c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \u25a0 Note \uc774\ub294 \ubd84\ub958\ud574\uc57c \ud558\ub294 \ud074\ub798\uc2a4\uac04 \uac70\ub9ac\uac00 \uac00\uae4c\uc6b8\uc218\ub85d \uc54c\uace0\ub9ac\uc998 \ubc18\ubcf5 \ud69f\uc218(\ud559\uc2b5\ud69f\uc218, \uc5d0\ub7ec\ud69f\uc218)\ub294 \ub298\uc5b4\ub098\uc9c0\ub9cc \uc5b4\uca0c\ub4e0 \uc218\ub834\uc740 \ud55c\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4. \\(\\gamma\\) \uac00 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \uc904\uc5b4\ub4e4\uace0, \\(R\\) \uc774 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \ub9ce\uc544\uc9c4\ub2e4. References : https://nbviewer.jupyter.org/github/metamath1/ml-simple-works/blob/master/perceptron/perceptron.ipynb \uc54c\uace0\ub9ac\uc998 \uc911\uc2ec\uc758 \uba38\uc2e0\ub7ec\ub2dd \uac00\uc774\ub4dcMachine Learning: An Algorithmic Perspective, 2 nd ed., \uc2a4\ud2f0\ube10 \ub9c8\uc2ac\ub79c\ub4dc http://www.cs.columbia.edu/~mcollins/courses/6998-2012/notes/perc.converge.pdf","title":"\ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac"},{"location":"write/math-sample-perceptron-convergence/#_1","text":"\ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac(perceptron convergence theorem) : \ud37c\uc149\ud2b8\ub860\uc774 \uc120\ud615 \ubd84\ub9ac \uac00\ub2a5 \ubb38\uc81c\ub4e4, \uc989 \uc9c1\uc120\uc73c\ub85c \ubd84\ub958\uac00 \uac00\ub2a5\ud55c \ub370\uc774\ud130\ub97c \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc798 \ubd84\ub958\ud558\ub294 \uac00\uc911\uce58\ub97c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4 \ub294 \uc815\ub9ac\uc774\ub2e4.","title":"\ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac"},{"location":"write/math-sample-perceptron-convergence/#_2","text":"\" \\(\\|\\mathbf{w} ^{*}\\|=1\\) \uc778 \uacc4\uc218\ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \uc640 \\(\\forall k \\in \\{1, \\dots, n\\}\\) \uc5d0 \ub300\ud55c \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \\(k\\) \ubc88\uc9f8 \ucd9c\ub825\uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ubc88\uc9f8 \uc2a4\uce7c\ub77c \\(y_k \\in \\{-1,1\\}\\) \uc5d0 \ub300\ud558\uc5ec \\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\uace0, \\(\\|\\mathbf{x}_{k}\\| \\leq R\\) \uc778 \\(R \\in \\mathbb{R}\\) \uc774 \uc874\uc7ac\ud558\uba74, \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc758 \uc5d0\ub7ec \\(y_k \\neq \\hat{y}_{k} = \\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}\\) \uc5d0 \ub300\ud55c \uc5d0\ub7ec \ubc1c\uc0dd\ud69f\uc218 \\(\\epsilon\\) \uc740 \\(\\epsilon \\leq \\dfrac{R ^{2}}{\\gamma ^{2}}\\) \uc774\ub2e4.\"","title":"\uc5c4\ubc00\ud55c \uc815\ub9ac"},{"location":"write/math-sample-perceptron-convergence/#_3","text":"\uba3c\uc800 \uc5ec\uae30\uc5d0\uc11c\ub294 \ud65c\uc131\ud654\ud568\uc218\ub85c \uc591\uadf9\uc131 \uacc4\ub2e8\ud568\uc218 \\(\\displaystyle y = h(x) = \\begin{cases} 1 &x > 0\\\\ -1 &x \\leq 0\\\\ \\end{cases}\\) \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac\ub97c \ud55c\uc904\uc529 \ud480\uc5b4\uc11c \uc774\ud574\ud574\ubcf4\uc790. \uc704 \uadf8\ub9bc\uc5d0\uc11c \\(\\mathbf{w} ^{*}\\) \uc5d0 \uc758\ud574 \uacb0\uc815\ub418\ub294 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc740 \ubd89\uc740\uc120\uc774\ub2e4. \uc774 \ubd89\uc740\uc120\uc774 \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c \uc62c\ubc14\ub974\uac8c \uc120\ud615 \ubd84\ub9ac\ud558\ub294 \uc120\uc774\ub77c\uace0 \ud558\uc790. \uadf8 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc744 \ud3b8\ud5a5\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud55c \\(w_0 = b, x_0 = 1\\) \uc640 \uc790\uc720\ubcc0\uc218 \\(x_1, x_2\\) \uc5d0 \ub300\ud55c \\(\\mathbf{x} = \\big <1, x_1, x_2\\big >\\) \uc640 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}=\\big <b, w_1, w_2\\big >\\) \uc5d0 \ub300\ud558\uc5ec \\(x_1x_2\\) \ud3c9\uba74 \uc704\uc758 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \\[ \\mathbf{w} ^{*}\\cdot \\mathbf{x} = b + w_1x_1 + w_2x_2 = 0 \\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uc774\uc640\uac19\uc740 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\uc558\ub2e4\uba74 \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uc5ec \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} > 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc704\ucabd, \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} < 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud55c\ub2e4\uace0 \ud310\ubcc4\ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud558\uc5ec \\(y_k(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}) = y_k \\hat{y_k} \\geq \\gamma > 0\\) \uc778 \\(\\gamma\\) \uac00 \uc788\ub2e4\ub294 \uac83\uc740 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \\(2\\) \uac1c\uc758 \ud074\ub798\uc2a4\ub85c \uc798 \uc120\ud615\ubd84\ub9ac \ud558\uace0 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \uc65c\ub0d0\ud558\uba74 \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc704\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k > 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc704\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k > 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uace0, \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k < 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc544\ub798\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k < 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\uace0 \uc788\ub2e4\uba74 \ud56d\uc0c1 \\(y_k \\hat{y_k} > 0\\) \uac00 \ub420 \uac83\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub54c \uacb0\uacfc\uac12, \uc989 \\(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}\\) \uc774 \\(0\\) \uc5d0 \uac00\uae4c\uc6b8\uc218\ub85d \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uac00 \uac00\uae4c\uc6cc\uc9c4\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(\\gamma\\) \ub294 \uc544\ubb34\ub9ac \ucee4\ubd24\uc790 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc \uac70\ub9ac\uac00 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uc774\ub2e4. \ub610\ud55c \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc758 \ud06c\uae30, \uc989 \\(\\|\\mathbf{x}_{k}\\|\\) \uc640 \uac19\uac70\ub098 \ud070 \\(R \\in \\mathbb{R}\\) \uc744 \uc815\ud560 \uc218 \uc788\ub2e4. \uc774 \uc870\uac74\uc774 \ucda9\uc871\ub418\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\ub9cc\uc5d0 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\ub294 \uacc4\uc218 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub97c \ucc3e\uc744 \uc218 \uc788\ub2e4.","title":"\uc815\ub9ac\uc758 \uc774\ud574"},{"location":"write/math-sample-perceptron-convergence/#_4","text":"\\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\ubbc0\ub85c \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\uc2dc\ud0ac \uc218 \uc788\ub294 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uac00\uc911\uce58 \ud559\uc2b5\uc744 \ubc18\ubcf5\ud558\uba74\uc11c \\(\\mathbf{w} ^{*}\\) \uc744 \ucc3e\uc73c\ub824\ud560\ud150\ub370 \uc774\ub54c \\(t\\) \ubc88\uc9f8 \ud559\uc2b5\uc5d0\uc11c\uc758 \uac00\uc911\uce58 \\(\\mathbf{w} ^{(t)}\\) \uac00 \\(\\mathbf{w}^{*}\\) \uc640 \ud3c9\ud589\ud558\ub2e4\uba74 \ub450 \ubca1\ud130\uc758 \uc0ac\uc774\uac01\uc774 \\(0\\) \uac00 \ub418\uc5b4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w} ^{(t)}\\) \uac12\uc774 \ucd5c\ub300\uac00 \ub41c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w} ^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud568\uc744 \ubcf4\uc774\uba74 \uac00\uc911\uce58\uac00 \uc218\ub834\ud558\uace0 \uc788\uc74c\uc744 \ubcf4\uc778\ub290 \uac83\uc774 \ub41c\ub2e4. \uc774\ub54c \ub450 \ubca1\ud130\uc758 \uac01\ub3c4\uac00 \uc904\uc5b4\ub4e6\uc73c\ub85c\uc368 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \\(\\mathbf{w} ^{(t)}\\) \uc758 \uac12 \uc790\uccb4\uac00 \ucee4\uc838\uc11c \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud560 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w} ^{(t)}\\) \uc758 \ud06c\uae30 \uc0c1\ud55c\uac12\ub3c4 \ud568\uaed8 \ubcf4\uc5ec\uc57c \uac00\uc911\uce58\uac00 \uc218\ub834\ud55c\ub2e4\uace0 \ub9d0\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \\(t\\) \ubc88\uc9f8 \ubc18\ubcf5\uc5d0\uc11c \\(k\\) \ubc88\uc9f8 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uadf8\uac83\uc758 \ud074\ub798\uc2a4 \ub808\uc774\ube14 \\(y _{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(y _{k}(\\mathbf{w} ^{(t-1)} \\cdot \\mathbf{x}_{k}) < 0\\) \uc774 \ub418\uc5c8\ub2e4\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c \uac83\uc774\ubbc0\ub85c \uac00\uc911\uce58\ub97c \uc870\uc815\ud574\uc57c \ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w} ^{(t)} := \\mathbf{w}^{(t-1)} + \\eta (y _{k} - \\hat{y} _{k})\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc84c\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc790. \uc774\ub54c \\(\\eta = 1\\) \ub85c \ub450\uace0 \ud37c\uc149\ud2b8\ub860\uc758 \uc608\uce21\uac12 \\(\\hat{y}_{k}\\) \ub294 \ud3b8\uc758\ub97c \uc704\ud558\uc5ec \uc81c\uac70\ud558\uc790. \uadf8\ub807\uac8c \ud574\ub3c4 \uc591\uc774 \uc5b4\ub290\uc815\ub3c4 \ubc14\ub014 \ubfd0 \ubd80\ud638\ub294 \ubc14\ub00c\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uac00\uc911\uce58 \uc870\uc815\uc774 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7ec\uba74 \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w}^{(t)} := \\mathbf{w}^{(t-1)} + y _{k}\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \uadf8\ub7ec\uba74 \uc774\ub54c \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w}^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc744 \uacc4\uc0b0\ud574\ubcf4\uba74 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} = \\mathbf{w}^{*}\\cdot (\\mathbf{w}^{(t-1)}+y _{k} \\mathbf{x}_{k}) \\] \\[ = \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}+y _{k} \\mathbf{w}^{*}\\cdot \\mathbf{x}_{k} \\] \\[ \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} + \\gamma \\ \\ (\\because y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma ) \\] \uc774\ub2e4. \uc989, \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}- \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} \\geq \\gamma > 0\\) \uc774\ubbc0\ub85c \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc774 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}\\) \ubcf4\ub2e4 \\(\\gamma\\) \uc774\uc0c1 \ud06c\ub2e4\ub294 \uac83\uc774\ub2e4. \uc774\ub85c\uc368 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uac00 \uc99d\uac00\ud55c\ub2e4\ub294 \uac83\uc774, \uc989 \uac00\uc911\uce58 \ubca1\ud130\uac00 \uc218\ub834\ub418\uace0 \uc788\ub2e4\ub294 \uac83\uc774 \uc99d\uba85\ub418\uc5c8\ub2e4. \u25b2 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub0b4\uc801 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc758 \uac12\uc774 \ucd5c\uc18c \\(\\gamma\\) \uc774\uc0c1 \uc99d\uac00\ud558\uae30 \ub54c\ubb38\uc5d0 \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\|\\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88 \ud559\uc2b5 \ud6c4 \ub0b4\uc801\uac12\uc774 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma \\] \uc774\ub77c\ub294 \uac83 \uc989, \ucd5c\uc18c \\(t \\gamma\\) \uc774\uc0c1\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uadf8\ub7f0\ub370 \ucf54\uc2dc-\uc288\ubc14\ub974\uce20 \ubd80\ub4f1\uc2dd\uc5d0 \uc758\ud574 \\[ \\|\\mathbf{w}^{*}\\|\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\] \uc778\ub370 \\(\\|\\mathbf{w}^{*}\\| = 1\\) \uc774\ubbc0\ub85c \\(\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma\\) \uc5d0\uc11c \\[\\|\\mathbf{w}^{(t)}\\| \\geq t \\gamma\\] \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(t \\gamma\\) \uac00 \\(\\|\\mathbf{w}^{(t)}\\|\\) \uc758 \ucd5c\ub300\ud558\uacc4, \uc989 \ud558\ud55c \\[ \\therefore \\inf \\| \\mathbf{w}^{(t)}\\| = t \\gamma \\] \uc774 \ub41c\ub2e4. \u25b2 \\(t\\) \ubc88\uc9f8 \ud559\uc2b5 \uc774\ud6c4 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{(t)}\\) \uc758 \uae38\uc774\uc758 \uc81c\uacf1\uc740 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} = \\|\\mathbf{w}^{(t-1)} + y _{k} \\mathbf{x} _{k}\\|^{2} \\] \\[ = \\|\\mathbf{w}^{(t-1)}\\| ^{2} + y _{k} ^{2} \\|\\mathbf{x} _{k}\\| ^{2} + 2y _{k} \\mathbf{w}^{(t-1)}\\cdot \\mathbf{x} _{k} \\] \uc778\ub370 \\(y _{k} \\in \\{-1,1\\}\\) \uc774\ubbc0\ub85c \\(y _{k}^{2} = 1\\) \uc774\uace0 \\(\\|x _{k}\\| \\leq R \\implies \\|x _{k}\\|^{2}\\leq R ^{2}\\) \uc774\uace0 \uc608\uce21\uac12\uc774 \ucd9c\ub825\uac12\uacfc \ud2c0\ub838\uc73c\ubbc0\ub85c \\(y _{k} \\mathbf{w}^{(t-1)} \\cdot \\mathbf{x} = y _{k}\\hat{y}_{k} < 0\\) \uc774\ub2e4. \ub530\ub77c\uc11c \\[ \\|\\mathbf{w}^{(t)}\\| ^{2} \\leq \\|\\mathbf{w}^{(t-1)}\\| ^{2} + R ^{2} \\] \uc774\ub2e4. \uc989, \\(\\|\\mathbf{w}^{(t)}\\| ^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2}\\) \uc774\ubbc0\ub85c \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\| \\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88\uc740 \ud559\uc2b5\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \\[ \\|\\mathbf{w}^{1}\\|^{2} - \\|\\mathbf{w}^{0}\\| ^{2} \\leq R ^{2} \\] \\[ \\|\\mathbf{w}^{2}\\|^{2} - \\|\\mathbf{w}^{1}\\| ^{2} \\leq R ^{2} \\] \\[ \\dots \\] \\[ \\|\\mathbf{w}^{(t)}\\|^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2} \\] \uc774\uac83\ub4e4\uc744 \ubaa8\ub450 \ub354\ud558\uba74 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc744 \uc5bb\ub294\ub2e4. \uc774\uac83\uc774 \\(\\|\\mathbf{w}\\|^{2}\\) \uc758 \ucd5c\uc18c\uc0c1\uacc4, \uc989 \uc0c1\ud55c \\[ \\sup \\|\\mathbf{w}^{(t)}\\| ^{2} = t R ^{2} \\] \uc774\ub2e4. \u25b2 \uc0c1\ud55c\uacfc \ud558\ud55c\uc744 \uac19\uc740 \ubd80\ub4f1\uc2dd\uc5d0 \uc4f0\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. \\[ (\\inf \\|\\mathbf{w}^{(t)}\\|) ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq \\sup \\|\\mathbf{w}^{(t)}\\|^{2} \\] \\[ \\iff t ^{2} \\gamma ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc5ec\uae30\uc5d0\uc11c \\[ \\iff t \\leq \\dfrac{R ^{2}}{\\gamma ^{2}} \\] \ub97c \uc5bb\ub294\ub2e4. \uc774\uac83\uc740 \uace7 \ud559\uc2b5 \ud69f\uc218 \\(t\\) \uac00 \uc0c1\uacc4\ub97c \uac16\ub294\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c \uacb0\uacfc\uc801\uc73c\ub85c \uc120\ud615\ubd84\ub9ac \uac00\ub2a5 \ub370\uc774\ud130\uc5d0 \uc870\uac74 \\(\\eta =1, \\|\\mathbf{w}^{0}\\| = 0\\) \uc744 \uc801\uc6a9\ud558\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c, \uc989 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\uc758 \ud559\uc2b5\uc73c\ub85c(\uc5d0\ub7ec\ub85c) \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218 \\(\\mathbf{w}\\) \ub97c \ucd5c\uc801\uc758 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub85c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \u25a0 Note \uc774\ub294 \ubd84\ub958\ud574\uc57c \ud558\ub294 \ud074\ub798\uc2a4\uac04 \uac70\ub9ac\uac00 \uac00\uae4c\uc6b8\uc218\ub85d \uc54c\uace0\ub9ac\uc998 \ubc18\ubcf5 \ud69f\uc218(\ud559\uc2b5\ud69f\uc218, \uc5d0\ub7ec\ud69f\uc218)\ub294 \ub298\uc5b4\ub098\uc9c0\ub9cc \uc5b4\uca0c\ub4e0 \uc218\ub834\uc740 \ud55c\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4. \\(\\gamma\\) \uac00 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \uc904\uc5b4\ub4e4\uace0, \\(R\\) \uc774 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \ub9ce\uc544\uc9c4\ub2e4. References : https://nbviewer.jupyter.org/github/metamath1/ml-simple-works/blob/master/perceptron/perceptron.ipynb \uc54c\uace0\ub9ac\uc998 \uc911\uc2ec\uc758 \uba38\uc2e0\ub7ec\ub2dd \uac00\uc774\ub4dcMachine Learning: An Algorithmic Perspective, 2 nd ed., \uc2a4\ud2f0\ube10 \ub9c8\uc2ac\ub79c\ub4dc http://www.cs.columbia.edu/~mcollins/courses/6998-2012/notes/perc.converge.pdf","title":"\uc99d\uba85"},{"location":"write/math/","text":"LaTex \uc5d0 \uc775\uc219\ud558\uc2e0 \ubd84\uc774\ub77c\uba74 WICWIU \ub098 \uc218\uc2dd\uc774 \ub4e4\uc5b4\uac00\ub294 \ub0b4\uc6a9\ub4e4\uc744 \uc124\uba85\ud558\uae30 \uc704\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \uc218\uc2dd\uc744 \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc778\ub77c\uc778 \uc218\uc2dd \u00b6 \ubb38\uc7a5\uc5d0 \uc218\uc2dd\uc744 \ud3ec\ud568\uc2dc\ud0a4\ub824\uba74 $$ \uc548\uc5d0 \uc218\uc2dd\uc744 \uc4f0\uba74 \ub429\ub2c8\ub2e4. Example Result \uc9c1\uac01 \uc0bc\uac01\ud615\uc758 \ub450 \uc9c1\uac01\ubcc0 \\(a , b\\) \ub97c \uac01\uac01 \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615 \uba74\uc801\uc758 \ud569\uc740 \ube57\ubcc0 \\(c\\) \ub97c \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615\uc758 \uba74\uc801\uacfc \uac19\ub2e4. \uc774\ub97c \ud53c\ud0c0\uace0\ub77c\uc2a4 \uc815\ub9ac \\(a ^{2} + b ^{2} = c ^{2}\\) \ub77c\uace0 \ud55c\ub2e4. Example \uc9c1\uac01 \uc0bc\uac01\ud615\uc758 \ub450 \uc9c1\uac01\ubcc0 $a , b$ \ub97c \uac01\uac01 \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615 \uba74\uc801\uc758 \ud569\uc740 \ube57\ubcc0 $c$ \ub97c \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615\uc758 \uba74\uc801\uacfc \uac19\ub2e4. \uc774\ub97c \ud53c\ud0c0\uace0\ub77c\uc2a4 \uc815\ub9ac $a ^{2} + b ^{2} = c ^{2}$ \ub77c\uace0 \ud55c\ub2e4. \ub514\uc2a4\ud50c\ub808\uc774 \uc218\uc2dd \u00b6 \uc218\uc2dd\uc744 \uac15\uc870\ud558\uae30 \uc704\ud558\uc5ec \ub514\uc2a4\ud50c\ub808\uc774 \uc2a4\ud0c0\uc77c\ub85c \uc218\uc2dd\uc744 \uc4f0\ub824\uba74 $$ $$ \uc548\uc5d0 \uc4f0\uba74 \ub429\ub2c8\ub2e4. Example Result \\(m \\times n\\) \ud589\ub82c \\(\\mathbf{A}\\) , \\(n \\times p\\) \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \ud589\ub82c\uacf1\uc740 \\(m \\times p\\) \ud589\ub82c \\[ \\mathbf{AB} = \\begin{pmatrix} \\sum_{k=1}^{n}A _{1k}B _{k1}& \\sum_{k=1}^{n}A _{1k}B _{k2}& \\dots& \\sum_{k=1}^{n}A _{1k}B _{kp} \\\\ \\sum_{k=1}^{n}A _{2k}B _{k1}& \\sum_{k=1}^{n}A _{2k}B _{k2}& \\dots& \\sum_{k=1}^{n}A _{2k}B _{kp} \\\\ \\vdots& \\vdots& \\ddots& \\vdots \\\\ \\sum_{k=1}^{n}A _{mk}B _{k1}& \\sum_{k=1}^{n}A _{mk}B _{k2}& \\dots& \\sum_{k=1}^{n}A _{mk}B _{kp} \\\\ \\end{pmatrix} \\] \uc774\ub2e4. Example $m \\times n$ \ud589\ub82c $\\mathbf{A}$, $n \\times p$ \ud589\ub82c $\\mathbf{B}$ \uc5d0 \ub300\ud55c \ud589\ub82c\uacf1\uc740 $m \\times p$ \ud589\ub82c $$ \\mathbf{AB} = \\begin{pmatrix} \\sum_{k=1}^{n}A {1k}B _{k1}& \\sum ^{n}A {1k}B _{k2}& \\dots& \\sum ^{n}A {1k}B _{kp} \\ \\sum ^{n}A {2k}B _{k1}& \\sum ^{n}A {2k}B _{k2}& \\dots& \\sum ^{n}A {2k}B _{kp} \\ \\vdots& \\vdots& \\ddots& \\vdots \\ \\sum ^{n}A {mk}B _{k1}& \\sum ^{n}A {mk}B _{k2}& \\dots& \\sum ^{n}A _{mk}B _{kp} \\ \\end{pmatrix} $$ \uc774\ub2e4. Info \uc544\ub798\uc758 \ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac\uc640 \uc99d\uba85\uacfc\uc815\uc744 Source \uc5d0\uc11c\uc640 \uac19\uc774 Markdown \uacfc LaTex \ub85c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\uc2dc 1: \ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac \u00b6 \ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac(perceptron convergence theorem) : \ud37c\uc149\ud2b8\ub860\uc774 \uc120\ud615 \ubd84\ub9ac \uac00\ub2a5 \ubb38\uc81c\ub4e4, \uc989 \uc9c1\uc120\uc73c\ub85c \ubd84\ub958\uac00 \uac00\ub2a5\ud55c \ub370\uc774\ud130\ub97c \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc798 \ubd84\ub958\ud558\ub294 \uac00\uc911\uce58\ub97c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4 \ub294 \uc815\ub9ac\uc774\ub2e4. \uc544\ub798\uc758 \ub0b4\uc6a9\uc740 metamath1/ml-simple-works/perceptron/perceptron.ipynb \uc758 \ub0b4\uc6a9\uc744 \ub2e4\uc2dc \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4. \uc5c4\ubc00\ud55c \uc815\ub9ac \u00b6 \" \\(\\|\\mathbf{w} ^{*}\\|=1\\) \uc778 \uacc4\uc218\ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \uc640 \\(\\forall k \\in \\{1, \\dots, n\\}\\) \uc5d0 \ub300\ud55c \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \\(k\\) \ubc88\uc9f8 \ucd9c\ub825\uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ubc88\uc9f8 \uc2a4\uce7c\ub77c \\(y_k \\in \\{-1,1\\}\\) \uc5d0 \ub300\ud558\uc5ec \\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\uace0, \\(\\|\\mathbf{x}_{k}\\| \\leq R\\) \uc778 \\(R \\in \\mathbb{R}\\) \uc774 \uc874\uc7ac\ud558\uba74, \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc758 \uc5d0\ub7ec \\(y_k \\neq \\hat{y}_{k} = \\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}\\) \uc5d0 \ub300\ud55c \uc5d0\ub7ec \ubc1c\uc0dd\ud69f\uc218 \\(\\epsilon\\) \uc740 \\(\\epsilon \\leq \\dfrac{R ^{2}}{\\gamma ^{2}}\\) \uc774\ub2e4.\" \uc815\ub9ac\uc758 \uc774\ud574 \u00b6 \uba3c\uc800 \uc5ec\uae30\uc5d0\uc11c\ub294 \ud65c\uc131\ud654\ud568\uc218\ub85c \uc591\uadf9\uc131 \uacc4\ub2e8\ud568\uc218 \\(\\displaystyle y = h(x) = \\begin{cases} 1 &x > 0\\\\ -1 &x \\leq 0\\\\ \\end{cases}\\) \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac\ub97c \ud55c\uc904\uc529 \ud480\uc5b4\uc11c \uc774\ud574\ud574\ubcf4\uc790. \uc704 \uadf8\ub9bc\uc5d0\uc11c \\(\\mathbf{w} ^{*}\\) \uc5d0 \uc758\ud574 \uacb0\uc815\ub418\ub294 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc740 \ubd89\uc740\uc120\uc774\ub2e4. \uc774 \ubd89\uc740\uc120\uc774 \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c \uc62c\ubc14\ub974\uac8c \uc120\ud615 \ubd84\ub9ac\ud558\ub294 \uc120\uc774\ub77c\uace0 \ud558\uc790. \uadf8 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc744 \ud3b8\ud5a5\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud55c \\(w_0 = b, x_0 = 1\\) \uc640 \uc790\uc720\ubcc0\uc218 \\(x_1, x_2\\) \uc5d0 \ub300\ud55c \\(\\mathbf{x} = \\big <1, x_1, x_2\\big >\\) \uc640 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}=\\big <b, w_1, w_2\\big >\\) \uc5d0 \ub300\ud558\uc5ec \\(x_1x_2\\) \ud3c9\uba74 \uc704\uc758 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \\[ \\mathbf{w} ^{*}\\cdot \\mathbf{x} = b + w_1x_1 + w_2x_2 = 0 \\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uc774\uc640\uac19\uc740 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\uc558\ub2e4\uba74 \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uc5ec \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} > 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc704\ucabd, \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} < 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud55c\ub2e4\uace0 \ud310\ubcc4\ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud558\uc5ec \\(y_k(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}) = y_k \\hat{y_k} \\geq \\gamma > 0\\) \uc778 \\(\\gamma\\) \uac00 \uc788\ub2e4\ub294 \uac83\uc740 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \\(2\\) \uac1c\uc758 \ud074\ub798\uc2a4\ub85c \uc798 \uc120\ud615\ubd84\ub9ac \ud558\uace0 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \uc65c\ub0d0\ud558\uba74 \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc704\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k > 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc704\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k > 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uace0, \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k < 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc544\ub798\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k < 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\uace0 \uc788\ub2e4\uba74 \ud56d\uc0c1 \\(y_k \\hat{y_k} > 0\\) \uac00 \ub420 \uac83\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub54c \uacb0\uacfc\uac12, \uc989 \\(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}\\) \uc774 \\(0\\) \uc5d0 \uac00\uae4c\uc6b8\uc218\ub85d \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uac00 \uac00\uae4c\uc6cc\uc9c4\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(\\gamma\\) \ub294 \uc544\ubb34\ub9ac \ucee4\ubd24\uc790 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc \uac70\ub9ac\uac00 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uc774\ub2e4. \ub610\ud55c \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc758 \ud06c\uae30, \uc989 \\(\\|\\mathbf{x}_{k}\\|\\) \uc640 \uac19\uac70\ub098 \ud070 \\(R \\in \\mathbb{R}\\) \uc744 \uc815\ud560 \uc218 \uc788\ub2e4. \uc774 \uc870\uac74\uc774 \ucda9\uc871\ub418\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\ub9cc\uc5d0 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\ub294 \uacc4\uc218 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub97c \ucc3e\uc744 \uc218 \uc788\ub2e4. \uc99d\uba85 \u00b6 \\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\ubbc0\ub85c \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\uc2dc\ud0ac \uc218 \uc788\ub294 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uac00\uc911\uce58 \ud559\uc2b5\uc744 \ubc18\ubcf5\ud558\uba74\uc11c \\(\\mathbf{w} ^{*}\\) \uc744 \ucc3e\uc73c\ub824\ud560\ud150\ub370 \uc774\ub54c \\(t\\) \ubc88\uc9f8 \ud559\uc2b5\uc5d0\uc11c\uc758 \uac00\uc911\uce58 \\(\\mathbf{w} ^{(t)}\\) \uac00 \\(\\mathbf{w}^{*}\\) \uc640 \ud3c9\ud589\ud558\ub2e4\uba74 \ub450 \ubca1\ud130\uc758 \uc0ac\uc774\uac01\uc774 \\(0\\) \uac00 \ub418\uc5b4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w} ^{(t)}\\) \uac12\uc774 \ucd5c\ub300\uac00 \ub41c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w} ^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud568\uc744 \ubcf4\uc774\uba74 \uac00\uc911\uce58\uac00 \uc218\ub834\ud558\uace0 \uc788\uc74c\uc744 \ubcf4\uc778\ub290 \uac83\uc774 \ub41c\ub2e4. \uc774\ub54c \ub450 \ubca1\ud130\uc758 \uac01\ub3c4\uac00 \uc904\uc5b4\ub4e6\uc73c\ub85c\uc368 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \\(\\mathbf{w} ^{(t)}\\) \uc758 \uac12 \uc790\uccb4\uac00 \ucee4\uc838\uc11c \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud560 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w} ^{(t)}\\) \uc758 \ud06c\uae30 \uc0c1\ud55c\uac12\ub3c4 \ud568\uaed8 \ubcf4\uc5ec\uc57c \uac00\uc911\uce58\uac00 \uc218\ub834\ud55c\ub2e4\uace0 \ub9d0\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \\(t\\) \ubc88\uc9f8 \ubc18\ubcf5\uc5d0\uc11c \\(k\\) \ubc88\uc9f8 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uadf8\uac83\uc758 \ud074\ub798\uc2a4 \ub808\uc774\ube14 \\(y _{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(y _{k}(\\mathbf{w} ^{(t-1)} \\cdot \\mathbf{x}_{k}) < 0\\) \uc774 \ub418\uc5c8\ub2e4\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c \uac83\uc774\ubbc0\ub85c \uac00\uc911\uce58\ub97c \uc870\uc815\ud574\uc57c \ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w} ^{(t)} := \\mathbf{w}^{(t-1)} + \\eta (y _{k} - \\hat{y} _{k})\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc84c\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc790. \uc774\ub54c \\(\\eta = 1\\) \ub85c \ub450\uace0 \ud37c\uc149\ud2b8\ub860\uc758 \uc608\uce21\uac12 \\(\\hat{y}_{k}\\) \ub294 \ud3b8\uc758\ub97c \uc704\ud558\uc5ec \uc81c\uac70\ud558\uc790. \uadf8\ub807\uac8c \ud574\ub3c4 \uc591\uc774 \uc5b4\ub290\uc815\ub3c4 \ubc14\ub014 \ubfd0 \ubd80\ud638\ub294 \ubc14\ub00c\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uac00\uc911\uce58 \uc870\uc815\uc774 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7ec\uba74 \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w}^{(t)} := \\mathbf{w}^{(t-1)} + y _{k}\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \uadf8\ub7ec\uba74 \uc774\ub54c \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w}^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc744 \uacc4\uc0b0\ud574\ubcf4\uba74 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} = \\mathbf{w}^{*}\\cdot (\\mathbf{w}^{(t-1)}+y _{k} \\mathbf{x}_{k}) \\] \\[ = \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}+y _{k} \\mathbf{w}^{*}\\cdot \\mathbf{x}_{k} \\] \\[ \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} + \\gamma \\ \\ (\\because y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma ) \\] \uc774\ub2e4. \uc989, \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}- \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} \\geq \\gamma > 0\\) \uc774\ubbc0\ub85c \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc774 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}\\) \ubcf4\ub2e4 \\(\\gamma\\) \uc774\uc0c1 \ud06c\ub2e4\ub294 \uac83\uc774\ub2e4. \uc774\ub85c\uc368 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uac00 \uc99d\uac00\ud55c\ub2e4\ub294 \uac83\uc774, \uc989 \uac00\uc911\uce58 \ubca1\ud130\uac00 \uc218\ub834\ub418\uace0 \uc788\ub2e4\ub294 \uac83\uc774 \uc99d\uba85\ub418\uc5c8\ub2e4. \u25b2 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub0b4\uc801 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc758 \uac12\uc774 \ucd5c\uc18c \\(\\gamma\\) \uc774\uc0c1 \uc99d\uac00\ud558\uae30 \ub54c\ubb38\uc5d0 \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\|\\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88 \ud559\uc2b5 \ud6c4 \ub0b4\uc801\uac12\uc774 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma \\] \uc774\ub77c\ub294 \uac83 \uc989, \ucd5c\uc18c \\(t \\gamma\\) \uc774\uc0c1\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uadf8\ub7f0\ub370 \ucf54\uc2dc-\uc288\ubc14\ub974\uce20 \ubd80\ub4f1\uc2dd\uc5d0 \uc758\ud574 \\[ \\|\\mathbf{w}^{*}\\|\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\] \uc778\ub370 \\(\\|\\mathbf{w}^{*}\\| = 1\\) \uc774\ubbc0\ub85c \\(\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma\\) \uc5d0\uc11c \\[\\|\\mathbf{w}^{(t)}\\| \\geq t \\gamma\\] \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(t \\gamma\\) \uac00 \\(\\|\\mathbf{w}^{(t)}\\|\\) \uc758 \ucd5c\ub300\ud558\uacc4, \uc989 \ud558\ud55c \\[ \\therefore \\inf \\| \\mathbf{w}^{(t)}\\| = t \\gamma \\] \uc774 \ub41c\ub2e4. \u25b2 \\(t\\) \ubc88\uc9f8 \ud559\uc2b5 \uc774\ud6c4 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{(t)}\\) \uc758 \uae38\uc774\uc758 \uc81c\uacf1\uc740 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} = \\|\\mathbf{w}^{(t-1)} + y _{k} \\mathbf{x} _{k}\\|^{2} \\] \\[ = \\|\\mathbf{w}^{(t-1)}\\| ^{2} + y _{k} ^{2} \\|\\mathbf{x} _{k}\\| ^{2} + 2y _{k} \\mathbf{w}^{(t-1)}\\cdot \\mathbf{x} _{k} \\] \uc778\ub370 \\(y _{k} \\in \\{-1,1\\}\\) \uc774\ubbc0\ub85c \\(y _{k}^{2} = 1\\) \uc774\uace0 \\(\\|x _{k}\\| \\leq R \\implies \\|x _{k}\\|^{2}\\leq R ^{2}\\) \uc774\uace0 \uc608\uce21\uac12\uc774 \ucd9c\ub825\uac12\uacfc \ud2c0\ub838\uc73c\ubbc0\ub85c \\(y _{k} \\mathbf{w}^{(t-1)} \\cdot \\mathbf{x} = y _{k}\\hat{y}_{k} < 0\\) \uc774\ub2e4. \ub530\ub77c\uc11c \\[ \\|\\mathbf{w}^{(t)}\\| ^{2} \\leq \\|\\mathbf{w}^{(t-1)}\\| ^{2} + R ^{2} \\] \uc774\ub2e4. \uc989, \\(\\|\\mathbf{w}^{(t)}\\| ^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2}\\) \uc774\ubbc0\ub85c \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\| \\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88\uc740 \ud559\uc2b5\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \\[ \\|\\mathbf{w}^{1}\\|^{2} - \\|\\mathbf{w}^{0}\\| ^{2} \\leq R ^{2} \\] \\[ \\|\\mathbf{w}^{2}\\|^{2} - \\|\\mathbf{w}^{1}\\| ^{2} \\leq R ^{2} \\] \\[ \\dots \\] \\[ \\|\\mathbf{w}^{(t)}\\|^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2} \\] \uc774\uac83\ub4e4\uc744 \ubaa8\ub450 \ub354\ud558\uba74 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc744 \uc5bb\ub294\ub2e4. \uc774\uac83\uc774 \\(\\|\\mathbf{w}\\|^{2}\\) \uc758 \ucd5c\uc18c\uc0c1\uacc4, \uc989 \uc0c1\ud55c \\[ \\sup \\|\\mathbf{w}^{(t)}\\| ^{2} = t R ^{2} \\] \uc774\ub2e4. \u25b2 \uc0c1\ud55c\uacfc \ud558\ud55c\uc744 \uac19\uc740 \ubd80\ub4f1\uc2dd\uc5d0 \uc4f0\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. \\[ (\\inf \\|\\mathbf{w}^{(t)}\\|) ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq \\sup \\|\\mathbf{w}^{(t)}\\|^{2} \\] \\[ \\iff t ^{2} \\gamma ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc5ec\uae30\uc5d0\uc11c \\[ \\iff t \\leq \\dfrac{R ^{2}}{\\gamma ^{2}} \\] \ub97c \uc5bb\ub294\ub2e4. \uc774\uac83\uc740 \uace7 \ud559\uc2b5 \ud69f\uc218 \\(t\\) \uac00 \uc0c1\uacc4\ub97c \uac16\ub294\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c \uacb0\uacfc\uc801\uc73c\ub85c \uc120\ud615\ubd84\ub9ac \uac00\ub2a5 \ub370\uc774\ud130\uc5d0 \uc870\uac74 \\(\\eta =1, \\|\\mathbf{w}^{0}\\| = 0\\) \uc744 \uc801\uc6a9\ud558\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c, \uc989 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\uc758 \ud559\uc2b5\uc73c\ub85c(\uc5d0\ub7ec\ub85c) \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218 \\(\\mathbf{w}\\) \ub97c \ucd5c\uc801\uc758 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub85c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \u25a0 Note \uc774\ub294 \ubd84\ub958\ud574\uc57c \ud558\ub294 \ud074\ub798\uc2a4\uac04 \uac70\ub9ac\uac00 \uac00\uae4c\uc6b8\uc218\ub85d \uc54c\uace0\ub9ac\uc998 \ubc18\ubcf5 \ud69f\uc218(\ud559\uc2b5\ud69f\uc218, \uc5d0\ub7ec\ud69f\uc218)\ub294 \ub298\uc5b4\ub098\uc9c0\ub9cc \uc5b4\uca0c\ub4e0 \uc218\ub834\uc740 \ud55c\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4. \\(\\gamma\\) \uac00 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \uc904\uc5b4\ub4e4\uace0, \\(R\\) \uc774 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \ub9ce\uc544\uc9c4\ub2e4. References : https://nbviewer.jupyter.org/github/metamath1/ml-simple-works/blob/master/perceptron/perceptron.ipynb \uc54c\uace0\ub9ac\uc998 \uc911\uc2ec\uc758 \uba38\uc2e0\ub7ec\ub2dd \uac00\uc774\ub4dcMachine Learning: An Algorithmic Perspective, 2 nd ed., \uc2a4\ud2f0\ube10 \ub9c8\uc2ac\ub79c\ub4dc http://www.cs.columbia.edu/~mcollins/courses/6998-2012/notes/perc.converge.pdf Info \uc544\ub798\uc758 Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84 \uc815\ub9ac\uc640 \uc99d\uba85\uacfc\uc815\uc744 Source \uc5d0\uc11c\uc640 \uac19\uc774 Markdown \uacfc LaTex \ub85c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\uc2dc 2: Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84 \u00b6 Affine \ubcc0\ud658\uc758 \uc5ed\uc804\ud30c : \uc785\ub825 \ud589\ub82c \\(\\mathbf{X,W}\\) \uacfc \ucd9c\ub825\ud589\ub82c \\(\\mathbf{Y} = \\mathbf{XW}\\) \ub97c \uac16\ub294 Affine \ub808\uc774\uc5b4\uc758 \uc5ed\uc804\ud30c\ub294 \uc190\uc2e4\uac12 \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84 \\(\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\cdot \\mathbf{W} ^{\\intercal }, \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc774\ub2e4. Affine Layer \ub294 \ubcf4\ud1b5 \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\uc131\ub41c\ub2e4. Affine Layer \ucf54\ub4dc \uad6c\ud604 \u00b6 \ud589\ub82c\uacf1 \uc5f0\uc0b0\uacfc \ud589\ub82c\ub367\uc148 \uc5f0\uc0b0\uc744 \ud558\ub294 Affine \ub808\uc774\uc5b4\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc\ub85c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . dW = None self . db = None def forward ( self , x ): self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) return dx \ub2e4\uc74c \ucf54\ub4dc\ub294 \uc785\ub825 \ub370\uc774\ud130\uac00 \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ud150\uc11c\uc778 \uacbd\uc6b0, \uc989 4\ucc28\uc6d0 \ub370\uc774\ud130\uc778 \uacbd\uc6b0\ub3c4 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\ud604\ud55c \uac83\uc774\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . original_x_shape = None self . dW = None self . db = None def forward ( self , x ): # \ud150\uc11c \ub300\uc751 self . original_x_shape = x . shape x = x . reshape ( x . shape [ 0 ], - 1 ) self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) dx = dx . reshape ( * self . original_x_shape ) # \uc785\ub825 \ub370\uc774\ud130 \ubaa8\uc591 \ubcc0\uacbd(\ud150\uc11c \ub300\uc751) return dx \ud589\ub82c\uacf1 \ubbf8\ubd84 \uc815\ub9ac \u00b6 \\(n \\times d\\) \uc785\ub825 \ud589\ub82c \\(\\mathbf{X}\\) , \\(d \\times m\\) \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \ud589\ub82c \\(\\mathbf{Y=XW}\\) \uacfc \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\mathbf{W}^{\\intercal } \\] \uc774\uace0, \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\] \uc774\ub2e4. (1) \uc99d\uba85 \\(n \\times d\\) \uc785\ub825 \ud589\ub82c \\(\\mathbf{X}\\) , \\(d \\times m\\) \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}\\) \uc5d0 \ub300\ud55c \ud589\ub82c\uacf1 \\(\\mathbf{Y}\\) \ub294 \\(n \\times m\\) \ud589\ub82c \\[ \\mathbf{Y} = \\mathbf{XW} = \\begin{pmatrix} x _{11}&x _{12}&\\dots&x _{1d}\\\\ x _{21}&x _{22}&\\dots&x _{2d}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x _{n1}&x _{n2}&\\dots&x _{nd}\\\\ \\end{pmatrix} \\begin{pmatrix} w _{11} & w _{12} &\\dots & w _{1m} \\\\ w _{21} & w _{22} &\\dots & w _{2m} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ w _{d1} & w _{d2} &\\dots & w _{dm} \\\\ \\end{pmatrix} \\] \\[ = \\begin{pmatrix} \\displaystyle \\sum_{k=1}^{d}x _{1k} w _{k1} & \\displaystyle \\sum_{k=1}^{d}x _{1k} w _{k2} & \\dots & \\displaystyle \\sum_{k=1}^{d}x _{1k} w _{km} \\\\ \\displaystyle \\sum_{k=1}^{d}x _{2k} w _{k1} & \\displaystyle \\sum_{k=1}^{d}x _{2k} w _{k2} & \\dots & \\displaystyle \\sum_{k=1}^{d}x _{2k} w _{km} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle \\sum_{k=1}^{d}x _{nk} w _{k1} & \\displaystyle \\sum_{k=1}^{d}x _{nk} w _{k2} & \\dots & \\displaystyle \\sum_{k=1}^{d}x _{nk} w _{km} \\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774 \uc21c\uc804\ud30c \ucd9c\ub825 \\(\\mathbf{Y}\\) \uc774 \uc190\uc2e4\ud568\uc218 \\(l\\) \ub85c \uc804\ub2ec\ub418\uc5b4 \ucd5c\uc885\uc801\uc73c\ub85c \uc2a4\uce7c\ub77c \\(L\\) \uc774 \ub418\uc5c8\ub2e4\uace0 \ud558\uba74 \\[ L = l(\\mathbf{Y}) = l(\\mathbf{XW}) \\] \uc774\ub2e4. \\(L\\) \uc774 \uc2a4\uce7c\ub77c\uace0 \\(\\mathbf{Y}\\) \ub294 \\(n \\times m\\) \ud589\ub82c\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times m\\) \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \\(\\mathbf{Y}\\) \ub294 \\(\\mathbf{X, W}\\) \uc5d0 \ub300\ud55c \ud568\uc218\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X, W}\\) \uc758 \ubbf8\ubd84\uc740 \uc774\ub3c5\ub9bd\ubcc0\uc218\uc640 \uc77c\ub9e4\uac1c\ubcc0\uc218\uc758 \ud569\uc131\ud568\uc218\uc758 \ubbf8\ubd84 \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{X}}, \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{W}} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 \ud589\ub82c \ubbf8\ubd84\uc758 \uc815\uc758\uc5d0 \uc758\ud558\uc5ec \uc57c\ucf54\ube44 \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial x _{11}}& \\dfrac{\\partial L}{\\partial x _{12}}& \\dots& \\dfrac{\\partial L}{\\partial x _{1d}}\\\\ \\dfrac{\\partial L}{\\partial x _{21}}& \\dfrac{\\partial L}{\\partial x _{22}}& \\dots& \\dfrac{\\partial L}{\\partial x _{2d}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial x _{n1}}& \\dfrac{\\partial L}{\\partial x _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial x _{nd}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X}\\) \uc758 \\((1,1)\\) \uc6d0\uc18c \\(x_{11}\\) \uc758 \ubbf8\ubd84\uc740 \\(\\mathbf{Y}\\) \ub97c \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ub9e4\uac1c\ubcc0\uc218\uc758 \ub098\uc5f4\ub85c \ubcf8\ub2e4\uba74, \\(\\dfrac{\\partial L}{\\partial x _{11}}\\) \uc5d0 \ub300\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud569\uc131\ud568\uc218\uc758 \ud3b8\ubbf8\ubd84\uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc73c\ubbc0\ub85c \uc2a4\uce7c\ub77c \\[ \\dfrac{\\partial L}{\\partial x _{11}} = \\sum_{i=1}^{n}\\sum_{j=1}^{m}\\dfrac{\\partial L}{\\partial y _{ij}}\\dfrac{\\partial y _{ij}}{\\partial x _{11}} \\] \uc774\ub2e4. \uadf8\ub7f0\ub370 \uadc0\ucc2e\uc740 \ub367\uc148 \uc5f0\uc0b0\uc744 \ud53c\ud558\uae30 \uc704\ud558\uc5ec \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial L}{\\partial y _{ij}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \ub85c \uc4f0\uace0, \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial y _{ij}}{\\partial x _{11}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}}\\) \ub85c \uc4f0\uba74 \uc774\uac83\uc744 Frobenius \ub0b4\uc801 \\[ = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}} \\bigg > _{\\mathbf{F}}\\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \uc774\ub54c \\[ \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}} = \\begin{pmatrix} w _{11}& w _{12}& \\dots& w _{1m} \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\] \uc774\ubbc0\ub85c \\[ \\bigg < \\dfrac{\\partial L}{\\partial Y} , \\dfrac{\\partial Y}{\\partial x _{11}} \\bigg > _{\\mathbf{F}} = \\Bigg < \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix}, \\begin{pmatrix} w _{11}& w _{12}& \\dots& w _{1m} \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\Bigg > _{\\mathbf{F}} \\] \\[ = \\dfrac{\\partial L}{\\partial y _{11}} w _{11} + \\dfrac{\\partial L}{\\partial y _{12}} w _{12} + \\dots+ \\dfrac{\\partial L}{\\partial y _{1m}} w _{1m} = \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{1k} \\] \uc774\ub2e4. \uc989, \\(\\displaystyle \\dfrac{\\partial L}{\\partial x _{11}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{11}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{1k}\\) \uc774\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[\\displaystyle \\dfrac{\\partial L}{\\partial x _{12}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{12}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{2k}\\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial x _{21}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{21}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{1k}\\] \\[ \\vdots \\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial x _{ij}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial x _{ij}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{ik}}w _{jk}\\] \uc774\ub2e4. \uadf8\ub807\ub2e4\uba74 \ucd5c\uc885\uc801\uc73c\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times d\\) \ud589\ub82c \\[ \\therefore \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\begin{pmatrix} \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{1k}& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{2k}& \\dots& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{1k}}w _{dk} \\\\ \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{1k}& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{2k}& \\dots& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{2k}}w _{dk} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{nk}}w _{1k}& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{nk}}w _{2k}& \\dots& \\displaystyle \\sum_{k=1}^{m}\\dfrac{\\partial L}{\\partial y _{nk}}w _{dk} \\\\ \\end{pmatrix}\\] \\[ = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix}\\begin{pmatrix} w_{11}& w_{21}& \\dots & w_{d1} \\\\ w_{12}& w_{22}& \\dots & w_{d2} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ w_{1m}& w_{2m}& \\dots & w_{dm} \\\\ \\end{pmatrix} \\] \\[ = \\boxed{\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\mathbf{W}^{\\intercal } } \\] \uc774\ub2e4. \u25a0 (2) \uc99d\uba85 \ub9c8\ucc2c\uac00\uc9c0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 \ud589\ub82c \ubbf8\ubd84\uc758 \uc815\uc758\uc5d0 \uc758\ud558\uc5ec \uc57c\ucf54\ube44 \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial w_{11}}& \\dfrac{\\partial L}{\\partial w_{12}}& \\dots& \\dfrac{\\partial L}{\\partial w_{1m}}\\\\ \\dfrac{\\partial L}{\\partial w_{21}}& \\dfrac{\\partial L}{\\partial w_{22}}& \\dots& \\dfrac{\\partial L}{\\partial w_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial w_{d1}}& \\dfrac{\\partial L}{\\partial w_{d2}}& \\dots& \\dfrac{\\partial L}{\\partial w_{dm}}\\\\ \\end{pmatrix} \\] \uc778\ub370 \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{W}\\) \uc758 \\((1,1)\\) \uc6d0\uc18c \\(w _{11}\\) \uc758 \ubbf8\ubd84\uc740 \\(\\mathbf{Y}\\) \ub97c \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ub9e4\uac1c\ubcc0\uc218\uc758 \ub098\uc5f4\ub85c \ubcf8\ub2e4\uba74, \\(\\dfrac{\\partial L}{\\partial w _{11}}\\) \uc5d0 \ub300\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud569\uc131\ud568\uc218\uc758 \ud3b8\ubbf8\ubd84\uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc73c\ubbc0\ub85c \uc2a4\uce7c\ub77c \\[ \\dfrac{\\partial L}{\\partial w_{11}} = \\sum_{i=1}^{n}\\sum_{j=1}^{m}\\dfrac{\\partial L}{\\partial y _{ij}}\\dfrac{\\partial y _{ij}}{\\partial w_{11}} \\] \uc774\ub2e4. \uc774\uac83\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c Frobenius \ub0b4\uc801 \\[ = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} \\bigg > _{\\mathbf{F}}\\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \uadf8\ub7ec\uba74 \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[ \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} = \\begin{pmatrix} x _{11}& 0& \\dots& 0 \\\\ x _{21}& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x _{n1}& 0& \\dots& 0\\\\ \\end{pmatrix} \\] \uc774\ubbc0\ub85c \\[ \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} \\bigg > _{\\mathbf{F}} = \\Bigg < \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix}, \\begin{pmatrix} x _{11}& 0& \\dots& 0 \\\\ x _{21}& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x _{n1}& 0& \\dots& 0\\\\ \\end{pmatrix} \\Bigg > _{\\mathbf{F}} \\] \\[ = \\dfrac{\\partial L}{\\partial y _{11}}x _{11} + \\dfrac{\\partial L}{\\partial y _{21}}x _{21} + \\dots+ \\dfrac{\\partial L}{\\partial y _{n1}}x _{n1} = \\sum_{k=1}^{n} \\dfrac{\\partial L}{\\partial y _{k1}}x _{k1} \\] \uc774\ub2e4. \uc989, \\(\\displaystyle \\dfrac{\\partial L}{\\partial w _{11}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{11}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{k1}}x _{k1}\\) \uc774\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[\\displaystyle \\dfrac{\\partial L}{\\partial w _{12}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{12}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{k2}}x_{k1}\\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial w _{21}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{21}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{k1}}x_{k2}\\] \\[ \\vdots \\] \\[\\displaystyle \\dfrac{\\partial L}{\\partial w _{ij}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Y}} , \\dfrac{\\partial \\mathbf{Y}}{\\partial w _{ij}} \\bigg > _{\\mathbf{F}}= \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y _{kj}}x_{ki}\\] \uc774\ub2e4. \uadf8\ub807\ub2e4\uba74 \ucd5c\uc885\uc801\uc73c\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 \\(d \\times m\\) \ud589\ub82c \\[ \\therefore \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\begin{pmatrix} \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k1}}x_{k1}& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k2}}x_{k1}& \\dots& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{km}}x_{k1} \\\\ \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k1}}x_{k2}& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k2}}x_{k2}& \\dots& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{km}}x_{k2} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k1}}x_{kd}& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{k2}}x_{kd}& \\dots& \\displaystyle \\sum_{k=1}^{n}\\dfrac{\\partial L}{\\partial y_{km}}x_{kd} \\\\ \\end{pmatrix}\\] \\[ = \\begin{pmatrix} x_{11}& x_{21}& \\dots & x_{n1} \\\\ x_{12}& x_{22}& \\dots & x_{n2} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ x_{1d}& x_{2d}& \\dots & x_{nd} \\\\ \\end{pmatrix}\\begin{pmatrix} \\dfrac{\\partial L}{\\partial y _{11}}& \\dfrac{\\partial L}{\\partial y _{12}}& \\dots& \\dfrac{\\partial L}{\\partial y _{1m}}\\\\ \\dfrac{\\partial L}{\\partial y _{21}}& \\dfrac{\\partial L}{\\partial y _{22}}& \\dots& \\dfrac{\\partial L}{\\partial y _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y _{n1}}& \\dfrac{\\partial L}{\\partial y _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y _{nm}}\\\\ \\end{pmatrix} \\] \\[ = \\boxed{\\mathbf{X}^{\\intercal }\\dfrac{\\partial L}{\\partial \\mathbf{Y}}} \\] \uc774\ub2e4. \u25a0 \ud589\ub82c\ub367\uc148 \ubbf8\ubd84 \uc815\ub9ac \u00b6 \\(n \\times m\\) \ucd9c\ub825 \ud589\ub82c \\(\\mathbf{Y}\\) , \\(n \\times m\\) \ud3b8\ud5a5 \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \uc21c\uc785\ub825 \ud589\ub82c \\(\\mathbf{Z=Y + B}\\) \uc640 \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\uace0, \\(\\mathbf{B}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{B}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\ub2e4. (1) \uc99d\uba85 \\(n \\times m\\) \ucd9c\ub825 \ud589\ub82c \\(\\mathbf{Y}\\) , \\(n \\times m\\) \ud3b8\ud5a5 \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \ud589\ub82c \\(\\mathbf{Z = Y + B}\\) \ub294 \\(n \\times m\\) \ud589\ub82c \\[ \\mathbf{Z} = \\mathbf{Y + B} = \\begin{pmatrix} y_{11}&y_{12}&\\dots&y_{1m}\\\\ y_{21}&y_{22}&\\dots&y_{2m}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ y_{n1}&y_{n2}&\\dots&y_{nm}\\\\ \\end{pmatrix} + \\begin{pmatrix} b_{11} & b_{12} &\\dots & b_{1m} \\\\ b_{21} & b_{22} &\\dots & b_{2m} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ b_{n1} & b_{n2} &\\dots & b_{nm} \\\\ \\end{pmatrix} \\] \\[ = \\begin{pmatrix} \\displaystyle y_{11}+b_{11} & \\displaystyle y_{12}+b_{12} & \\dots & \\displaystyle y_{1m}+b_{1m} \\\\ \\displaystyle y_{21}+b_{21} & \\displaystyle y_{22}+b_{22} & \\dots & \\displaystyle y_{2m}+b_{2m} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\displaystyle y_{n1}+b_{n1} & \\displaystyle y_{n2}+b_{n2} & \\dots & \\displaystyle y_{nm}+b_{nm} \\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774 \\(\\mathbf{Z}\\) \uc774 \uc190\uc2e4\ud568\uc218 \\(l\\) \ub85c \uc804\ub2ec\ub418\uc5b4 \ucd5c\uc885\uc801\uc73c\ub85c \uc2a4\uce7c\ub77c \\(L\\) \uc774 \ub418\uc5c8\ub2e4\uace0 \ud558\uba74 \\[ L = l(\\mathbf{Z}) = l(\\mathbf{Y + B}) \\] \uc774\ub2e4. \\(L\\) \uc774 \uc2a4\uce7c\ub77c\uace0 \\(\\mathbf{Z}\\) \ub294 \\(n \\times m\\) \ud589\ub82c\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Z}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times m\\) \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Z}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial z_{11}}& \\dfrac{\\partial L}{\\partial z_{12}}& \\dots& \\dfrac{\\partial L}{\\partial z_{1m}}\\\\ \\dfrac{\\partial L}{\\partial z_{21}}& \\dfrac{\\partial L}{\\partial z_{22}}& \\dots& \\dfrac{\\partial L}{\\partial z_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial z_{n1}}& \\dfrac{\\partial L}{\\partial z_{n2}}& \\dots& \\dfrac{\\partial L}{\\partial z_{nm}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \\(\\mathbf{Z}\\) \ub294 \\(\\mathbf{Y, B}\\) \uc5d0 \ub300\ud55c \ud568\uc218\uc774\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y, B}\\) \uc758 \ubbf8\ubd84\uc740 \uc774\ub3c5\ub9bd\ubcc0\uc218\uc640 \uc77c\ub9e4\uac1c\ubcc0\uc218\uc758 \ud569\uc131\ud568\uc218\uc758 \ubbf8\ubd84 \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}}\\dfrac{\\partial \\mathbf{Z}}{\\partial \\mathbf{Y}}, \\dfrac{\\partial L}{\\partial \\mathbf{B}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}}\\dfrac{\\partial \\mathbf{Z}}{\\partial \\mathbf{B}} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 \ud589\ub82c \ubbf8\ubd84\uc758 \uc815\uc758\uc5d0 \uc758\ud558\uc5ec \uc57c\ucf54\ube44 \ud589\ub82c \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial y_{11}}& \\dfrac{\\partial L}{\\partial y_{12}}& \\dots& \\dfrac{\\partial L}{\\partial y_{1m}}\\\\ \\dfrac{\\partial L}{\\partial y_{21}}& \\dfrac{\\partial L}{\\partial y_{22}}& \\dots& \\dfrac{\\partial L}{\\partial y_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial y_{n1}}& \\dfrac{\\partial L}{\\partial y_{n2}}& \\dots& \\dfrac{\\partial L}{\\partial y_{nm}}\\\\ \\end{pmatrix} \\] \uc774\ub2e4. \uc774\ub54c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \\((1,1)\\) \uc6d0\uc18c \\(y_{11}\\) \uc758 \ubbf8\ubd84\uc740 \\(\\mathbf{Z}\\) \ub97c \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ub9e4\uac1c\ubcc0\uc218\uc758 \ub098\uc5f4\ub85c \ubcf8\ub2e4\uba74, \\(\\dfrac{\\partial L}{\\partial y_{11}}\\) \uc5d0 \ub300\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud569\uc131\ud568\uc218\uc758 \ud3b8\ubbf8\ubd84\uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\uc73c\ubbc0\ub85c \uc2a4\uce7c\ub77c \\[ \\dfrac{\\partial L}{\\partial y_{11}} = \\sum_{i=1}^{n}\\sum_{j=1}^{m}\\dfrac{\\partial L}{\\partial z _{ij}}\\dfrac{\\partial z _{ij}}{\\partial y_{11}} \\] \uc774\ub2e4. \uadf8\ub7f0\ub370 \uadc0\ucc2e\uc740 \ub367\uc148 \uc5f0\uc0b0\uc744 \ud53c\ud558\uae30 \uc704\ud558\uc5ec \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial L}{\\partial z _{ij}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial L}{\\partial \\mathbf{Z}}\\) \ub85c \uc4f0\uace0, \ubaa8\ub4e0 \uc2a4\uce7c\ub77c \\(\\dfrac{\\partial z _{ij}}{\\partial y_{11}}\\) \ub4e4\uc744 \ud589\ub82c \\(\\dfrac{\\partial \\mathbf{Z}}{\\partial y_{11}}\\) \ub85c \uc4f0\uba74 \uc774\uac83\uc744 Frobenius \ub0b4\uc801 \\[ = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y_{11}} \\bigg > _{\\mathbf{F}}\\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \uc774\ub54c \\[ \\dfrac{\\partial \\mathbf{Z}}{\\partial y_{11}} = \\begin{pmatrix} 1 & 0& \\dots& 0 \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\] \uc774\ubbc0\ub85c \\[ \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y _{11}} \\bigg > _{\\mathbf{F}} = \\Bigg < \\begin{pmatrix} \\dfrac{\\partial L}{\\partial z_{11}}& \\dfrac{\\partial L}{\\partial z_{12}}& \\dots& \\dfrac{\\partial L}{\\partial z_{1m}}\\\\ \\dfrac{\\partial L}{\\partial z_{21}}& \\dfrac{\\partial L}{\\partial z_{22}}& \\dots& \\dfrac{\\partial L}{\\partial z_{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial z_{n1}}& \\dfrac{\\partial L}{\\partial z_{n2}}& \\dots& \\dfrac{\\partial L}{\\partial z_{nm}}\\\\ \\end{pmatrix}, \\begin{pmatrix} 1& 0& \\dots& 0 \\\\ 0& 0& \\dots& 0\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0& 0& \\dots& 0\\\\ \\end{pmatrix} \\Bigg > _{\\mathbf{F}} \\] \\[ = \\dfrac{\\partial L}{\\partial z_{11}} \\] \uc774\ub2e4. \uc989, \\(\\displaystyle \\dfrac{\\partial L}{\\partial y _{11}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y _{11}} \\bigg > _{\\mathbf{F}}= \\dfrac{\\partial L}{\\partial z _{11}}\\) \uc774\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \\[\\displaystyle \\dfrac{\\partial L}{\\partial y _{ij}} = \\bigg < \\dfrac{\\partial L}{\\partial \\mathbf{Z}} , \\dfrac{\\partial \\mathbf{Z}}{\\partial y _{ij}} \\bigg > _{\\mathbf{F}}= \\dfrac{\\partial L}{\\partial z _{ij}}\\] \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 \\(n \\times m\\) \ud589\ub82c \\[ \\therefore \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\begin{pmatrix} \\dfrac{\\partial L}{\\partial z _{11}}& \\dfrac{\\partial L}{\\partial z _{12}}& \\dots& \\dfrac{\\partial L}{\\partial z _{1m}}\\\\ \\dfrac{\\partial L}{\\partial z _{21}}& \\dfrac{\\partial L}{\\partial z _{22}}& \\dots& \\dfrac{\\partial L}{\\partial z _{2m}}\\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\dfrac{\\partial L}{\\partial z _{n1}}& \\dfrac{\\partial L}{\\partial z _{n2}}& \\dots& \\dfrac{\\partial L}{\\partial z _{nm}}\\\\ \\end{pmatrix} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\ub2e4. \u25a0 References : http://cs231n.stanford.edu/handouts/derivatives.pdf http://cs231n.stanford.edu/handouts/linear-backprop.pdf","title":"Step 7. \uc218\uc2dd \ubcf4\uc5ec\uc8fc\uae30"},{"location":"write/math/#_1","text":"\ubb38\uc7a5\uc5d0 \uc218\uc2dd\uc744 \ud3ec\ud568\uc2dc\ud0a4\ub824\uba74 $$ \uc548\uc5d0 \uc218\uc2dd\uc744 \uc4f0\uba74 \ub429\ub2c8\ub2e4. Example Result \uc9c1\uac01 \uc0bc\uac01\ud615\uc758 \ub450 \uc9c1\uac01\ubcc0 \\(a , b\\) \ub97c \uac01\uac01 \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615 \uba74\uc801\uc758 \ud569\uc740 \ube57\ubcc0 \\(c\\) \ub97c \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615\uc758 \uba74\uc801\uacfc \uac19\ub2e4. \uc774\ub97c \ud53c\ud0c0\uace0\ub77c\uc2a4 \uc815\ub9ac \\(a ^{2} + b ^{2} = c ^{2}\\) \ub77c\uace0 \ud55c\ub2e4. Example \uc9c1\uac01 \uc0bc\uac01\ud615\uc758 \ub450 \uc9c1\uac01\ubcc0 $a , b$ \ub97c \uac01\uac01 \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615 \uba74\uc801\uc758 \ud569\uc740 \ube57\ubcc0 $c$ \ub97c \ud55c \ubcc0\uc73c\ub85c \ud558\ub294 \uc815\uc0ac\uac01\ud615\uc758 \uba74\uc801\uacfc \uac19\ub2e4. \uc774\ub97c \ud53c\ud0c0\uace0\ub77c\uc2a4 \uc815\ub9ac $a ^{2} + b ^{2} = c ^{2}$ \ub77c\uace0 \ud55c\ub2e4.","title":"\uc778\ub77c\uc778 \uc218\uc2dd"},{"location":"write/math/#_2","text":"\uc218\uc2dd\uc744 \uac15\uc870\ud558\uae30 \uc704\ud558\uc5ec \ub514\uc2a4\ud50c\ub808\uc774 \uc2a4\ud0c0\uc77c\ub85c \uc218\uc2dd\uc744 \uc4f0\ub824\uba74 $$ $$ \uc548\uc5d0 \uc4f0\uba74 \ub429\ub2c8\ub2e4. Example Result \\(m \\times n\\) \ud589\ub82c \\(\\mathbf{A}\\) , \\(n \\times p\\) \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \ud589\ub82c\uacf1\uc740 \\(m \\times p\\) \ud589\ub82c \\[ \\mathbf{AB} = \\begin{pmatrix} \\sum_{k=1}^{n}A _{1k}B _{k1}& \\sum_{k=1}^{n}A _{1k}B _{k2}& \\dots& \\sum_{k=1}^{n}A _{1k}B _{kp} \\\\ \\sum_{k=1}^{n}A _{2k}B _{k1}& \\sum_{k=1}^{n}A _{2k}B _{k2}& \\dots& \\sum_{k=1}^{n}A _{2k}B _{kp} \\\\ \\vdots& \\vdots& \\ddots& \\vdots \\\\ \\sum_{k=1}^{n}A _{mk}B _{k1}& \\sum_{k=1}^{n}A _{mk}B _{k2}& \\dots& \\sum_{k=1}^{n}A _{mk}B _{kp} \\\\ \\end{pmatrix} \\] \uc774\ub2e4. Example $m \\times n$ \ud589\ub82c $\\mathbf{A}$, $n \\times p$ \ud589\ub82c $\\mathbf{B}$ \uc5d0 \ub300\ud55c \ud589\ub82c\uacf1\uc740 $m \\times p$ \ud589\ub82c $$ \\mathbf{AB} = \\begin{pmatrix} \\sum_{k=1}^{n}A {1k}B _{k1}& \\sum ^{n}A {1k}B _{k2}& \\dots& \\sum ^{n}A {1k}B _{kp} \\ \\sum ^{n}A {2k}B _{k1}& \\sum ^{n}A {2k}B _{k2}& \\dots& \\sum ^{n}A {2k}B _{kp} \\ \\vdots& \\vdots& \\ddots& \\vdots \\ \\sum ^{n}A {mk}B _{k1}& \\sum ^{n}A {mk}B _{k2}& \\dots& \\sum ^{n}A _{mk}B _{kp} \\ \\end{pmatrix} $$ \uc774\ub2e4. Info \uc544\ub798\uc758 \ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac\uc640 \uc99d\uba85\uacfc\uc815\uc744 Source \uc5d0\uc11c\uc640 \uac19\uc774 Markdown \uacfc LaTex \ub85c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ub514\uc2a4\ud50c\ub808\uc774 \uc218\uc2dd"},{"location":"write/math/#1","text":"\ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac(perceptron convergence theorem) : \ud37c\uc149\ud2b8\ub860\uc774 \uc120\ud615 \ubd84\ub9ac \uac00\ub2a5 \ubb38\uc81c\ub4e4, \uc989 \uc9c1\uc120\uc73c\ub85c \ubd84\ub958\uac00 \uac00\ub2a5\ud55c \ub370\uc774\ud130\ub97c \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc798 \ubd84\ub958\ud558\ub294 \uac00\uc911\uce58\ub97c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4 \ub294 \uc815\ub9ac\uc774\ub2e4.","title":"\uc608\uc2dc 1: \ud37c\uc149\ud2b8\ub860 \uc218\ub834\uc815\ub9ac"},{"location":"write/math/#_3","text":"\" \\(\\|\\mathbf{w} ^{*}\\|=1\\) \uc778 \uacc4\uc218\ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \uc640 \\(\\forall k \\in \\{1, \\dots, n\\}\\) \uc5d0 \ub300\ud55c \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \\(k\\) \ubc88\uc9f8 \ucd9c\ub825\uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \ubc88\uc9f8 \uc2a4\uce7c\ub77c \\(y_k \\in \\{-1,1\\}\\) \uc5d0 \ub300\ud558\uc5ec \\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\uace0, \\(\\|\\mathbf{x}_{k}\\| \\leq R\\) \uc778 \\(R \\in \\mathbb{R}\\) \uc774 \uc874\uc7ac\ud558\uba74, \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc758 \uc5d0\ub7ec \\(y_k \\neq \\hat{y}_{k} = \\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}\\) \uc5d0 \ub300\ud55c \uc5d0\ub7ec \ubc1c\uc0dd\ud69f\uc218 \\(\\epsilon\\) \uc740 \\(\\epsilon \\leq \\dfrac{R ^{2}}{\\gamma ^{2}}\\) \uc774\ub2e4.\"","title":"\uc5c4\ubc00\ud55c \uc815\ub9ac"},{"location":"write/math/#_4","text":"\uba3c\uc800 \uc5ec\uae30\uc5d0\uc11c\ub294 \ud65c\uc131\ud654\ud568\uc218\ub85c \uc591\uadf9\uc131 \uacc4\ub2e8\ud568\uc218 \\(\\displaystyle y = h(x) = \\begin{cases} 1 &x > 0\\\\ -1 &x \\leq 0\\\\ \\end{cases}\\) \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc218\ub834 \uc815\ub9ac\ub97c \ud55c\uc904\uc529 \ud480\uc5b4\uc11c \uc774\ud574\ud574\ubcf4\uc790. \uc704 \uadf8\ub9bc\uc5d0\uc11c \\(\\mathbf{w} ^{*}\\) \uc5d0 \uc758\ud574 \uacb0\uc815\ub418\ub294 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc740 \ubd89\uc740\uc120\uc774\ub2e4. \uc774 \ubd89\uc740\uc120\uc774 \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c \uc62c\ubc14\ub974\uac8c \uc120\ud615 \ubd84\ub9ac\ud558\ub294 \uc120\uc774\ub77c\uace0 \ud558\uc790. \uadf8 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uc744 \ud3b8\ud5a5\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud55c \\(w_0 = b, x_0 = 1\\) \uc640 \uc790\uc720\ubcc0\uc218 \\(x_1, x_2\\) \uc5d0 \ub300\ud55c \\(\\mathbf{x} = \\big <1, x_1, x_2\\big >\\) \uc640 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}=\\big <b, w_1, w_2\\big >\\) \uc5d0 \ub300\ud558\uc5ec \\(x_1x_2\\) \ud3c9\uba74 \uc704\uc758 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \\[ \\mathbf{w} ^{*}\\cdot \\mathbf{x} = b + w_1x_1 + w_2x_2 = 0 \\] \uc73c\ub85c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uc774\uc640\uac19\uc740 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w} ^{*}\\) \ub97c \ucc3e\uc558\ub2e4\uba74 \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uc5ec \\(k\\) \ubc88\uc9f8 \uc785\ub825\ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} > 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc704\ucabd, \\(\\mathbf{w} ^{*}\\cdot \\mathbf{x} _{k} < 0\\) \uc774\uba74 \ube68\uac04 \uc9c1\uc120\uc758 \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud55c\ub2e4\uace0 \ud310\ubcc4\ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud558\uc5ec \\(y_k(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}) = y_k \\hat{y_k} \\geq \\gamma > 0\\) \uc778 \\(\\gamma\\) \uac00 \uc788\ub2e4\ub294 \uac83\uc740 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \\(2\\) \uac1c\uc758 \ud074\ub798\uc2a4\ub85c \uc798 \uc120\ud615\ubd84\ub9ac \ud558\uace0 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \uc65c\ub0d0\ud558\uba74 \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc704\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k > 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc704\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k > 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uace0, \\(y_k\\) \uac00 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd \uc544\ub798\ucabd\uc5d0 \uc704\uce58\ud588\ub2e4\uba74 \\(y_k < 0\\) \uc778\ub370 \uc608\uce21\uac12 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k\\) \ub3c4 \ub370\uc774\ud130\uac00 \uc544\ub798\ucabd\uc5d0 \uc788\ub2e4\uace0 \ud310\ubcc4\ud588\uc73c\uba74 \\(\\hat{y_k} = \\mathbf{w}^{*}\\cdot \\mathbf{x}_k < 0\\) \uc774 \ub418\uc5b4 \\(y_k \\hat{y_k} > 0\\) \uc774 \ub418\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w}^{*}\\) \uac00 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\uace0 \uc788\ub2e4\uba74 \ud56d\uc0c1 \\(y_k \\hat{y_k} > 0\\) \uac00 \ub420 \uac83\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub54c \uacb0\uacfc\uac12, \uc989 \\(\\mathbf{w}^{*}\\cdot \\mathbf{x}_{k}\\) \uc774 \\(0\\) \uc5d0 \uac00\uae4c\uc6b8\uc218\ub85d \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uac00 \uac00\uae4c\uc6cc\uc9c4\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(\\gamma\\) \ub294 \uc544\ubb34\ub9ac \ucee4\ubd24\uc790 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc \uac70\ub9ac\uac00 \uac00\uc7a5 \uac00\uae4c\uc6b4 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uc9c1\uc120\uc758 \ubc29\uc815\uc2dd\uacfc\uc758 \uac70\ub9ac\uc774\ub2e4. \ub610\ud55c \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc758 \ud06c\uae30, \uc989 \\(\\|\\mathbf{x}_{k}\\|\\) \uc640 \uac19\uac70\ub098 \ud070 \\(R \\in \\mathbb{R}\\) \uc744 \uc815\ud560 \uc218 \uc788\ub2e4. \uc774 \uc870\uac74\uc774 \ucda9\uc871\ub418\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\ub9cc\uc5d0 \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\ud558\ub294 \uacc4\uc218 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub97c \ucc3e\uc744 \uc218 \uc788\ub2e4.","title":"\uc815\ub9ac\uc758 \uc774\ud574"},{"location":"write/math/#_5","text":"\\(y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma > 0\\) \uc744 \ub9cc\uc871\ud558\ub294 \\(\\gamma \\in \\mathbb{R}\\) \uac00 \uc874\uc7ac\ud558\ubbc0\ub85c \ub370\uc774\ud130\ub97c \uc798 \uc120\ud615\ubd84\ub9ac\uc2dc\ud0ac \uc218 \uc788\ub294 \\(\\mathbf{w}^{*}\\) \uac00 \uc874\uc7ac\ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc740 \uac00\uc911\uce58 \ud559\uc2b5\uc744 \ubc18\ubcf5\ud558\uba74\uc11c \\(\\mathbf{w} ^{*}\\) \uc744 \ucc3e\uc73c\ub824\ud560\ud150\ub370 \uc774\ub54c \\(t\\) \ubc88\uc9f8 \ud559\uc2b5\uc5d0\uc11c\uc758 \uac00\uc911\uce58 \\(\\mathbf{w} ^{(t)}\\) \uac00 \\(\\mathbf{w}^{*}\\) \uc640 \ud3c9\ud589\ud558\ub2e4\uba74 \ub450 \ubca1\ud130\uc758 \uc0ac\uc774\uac01\uc774 \\(0\\) \uac00 \ub418\uc5b4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w} ^{(t)}\\) \uac12\uc774 \ucd5c\ub300\uac00 \ub41c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w} ^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud568\uc744 \ubcf4\uc774\uba74 \uac00\uc911\uce58\uac00 \uc218\ub834\ud558\uace0 \uc788\uc74c\uc744 \ubcf4\uc778\ub290 \uac83\uc774 \ub41c\ub2e4. \uc774\ub54c \ub450 \ubca1\ud130\uc758 \uac01\ub3c4\uac00 \uc904\uc5b4\ub4e6\uc73c\ub85c\uc368 \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \\(\\mathbf{w} ^{(t)}\\) \uc758 \uac12 \uc790\uccb4\uac00 \ucee4\uc838\uc11c \ub0b4\uc801\uac12\uc774 \uc99d\uac00\ud560 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc5d0 \\(\\mathbf{w} ^{(t)}\\) \uc758 \ud06c\uae30 \uc0c1\ud55c\uac12\ub3c4 \ud568\uaed8 \ubcf4\uc5ec\uc57c \uac00\uc911\uce58\uac00 \uc218\ub834\ud55c\ub2e4\uace0 \ub9d0\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \\(t\\) \ubc88\uc9f8 \ubc18\ubcf5\uc5d0\uc11c \\(k\\) \ubc88\uc9f8 \uc785\ub825 \ubca1\ud130 \\(\\mathbf{x}_{k}\\) \uc640 \uadf8\uac83\uc758 \ud074\ub798\uc2a4 \ub808\uc774\ube14 \\(y _{k}\\) \uc5d0 \ub300\ud558\uc5ec \\(y _{k}(\\mathbf{w} ^{(t-1)} \\cdot \\mathbf{x}_{k}) < 0\\) \uc774 \ub418\uc5c8\ub2e4\uba74 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c \uac83\uc774\ubbc0\ub85c \uac00\uc911\uce58\ub97c \uc870\uc815\ud574\uc57c \ud55c\ub2e4. \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w} ^{(t)} := \\mathbf{w}^{(t-1)} + \\eta (y _{k} - \\hat{y} _{k})\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc84c\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc790. \uc774\ub54c \\(\\eta = 1\\) \ub85c \ub450\uace0 \ud37c\uc149\ud2b8\ub860\uc758 \uc608\uce21\uac12 \\(\\hat{y}_{k}\\) \ub294 \ud3b8\uc758\ub97c \uc704\ud558\uc5ec \uc81c\uac70\ud558\uc790. \uadf8\ub807\uac8c \ud574\ub3c4 \uc591\uc774 \uc5b4\ub290\uc815\ub3c4 \ubc14\ub014 \ubfd0 \ubd80\ud638\ub294 \ubc14\ub00c\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uac00\uc911\uce58 \uc870\uc815\uc774 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7ec\uba74 \uac00\uc911\uce58 \uc870\uc815\uc740 \\[ \\mathbf{w}^{(t)} := \\mathbf{w}^{(t-1)} + y _{k}\\mathbf{x}_{k} \\] \uc640 \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \uadf8\ub7ec\uba74 \uc774\ub54c \ub450 \ubca1\ud130 \\(\\mathbf{w}^{*}, \\mathbf{w}^{(t)}\\) \uc758 \ub0b4\uc801\uac12\uc744 \uacc4\uc0b0\ud574\ubcf4\uba74 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} = \\mathbf{w}^{*}\\cdot (\\mathbf{w}^{(t-1)}+y _{k} \\mathbf{x}_{k}) \\] \\[ = \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}+y _{k} \\mathbf{w}^{*}\\cdot \\mathbf{x}_{k} \\] \\[ \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} + \\gamma \\ \\ (\\because y_k(\\mathbf{x}_{k}\\cdot \\mathbf{w}^{*}) \\geq \\gamma ) \\] \uc774\ub2e4. \uc989, \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}- \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)} \\geq \\gamma > 0\\) \uc774\ubbc0\ub85c \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc774 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t-1)}\\) \ubcf4\ub2e4 \\(\\gamma\\) \uc774\uc0c1 \ud06c\ub2e4\ub294 \uac83\uc774\ub2e4. \uc774\ub85c\uc368 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uac00 \uc99d\uac00\ud55c\ub2e4\ub294 \uac83\uc774, \uc989 \uac00\uc911\uce58 \ubca1\ud130\uac00 \uc218\ub834\ub418\uace0 \uc788\ub2e4\ub294 \uac83\uc774 \uc99d\uba85\ub418\uc5c8\ub2e4. \u25b2 \ub9e4 \ud559\uc2b5\ub9c8\ub2e4 \ub0b4\uc801 \\(\\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)}\\) \uc758 \uac12\uc774 \ucd5c\uc18c \\(\\gamma\\) \uc774\uc0c1 \uc99d\uac00\ud558\uae30 \ub54c\ubb38\uc5d0 \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\|\\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88 \ud559\uc2b5 \ud6c4 \ub0b4\uc801\uac12\uc774 \\[ \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma \\] \uc774\ub77c\ub294 \uac83 \uc989, \ucd5c\uc18c \\(t \\gamma\\) \uc774\uc0c1\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uadf8\ub7f0\ub370 \ucf54\uc2dc-\uc288\ubc14\ub974\uce20 \ubd80\ub4f1\uc2dd\uc5d0 \uc758\ud574 \\[ \\|\\mathbf{w}^{*}\\|\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\] \uc778\ub370 \\(\\|\\mathbf{w}^{*}\\| = 1\\) \uc774\ubbc0\ub85c \\(\\|\\mathbf{w}^{(t)}\\| \\geq \\mathbf{w}^{*}\\cdot \\mathbf{w}^{(t)} \\geq t \\gamma\\) \uc5d0\uc11c \\[\\|\\mathbf{w}^{(t)}\\| \\geq t \\gamma\\] \uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \\(t \\gamma\\) \uac00 \\(\\|\\mathbf{w}^{(t)}\\|\\) \uc758 \ucd5c\ub300\ud558\uacc4, \uc989 \ud558\ud55c \\[ \\therefore \\inf \\| \\mathbf{w}^{(t)}\\| = t \\gamma \\] \uc774 \ub41c\ub2e4. \u25b2 \\(t\\) \ubc88\uc9f8 \ud559\uc2b5 \uc774\ud6c4 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{(t)}\\) \uc758 \uae38\uc774\uc758 \uc81c\uacf1\uc740 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} = \\|\\mathbf{w}^{(t-1)} + y _{k} \\mathbf{x} _{k}\\|^{2} \\] \\[ = \\|\\mathbf{w}^{(t-1)}\\| ^{2} + y _{k} ^{2} \\|\\mathbf{x} _{k}\\| ^{2} + 2y _{k} \\mathbf{w}^{(t-1)}\\cdot \\mathbf{x} _{k} \\] \uc778\ub370 \\(y _{k} \\in \\{-1,1\\}\\) \uc774\ubbc0\ub85c \\(y _{k}^{2} = 1\\) \uc774\uace0 \\(\\|x _{k}\\| \\leq R \\implies \\|x _{k}\\|^{2}\\leq R ^{2}\\) \uc774\uace0 \uc608\uce21\uac12\uc774 \ucd9c\ub825\uac12\uacfc \ud2c0\ub838\uc73c\ubbc0\ub85c \\(y _{k} \\mathbf{w}^{(t-1)} \\cdot \\mathbf{x} = y _{k}\\hat{y}_{k} < 0\\) \uc774\ub2e4. \ub530\ub77c\uc11c \\[ \\|\\mathbf{w}^{(t)}\\| ^{2} \\leq \\|\\mathbf{w}^{(t-1)}\\| ^{2} + R ^{2} \\] \uc774\ub2e4. \uc989, \\(\\|\\mathbf{w}^{(t)}\\| ^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2}\\) \uc774\ubbc0\ub85c \ucd08\uae30 \uac00\uc911\uce58 \ubca1\ud130\ub97c \\(\\| \\mathbf{w}^{0}\\| = 0\\) \ub85c \ub450\uba74 \\(t\\) \ubc88\uc740 \ud559\uc2b5\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \\[ \\|\\mathbf{w}^{1}\\|^{2} - \\|\\mathbf{w}^{0}\\| ^{2} \\leq R ^{2} \\] \\[ \\|\\mathbf{w}^{2}\\|^{2} - \\|\\mathbf{w}^{1}\\| ^{2} \\leq R ^{2} \\] \\[ \\dots \\] \\[ \\|\\mathbf{w}^{(t)}\\|^{2} - \\|\\mathbf{w}^{(t-1)}\\| ^{2} \\leq R ^{2} \\] \uc774\uac83\ub4e4\uc744 \ubaa8\ub450 \ub354\ud558\uba74 \\[ \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc744 \uc5bb\ub294\ub2e4. \uc774\uac83\uc774 \\(\\|\\mathbf{w}\\|^{2}\\) \uc758 \ucd5c\uc18c\uc0c1\uacc4, \uc989 \uc0c1\ud55c \\[ \\sup \\|\\mathbf{w}^{(t)}\\| ^{2} = t R ^{2} \\] \uc774\ub2e4. \u25b2 \uc0c1\ud55c\uacfc \ud558\ud55c\uc744 \uac19\uc740 \ubd80\ub4f1\uc2dd\uc5d0 \uc4f0\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4. \\[ (\\inf \\|\\mathbf{w}^{(t)}\\|) ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq \\sup \\|\\mathbf{w}^{(t)}\\|^{2} \\] \\[ \\iff t ^{2} \\gamma ^{2} \\leq \\|\\mathbf{w}^{(t)}\\|^{2} \\leq t R ^{2} \\] \uc5ec\uae30\uc5d0\uc11c \\[ \\iff t \\leq \\dfrac{R ^{2}}{\\gamma ^{2}} \\] \ub97c \uc5bb\ub294\ub2e4. \uc774\uac83\uc740 \uace7 \ud559\uc2b5 \ud69f\uc218 \\(t\\) \uac00 \uc0c1\uacc4\ub97c \uac16\ub294\ub2e4\ub294 \uac83\uc774\ubbc0\ub85c \uacb0\uacfc\uc801\uc73c\ub85c \uc120\ud615\ubd84\ub9ac \uac00\ub2a5 \ub370\uc774\ud130\uc5d0 \uc870\uac74 \\(\\eta =1, \\|\\mathbf{w}^{0}\\| = 0\\) \uc744 \uc801\uc6a9\ud558\uba74 \ud37c\uc149\ud2b8\ub860 \uc54c\uace0\ub9ac\uc998\uc774 \uc720\ud55c\ubc88\uc758 \ud559\uc2b5\uc73c\ub85c, \uc989 \ucd5c\ub300 \\(\\dfrac{R ^{2}}{\\gamma ^{2}}\\) \ubc88\uc758 \ud559\uc2b5\uc73c\ub85c(\uc5d0\ub7ec\ub85c) \uac00\uc911\uce58 \ub9e4\uac1c\ubcc0\uc218 \\(\\mathbf{w}\\) \ub97c \ucd5c\uc801\uc758 \uac00\uc911\uce58 \ubca1\ud130 \\(\\mathbf{w}^{*}\\) \ub85c \uc218\ub834\uc2dc\ud0ac \uc218 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. \u25a0 Note \uc774\ub294 \ubd84\ub958\ud574\uc57c \ud558\ub294 \ud074\ub798\uc2a4\uac04 \uac70\ub9ac\uac00 \uac00\uae4c\uc6b8\uc218\ub85d \uc54c\uace0\ub9ac\uc998 \ubc18\ubcf5 \ud69f\uc218(\ud559\uc2b5\ud69f\uc218, \uc5d0\ub7ec\ud69f\uc218)\ub294 \ub298\uc5b4\ub098\uc9c0\ub9cc \uc5b4\uca0c\ub4e0 \uc218\ub834\uc740 \ud55c\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4. \\(\\gamma\\) \uac00 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \uc904\uc5b4\ub4e4\uace0, \\(R\\) \uc774 \ub298\uc5b4\ub0a0\uc218\ub85d \ud559\uc2b5\ud69f\uc218\uac00 \ub9ce\uc544\uc9c4\ub2e4. References : https://nbviewer.jupyter.org/github/metamath1/ml-simple-works/blob/master/perceptron/perceptron.ipynb \uc54c\uace0\ub9ac\uc998 \uc911\uc2ec\uc758 \uba38\uc2e0\ub7ec\ub2dd \uac00\uc774\ub4dcMachine Learning: An Algorithmic Perspective, 2 nd ed., \uc2a4\ud2f0\ube10 \ub9c8\uc2ac\ub79c\ub4dc http://www.cs.columbia.edu/~mcollins/courses/6998-2012/notes/perc.converge.pdf Info \uc544\ub798\uc758 Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84 \uc815\ub9ac\uc640 \uc99d\uba85\uacfc\uc815\uc744 Source \uc5d0\uc11c\uc640 \uac19\uc774 Markdown \uacfc LaTex \ub85c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc99d\uba85"},{"location":"write/math/#2-affine-layer","text":"Affine \ubcc0\ud658\uc758 \uc5ed\uc804\ud30c : \uc785\ub825 \ud589\ub82c \\(\\mathbf{X,W}\\) \uacfc \ucd9c\ub825\ud589\ub82c \\(\\mathbf{Y} = \\mathbf{XW}\\) \ub97c \uac16\ub294 Affine \ub808\uc774\uc5b4\uc758 \uc5ed\uc804\ud30c\ub294 \uc190\uc2e4\uac12 \\(L\\) \uc5d0 \ub300\ud55c \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84 \\(\\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc5d0 \ub300\ud558\uc5ec \\(\\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\cdot \\mathbf{W} ^{\\intercal }, \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\) \uc774\ub2e4. Affine Layer \ub294 \ubcf4\ud1b5 \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\uc131\ub41c\ub2e4.","title":"\uc608\uc2dc 2: Affine Layer \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud589\ub82c\ubbf8\ubd84"},{"location":"write/math/#affine-layer","text":"\ud589\ub82c\uacf1 \uc5f0\uc0b0\uacfc \ud589\ub82c\ub367\uc148 \uc5f0\uc0b0\uc744 \ud558\ub294 Affine \ub808\uc774\uc5b4\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ucf54\ub4dc\ub85c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . dW = None self . db = None def forward ( self , x ): self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) return dx \ub2e4\uc74c \ucf54\ub4dc\ub294 \uc785\ub825 \ub370\uc774\ud130\uac00 \ud589\ub82c\uc774 \uc544\ub2c8\ub77c \ud150\uc11c\uc778 \uacbd\uc6b0, \uc989 4\ucc28\uc6d0 \ub370\uc774\ud130\uc778 \uacbd\uc6b0\ub3c4 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\ud604\ud55c \uac83\uc774\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Affine : def __init__ ( self , W , b ): self . W = W self . b = b self . x = None self . original_x_shape = None self . dW = None self . db = None def forward ( self , x ): # \ud150\uc11c \ub300\uc751 self . original_x_shape = x . shape x = x . reshape ( x . shape [ 0 ], - 1 ) self . x = x out = np . dot ( self . x , self . W ) + self . b return out def backward ( self , dout ): dx = np . dot ( dout , self . W . T ) self . dW = np . dot ( self . x . T , dout ) self . db = np . sum ( dout , axis = 0 ) dx = dx . reshape ( * self . original_x_shape ) # \uc785\ub825 \ub370\uc774\ud130 \ubaa8\uc591 \ubcc0\uacbd(\ud150\uc11c \ub300\uc751) return dx","title":"Affine Layer \ucf54\ub4dc \uad6c\ud604"},{"location":"write/math/#_6","text":"\\(n \\times d\\) \uc785\ub825 \ud589\ub82c \\(\\mathbf{X}\\) , \\(d \\times m\\) \uac00\uc911\uce58 \ud589\ub82c \\(\\mathbf{W}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \ud589\ub82c \\(\\mathbf{Y=XW}\\) \uacfc \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{X}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{X}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\mathbf{W}^{\\intercal } \\] \uc774\uace0, \\(\\mathbf{W}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{W}} = \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\dfrac{\\partial \\mathbf{Y}}{\\partial \\mathbf{W}} = \\mathbf{X}^{\\intercal } \\dfrac{\\partial L}{\\partial \\mathbf{Y}}\\] \uc774\ub2e4.","title":"\ud589\ub82c\uacf1 \ubbf8\ubd84 \uc815\ub9ac"},{"location":"write/math/#_7","text":"\\(n \\times m\\) \ucd9c\ub825 \ud589\ub82c \\(\\mathbf{Y}\\) , \\(n \\times m\\) \ud3b8\ud5a5 \ud589\ub82c \\(\\mathbf{B}\\) \uc5d0 \ub300\ud55c \\(n \\times m\\) \uc21c\uc785\ub825 \ud589\ub82c \\(\\mathbf{Z=Y + B}\\) \uc640 \uc190\uc2e4\ud568\uc218 \\(l\\) \uc5d0 \ub300\ud55c \uc2a4\uce7c\ub77c \\(L=l(\\mathbf{Y})\\) \uc5d0 \ub300\ud558\uc5ec \\(\\mathbf{Y}\\) \uc758 \ubbf8\ubd84\uc740 (1) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{Y}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\uace0, \\(\\mathbf{B}\\) \uc758 \ubbf8\ubd84\uc740 (2) \\[ \\dfrac{\\partial L}{\\partial \\mathbf{B}} = \\dfrac{\\partial L}{\\partial \\mathbf{Z}} \\] \uc774\ub2e4.","title":"\ud589\ub82c\ub367\uc148 \ubbf8\ubd84 \uc815\ub9ac"},{"location":"write/tab/","text":"\uc2e0\uacbd\ub9dd\uc744 Python \uc73c\ub85c \ucf54\ub529\ud55c \uac83\uacfc C++ \ub85c \ucf54\ub529\ud55c \uac83\uc744 \ube44\uad50\ud558\uace0 \uc2f6\uc740 \uc0c1\ud669\uc774\ub098 \ub0b4\uc6a9\uc744 \ube44\uad50\ud558\uace0 \uc2f6\uc740 \uc0c1\ud669\uc5d0 \ucee8\ud150\uce20 \ud0ed\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ucee8\ud150\uce20 \ud0ed \ub9cc\ub4e4\uae30 \u00b6 === \ub85c \ud0ed\uc744 \uad6c\ubd84\ud558\uace0 \ud070 \ub530\uc634\ud45c\uc5d0 \ud0ed \uc81c\ubaa9\uc744 \uc0bd\uc785\ud558\uba74 \uac04\ub2e8\ud558\uac8c \ucee8\ud150\uce20 \ud0ed\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ``` Result : C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Step 5. \ucee8\ud150\uce20 \ud0ed"},{"location":"write/tab/#_1","text":"=== \ub85c \ud0ed\uc744 \uad6c\ubd84\ud558\uace0 \ud070 \ub530\uc634\ud45c\uc5d0 \ud0ed \uc81c\ubaa9\uc744 \uc0bd\uc785\ud558\uba74 \uac04\ub2e8\ud558\uac8c \ucee8\ud150\uce20 \ud0ed\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Example : === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ``` Result : C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"\ucee8\ud150\uce20 \ud0ed \ub9cc\ub4e4\uae30"}]}